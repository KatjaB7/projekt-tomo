[
  {
    "pk": 221, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite metodo `dodaj(self, podatek)`, ki v iskalno drevo vstavi nov\npodatek.", 
      "timestamp": "2012-11-29 12:43:28", 
      "challenge": "[[\"None\", \"IskalnoDrevo(256,\\n      levo = IskalnoDrevo(1,\\n                   levo = IskalnoDrevo(),\\n                   desno = IskalnoDrevo(4,\\n                                 levo = IskalnoDrevo(),\\n                                 desno = IskalnoDrevo(133,\\n                                               levo = IskalnoDrevo(7,\\n                                                            levo = IskalnoDrevo(),\\n                                                            desno = IskalnoDrevo(13,\\n                                                                          levo = IskalnoDrevo(),\\n                                                                          desno = IskalnoDrevo(16,\\n                                                                                        levo = IskalnoDrevo(),\\n                                                                                        desno = IskalnoDrevo(25,\\n                                                                                                      levo = IskalnoDrevo(),\\n                                                                                                      desno = IskalnoDrevo(28,\\n                                                                                                                    levo = IskalnoDrevo(),\\n                                                                                                                    desno = IskalnoDrevo(31,\\n                                                                                                                                  levo = IskalnoDrevo(),\\n                                                                                                                                  desno = IskalnoDrevo(37,\\n                                                                                                                                                levo = IskalnoDrevo(),\\n                                                                                                                                                desno = IskalnoDrevo(40,\\n                                                                                                                                                              levo = IskalnoDrevo(),\\n                                                                                                                                                              desno = IskalnoDrevo(43,\\n                                                                                                                                                                            levo = IskalnoDrevo(),\\n                                                                                                                                                                            desno = IskalnoDrevo(52,\\n                                                                                                                                                                                          levo = IskalnoDrevo(),\\n                                                                                                                                                                                          desno = IskalnoDrevo(55,\\n                                                                                                                                                                                                        levo = IskalnoDrevo(),\\n                                                                                                                                                                                                        desno = IskalnoDrevo(61,\\n                                                                                                                                                                                                                      levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                      desno = IskalnoDrevo(67,\\n                                                                                                                                                                                                                                    levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                    desno = IskalnoDrevo(73,\\n                                                                                                                                                                                                                                                  levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                  desno = IskalnoDrevo(76,\\n                                                                                                                                                                                                                                                                levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                                desno = IskalnoDrevo(79,\\n                                                                                                                                                                                                                                                                              levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                                              desno = IskalnoDrevo(85,\\n                                                                                                                                                                                                                                                                                            levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                                                            desno = IskalnoDrevo(88,\\n                                                                                                                                                                                                                                                                                                          levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                                                                          desno = IskalnoDrevo(91,\\n                                                                                                                                                                                                                                                                                                                        levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                                                                                        desno = IskalnoDrevo(97,\\n                                                                                                                                                                                                                                                                                                                                      levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                                                                                                      desno = IskalnoDrevo(100,\\n                                                                                                                                                                                                                                                                                                                                                    levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                                                                                                                    desno = IskalnoDrevo(103,\\n                                                                                                                                                                                                                                                                                                                                                                  levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                                                                                                                                  desno = IskalnoDrevo(112,\\n                                                                                                                                                                                                                                                                                                                                                                                levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                                                                                                                                                desno = IskalnoDrevo(115,\\n                                                                                                                                                                                                                                                                                                                                                                                              levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                                                                                                                                                              desno = IskalnoDrevo(121,\\n                                                                                                                                                                                                                                                                                                                                                                                                            levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                                                                                                                                                                            desno = IskalnoDrevo(127)))))))))))))))))))))))))),\\n                                               desno = IskalnoDrevo(136,\\n                                                             levo = IskalnoDrevo(),\\n                                                             desno = IskalnoDrevo(145,\\n                                                                           levo = IskalnoDrevo(),\\n                                                                           desno = IskalnoDrevo(148,\\n                                                                                         levo = IskalnoDrevo(),\\n                                                                                         desno = IskalnoDrevo(151,\\n                                                                                                       levo = IskalnoDrevo(),\\n                                                                                                       desno = IskalnoDrevo(157,\\n                                                                                                                     levo = IskalnoDrevo(),\\n                                                                                                                     desno = IskalnoDrevo(160,\\n                                                                                                                                   levo = IskalnoDrevo(),\\n                                                                                                                                   desno = IskalnoDrevo(163,\\n                                                                                                                                                 levo = IskalnoDrevo(),\\n                                                                                                                                                 desno = IskalnoDrevo(172,\\n                                                                                                                                                               levo = IskalnoDrevo(),\\n                                                                                                                                                               desno = IskalnoDrevo(175,\\n                                                                                                                                                                             levo = IskalnoDrevo(),\\n                                                                                                                                                                             desno = IskalnoDrevo(181,\\n                                                                                                                                                                                           levo = IskalnoDrevo(),\\n                                                                                                                                                                                           desno = IskalnoDrevo(187,\\n                                                                                                                                                                                                         levo = IskalnoDrevo(),\\n                                                                                                                                                                                                         desno = IskalnoDrevo(193,\\n                                                                                                                                                                                                                       levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                       desno = IskalnoDrevo(196,\\n                                                                                                                                                                                                                                     levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                     desno = IskalnoDrevo(205,\\n                                                                                                                                                                                                                                                   levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                   desno = IskalnoDrevo(208,\\n                                                                                                                                                                                                                                                                 levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                                 desno = IskalnoDrevo(211,\\n                                                                                                                                                                                                                                                                               levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                                               desno = IskalnoDrevo(217,\\n                                                                                                                                                                                                                                                                                             levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                                                             desno = IskalnoDrevo(220,\\n                                                                                                                                                                                                                                                                                                           levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                                                                           desno = IskalnoDrevo(223,\\n                                                                                                                                                                                                                                                                                                                         levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                                                                                         desno = IskalnoDrevo(229,\\n                                                                                                                                                                                                                                                                                                                                       levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                                                                                                       desno = IskalnoDrevo(232,\\n                                                                                                                                                                                                                                                                                                                                                     levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                                                                                                                     desno = IskalnoDrevo(235,\\n                                                                                                                                                                                                                                                                                                                                                                   levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                                                                                                                                   desno = IskalnoDrevo(241,\\n                                                                                                                                                                                                                                                                                                                                                                                 levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                                                                                                                                                 desno = IskalnoDrevo(247,\\n                                                                                                                                                                                                                                                                                                                                                                                               levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                                                                                                                                                               desno = IskalnoDrevo(253)))))))))))))))))))))))))))),\\n      desno = IskalnoDrevo(265,\\n                    levo = IskalnoDrevo(),\\n                    desno = IskalnoDrevo(268,\\n                                  levo = IskalnoDrevo(),\\n                                  desno = IskalnoDrevo(271,\\n                                                levo = IskalnoDrevo(),\\n                                                desno = IskalnoDrevo(277,\\n                                                              levo = IskalnoDrevo(),\\n                                                              desno = IskalnoDrevo(280,\\n                                                                            levo = IskalnoDrevo(),\\n                                                                            desno = IskalnoDrevo(283,\\n                                                                                          levo = IskalnoDrevo(),\\n                                                                                          desno = IskalnoDrevo(292,\\n                                                                                                        levo = IskalnoDrevo(),\\n                                                                                                        desno = IskalnoDrevo(295)))))))))\"], [\"None\", \"IskalnoDrevo(1108,\\n      levo = IskalnoDrevo(571,\\n                   levo = IskalnoDrevo(388,\\n                                levo = IskalnoDrevo(151,\\n                                             levo = IskalnoDrevo(13,\\n                                                          levo = IskalnoDrevo(4),\\n                                                          desno = IskalnoDrevo(52,\\n                                                                        levo = IskalnoDrevo(),\\n                                                                        desno = IskalnoDrevo(85,\\n                                                                                      levo = IskalnoDrevo(61,\\n                                                                                                   levo = IskalnoDrevo(),\\n                                                                                                   desno = IskalnoDrevo(67,\\n                                                                                                                 levo = IskalnoDrevo(),\\n                                                                                                                 desno = IskalnoDrevo(79))),\\n                                                                                      desno = IskalnoDrevo(148,\\n                                                                                                    levo = IskalnoDrevo(100),\\n                                                                                                    desno = IskalnoDrevo())))),\\n                                             desno = IskalnoDrevo(196,\\n                                                           levo = IskalnoDrevo(163,\\n                                                                        levo = IskalnoDrevo(),\\n                                                                        desno = IskalnoDrevo(193)),\\n                                                           desno = IskalnoDrevo(265,\\n                                                                         levo = IskalnoDrevo(229),\\n                                                                         desno = IskalnoDrevo(373,\\n                                                                                       levo = IskalnoDrevo(292,\\n                                                                                                    levo = IskalnoDrevo(),\\n                                                                                                    desno = IskalnoDrevo(337,\\n                                                                                                                  levo = IskalnoDrevo(),\\n                                                                                                                  desno = IskalnoDrevo(340,\\n                                                                                                                                levo = IskalnoDrevo(),\\n                                                                                                                                desno = IskalnoDrevo(343,\\n                                                                                                                                              levo = IskalnoDrevo(),\\n                                                                                                                                              desno = IskalnoDrevo(355))))),\\n                                                                                       desno = IskalnoDrevo(379))))),\\n                                desno = IskalnoDrevo(529,\\n                                              levo = IskalnoDrevo(421,\\n                                                           levo = IskalnoDrevo(397),\\n                                                           desno = IskalnoDrevo(427,\\n                                                                         levo = IskalnoDrevo(),\\n                                                                         desno = IskalnoDrevo(436,\\n                                                                                       levo = IskalnoDrevo(),\\n                                                                                       desno = IskalnoDrevo(487,\\n                                                                                                     levo = IskalnoDrevo(481),\\n                                                                                                     desno = IskalnoDrevo(511))))),\\n                                              desno = IskalnoDrevo(532,\\n                                                            levo = IskalnoDrevo(),\\n                                                            desno = IskalnoDrevo(535,\\n                                                                          levo = IskalnoDrevo(),\\n                                                                          desno = IskalnoDrevo(553))))),\\n                   desno = IskalnoDrevo(895,\\n                                 levo = IskalnoDrevo(772,\\n                                              levo = IskalnoDrevo(676,\\n                                                           levo = IskalnoDrevo(580,\\n                                                                        levo = IskalnoDrevo(),\\n                                                                        desno = IskalnoDrevo(628)),\\n                                                           desno = IskalnoDrevo(679,\\n                                                                         levo = IskalnoDrevo(),\\n                                                                         desno = IskalnoDrevo(715,\\n                                                                                       levo = IskalnoDrevo(),\\n                                                                                       desno = IskalnoDrevo(745,\\n                                                                                                     levo = IskalnoDrevo(),\\n                                                                                                     desno = IskalnoDrevo(757))))),\\n                                              desno = IskalnoDrevo(823,\\n                                                            levo = IskalnoDrevo(820),\\n                                                            desno = IskalnoDrevo(841,\\n                                                                          levo = IskalnoDrevo(829),\\n                                                                          desno = IskalnoDrevo(868,\\n                                                                                        levo = IskalnoDrevo(847),\\n                                                                                        desno = IskalnoDrevo())))),\\n                                 desno = IskalnoDrevo(901,\\n                                               levo = IskalnoDrevo(),\\n                                               desno = IskalnoDrevo(1033,\\n                                                             levo = IskalnoDrevo(925,\\n                                                                          levo = IskalnoDrevo(907,\\n                                                                                       levo = IskalnoDrevo(),\\n                                                                                       desno = IskalnoDrevo(916)),\\n                                                                          desno = IskalnoDrevo(931,\\n                                                                                        levo = IskalnoDrevo(),\\n                                                                                        desno = IskalnoDrevo(1012,\\n                                                                                                      levo = IskalnoDrevo(991,\\n                                                                                                                   levo = IskalnoDrevo(979),\\n                                                                                                                   desno = IskalnoDrevo(1003)),\\n                                                                                                      desno = IskalnoDrevo()))),\\n                                                             desno = IskalnoDrevo(1075,\\n                                                                           levo = IskalnoDrevo(1060),\\n                                                                           desno = IskalnoDrevo(1105)))))),\\n      desno = IskalnoDrevo(1156,\\n                    levo = IskalnoDrevo(1117,\\n                                 levo = IskalnoDrevo(),\\n                                 desno = IskalnoDrevo(1129)),\\n                    desno = IskalnoDrevo(1177,\\n                                  levo = IskalnoDrevo(),\\n                                  desno = IskalnoDrevo(1183))))\"], [\"None\", \"IskalnoDrevo(4,\\n      levo = IskalnoDrevo(),\\n      desno = IskalnoDrevo(2056,\\n                    levo = IskalnoDrevo(685,\\n                                 levo = IskalnoDrevo(25,\\n                                              levo = IskalnoDrevo(),\\n                                              desno = IskalnoDrevo(28,\\n                                                            levo = IskalnoDrevo(),\\n                                                            desno = IskalnoDrevo(604,\\n                                                                          levo = IskalnoDrevo(556,\\n                                                                                       levo = IskalnoDrevo(79,\\n                                                                                                    levo = IskalnoDrevo(),\\n                                                                                                    desno = IskalnoDrevo(100,\\n                                                                                                                  levo = IskalnoDrevo(),\\n                                                                                                                  desno = IskalnoDrevo(112,\\n                                                                                                                                levo = IskalnoDrevo(),\\n                                                                                                                                desno = IskalnoDrevo(133,\\n                                                                                                                                              levo = IskalnoDrevo(),\\n                                                                                                                                              desno = IskalnoDrevo(280,\\n                                                                                                                                                            levo = IskalnoDrevo(151,\\n                                                                                                                                                                         levo = IskalnoDrevo(),\\n                                                                                                                                                                         desno = IskalnoDrevo(208,\\n                                                                                                                                                                                       levo = IskalnoDrevo(),\\n                                                                                                                                                                                       desno = IskalnoDrevo(220,\\n                                                                                                                                                                                                     levo = IskalnoDrevo(),\\n                                                                                                                                                                                                     desno = IskalnoDrevo(232)))),\\n                                                                                                                                                            desno = IskalnoDrevo(301,\\n                                                                                                                                                                          levo = IskalnoDrevo(),\\n                                                                                                                                                                          desno = IskalnoDrevo(304,\\n                                                                                                                                                                                        levo = IskalnoDrevo(),\\n                                                                                                                                                                                        desno = IskalnoDrevo(307,\\n                                                                                                                                                                                                      levo = IskalnoDrevo(),\\n                                                                                                                                                                                                      desno = IskalnoDrevo(316,\\n                                                                                                                                                                                                                    levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                    desno = IskalnoDrevo(328,\\n                                                                                                                                                                                                                                  levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                  desno = IskalnoDrevo(436,\\n                                                                                                                                                                                                                                                levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                desno = IskalnoDrevo(460)))))))))))),\\n                                                                                       desno = IskalnoDrevo(571)),\\n                                                                          desno = IskalnoDrevo(631,\\n                                                                                        levo = IskalnoDrevo(),\\n                                                                                        desno = IskalnoDrevo(637,\\n                                                                                                      levo = IskalnoDrevo(),\\n                                                                                                      desno = IskalnoDrevo(652,\\n                                                                                                                    levo = IskalnoDrevo(),\\n                                                                                                                    desno = IskalnoDrevo(679))))))),\\n                                 desno = IskalnoDrevo(1555,\\n                                               levo = IskalnoDrevo(1045,\\n                                                            levo = IskalnoDrevo(868,\\n                                                                         levo = IskalnoDrevo(787,\\n                                                                                      levo = IskalnoDrevo(712,\\n                                                                                                   levo = IskalnoDrevo(),\\n                                                                                                   desno = IskalnoDrevo(781)),\\n                                                                                      desno = IskalnoDrevo(793,\\n                                                                                                    levo = IskalnoDrevo(),\\n                                                                                                    desno = IskalnoDrevo(829,\\n                                                                                                                  levo = IskalnoDrevo(),\\n                                                                                                                  desno = IskalnoDrevo(841)))),\\n                                                                         desno = IskalnoDrevo(943,\\n                                                                                       levo = IskalnoDrevo(),\\n                                                                                       desno = IskalnoDrevo(952,\\n                                                                                                     levo = IskalnoDrevo(),\\n                                                                                                     desno = IskalnoDrevo(976)))),\\n                                                            desno = IskalnoDrevo(1057,\\n                                                                          levo = IskalnoDrevo(),\\n                                                                          desno = IskalnoDrevo(1096,\\n                                                                                        levo = IskalnoDrevo(),\\n                                                                                        desno = IskalnoDrevo(1111,\\n                                                                                                      levo = IskalnoDrevo(),\\n                                                                                                      desno = IskalnoDrevo(1117,\\n                                                                                                                    levo = IskalnoDrevo(),\\n                                                                                                                    desno = IskalnoDrevo(1192,\\n                                                                                                                                  levo = IskalnoDrevo(),\\n                                                                                                                                  desno = IskalnoDrevo(1195,\\n                                                                                                                                                levo = IskalnoDrevo(),\\n                                                                                                                                                desno = IskalnoDrevo(1204,\\n                                                                                                                                                              levo = IskalnoDrevo(),\\n                                                                                                                                                              desno = IskalnoDrevo(1261,\\n                                                                                                                                                                            levo = IskalnoDrevo(),\\n                                                                                                                                                                            desno = IskalnoDrevo(1267,\\n                                                                                                                                                                                          levo = IskalnoDrevo(),\\n                                                                                                                                                                                          desno = IskalnoDrevo(1279,\\n                                                                                                                                                                                                        levo = IskalnoDrevo(),\\n                                                                                                                                                                                                        desno = IskalnoDrevo(1300,\\n                                                                                                                                                                                                                      levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                      desno = IskalnoDrevo(1303,\\n                                                                                                                                                                                                                                    levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                    desno = IskalnoDrevo(1327,\\n                                                                                                                                                                                                                                                  levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                  desno = IskalnoDrevo(1432,\\n                                                                                                                                                                                                                                                                levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                                desno = IskalnoDrevo(1435,\\n                                                                                                                                                                                                                                                                              levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                                              desno = IskalnoDrevo(1504))))))))))))))))),\\n                                               desno = IskalnoDrevo(1576,\\n                                                             levo = IskalnoDrevo(),\\n                                                             desno = IskalnoDrevo(1975,\\n                                                                           levo = IskalnoDrevo(1672,\\n                                                                                        levo = IskalnoDrevo(),\\n                                                                                        desno = IskalnoDrevo(1705,\\n                                                                                                      levo = IskalnoDrevo(),\\n                                                                                                      desno = IskalnoDrevo(1708,\\n                                                                                                                    levo = IskalnoDrevo(),\\n                                                                                                                    desno = IskalnoDrevo(1729,\\n                                                                                                                                  levo = IskalnoDrevo(),\\n                                                                                                                                  desno = IskalnoDrevo(1747,\\n                                                                                                                                                levo = IskalnoDrevo(),\\n                                                                                                                                                desno = IskalnoDrevo(1780,\\n                                                                                                                                                              levo = IskalnoDrevo(),\\n                                                                                                                                                              desno = IskalnoDrevo(1813,\\n                                                                                                                                                                            levo = IskalnoDrevo(),\\n                                                                                                                                                                            desno = IskalnoDrevo(1816,\\n                                                                                                                                                                                          levo = IskalnoDrevo(),\\n                                                                                                                                                                                          desno = IskalnoDrevo(1840,\\n                                                                                                                                                                                                        levo = IskalnoDrevo(),\\n                                                                                                                                                                                                        desno = IskalnoDrevo(1879,\\n                                                                                                                                                                                                                      levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                      desno = IskalnoDrevo(1888,\\n                                                                                                                                                                                                                                    levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                    desno = IskalnoDrevo(1891,\\n                                                                                                                                                                                                                                                  levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                  desno = IskalnoDrevo(1897,\\n                                                                                                                                                                                                                                                                levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                                desno = IskalnoDrevo(1948,\\n                                                                                                                                                                                                                                                                              levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                                              desno = IskalnoDrevo(1960,\\n                                                                                                                                                                                                                                                                                            levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                                                            desno = IskalnoDrevo(1963)))))))))))))))),\\n                                                                           desno = IskalnoDrevo(2029))))),\\n                    desno = IskalnoDrevo(2068,\\n                                  levo = IskalnoDrevo(),\\n                                  desno = IskalnoDrevo(2083,\\n                                                levo = IskalnoDrevo(),\\n                                                desno = IskalnoDrevo(2329,\\n                                                              levo = IskalnoDrevo(2104,\\n                                                                           levo = IskalnoDrevo(),\\n                                                                           desno = IskalnoDrevo(2140,\\n                                                                                         levo = IskalnoDrevo(),\\n                                                                                         desno = IskalnoDrevo(2179,\\n                                                                                                       levo = IskalnoDrevo(),\\n                                                                                                       desno = IskalnoDrevo(2221,\\n                                                                                                                     levo = IskalnoDrevo(2215),\\n                                                                                                                     desno = IskalnoDrevo(2272,\\n                                                                                                                                   levo = IskalnoDrevo(),\\n                                                                                                                                   desno = IskalnoDrevo(2296,\\n                                                                                                                                                 levo = IskalnoDrevo(),\\n                                                                                                                                                 desno = IskalnoDrevo(2323))))))),\\n                                                              desno = IskalnoDrevo(2620,\\n                                                                            levo = IskalnoDrevo(2488,\\n                                                                                         levo = IskalnoDrevo(2353,\\n                                                                                                      levo = IskalnoDrevo(),\\n                                                                                                      desno = IskalnoDrevo(2377,\\n                                                                                                                    levo = IskalnoDrevo(2365),\\n                                                                                                                    desno = IskalnoDrevo(2404,\\n                                                                                                                                  levo = IskalnoDrevo(),\\n                                                                                                                                  desno = IskalnoDrevo(2473)))),\\n                                                                                         desno = IskalnoDrevo(2536,\\n                                                                                                       levo = IskalnoDrevo(),\\n                                                                                                       desno = IskalnoDrevo(2548))),\\n                                                                            desno = IskalnoDrevo(2692)))))))\"], [\"None\", \"IskalnoDrevo(2305,\\n      levo = IskalnoDrevo(1156,\\n                   levo = IskalnoDrevo(901,\\n                                levo = IskalnoDrevo(265,\\n                                             levo = IskalnoDrevo(196,\\n                                                          levo = IskalnoDrevo(61,\\n                                                                       levo = IskalnoDrevo(4),\\n                                                                       desno = IskalnoDrevo()),\\n                                                          desno = IskalnoDrevo()),\\n                                             desno = IskalnoDrevo(388,\\n                                                           levo = IskalnoDrevo(),\\n                                                           desno = IskalnoDrevo(580,\\n                                                                         levo = IskalnoDrevo(529),\\n                                                                         desno = IskalnoDrevo(772,\\n                                                                                       levo = IskalnoDrevo(),\\n                                                                                       desno = IskalnoDrevo(841,\\n                                                                                                     levo = IskalnoDrevo(),\\n                                                                                                     desno = IskalnoDrevo(847)))))),\\n                                desno = IskalnoDrevo(979,\\n                                              levo = IskalnoDrevo(),\\n                                              desno = IskalnoDrevo(1003))),\\n                   desno = IskalnoDrevo(2095,\\n                                 levo = IskalnoDrevo(1183,\\n                                              levo = IskalnoDrevo(),\\n                                              desno = IskalnoDrevo(1573,\\n                                                            levo = IskalnoDrevo(1348,\\n                                                                         levo = IskalnoDrevo(1279),\\n                                                                         desno = IskalnoDrevo(1540,\\n                                                                                       levo = IskalnoDrevo(1393),\\n                                                                                       desno = IskalnoDrevo())),\\n                                                            desno = IskalnoDrevo(1711,\\n                                                                          levo = IskalnoDrevo(1627,\\n                                                                                       levo = IskalnoDrevo(),\\n                                                                                       desno = IskalnoDrevo(1681,\\n                                                                                                     levo = IskalnoDrevo(),\\n                                                                                                     desno = IskalnoDrevo(1687))),\\n                                                                          desno = IskalnoDrevo(1732,\\n                                                                                        levo = IskalnoDrevo(),\\n                                                                                        desno = IskalnoDrevo(1915))))),\\n                                 desno = IskalnoDrevo(2116))),\\n      desno = IskalnoDrevo(4228,\\n                    levo = IskalnoDrevo(3331,\\n                                 levo = IskalnoDrevo(2779,\\n                                              levo = IskalnoDrevo(2317,\\n                                                           levo = IskalnoDrevo(2308),\\n                                                           desno = IskalnoDrevo(2467,\\n                                                                         levo = IskalnoDrevo(2329),\\n                                                                         desno = IskalnoDrevo(2485,\\n                                                                                       levo = IskalnoDrevo(),\\n                                                                                       desno = IskalnoDrevo(2629,\\n                                                                                                     levo = IskalnoDrevo(2500,\\n                                                                                                                  levo = IskalnoDrevo(),\\n                                                                                                                  desno = IskalnoDrevo(2551)),\\n                                                                                                     desno = IskalnoDrevo(2692))))),\\n                                              desno = IskalnoDrevo(3079,\\n                                                            levo = IskalnoDrevo(3076),\\n                                                            desno = IskalnoDrevo(3223,\\n                                                                          levo = IskalnoDrevo(3157),\\n                                                                          desno = IskalnoDrevo(3307,\\n                                                                                        levo = IskalnoDrevo(3268),\\n                                                                                        desno = IskalnoDrevo())))),\\n                                 desno = IskalnoDrevo(3979,\\n                                               levo = IskalnoDrevo(3943,\\n                                                            levo = IskalnoDrevo(3613,\\n                                                                         levo = IskalnoDrevo(3391,\\n                                                                                      levo = IskalnoDrevo(),\\n                                                                                      desno = IskalnoDrevo(3433,\\n                                                                                                    levo = IskalnoDrevo(),\\n                                                                                                    desno = IskalnoDrevo(3460))),\\n                                                                         desno = IskalnoDrevo(3763,\\n                                                                                       levo = IskalnoDrevo(3652),\\n                                                                                       desno = IskalnoDrevo(3937))),\\n                                                            desno = IskalnoDrevo(3955)),\\n                                               desno = IskalnoDrevo(4129,\\n                                                             levo = IskalnoDrevo(4021,\\n                                                                          levo = IskalnoDrevo(3997),\\n                                                                          desno = IskalnoDrevo(4036)),\\n                                                             desno = IskalnoDrevo(4135,\\n                                                                           levo = IskalnoDrevo(),\\n                                                                           desno = IskalnoDrevo(4153,\\n                                                                                         levo = IskalnoDrevo(),\\n                                                                                         desno = IskalnoDrevo(4171)))))),\\n                    desno = IskalnoDrevo(4420,\\n                                  levo = IskalnoDrevo(4345),\\n                                  desno = IskalnoDrevo(4612,\\n                                                levo = IskalnoDrevo(4525,\\n                                                             levo = IskalnoDrevo(4429),\\n                                                             desno = IskalnoDrevo()),\\n                                                desno = IskalnoDrevo(4777,\\n                                                              levo = IskalnoDrevo(4675),\\n                                                              desno = IskalnoDrevo())))))\"]]", 
      "solution": "class IskalnoDrevo(IskalnoDrevo):\n\n    def dodaj(self, podatek):\n        if self.prazno:\n            self.prazno = False\n            self.vsebina = podatek\n            self.levo = IskalnoDrevo()\n            self.desno = IskalnoDrevo()\n        elif self.vsebina > podatek:\n            self.levo.dodaj(podatek)\n        elif self.vsebina < podatek:\n            self.desno.dodaj(podatek)", 
      "problem": 67, 
      "validation": "Check.equal(\"\"\"IskalnoDrevo([3, 9, 2, 4, 1, 8, 7, 4, 6]).pravilno()\"\"\", True)\nCheck.run([\n    \"d = IskalnoDrevo()\",\n    \"d.dodaj(3)\",\n    \"d.dodaj(5)\",\n    \"d.dodaj(4)\",\n    \"x = (d.vsebina, d.levo.prazno, d.desno.vsebina, d.desno.levo.vsebina)\"\n    ], {'x': (3, True, 5, 4)})\n\nfor i in range(1, 5):\n    Check.challenge(IskalnoDrevo({(3 * (n + 4) ** 7 + 4) % (300 * i ** 2) for n in range(100)}))"
    }
  }, 
  {
    "pk": 82, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Pravimo, da je element `a[k]` v tabeli `a` *pivot*, \u010de za vse `i < k`\nvelja `a[i] <= a[k]` in za vse `j > k` velja `a[j] > a[k]`. Se pravi,\nda so vsi elementi pred `k`-tim manj\u0161i od ali enaki `a[k]` in vsi\nelementi za `k`-tim ve\u010dji od `a[k]`.\n\nSestavite funkcijo `je_pivot(a, k)`, ki vrne `True`, \u010de je element `a[k]`\nv dani tabeli `a` pivot.", 
      "timestamp": "2012-10-24 09:46:15", 
      "challenge": "[]", 
      "solution": "def je_pivot(a, k):\n    return all(x <= a[k] for x in a[:k]) and all(a[k] < y for y in a[k + 1:])", 
      "problem": 37, 
      "validation": "Check.equal(\"je_pivot([1, 2, 3, 4, 5, 6], 2)\", True)\nCheck.equal(\"je_pivot([1, 2, 3, 4, 5, 6], 0)\", True)\nCheck.equal(\"je_pivot([2, 1, 3, 4, 5, 6], 5)\", True)\nCheck.equal(\"je_pivot([6, 2, 5, 4, 3, 1], 3)\", False)\nCheck.equal(\"je_pivot([42], 0)\", True)"
    }
  }, 
  {
    "pk": 910, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `vsota(s, i, j)`, ki za dani seznam celih \u0161tevil\n$s=(a_0, \\ldots, a_n)$ zapi\u0161e vsoto vseh \u0161tevil od vklju\u010dno indeksa $i$\ndo vklju\u010dno indeksa $j$.", 
      "timestamp": "2013-01-18 13:18:00", 
      "challenge": "[]", 
      "solution": "def vsota(s, i, j):\n    return sum(s[i:(j + 1)])", 
      "problem": 305, 
      "validation": "Check.equal(\"\"\"vsota([1, 2, 3], 1, 1)\"\"\", 2)\nCheck.equal(\"\"\"vsota([1, 2, 3], 1, 2)\"\"\", 5)\nCheck.equal(\"\"\"vsota([1, 2, 3], 0, 2)\"\"\", 6)\nCheck.equal(\"\"\"vsota([1, 2, 3], 0, 1)\"\"\", 3)"
    }
  }, 
  {
    "pk": 879, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite metodo `naloga2a(self)`, kot je zapisano v navodilih.", 
      "timestamp": "2012-12-10 13:29:25", 
      "challenge": "[]", 
      "solution": "class IskalnoDrevo(IskalnoDrevo):\n    def naloga2a(self):\n        if self.prazno:\n            return None\n        elif self.levo.prazno:\n            return self.vsebina\n        else:\n            return self.levo.naloga2a()", 
      "problem": 294, 
      "validation": "Check.equal(\"IskalnoDrevo([6, 2, 1, 4, 3, 5, 8, 7, 9]).naloga2a()\", 1) \nCheck.equal(\"IskalnoDrevo([5, 8, 7, 9]).naloga2a()\", 5) \nCheck.equal(\"IskalnoDrevo([4, 3, 5, 8]).naloga2a()\", 3)"
    }
  }, 
  {
    "pk": 268, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Dodajte metodo `odrezi(self, n)`, ki odstrani vsa vozli\u0161\u010da, ki le\u017eijo\nna nivojih, ve\u010djih od `n`.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"None\", \"Drevo(8,\\n      levo = Drevo(7,\\n                   levo = Drevo(6,\\n                                levo = Drevo(5,\\n                                             levo = Drevo(4,\\n                                                          levo = Drevo(3,\\n                                                                       levo = Drevo(2,\\n                                                                                    levo = Drevo(1),\\n                                                                                    desno = Drevo(1)),\\n                                                                       desno = Drevo(2,\\n                                                                                     levo = Drevo(1),\\n                                                                                     desno = Drevo(1))),\\n                                                          desno = Drevo(3,\\n                                                                        levo = Drevo(2,\\n                                                                                     levo = Drevo(1),\\n                                                                                     desno = Drevo(1)),\\n                                                                        desno = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)))),\\n                                             desno = Drevo(4,\\n                                                           levo = Drevo(3,\\n                                                                        levo = Drevo(2,\\n                                                                                     levo = Drevo(1),\\n                                                                                     desno = Drevo(1)),\\n                                                                        desno = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1))),\\n                                                           desno = Drevo(3,\\n                                                                         levo = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)),\\n                                                                         desno = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1))))),\\n                                desno = Drevo(5,\\n                                              levo = Drevo(4,\\n                                                           levo = Drevo(3,\\n                                                                        levo = Drevo(2,\\n                                                                                     levo = Drevo(1),\\n                                                                                     desno = Drevo(1)),\\n                                                                        desno = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1))),\\n                                                           desno = Drevo(3,\\n                                                                         levo = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)),\\n                                                                         desno = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)))),\\n                                              desno = Drevo(4,\\n                                                            levo = Drevo(3,\\n                                                                         levo = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)),\\n                                                                         desno = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1))),\\n                                                            desno = Drevo(3,\\n                                                                          levo = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)),\\n                                                                          desno = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1)))))),\\n                   desno = Drevo(6,\\n                                 levo = Drevo(5,\\n                                              levo = Drevo(4,\\n                                                           levo = Drevo(3,\\n                                                                        levo = Drevo(2,\\n                                                                                     levo = Drevo(1),\\n                                                                                     desno = Drevo(1)),\\n                                                                        desno = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1))),\\n                                                           desno = Drevo(3,\\n                                                                         levo = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)),\\n                                                                         desno = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)))),\\n                                              desno = Drevo(4,\\n                                                            levo = Drevo(3,\\n                                                                         levo = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)),\\n                                                                         desno = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1))),\\n                                                            desno = Drevo(3,\\n                                                                          levo = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)),\\n                                                                          desno = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1))))),\\n                                 desno = Drevo(5,\\n                                               levo = Drevo(4,\\n                                                            levo = Drevo(3,\\n                                                                         levo = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)),\\n                                                                         desno = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1))),\\n                                                            desno = Drevo(3,\\n                                                                          levo = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)),\\n                                                                          desno = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1)))),\\n                                               desno = Drevo(4,\\n                                                             levo = Drevo(3,\\n                                                                          levo = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)),\\n                                                                          desno = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1))),\\n                                                             desno = Drevo(3,\\n                                                                           levo = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1)),\\n                                                                           desno = Drevo(2,\\n                                                                                         levo = Drevo(1),\\n                                                                                         desno = Drevo(1))))))),\\n      desno = Drevo(7,\\n                    levo = Drevo(6,\\n                                 levo = Drevo(5,\\n                                              levo = Drevo(4,\\n                                                           levo = Drevo(3,\\n                                                                        levo = Drevo(2,\\n                                                                                     levo = Drevo(1),\\n                                                                                     desno = Drevo(1)),\\n                                                                        desno = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1))),\\n                                                           desno = Drevo(3,\\n                                                                         levo = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)),\\n                                                                         desno = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)))),\\n                                              desno = Drevo(4,\\n                                                            levo = Drevo(3,\\n                                                                         levo = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)),\\n                                                                         desno = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1))),\\n                                                            desno = Drevo(3,\\n                                                                          levo = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)),\\n                                                                          desno = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1))))),\\n                                 desno = Drevo(5,\\n                                               levo = Drevo(4,\\n                                                            levo = Drevo(3,\\n                                                                         levo = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)),\\n                                                                         desno = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1))),\\n                                                            desno = Drevo(3,\\n                                                                          levo = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)),\\n                                                                          desno = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1)))),\\n                                               desno = Drevo(4,\\n                                                             levo = Drevo(3,\\n                                                                          levo = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)),\\n                                                                          desno = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1))),\\n                                                             desno = Drevo(3,\\n                                                                           levo = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1)),\\n                                                                           desno = Drevo(2,\\n                                                                                         levo = Drevo(1),\\n                                                                                         desno = Drevo(1)))))),\\n                    desno = Drevo(6,\\n                                  levo = Drevo(5,\\n                                               levo = Drevo(4,\\n                                                            levo = Drevo(3,\\n                                                                         levo = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)),\\n                                                                         desno = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1))),\\n                                                            desno = Drevo(3,\\n                                                                          levo = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)),\\n                                                                          desno = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1)))),\\n                                               desno = Drevo(4,\\n                                                             levo = Drevo(3,\\n                                                                          levo = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)),\\n                                                                          desno = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1))),\\n                                                             desno = Drevo(3,\\n                                                                           levo = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1)),\\n                                                                           desno = Drevo(2,\\n                                                                                         levo = Drevo(1),\\n                                                                                         desno = Drevo(1))))),\\n                                  desno = Drevo(5,\\n                                                levo = Drevo(4,\\n                                                             levo = Drevo(3,\\n                                                                          levo = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)),\\n                                                                          desno = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1))),\\n                                                             desno = Drevo(3,\\n                                                                           levo = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1)),\\n                                                                           desno = Drevo(2,\\n                                                                                         levo = Drevo(1),\\n                                                                                         desno = Drevo(1)))),\\n                                                desno = Drevo(4,\\n                                                              levo = Drevo(3,\\n                                                                           levo = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1)),\\n                                                                           desno = Drevo(2,\\n                                                                                         levo = Drevo(1),\\n                                                                                         desno = Drevo(1))),\\n                                                              desno = Drevo(3,\\n                                                                            levo = Drevo(2,\\n                                                                                         levo = Drevo(1),\\n                                                                                         desno = Drevo(1)),\\n                                                                            desno = Drevo(2,\\n                                                                                          levo = Drevo(1),\\n                                                                                          desno = Drevo(1))))))))\"], [\"None\", \"Drevo(8,\\n      levo = Drevo(7,\\n                   levo = Drevo(6,\\n                                levo = Drevo(5,\\n                                             levo = Drevo(4,\\n                                                          levo = Drevo(3,\\n                                                                       levo = Drevo(2,\\n                                                                                    levo = Drevo(1),\\n                                                                                    desno = Drevo(1)),\\n                                                                       desno = Drevo(2,\\n                                                                                     levo = Drevo(1),\\n                                                                                     desno = Drevo(1))),\\n                                                          desno = Drevo(3,\\n                                                                        levo = Drevo(2,\\n                                                                                     levo = Drevo(1),\\n                                                                                     desno = Drevo(1)),\\n                                                                        desno = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)))),\\n                                             desno = Drevo(4,\\n                                                           levo = Drevo(3,\\n                                                                        levo = Drevo(2,\\n                                                                                     levo = Drevo(1),\\n                                                                                     desno = Drevo(1)),\\n                                                                        desno = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1))),\\n                                                           desno = Drevo(3,\\n                                                                         levo = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)),\\n                                                                         desno = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1))))),\\n                                desno = Drevo(5,\\n                                              levo = Drevo(4,\\n                                                           levo = Drevo(3,\\n                                                                        levo = Drevo(2,\\n                                                                                     levo = Drevo(1),\\n                                                                                     desno = Drevo(1)),\\n                                                                        desno = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1))),\\n                                                           desno = Drevo(3,\\n                                                                         levo = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)),\\n                                                                         desno = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)))),\\n                                              desno = Drevo(4,\\n                                                            levo = Drevo(3,\\n                                                                         levo = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)),\\n                                                                         desno = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1))),\\n                                                            desno = Drevo(3,\\n                                                                          levo = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)),\\n                                                                          desno = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1)))))),\\n                   desno = Drevo(6,\\n                                 levo = Drevo(5,\\n                                              levo = Drevo(4,\\n                                                           levo = Drevo(3,\\n                                                                        levo = Drevo(2,\\n                                                                                     levo = Drevo(1),\\n                                                                                     desno = Drevo(1)),\\n                                                                        desno = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1))),\\n                                                           desno = Drevo(3,\\n                                                                         levo = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)),\\n                                                                         desno = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)))),\\n                                              desno = Drevo(4,\\n                                                            levo = Drevo(3,\\n                                                                         levo = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)),\\n                                                                         desno = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1))),\\n                                                            desno = Drevo(3,\\n                                                                          levo = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)),\\n                                                                          desno = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1))))),\\n                                 desno = Drevo(5,\\n                                               levo = Drevo(4,\\n                                                            levo = Drevo(3,\\n                                                                         levo = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)),\\n                                                                         desno = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1))),\\n                                                            desno = Drevo(3,\\n                                                                          levo = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)),\\n                                                                          desno = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1)))),\\n                                               desno = Drevo(4,\\n                                                             levo = Drevo(3,\\n                                                                          levo = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)),\\n                                                                          desno = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1))),\\n                                                             desno = Drevo(3,\\n                                                                           levo = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1)),\\n                                                                           desno = Drevo(2,\\n                                                                                         levo = Drevo(1),\\n                                                                                         desno = Drevo(1))))))),\\n      desno = Drevo(7,\\n                    levo = Drevo(6,\\n                                 levo = Drevo(5,\\n                                              levo = Drevo(4,\\n                                                           levo = Drevo(3,\\n                                                                        levo = Drevo(2,\\n                                                                                     levo = Drevo(1),\\n                                                                                     desno = Drevo(1)),\\n                                                                        desno = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1))),\\n                                                           desno = Drevo(3,\\n                                                                         levo = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)),\\n                                                                         desno = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)))),\\n                                              desno = Drevo(4,\\n                                                            levo = Drevo(3,\\n                                                                         levo = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)),\\n                                                                         desno = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1))),\\n                                                            desno = Drevo(3,\\n                                                                          levo = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)),\\n                                                                          desno = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1))))),\\n                                 desno = Drevo(5,\\n                                               levo = Drevo(4,\\n                                                            levo = Drevo(3,\\n                                                                         levo = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)),\\n                                                                         desno = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1))),\\n                                                            desno = Drevo(3,\\n                                                                          levo = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)),\\n                                                                          desno = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1)))),\\n                                               desno = Drevo(4,\\n                                                             levo = Drevo(3,\\n                                                                          levo = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)),\\n                                                                          desno = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1))),\\n                                                             desno = Drevo(3,\\n                                                                           levo = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1)),\\n                                                                           desno = Drevo(2,\\n                                                                                         levo = Drevo(1),\\n                                                                                         desno = Drevo(1)))))),\\n                    desno = Drevo(6,\\n                                  levo = Drevo(5,\\n                                               levo = Drevo(4,\\n                                                            levo = Drevo(3,\\n                                                                         levo = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)),\\n                                                                         desno = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1))),\\n                                                            desno = Drevo(3,\\n                                                                          levo = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)),\\n                                                                          desno = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1)))),\\n                                               desno = Drevo(4,\\n                                                             levo = Drevo(3,\\n                                                                          levo = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)),\\n                                                                          desno = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1))),\\n                                                             desno = Drevo(3,\\n                                                                           levo = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1)),\\n                                                                           desno = Drevo(2,\\n                                                                                         levo = Drevo(1),\\n                                                                                         desno = Drevo(1))))),\\n                                  desno = Drevo(5,\\n                                                levo = Drevo(4,\\n                                                             levo = Drevo(3,\\n                                                                          levo = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)),\\n                                                                          desno = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1))),\\n                                                             desno = Drevo(3,\\n                                                                           levo = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1)),\\n                                                                           desno = Drevo(2,\\n                                                                                         levo = Drevo(1),\\n                                                                                         desno = Drevo(1)))),\\n                                                desno = Drevo(4,\\n                                                              levo = Drevo(3,\\n                                                                           levo = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1)),\\n                                                                           desno = Drevo(2,\\n                                                                                         levo = Drevo(1),\\n                                                                                         desno = Drevo(1))),\\n                                                              desno = Drevo(3,\\n                                                                            levo = Drevo(2,\\n                                                                                         levo = Drevo(1),\\n                                                                                         desno = Drevo(1)),\\n                                                                            desno = Drevo(2,\\n                                                                                          levo = Drevo(1),\\n                                                                                          desno = Drevo(1))))))))\"], [\"None\", \"Drevo(8,\\n      levo = Drevo(7,\\n                   levo = Drevo(6,\\n                                levo = Drevo(5,\\n                                             levo = Drevo(4,\\n                                                          levo = Drevo(3,\\n                                                                       levo = Drevo(2,\\n                                                                                    levo = Drevo(1),\\n                                                                                    desno = Drevo(1)),\\n                                                                       desno = Drevo(2,\\n                                                                                     levo = Drevo(1),\\n                                                                                     desno = Drevo(1))),\\n                                                          desno = Drevo(3,\\n                                                                        levo = Drevo(2,\\n                                                                                     levo = Drevo(1),\\n                                                                                     desno = Drevo(1)),\\n                                                                        desno = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)))),\\n                                             desno = Drevo(4,\\n                                                           levo = Drevo(3,\\n                                                                        levo = Drevo(2,\\n                                                                                     levo = Drevo(1),\\n                                                                                     desno = Drevo(1)),\\n                                                                        desno = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1))),\\n                                                           desno = Drevo(3,\\n                                                                         levo = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)),\\n                                                                         desno = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1))))),\\n                                desno = Drevo(5,\\n                                              levo = Drevo(4,\\n                                                           levo = Drevo(3,\\n                                                                        levo = Drevo(2,\\n                                                                                     levo = Drevo(1),\\n                                                                                     desno = Drevo(1)),\\n                                                                        desno = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1))),\\n                                                           desno = Drevo(3,\\n                                                                         levo = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)),\\n                                                                         desno = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)))),\\n                                              desno = Drevo(4,\\n                                                            levo = Drevo(3,\\n                                                                         levo = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)),\\n                                                                         desno = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1))),\\n                                                            desno = Drevo(3,\\n                                                                          levo = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)),\\n                                                                          desno = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1)))))),\\n                   desno = Drevo(6,\\n                                 levo = Drevo(5,\\n                                              levo = Drevo(4,\\n                                                           levo = Drevo(3,\\n                                                                        levo = Drevo(2,\\n                                                                                     levo = Drevo(1),\\n                                                                                     desno = Drevo(1)),\\n                                                                        desno = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1))),\\n                                                           desno = Drevo(3,\\n                                                                         levo = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)),\\n                                                                         desno = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)))),\\n                                              desno = Drevo(4,\\n                                                            levo = Drevo(3,\\n                                                                         levo = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)),\\n                                                                         desno = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1))),\\n                                                            desno = Drevo(3,\\n                                                                          levo = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)),\\n                                                                          desno = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1))))),\\n                                 desno = Drevo(5,\\n                                               levo = Drevo(4,\\n                                                            levo = Drevo(3,\\n                                                                         levo = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)),\\n                                                                         desno = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1))),\\n                                                            desno = Drevo(3,\\n                                                                          levo = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)),\\n                                                                          desno = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1)))),\\n                                               desno = Drevo(4,\\n                                                             levo = Drevo(3,\\n                                                                          levo = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)),\\n                                                                          desno = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1))),\\n                                                             desno = Drevo(3,\\n                                                                           levo = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1)),\\n                                                                           desno = Drevo(2,\\n                                                                                         levo = Drevo(1),\\n                                                                                         desno = Drevo(1))))))),\\n      desno = Drevo(7,\\n                    levo = Drevo(6,\\n                                 levo = Drevo(5,\\n                                              levo = Drevo(4,\\n                                                           levo = Drevo(3,\\n                                                                        levo = Drevo(2,\\n                                                                                     levo = Drevo(1),\\n                                                                                     desno = Drevo(1)),\\n                                                                        desno = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1))),\\n                                                           desno = Drevo(3,\\n                                                                         levo = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)),\\n                                                                         desno = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)))),\\n                                              desno = Drevo(4,\\n                                                            levo = Drevo(3,\\n                                                                         levo = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)),\\n                                                                         desno = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1))),\\n                                                            desno = Drevo(3,\\n                                                                          levo = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)),\\n                                                                          desno = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1))))),\\n                                 desno = Drevo(5,\\n                                               levo = Drevo(4,\\n                                                            levo = Drevo(3,\\n                                                                         levo = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)),\\n                                                                         desno = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1))),\\n                                                            desno = Drevo(3,\\n                                                                          levo = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)),\\n                                                                          desno = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1)))),\\n                                               desno = Drevo(4,\\n                                                             levo = Drevo(3,\\n                                                                          levo = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)),\\n                                                                          desno = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1))),\\n                                                             desno = Drevo(3,\\n                                                                           levo = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1)),\\n                                                                           desno = Drevo(2,\\n                                                                                         levo = Drevo(1),\\n                                                                                         desno = Drevo(1)))))),\\n                    desno = Drevo(6,\\n                                  levo = Drevo(5,\\n                                               levo = Drevo(4,\\n                                                            levo = Drevo(3,\\n                                                                         levo = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)),\\n                                                                         desno = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1))),\\n                                                            desno = Drevo(3,\\n                                                                          levo = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)),\\n                                                                          desno = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1)))),\\n                                               desno = Drevo(4,\\n                                                             levo = Drevo(3,\\n                                                                          levo = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)),\\n                                                                          desno = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1))),\\n                                                             desno = Drevo(3,\\n                                                                           levo = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1)),\\n                                                                           desno = Drevo(2,\\n                                                                                         levo = Drevo(1),\\n                                                                                         desno = Drevo(1))))),\\n                                  desno = Drevo(5,\\n                                                levo = Drevo(4,\\n                                                             levo = Drevo(3,\\n                                                                          levo = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)),\\n                                                                          desno = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1))),\\n                                                             desno = Drevo(3,\\n                                                                           levo = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1)),\\n                                                                           desno = Drevo(2,\\n                                                                                         levo = Drevo(1),\\n                                                                                         desno = Drevo(1)))),\\n                                                desno = Drevo(4,\\n                                                              levo = Drevo(3,\\n                                                                           levo = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1)),\\n                                                                           desno = Drevo(2,\\n                                                                                         levo = Drevo(1),\\n                                                                                         desno = Drevo(1))),\\n                                                              desno = Drevo(3,\\n                                                                            levo = Drevo(2,\\n                                                                                         levo = Drevo(1),\\n                                                                                         desno = Drevo(1)),\\n                                                                            desno = Drevo(2,\\n                                                                                          levo = Drevo(1),\\n                                                                                          desno = Drevo(1))))))))\"], [\"None\", \"Drevo(8,\\n      levo = Drevo(7,\\n                   levo = Drevo(6,\\n                                levo = Drevo(5,\\n                                             levo = Drevo(4,\\n                                                          levo = Drevo(3,\\n                                                                       levo = Drevo(2),\\n                                                                       desno = Drevo(2)),\\n                                                          desno = Drevo(3,\\n                                                                        levo = Drevo(2),\\n                                                                        desno = Drevo(2))),\\n                                             desno = Drevo(4,\\n                                                           levo = Drevo(3,\\n                                                                        levo = Drevo(2),\\n                                                                        desno = Drevo(2)),\\n                                                           desno = Drevo(3,\\n                                                                         levo = Drevo(2),\\n                                                                         desno = Drevo(2)))),\\n                                desno = Drevo(5,\\n                                              levo = Drevo(4,\\n                                                           levo = Drevo(3,\\n                                                                        levo = Drevo(2),\\n                                                                        desno = Drevo(2)),\\n                                                           desno = Drevo(3,\\n                                                                         levo = Drevo(2),\\n                                                                         desno = Drevo(2))),\\n                                              desno = Drevo(4,\\n                                                            levo = Drevo(3,\\n                                                                         levo = Drevo(2),\\n                                                                         desno = Drevo(2)),\\n                                                            desno = Drevo(3,\\n                                                                          levo = Drevo(2),\\n                                                                          desno = Drevo(2))))),\\n                   desno = Drevo(6,\\n                                 levo = Drevo(5,\\n                                              levo = Drevo(4,\\n                                                           levo = Drevo(3,\\n                                                                        levo = Drevo(2),\\n                                                                        desno = Drevo(2)),\\n                                                           desno = Drevo(3,\\n                                                                         levo = Drevo(2),\\n                                                                         desno = Drevo(2))),\\n                                              desno = Drevo(4,\\n                                                            levo = Drevo(3,\\n                                                                         levo = Drevo(2),\\n                                                                         desno = Drevo(2)),\\n                                                            desno = Drevo(3,\\n                                                                          levo = Drevo(2),\\n                                                                          desno = Drevo(2)))),\\n                                 desno = Drevo(5,\\n                                               levo = Drevo(4,\\n                                                            levo = Drevo(3,\\n                                                                         levo = Drevo(2),\\n                                                                         desno = Drevo(2)),\\n                                                            desno = Drevo(3,\\n                                                                          levo = Drevo(2),\\n                                                                          desno = Drevo(2))),\\n                                               desno = Drevo(4,\\n                                                             levo = Drevo(3,\\n                                                                          levo = Drevo(2),\\n                                                                          desno = Drevo(2)),\\n                                                             desno = Drevo(3,\\n                                                                           levo = Drevo(2),\\n                                                                           desno = Drevo(2)))))),\\n      desno = Drevo(7,\\n                    levo = Drevo(6,\\n                                 levo = Drevo(5,\\n                                              levo = Drevo(4,\\n                                                           levo = Drevo(3,\\n                                                                        levo = Drevo(2),\\n                                                                        desno = Drevo(2)),\\n                                                           desno = Drevo(3,\\n                                                                         levo = Drevo(2),\\n                                                                         desno = Drevo(2))),\\n                                              desno = Drevo(4,\\n                                                            levo = Drevo(3,\\n                                                                         levo = Drevo(2),\\n                                                                         desno = Drevo(2)),\\n                                                            desno = Drevo(3,\\n                                                                          levo = Drevo(2),\\n                                                                          desno = Drevo(2)))),\\n                                 desno = Drevo(5,\\n                                               levo = Drevo(4,\\n                                                            levo = Drevo(3,\\n                                                                         levo = Drevo(2),\\n                                                                         desno = Drevo(2)),\\n                                                            desno = Drevo(3,\\n                                                                          levo = Drevo(2),\\n                                                                          desno = Drevo(2))),\\n                                               desno = Drevo(4,\\n                                                             levo = Drevo(3,\\n                                                                          levo = Drevo(2),\\n                                                                          desno = Drevo(2)),\\n                                                             desno = Drevo(3,\\n                                                                           levo = Drevo(2),\\n                                                                           desno = Drevo(2))))),\\n                    desno = Drevo(6,\\n                                  levo = Drevo(5,\\n                                               levo = Drevo(4,\\n                                                            levo = Drevo(3,\\n                                                                         levo = Drevo(2),\\n                                                                         desno = Drevo(2)),\\n                                                            desno = Drevo(3,\\n                                                                          levo = Drevo(2),\\n                                                                          desno = Drevo(2))),\\n                                               desno = Drevo(4,\\n                                                             levo = Drevo(3,\\n                                                                          levo = Drevo(2),\\n                                                                          desno = Drevo(2)),\\n                                                             desno = Drevo(3,\\n                                                                           levo = Drevo(2),\\n                                                                           desno = Drevo(2)))),\\n                                  desno = Drevo(5,\\n                                                levo = Drevo(4,\\n                                                             levo = Drevo(3,\\n                                                                          levo = Drevo(2),\\n                                                                          desno = Drevo(2)),\\n                                                             desno = Drevo(3,\\n                                                                           levo = Drevo(2),\\n                                                                           desno = Drevo(2))),\\n                                                desno = Drevo(4,\\n                                                              levo = Drevo(3,\\n                                                                           levo = Drevo(2),\\n                                                                           desno = Drevo(2)),\\n                                                              desno = Drevo(3,\\n                                                                            levo = Drevo(2),\\n                                                                            desno = Drevo(2)))))))\"], [\"None\", \"Drevo(8,\\n      levo = Drevo(7,\\n                   levo = Drevo(6,\\n                                levo = Drevo(5,\\n                                             levo = Drevo(4,\\n                                                          levo = Drevo(3),\\n                                                          desno = Drevo(3)),\\n                                             desno = Drevo(4,\\n                                                           levo = Drevo(3),\\n                                                           desno = Drevo(3))),\\n                                desno = Drevo(5,\\n                                              levo = Drevo(4,\\n                                                           levo = Drevo(3),\\n                                                           desno = Drevo(3)),\\n                                              desno = Drevo(4,\\n                                                            levo = Drevo(3),\\n                                                            desno = Drevo(3)))),\\n                   desno = Drevo(6,\\n                                 levo = Drevo(5,\\n                                              levo = Drevo(4,\\n                                                           levo = Drevo(3),\\n                                                           desno = Drevo(3)),\\n                                              desno = Drevo(4,\\n                                                            levo = Drevo(3),\\n                                                            desno = Drevo(3))),\\n                                 desno = Drevo(5,\\n                                               levo = Drevo(4,\\n                                                            levo = Drevo(3),\\n                                                            desno = Drevo(3)),\\n                                               desno = Drevo(4,\\n                                                             levo = Drevo(3),\\n                                                             desno = Drevo(3))))),\\n      desno = Drevo(7,\\n                    levo = Drevo(6,\\n                                 levo = Drevo(5,\\n                                              levo = Drevo(4,\\n                                                           levo = Drevo(3),\\n                                                           desno = Drevo(3)),\\n                                              desno = Drevo(4,\\n                                                            levo = Drevo(3),\\n                                                            desno = Drevo(3))),\\n                                 desno = Drevo(5,\\n                                               levo = Drevo(4,\\n                                                            levo = Drevo(3),\\n                                                            desno = Drevo(3)),\\n                                               desno = Drevo(4,\\n                                                             levo = Drevo(3),\\n                                                             desno = Drevo(3)))),\\n                    desno = Drevo(6,\\n                                  levo = Drevo(5,\\n                                               levo = Drevo(4,\\n                                                            levo = Drevo(3),\\n                                                            desno = Drevo(3)),\\n                                               desno = Drevo(4,\\n                                                             levo = Drevo(3),\\n                                                             desno = Drevo(3))),\\n                                  desno = Drevo(5,\\n                                                levo = Drevo(4,\\n                                                             levo = Drevo(3),\\n                                                             desno = Drevo(3)),\\n                                                desno = Drevo(4,\\n                                                              levo = Drevo(3),\\n                                                              desno = Drevo(3))))))\"], [\"None\", \"Drevo(8,\\n      levo = Drevo(7,\\n                   levo = Drevo(6,\\n                                levo = Drevo(5,\\n                                             levo = Drevo(4),\\n                                             desno = Drevo(4)),\\n                                desno = Drevo(5,\\n                                              levo = Drevo(4),\\n                                              desno = Drevo(4))),\\n                   desno = Drevo(6,\\n                                 levo = Drevo(5,\\n                                              levo = Drevo(4),\\n                                              desno = Drevo(4)),\\n                                 desno = Drevo(5,\\n                                               levo = Drevo(4),\\n                                               desno = Drevo(4)))),\\n      desno = Drevo(7,\\n                    levo = Drevo(6,\\n                                 levo = Drevo(5,\\n                                              levo = Drevo(4),\\n                                              desno = Drevo(4)),\\n                                 desno = Drevo(5,\\n                                               levo = Drevo(4),\\n                                               desno = Drevo(4))),\\n                    desno = Drevo(6,\\n                                  levo = Drevo(5,\\n                                               levo = Drevo(4),\\n                                               desno = Drevo(4)),\\n                                  desno = Drevo(5,\\n                                                levo = Drevo(4),\\n                                                desno = Drevo(4)))))\"], [\"None\", \"Drevo(8,\\n      levo = Drevo(7,\\n                   levo = Drevo(6,\\n                                levo = Drevo(5),\\n                                desno = Drevo(5)),\\n                   desno = Drevo(6,\\n                                 levo = Drevo(5),\\n                                 desno = Drevo(5))),\\n      desno = Drevo(7,\\n                    levo = Drevo(6,\\n                                 levo = Drevo(5),\\n                                 desno = Drevo(5)),\\n                    desno = Drevo(6,\\n                                  levo = Drevo(5),\\n                                  desno = Drevo(5))))\"], [\"None\", \"Drevo(8,\\n      levo = Drevo(7,\\n                   levo = Drevo(6),\\n                   desno = Drevo(6)),\\n      desno = Drevo(7,\\n                    levo = Drevo(6),\\n                    desno = Drevo(6)))\"], [\"None\", \"Drevo(8,\\n      levo = Drevo(7),\\n      desno = Drevo(7))\"]]", 
      "solution": "class Drevo(Drevo):\n    def odrezi(self, n):\n        # \u010de je drevo prazno, ne naredimo ni\u010desar\n        if self.prazno:\n            pass\n        # \u010de je nivo padel pod ena, drevo izpraznimo\n        elif n < 1:\n            self.prazno = True\n            del self.vsebina\n            del self.levo\n            del self.desno\n        # sicer pore\u017eemo sinova\n        else:\n            self.levo.odrezi(n - 1)\n            self.desno.odrezi(n - 1)", 
      "problem": 80, 
      "validation": "Check.run([\n    \"d = Drevo(5, levo=Drevo(4, desno=Drevo(2)), desno=Drevo(3, levo=Drevo(4), desno=Drevo(4)))\",\n    \"d.odrezi(1)\"\n    ], {'d': Drevo(5)})\nCheck.run([\n    \"d = Drevo(5, levo=Drevo(4, desno=Drevo(2)), desno=Drevo(3, levo=Drevo(4), desno=Drevo(4)))\",\n    \"d.odrezi(2)\"\n    ], {'d': Drevo(5, levo=Drevo(4), desno=Drevo(3))})\nCheck.run([\n    \"d = Drevo(5, levo=Drevo(4, desno=Drevo(2)), desno=Drevo(3, levo=Drevo(4), desno=Drevo(4)))\",\n    \"d.odrezi(3)\"\n    ], {'d': Drevo(5, levo=Drevo(4, desno=Drevo(2)), desno=Drevo(3, levo=Drevo(4), desno=Drevo(4)))})\n_drevesa = [Drevo(), Drevo()]\nfor i in range(1, 10):\n    _drevesa.append(Drevo(i, levo=_drevesa[-1], desno=_drevesa[-1]))\nfor i in range(10, 1, -1):\n    _drevesa[9].odrezi(i)\n    Check.challenge(_drevesa[9])"
    }
  }, 
  {
    "pk": 309, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Predpostavite, da imate v spremenljivkah `stopinje1`, `minute1`,\n`sekunde1`, `stopinje2`, `minute2` in `sekunde2` shranjene stopinje,\nminute in sekunde dveh kotov (vse vrednosti so celo\u0161tevilske). \nSestavite program, ki bo ta dva kota se\u0161tel in izpisal niz oblike\n\n    Vsota kotov je x stopinj, y minut in z sekund.\n\nSeveda morata biti vrednosti spremenljivk `y` in `z` manj\u0161i od 60.\nZa vrednosti\n\n    stopinje1 = 14\n    minute1 = 43\n    sekunde1 = 15\n    stopinje2 = 55\n    minute2 = 21\n    sekunde2 = 57\n\nnaj tako program izpi\u0161e\n\n    Vsota kotov je 70 stopinj, 5 minut in 12 sekund.", 
      "timestamp": "2013-02-25 04:08:28", 
      "challenge": "[]", 
      "solution": "stopinje = stopinje1 + stopinje2\nminute = minute1 + minute2\nsekunde = sekunde1 + sekunde2\nminute += sekunde // 60\nsekunde = sekunde % 60\nstopinje += minute // 60\nminute = minute % 60\nprint(\"Vsota kotov je {0} stopinj, {1} minut in {2} sekund.\".format(stopinje, minute, sekunde))", 
      "problem": 100, 
      "validation": "import random \n\nsource = Check.current[\"solution\"]\nd = dict()\nd[\"stopinje1\"] = random.randint(5, 30)\nd[\"stopinje2\"] = random.randint(5, 30)\nd[\"minute1\"] = random.randint(35, 59)\nd[\"minute2\"] = random.randint(30, 59)\nd[\"sekunde1\"] = random.randint(35, 59)\nd[\"sekunde2\"] = random.randint(30, 59)\n\n(st, mins, sek) = (d[\"stopinje1\"] + d[\"stopinje2\"], d[\"minute1\"]+d[\"minute2\"], d[\"sekunde1\"] + d[\"sekunde2\"])\n(st, mins, sek) = (st + (mins + sek//60) // 60  , (mins + sek//60)%60, sek % 60)\n(d, izpis) = izvedi(source, d)\nif izpis.strip() != \"Vsota kotov je {0} stopinj, {1} minut in {2} sekund.\".format(st, mins, sek):\n    Check.error(\"Za vrednosti ({0}, {1}, {2}) in ({3}, {4}, {5}) je izpis je napa\u010dne oblike:\\n \".format(d[\"stopinje1\"],d[\"minute1\"],d[\"sekunde1\"],d[\"stopinje2\"],d[\"minute2\"],d[\"sekunde2\"]) + izpis.strip())"
    }
  }, 
  {
    "pk": 650, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavi funkcijo 'preberi', ki uporabnika vpra\u0161a za ime spremenljivke \r\n(uporabi ukaz input) in vrednost, ter jo vrne kot nabor (ime, vrednost).", 
      "timestamp": "2012-03-27 08:57:32", 
      "challenge": "[]", 
      "solution": "def preberi():\r\n    ime = input('Vnesi ime:')\r\n    vrednost = input('Vnesi vrednost:')\r\n    return (ime, vrednost)", 
      "problem": 212, 
      "validation": "import sys\r\n_makefile0('_2a.in', 'test', 'me')\r\nold_stdin = sys.stdin\r\nsys.stdin = open('_2a.in')\r\n\r\nCheck.equal('preberi()', ('test', 'me'))\r\nsys.stdin = old_stdin\r\n_removefiles(\"_2a.in\")"
    }
  }, 
  {
    "pk": 763, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite metodo `naloga2(self, x, y)`, kot je zapisano v navodilih.", 
      "timestamp": "2012-08-27 10:44:06", 
      "challenge": "[]", 
      "solution": "class IskalnoDrevo(IskalnoDrevo):\n    def naloga2(self, x, y):\n        if x < self.vrednost and y < self.vrednost:\n            return self.levo.naloga2(x, y)\n        elif x > self.vrednost and y > self.vrednost:\n            return self.desno.naloga2(x, y)\n        else:\n            return self.vrednost", 
      "problem": 243, 
      "validation": "d = IskalnoDrevo([6, 2, 1, 4, 3, 5, 8, 7, 9])\n\nCheck.equal(\"d.naloga2(1, 5)\", 2, env = {\"d\": d}) \nCheck.equal(\"d.naloga2(8, 9)\", 8, env = {\"d\": d}) \nCheck.equal(\"d.naloga2(3, 5)\", 4, env = {\"d\": d}) \nCheck.equal(\"d.naloga2(7, 9)\", 8, env = {\"d\": d}) \nCheck.equal(\"d.naloga2(1, 3)\", 2, env = {\"d\": d})\nCheck.equal(\"d.naloga2(1, 7)\", 6, env = {\"d\": d})\nCheck.equal(\"d.naloga2(3, 9)\", 6, env = {\"d\": d})"
    }
  }, 
  {
    "pk": 225, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `sumljivo(s, sez)`, ki sprejme besedilo `s` in\nseznam sumljivih besed `sez` ter vrne `True`, \u010de se katera od besed\npojavi v besedilu.\n\nUporabite funkcijo `search` iz knji\u017enice [`re`](http://docs.python.org/dev/py3k/library/re.html).", 
      "timestamp": "2012-11-27 09:44:09", 
      "challenge": "[[\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"]]", 
      "solution": "def sumljivo(s, sez):\n    return re.search(\"|\".join(sez), s) is not None", 
      "problem": 69, 
      "validation": "Check.equal(\"\"\"sumljivo('Me\u0161\u010dani so \u017eupana vrgli skozi okno.', ['gotof', 'je'])\"\"\", False)\nCheck.equal(\"\"\"sumljivo('Zve\u010der bo v mestni hi\u0161i koncert \u010dembalista Franza Vergotofskyja.', ['gotof', 'je'])\"\"\", True)\nCheck.equal(\"\"\"sumljivo('On je pa res dober \u017eupan.', ['gotof', 'je'])\"\"\", True)\n\nfor i in range(100):\n    Check.challenge(sumljivo(str(i ** i % 1000), [j for j in str((i ** i) % 123)]))"
    }
  }, 
  {
    "pk": 346, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `razrezi(s, n)`, ki iz danega seznama `s` sestavi\nin vrne seznam, sestavljen iz zaporednih podseznamov dol\u017eine `n`\nprvotnega seznama. Zadnji podseznam je lahko kraj\u0161i od ostalih.\nFunkcija naj prvotnega seznama ne spreminja.", 
      "timestamp": "2012-03-30 12:04:48", 
      "challenge": "[[\"None\", \"[[524207098, 2991600255, 510907728, 2199418301, 3867639254, 4250705259, 2219391756, 639566089, 279258566]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301, 3867639254], [4250705259, 2219391756, 639566089, 279258566, 3082778523], [2999514748, 635154617, 1138073954, 3324355911]]\"], [\"None\", \"[[524207098, 2991600255], [510907728, 2199418301], [3867639254, 4250705259]]\"], [\"None\", \"[[524207098], [2991600255], [510907728], [2199418301], [3867639254], [4250705259], [2219391756], [639566089], [279258566], [3082778523], [2999514748], [635154617], [1138073954], [3324355911], [2111110136]]\"], [\"None\", \"[[524207098, 2991600255], [510907728, 2199418301], [3867639254, 4250705259], [2219391756, 639566089], [279258566, 3082778523], [2999514748, 635154617], [1138073954, 3324355911], [2111110136, 3929046121]]\"], [\"None\", \"[[524207098], [2991600255], [510907728], [2199418301], [3867639254]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301, 3867639254, 4250705259, 2219391756, 639566089], [279258566, 3082778523, 2999514748, 635154617]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301, 3867639254, 4250705259, 2219391756, 639566089, 279258566], [3082778523, 2999514748, 635154617, 1138073954, 3324355911, 2111110136, 3929046121, 3585988690, 3994284663]]\"], [\"None\", \"[[524207098, 2991600255], [510907728, 2199418301], [3867639254, 4250705259], [2219391756, 639566089], [279258566, 3082778523], [2999514748, 635154617], [1138073954, 3324355911], [2111110136, 3929046121]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301, 3867639254, 4250705259, 2219391756, 639566089, 279258566], [3082778523, 2999514748, 635154617, 1138073954, 3324355911, 2111110136, 3929046121, 3585988690, 3994284663]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301], [3867639254, 4250705259, 2219391756, 639566089], [279258566, 3082778523, 2999514748, 635154617], [1138073954]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301, 3867639254, 4250705259, 2219391756], [639566089, 279258566, 3082778523, 2999514748, 635154617, 1138073954, 3324355911], [2111110136, 3929046121]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301], [3867639254, 4250705259, 2219391756, 639566089], [279258566, 3082778523, 2999514748, 635154617], [1138073954, 3324355911, 2111110136, 3929046121], [3585988690, 3994284663]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301, 3867639254, 4250705259, 2219391756], [639566089, 279258566, 3082778523, 2999514748]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301, 3867639254, 4250705259, 2219391756]]\"], [\"None\", \"[[524207098], [2991600255], [510907728], [2199418301], [3867639254], [4250705259], [2219391756], [639566089], [279258566], [3082778523], [2999514748], [635154617], [1138073954], [3324355911], [2111110136]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301, 3867639254, 4250705259, 2219391756, 639566089, 279258566, 3082778523], [2999514748, 635154617, 1138073954, 3324355911]]\"], [\"None\", \"[[524207098], [2991600255], [510907728], [2199418301], [3867639254], [4250705259], [2219391756], [639566089], [279258566], [3082778523], [2999514748], [635154617], [1138073954], [3324355911], [2111110136]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301], [3867639254, 4250705259, 2219391756, 639566089]]\"], [\"None\", \"[[524207098], [2991600255], [510907728], [2199418301], [3867639254]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301, 3867639254]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301, 3867639254, 4250705259, 2219391756], [639566089, 279258566, 3082778523, 2999514748, 635154617, 1138073954, 3324355911], [2111110136, 3929046121]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301, 3867639254, 4250705259, 2219391756, 639566089, 279258566, 3082778523], [2999514748, 635154617, 1138073954, 3324355911]]\"], [\"None\", \"[[524207098, 2991600255, 510907728], [2199418301, 3867639254, 4250705259], [2219391756, 639566089, 279258566], [3082778523, 2999514748, 635154617]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301], [3867639254, 4250705259, 2219391756, 639566089]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301, 3867639254, 4250705259, 2219391756], [639566089, 279258566, 3082778523, 2999514748]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301], [3867639254, 4250705259, 2219391756, 639566089], [279258566, 3082778523, 2999514748, 635154617], [1138073954, 3324355911, 2111110136, 3929046121], [3585988690, 3994284663]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301, 3867639254], [4250705259, 2219391756, 639566089, 279258566, 3082778523], [2999514748, 635154617, 1138073954, 3324355911, 2111110136], [3929046121, 3585988690, 3994284663, 1995243112]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301], [3867639254, 4250705259, 2219391756, 639566089]]\"], [\"None\", \"[[524207098], [2991600255], [510907728], [2199418301], [3867639254]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301], [3867639254, 4250705259, 2219391756, 639566089]]\"], [\"None\", \"[[524207098, 2991600255, 510907728], [2199418301, 3867639254, 4250705259], [2219391756, 639566089, 279258566], [3082778523, 2999514748, 635154617]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301, 3867639254, 4250705259, 2219391756, 639566089, 279258566, 3082778523], [2999514748, 635154617, 1138073954, 3324355911]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301, 3867639254, 4250705259, 2219391756, 639566089]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301, 3867639254, 4250705259, 2219391756]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301, 3867639254], [4250705259, 2219391756, 639566089, 279258566, 3082778523], [2999514748, 635154617, 1138073954, 3324355911, 2111110136], [3929046121, 3585988690, 3994284663, 1995243112]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301, 3867639254, 4250705259, 2219391756, 639566089, 279258566]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301, 3867639254, 4250705259, 2219391756, 639566089, 279258566], [3082778523, 2999514748, 635154617, 1138073954, 3324355911, 2111110136, 3929046121, 3585988690, 3994284663]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301], [3867639254, 4250705259, 2219391756, 639566089], [279258566, 3082778523, 2999514748, 635154617], [1138073954, 3324355911, 2111110136, 3929046121], [3585988690, 3994284663]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301, 3867639254, 4250705259, 2219391756], [639566089, 279258566, 3082778523, 2999514748, 635154617, 1138073954, 3324355911], [2111110136, 3929046121]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301, 3867639254, 4250705259, 2219391756, 639566089], [279258566, 3082778523, 2999514748, 635154617, 1138073954, 3324355911, 2111110136, 3929046121], [3585988690]]\"], [\"None\", \"[[524207098, 2991600255, 510907728], [2199418301, 3867639254, 4250705259], [2219391756, 639566089, 279258566], [3082778523, 2999514748, 635154617]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301], [3867639254, 4250705259, 2219391756, 639566089], [279258566, 3082778523, 2999514748, 635154617], [1138073954, 3324355911, 2111110136, 3929046121], [3585988690, 3994284663]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301, 3867639254, 4250705259, 2219391756], [639566089, 279258566, 3082778523, 2999514748, 635154617, 1138073954, 3324355911], [2111110136, 3929046121]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301, 3867639254, 4250705259, 2219391756, 639566089, 279258566, 3082778523], [2999514748, 635154617, 1138073954, 3324355911, 2111110136, 3929046121, 3585988690, 3994284663, 1995243112]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301, 3867639254, 4250705259]]\"], [\"None\", \"[[524207098, 2991600255], [510907728, 2199418301], [3867639254, 4250705259], [2219391756, 639566089], [279258566, 3082778523], [2999514748, 635154617], [1138073954, 3324355911], [2111110136, 3929046121]]\"], [\"None\", \"[[524207098], [2991600255], [510907728], [2199418301], [3867639254], [4250705259], [2219391756], [639566089], [279258566], [3082778523], [2999514748], [635154617], [1138073954], [3324355911], [2111110136]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301, 3867639254, 4250705259], [2219391756, 639566089, 279258566, 3082778523, 2999514748, 635154617], [1138073954, 3324355911, 2111110136]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301, 3867639254, 4250705259, 2219391756, 639566089, 279258566], [3082778523, 2999514748, 635154617, 1138073954, 3324355911, 2111110136, 3929046121, 3585988690, 3994284663]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301, 3867639254, 4250705259, 2219391756]]\"], [\"None\", \"[[524207098], [2991600255], [510907728], [2199418301], [3867639254], [4250705259], [2219391756], [639566089], [279258566], [3082778523], [2999514748], [635154617], [1138073954], [3324355911], [2111110136]]\"], [\"None\", \"[[524207098, 2991600255], [510907728, 2199418301], [3867639254, 4250705259]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301, 3867639254, 4250705259, 2219391756, 639566089, 279258566], [3082778523, 2999514748, 635154617, 1138073954, 3324355911, 2111110136, 3929046121, 3585988690, 3994284663]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301, 3867639254, 4250705259, 2219391756, 639566089, 279258566]]\"], [\"None\", \"[[524207098], [2991600255], [510907728], [2199418301], [3867639254], [4250705259], [2219391756], [639566089], [279258566], [3082778523]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301], [3867639254, 4250705259, 2219391756, 639566089], [279258566, 3082778523, 2999514748, 635154617], [1138073954]]\"], [\"None\", \"[[524207098, 2991600255, 510907728], [2199418301, 3867639254, 4250705259], [2219391756, 639566089, 279258566], [3082778523, 2999514748, 635154617]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301], [3867639254, 4250705259, 2219391756, 639566089], [279258566, 3082778523, 2999514748, 635154617], [1138073954]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301, 3867639254], [4250705259, 2219391756, 639566089, 279258566, 3082778523], [2999514748, 635154617, 1138073954, 3324355911, 2111110136], [3929046121, 3585988690, 3994284663, 1995243112]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301, 3867639254, 4250705259, 2219391756, 639566089, 279258566]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301, 3867639254, 4250705259]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301, 3867639254]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301, 3867639254], [4250705259, 2219391756, 639566089, 279258566, 3082778523], [2999514748, 635154617, 1138073954, 3324355911, 2111110136], [3929046121, 3585988690, 3994284663, 1995243112]]\"], [\"None\", \"[[524207098, 2991600255], [510907728, 2199418301], [3867639254, 4250705259], [2219391756, 639566089], [279258566, 3082778523], [2999514748]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301, 3867639254], [4250705259, 2219391756, 639566089, 279258566, 3082778523], [2999514748, 635154617, 1138073954, 3324355911, 2111110136], [3929046121, 3585988690, 3994284663, 1995243112]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301, 3867639254, 4250705259, 2219391756, 639566089, 279258566, 3082778523], [2999514748, 635154617, 1138073954, 3324355911, 2111110136, 3929046121, 3585988690, 3994284663, 1995243112]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301, 3867639254, 4250705259, 2219391756], [639566089, 279258566, 3082778523, 2999514748, 635154617, 1138073954, 3324355911], [2111110136, 3929046121]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301], [3867639254, 4250705259, 2219391756, 639566089], [279258566, 3082778523, 2999514748, 635154617], [1138073954]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301, 3867639254, 4250705259, 2219391756], [639566089, 279258566, 3082778523, 2999514748]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301, 3867639254, 4250705259, 2219391756, 639566089, 279258566]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301, 3867639254], [4250705259, 2219391756, 639566089, 279258566, 3082778523], [2999514748, 635154617, 1138073954, 3324355911]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301, 3867639254, 4250705259, 2219391756, 639566089, 279258566, 3082778523], [2999514748, 635154617, 1138073954, 3324355911]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301, 3867639254, 4250705259]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301], [3867639254, 4250705259, 2219391756, 639566089], [279258566, 3082778523, 2999514748, 635154617], [1138073954, 3324355911, 2111110136, 3929046121], [3585988690, 3994284663]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301, 3867639254, 4250705259, 2219391756, 639566089]]\"], [\"None\", \"[[524207098, 2991600255], [510907728, 2199418301], [3867639254, 4250705259], [2219391756, 639566089], [279258566, 3082778523], [2999514748]]\"], [\"None\", \"[[524207098], [2991600255], [510907728], [2199418301], [3867639254]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301, 3867639254, 4250705259, 2219391756, 639566089, 279258566, 3082778523], [2999514748, 635154617, 1138073954, 3324355911, 2111110136, 3929046121, 3585988690, 3994284663, 1995243112]]\"], [\"None\", \"[[524207098, 2991600255, 510907728], [2199418301, 3867639254, 4250705259], [2219391756, 639566089, 279258566], [3082778523, 2999514748, 635154617]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301, 3867639254, 4250705259, 2219391756]]\"], [\"None\", \"[[524207098], [2991600255], [510907728], [2199418301], [3867639254], [4250705259], [2219391756], [639566089], [279258566], [3082778523], [2999514748], [635154617], [1138073954], [3324355911], [2111110136]]\"], [\"None\", \"[[524207098, 2991600255], [510907728, 2199418301], [3867639254, 4250705259]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301, 3867639254, 4250705259, 2219391756, 639566089, 279258566], [3082778523, 2999514748, 635154617, 1138073954, 3324355911, 2111110136, 3929046121, 3585988690, 3994284663]]\"], [\"None\", \"[[524207098, 2991600255], [510907728, 2199418301], [3867639254, 4250705259], [2219391756, 639566089], [279258566, 3082778523], [2999514748]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301, 3867639254, 4250705259, 2219391756], [639566089, 279258566, 3082778523, 2999514748]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301, 3867639254, 4250705259, 2219391756]]\"], [\"None\", \"[[524207098], [2991600255], [510907728], [2199418301], [3867639254], [4250705259], [2219391756], [639566089], [279258566], [3082778523]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301, 3867639254]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301, 3867639254, 4250705259, 2219391756], [639566089, 279258566, 3082778523, 2999514748, 635154617, 1138073954, 3324355911], [2111110136, 3929046121]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301], [3867639254, 4250705259, 2219391756, 639566089], [279258566, 3082778523, 2999514748, 635154617], [1138073954]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301, 3867639254, 4250705259, 2219391756], [639566089, 279258566, 3082778523, 2999514748, 635154617, 1138073954, 3324355911], [2111110136, 3929046121]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301], [3867639254, 4250705259, 2219391756, 639566089], [279258566, 3082778523, 2999514748, 635154617], [1138073954]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301, 3867639254, 4250705259, 2219391756, 639566089]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301, 3867639254, 4250705259, 2219391756, 639566089, 279258566, 3082778523], [2999514748, 635154617, 1138073954, 3324355911]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301, 3867639254], [4250705259, 2219391756, 639566089, 279258566, 3082778523], [2999514748, 635154617, 1138073954, 3324355911]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301, 3867639254, 4250705259], [2219391756, 639566089, 279258566, 3082778523]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301, 3867639254, 4250705259, 2219391756], [639566089, 279258566, 3082778523, 2999514748]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301, 3867639254, 4250705259, 2219391756, 639566089, 279258566]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301, 3867639254, 4250705259, 2219391756], [639566089, 279258566, 3082778523, 2999514748]]\"], [\"None\", \"[[524207098, 2991600255, 510907728, 2199418301, 3867639254, 4250705259, 2219391756]]\"]]", 
      "solution": "def razrezi(s, n):\n    razrezan = []\n    i = 0\n    while i + n < len(s):\n        razrezan.append(s[i : i + n])\n        i += n\n    razrezan.append(s[i:])\n    return razrezan", 
      "problem": 119, 
      "validation": "Check.equal('razrezi([1, 4, 2, 4, 7, 7, 3, 2], 2)', [[1, 4], [2, 4], [7, 7], [3, 2]])\nCheck.equal('razrezi([1, 4, 2, 4, 7, 7, 3, 2], 3)', [[1, 4, 2], [4, 7, 7], [3, 2]])\nCheck.equal('razrezi([1, 4, 2, 4, 7, 7, 3, 2], 1)', [[1], [4], [2], [4], [7], [7], [3], [2]])\nrng=[11059]\nfor i in range(100): rng.append((rng[-1]*1103515245+12345)%2**32)\npodatki = [([rng[(13*y+7)%100] for y in range(5+x%15)], 1+x%10) for x in rng]\nfor s,n in podatki:\n    Check.challenge(razrezi(s,n))"
    }
  }, 
  {
    "pk": 792, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `dodajEnke(sez)`, ki vrne seznam `sez`, ki smo mu na\nza\u010detek in na konec dodali \u0161tevilo `1`.", 
      "timestamp": "2012-09-05 11:43:47", 
      "challenge": "[[\"[1, 1, 8, 343, 1, 1, 64, 343, 343, 729]\", \"[1, 1, 1, 8, 343, 1, 1, 64, 343, 343, 729, 1]\"], [\"[8, 64, 1, 64, 343, 8, 27, 64, 1728, 512]\", \"[1, 8, 64, 1, 64, 343, 8, 27, 64, 1728, 512, 1]\"], [\"[1, 27, 64, 125, 216, 1, 125, 729, 1728, 1331]\", \"[1, 1, 27, 64, 125, 216, 1, 125, 729, 1728, 1331, 1]\"], [\"[64, 0, 27, 8, 216, 64, 512, 216, 343, 1000]\", \"[1, 64, 0, 27, 8, 216, 64, 512, 216, 343, 1000, 1]\"], [\"[27, 1, 8, 27, 64, 27, 8, 343, 0, 729]\", \"[1, 27, 1, 8, 27, 64, 27, 8, 343, 0, 729, 1]\"], [\"[64, 64, 8, 0, 1, 64, 1, 64, 1728, 8]\", \"[1, 64, 64, 8, 0, 1, 64, 1, 64, 1728, 8, 1]\"], [\"[64, 125, 125, 1, 512, 729, 0, 125, 343, 125]\", \"[1, 64, 125, 125, 1, 512, 729, 0, 125, 343, 125, 1]\"], [\"[8, 8, 0, 216, 8, 8, 343, 8, 125, 0]\", \"[1, 8, 8, 0, 216, 8, 8, 343, 8, 125, 0, 1]\"], [\"[64, 27, 8, 343, 216, 729, 512, 27, 1, 729]\", \"[1, 64, 27, 8, 343, 216, 729, 512, 27, 1, 729, 1]\"], [\"[64, 8, 125, 64, 125, 64, 64, 512, 216, 1728]\", \"[1, 64, 8, 125, 64, 125, 64, 64, 512, 216, 1728, 1]\"], [\"[8, 27, 125, 125, 0, 343, 8, 729, 729, 125]\", \"[1, 8, 27, 125, 125, 0, 343, 8, 729, 729, 125, 1]\"], [\"[8, 0, 8, 8, 0, 8, 64, 216, 343, 8]\", \"[1, 8, 0, 8, 8, 0, 8, 64, 216, 343, 8, 1]\"], [\"[0, 1, 64, 27, 1, 125, 343, 343, 512, 1331]\", \"[1, 0, 1, 64, 27, 1, 125, 343, 343, 512, 1331, 1]\"], [\"[64, 0, 125, 0, 216, 64, 1000, 0, 1, 1728]\", \"[1, 64, 0, 125, 0, 216, 64, 1000, 0, 1, 1728, 1]\"], [\"[0, 1, 125, 1, 343, 125, 1000, 1, 0, 125]\", \"[1, 0, 1, 125, 1, 343, 125, 1000, 1, 0, 125, 1]\"], [\"[1, 0, 1, 216, 27, 216, 0, 216, 1000, 512]\", \"[1, 1, 0, 1, 216, 27, 216, 0, 216, 1000, 512, 1]\"], [\"[27, 27, 27, 343, 216, 27, 729, 27, 512, 27]\", \"[1, 27, 27, 27, 343, 216, 27, 729, 27, 512, 27, 1]\"], [\"[64, 0, 27, 64, 216, 64, 343, 0, 729, 1000]\", \"[1, 64, 0, 27, 64, 216, 64, 343, 0, 729, 1000, 1]\"], [\"[8, 27, 64, 125, 216, 343, 729, 729, 125, 1331]\", \"[1, 8, 27, 64, 125, 216, 343, 729, 729, 125, 1331, 1]\"], [\"[0, 64, 125, 8, 343, 0, 1000, 1000, 1331, 1728]\", \"[1, 0, 64, 125, 8, 343, 0, 1000, 1000, 1331, 1728, 1]\"], [\"[64, 125, 1, 27, 8, 729, 8, 1331, 8, 1]\", \"[1, 64, 125, 1, 27, 8, 729, 8, 1331, 8, 1, 1]\"], [\"[27, 0, 27, 0, 27, 512, 729, 0, 1331, 1000]\", \"[1, 27, 0, 27, 0, 27, 512, 729, 0, 1331, 1000, 1]\"], [\"[0, 1, 0, 1, 1, 125, 1000, 1, 343, 343]\", \"[1, 0, 1, 0, 1, 1, 125, 1000, 1, 343, 343, 1]\"], [\"[0, 64, 125, 216, 64, 0, 512, 1000, 1331, 1728]\", \"[1, 0, 64, 125, 216, 64, 0, 512, 1000, 1331, 1728, 1]\"], [\"[8, 27, 64, 343, 27, 343, 512, 27, 729, 1331]\", \"[1, 8, 27, 64, 343, 27, 343, 512, 27, 729, 1331, 1]\"], [\"[1, 8, 8, 64, 512, 216, 216, 512, 125, 8]\", \"[1, 1, 8, 8, 64, 512, 216, 216, 512, 125, 8, 1]\"], [\"[64, 1, 27, 125, 1, 729, 216, 1, 343, 27]\", \"[1, 64, 1, 27, 125, 1, 729, 216, 1, 343, 27, 1]\"], [\"[8, 0, 27, 8, 216, 8, 216, 216, 512, 1000]\", \"[1, 8, 0, 27, 8, 216, 8, 216, 216, 512, 1000, 1]\"], [\"[64, 1, 8, 27, 1, 729, 343, 343, 125, 729]\", \"[1, 64, 1, 8, 27, 1, 729, 343, 343, 125, 729, 1]\"], [\"[1, 64, 8, 0, 1, 216, 0, 64, 8, 8]\", \"[1, 1, 64, 8, 0, 1, 216, 0, 64, 8, 8, 1]\"], [\"[1, 27, 27, 1, 0, 1, 1, 729, 1000, 27]\", \"[1, 1, 27, 27, 1, 0, 1, 1, 729, 1000, 27, 1]\"], [\"[8, 0, 1, 216, 216, 8, 343, 216, 729, 512]\", \"[1, 8, 0, 1, 216, 216, 8, 343, 216, 729, 512, 1]\"], [\"[0, 1, 0, 343, 343, 125, 125, 343, 216, 343]\", \"[1, 0, 1, 0, 343, 343, 125, 125, 343, 216, 343, 1]\"], [\"[8, 8, 216, 64, 8, 8, 125, 512, 0, 216]\", \"[1, 8, 8, 216, 64, 8, 8, 125, 512, 0, 216, 1]\"], [\"[0, 1, 216, 125, 1, 125, 1, 1, 125, 2197]\", \"[1, 0, 1, 216, 125, 1, 125, 1, 1, 125, 2197, 1]\"], [\"[8, 0, 27, 8, 216, 8, 8, 216, 0, 1000]\", \"[1, 8, 0, 27, 8, 216, 8, 8, 216, 0, 1000, 1]\"], [\"[64, 1, 1, 27, 1, 729, 64, 343, 216, 1]\", \"[1, 64, 1, 1, 27, 1, 729, 64, 343, 216, 1, 1]\"], [\"[0, 64, 216, 0, 64, 0, 125, 64, 125, 216]\", \"[1, 0, 64, 216, 0, 64, 0, 125, 64, 125, 216, 1]\"], [\"[27, 27, 1, 1, 27, 27, 1000, 729, 1, 1]\", \"[1, 27, 27, 1, 1, 27, 27, 1000, 729, 1, 1, 1]\"], [\"[1, 8, 1, 216, 125, 216, 64, 8, 1728, 512]\", \"[1, 1, 8, 1, 216, 125, 216, 64, 8, 1728, 512, 1]\"], [\"[64, 1, 64, 343, 343, 729, 125, 343, 1000, 1331]\", \"[1, 64, 1, 64, 343, 343, 729, 125, 343, 1000, 1331, 1]\"], [\"[1, 64, 125, 64, 343, 216, 125, 64, 64, 1728]\", \"[1, 1, 64, 125, 64, 343, 216, 125, 64, 64, 1728, 1]\"], [\"[27, 125, 125, 125, 512, 27, 27, 125, 1728, 125]\", \"[1, 27, 125, 125, 125, 512, 27, 27, 125, 1728, 125, 1]\"], [\"[8, 8, 216, 8, 512, 8, 0, 8, 1000, 216]\", \"[1, 8, 8, 216, 8, 512, 8, 0, 8, 1000, 216, 1]\"], [\"[1, 125, 8, 27, 8, 1, 512, 1331, 64, 729]\", \"[1, 1, 125, 8, 27, 8, 1, 512, 1331, 64, 729, 1]\"], [\"[27, 0, 0, 0, 0, 512, 27, 0, 1, 0]\", \"[1, 27, 0, 0, 0, 0, 512, 27, 0, 1, 0, 1]\"], [\"[64, 27, 125, 1, 0, 729, 1000, 729, 125, 125]\", \"[1, 64, 27, 125, 1, 0, 729, 1000, 729, 125, 125, 1]\"], [\"[64, 64, 27, 216, 343, 64, 216, 1000, 1, 1000]\", \"[1, 64, 64, 27, 216, 343, 64, 216, 1000, 1, 1000, 1]\"], [\"[64, 27, 8, 343, 27, 729, 343, 27, 216, 729]\", \"[1, 64, 27, 8, 343, 27, 729, 343, 27, 216, 729, 1]\"], [\"[8, 8, 125, 64, 125, 8, 27, 512, 512, 1728]\", \"[1, 8, 8, 125, 64, 125, 8, 27, 512, 512, 1728, 1]\"], [\"[1, 1, 64, 125, 343, 1, 64, 1, 1331, 1331]\", \"[1, 1, 1, 64, 125, 343, 1, 64, 1, 1331, 1331, 1]\"]]", 
      "solution": "def dodajEnke(sez):\n    return [1] + sez + [1]", 
      "problem": 252, 
      "validation": "Check.equal(\"\"\"dodajEnke([4, 6, 4])\"\"\", [1, 4, 6, 4, 1])\nCheck.equal(\"\"\"dodajEnke([3, 3])\"\"\", [1, 3, 3, 1])\nCheck.equal(\"\"\"dodajEnke([2])\"\"\", [1, 2, 1])\nCheck.equal(\"\"\"dodajEnke([])\"\"\", [1, 1])\n\n_rng=[1287631]\nfor i in range(50): _rng.append((_rng[-1]*1103515245+12345)%2**32)\nfor i in _rng:\n    sez = []\n    for j in range(10):\n        sez.append((i % (j + 5)) ** 3)\n    Check.challenge(dodajEnke(sez), sez)"
    }
  }, 
  {
    "pk": 496, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `praviDelitelji(n)`, ki vrne seznam vseh pravih\ndeliteljev \u0161tevila `n`.", 
      "timestamp": "2012-06-04 08:46:52", 
      "challenge": "[[\"None\", \"[1, 2, 5, 10, 25]\"], [\"None\", \"[1, 3, 17]\"], [\"None\", \"[1, 2, 4, 13, 26]\"], [\"None\", \"[1]\"], [\"None\", \"[1, 2, 3, 6, 9, 18, 27]\"], [\"None\", \"[1, 5, 11]\"], [\"None\", \"[1, 2, 4, 7, 8, 14, 28]\"], [\"None\", \"[1, 3, 19]\"], [\"None\", \"[1, 2, 29]\"], [\"None\", \"[1]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 10, 12, 15, 20, 30]\"], [\"None\", \"[1]\"], [\"None\", \"[1, 2, 31]\"], [\"None\", \"[1, 3, 7, 9, 21]\"], [\"None\", \"[1, 2, 4, 8, 16, 32]\"], [\"None\", \"[1, 5, 13]\"], [\"None\", \"[1, 2, 3, 6, 11, 22, 33]\"], [\"None\", \"[1]\"], [\"None\", \"[1, 2, 4, 17, 34]\"], [\"None\", \"[1, 3, 23]\"], [\"None\", \"[1, 2, 5, 7, 10, 14, 35]\"], [\"None\", \"[1]\"], [\"None\", \"[1, 2, 3, 4, 6, 8, 9, 12, 18, 24, 36]\"], [\"None\", \"[1]\"], [\"None\", \"[1, 2, 37]\"], [\"None\", \"[1, 3, 5, 15, 25]\"], [\"None\", \"[1, 2, 4, 19, 38]\"], [\"None\", \"[1, 7, 11]\"], [\"None\", \"[1, 2, 3, 6, 13, 26, 39]\"], [\"None\", \"[1]\"], [\"None\", \"[1, 2, 4, 5, 8, 10, 16, 20, 40]\"], [\"None\", \"[1, 3, 9, 27]\"], [\"None\", \"[1, 2, 41]\"], [\"None\", \"[1]\"], [\"None\", \"[1, 2, 3, 4, 6, 7, 12, 14, 21, 28, 42]\"], [\"None\", \"[1, 5, 17]\"], [\"None\", \"[1, 2, 43]\"], [\"None\", \"[1, 3, 29]\"], [\"None\", \"[1, 2, 4, 8, 11, 22, 44]\"], [\"None\", \"[1]\"], [\"None\", \"[1, 2, 3, 5, 6, 9, 10, 15, 18, 30, 45]\"], [\"None\", \"[1, 7, 13]\"], [\"None\", \"[1, 2, 4, 23, 46]\"], [\"None\", \"[1, 3, 31]\"], [\"None\", \"[1, 2, 47]\"], [\"None\", \"[1, 5, 19]\"], [\"None\", \"[1, 2, 3, 4, 6, 8, 12, 16, 24, 32, 48]\"], [\"None\", \"[1]\"], [\"None\", \"[1, 2, 7, 14, 49]\"], [\"None\", \"[1, 3, 9, 11, 33]\"]]", 
      "solution": "def praviDelitelji(n):\n    return [i for i in range(1, n) if n % i == 0]", 
      "problem": 162, 
      "validation": "Check.equal('praviDelitelji(19)', [1])\nCheck.equal('praviDelitelji(28)', [1, 2, 4, 7, 14])\nCheck.equal('praviDelitelji(42)', [1, 2, 3, 6, 7, 14, 21])\nfor i in range(50, 100):\n    Check.challenge(praviDelitelji(i))"
    }
  }, 
  {
    "pk": 320, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `hanoj(n, a, b, c)`, ki vrne zaporedje potez, ki\nre\u0161ijo problem Hanojskih stolpov z `n` diski na palicah z oznakami `a`,\n`b` in `c`.\n\n    >>> hanoj(3, \"A\", \"B\", \"C\")\n    [(\"A\", \"C\"), (\"A\", \"B\"), (\"C\", \"B\"), (\"A\", \"C\"),\n     (\"B\", \"A\"), (\"B\", \"C\"), (\"A\", \"C\")]", 
      "timestamp": "2012-05-20 20:51:05", 
      "challenge": "[]", 
      "solution": "def hanoj(n, a, b, c):\n    if n == 0:\n        return []\n    else:\n        return hanoj(n - 1, a, c, b) + [(a, c)] + hanoj(n - 1, b, a, c)", 
      "problem": 105, 
      "validation": "Check.equal(\"hanoj(0, 'A', 'B', 'C')\", [])\nCheck.equal(\"hanoj(1, 'A', 'B', 'C')\", [(\"A\", \"C\")])\nCheck.equal(\"hanoj(3, 'A', 'B', 'C')\", [(\"A\", \"C\"), (\"A\", \"B\"), (\"C\", \"B\"), (\"A\", \"C\"), (\"B\", \"A\"), (\"B\", \"C\"), (\"A\", \"C\")])"
    }
  }, 
  {
    "pk": 294, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite metodo `naloga2a(self, p)`, kot je zapisano v navodilih.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"[]\", \"None\"], [\"[]\", \"None\"], [\"[]\", \"1\"], [\"[]\", \"3\"], [\"[]\", \"5\"], [\"[]\", \"4\"], [\"[]\", \"1\"], [\"[]\", \"4\"], [\"[]\", \"2\"], [\"[]\", \"None\"], [\"[]\", \"None\"], [\"[]\", \"7\"], [\"[]\", \"None\"], [\"[]\", \"None\"], [\"[]\", \"9\"], [\"[]\", \"7\"], [\"[]\", \"9\"], [\"[]\", \"8\"], [\"[]\", \"1\"], [\"[]\", \"4\"], [\"[]\", \"2\"], [\"[]\", \"7\"], [\"[]\", \"9\"], [\"[]\", \"8\"], [\"[]\", \"2\"], [\"[]\", \"8\"], [\"[]\", \"6\"]]", 
      "solution": "class IskalnoDrevo(IskalnoDrevo):\n    def naloga2a(self, p):\n        if self.prazno:\n            return None\n        elif p:\n            smer = p.pop(0)\n            if smer:\n                return self.levo.naloga2a(p)\n            else:\n                return self.desno.naloga2a(p)\n        else:\n            return self.vrednost", 
      "problem": 95, 
      "validation": "d = IskalnoDrevo([6, 2, 1, 4, 3, 5, 8, 7, 9])\n\nCheck.equal(\"\"\"d.naloga2a([True, False, True])\"\"\", 3, env = {\"d\": d}) \nCheck.equal(\"\"\"d.naloga2a([False])\"\"\", 8, env = {\"d\": d}) \nCheck.equal(\"\"\"d.naloga2a([])\"\"\", 6, env = {\"d\": d}) \nCheck.equal(\"\"\"d.naloga2a([False, False, True])\"\"\", None, env = {\"d\": d})\nCheck.equal(\"\"\"IskalnoDrevo().naloga2a([])\"\"\", None, env = {\"d\": d}) \nCheck.equal(\"\"\"IskalnoDrevo().naloga2a([True, False])\"\"\", None, env = {\"d\": d}) \n\ndef f(n):\n    if n == 0:\n        return [[]]\n    else:\n        ps = f(n - 1)\n        return [[k] + p for k in [True, False] for p in ps] + ps \n\nfor p in f(3):\n    Check.challenge(d.naloga2a(p), p)"
    }
  }, 
  {
    "pk": 517, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Podnaloga (a)", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "def dolzina(a):\n    if len(a) == 9:\n        return 4\n    if len(a) == 7:\n        return 3", 
      "problem": 168, 
      "validation": "#Check.equal(\"\"\"dolzina([0, 8, 4, 12, 2, 10, 6, 14, 1])\"\"\", [])\n#Check.equal(\"\"\"dolzina([0, 8, 4, 12, 2, 10, 6])\"\"\", 3)"
    }
  }, 
  {
    "pk": 638, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Zvezna porazdelitev slu\u010dajne spremenljivke ima porazdelitveno funkcijo\r\n\r\nF(x). Ozna\u010di pravilne trditve, ki veljajo za vsako zvezno porazdelitev.\r\n\r\n1) F(x) je absolutno zvezna. \t\r\n\r\n2) F(x) je padajo\u010da funkcija \t\r\n\r\n3) Ko x te\u017ei k +\\infty , F(x) te\u017ei k 1 \t\r\n\r\n4) Ko x te\u017ei k -\\infty , F(x) te\u017ei k 0 \t\r\n\r\n5) F(x) je monotona \t\r\n\r\n6) F(0) = 1/2 \t\r\n\r\n7) F(0) = 0\r\n\r\nSestavite funkcijo naloga13, ki kot rezultat vrne mno\u017eico pravilnih\r\nodgovorov (teh je lahko od 0 do 7, \u010de noben odgovor ni pravilen, naj\r\nfunkcija vrne prazno mno\u017eico)", 
      "timestamp": "2012-03-27 08:53:12", 
      "challenge": "[]", 
      "solution": "def naloga13():\r\n    return {1,3,4,5}", 
      "problem": 209, 
      "validation": "Check.equal('md5(str(naloga13()).encode()).hexdigest()', 'cd4ba60543a1806596ee2d8290285c7d', \"Odgovor je napa\u010den\")"
    }
  }, 
  {
    "pk": 292, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `naloga1a(s, p)`, kot je zapisano v navodilih.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "def naloga1a(s, p):\n    for (a, b, x) in p:\n        s[a] -= x\n        s[b] += x", 
      "problem": 94, 
      "validation": "Check.run([\n    \"s = {'Ana': 5, 'Bine': 120, 'Cene': 310, 'Darko': 42}\",\n    \"naloga1a(s, [('Ana','Bine',10), ('Bine','Cene',50), ('Cene','Bine',10)])\"\n  ], {\"s\": {'Ana': -5, 'Bine': 90, 'Cene': 350, 'Darko': 42}})\nCheck.run([\n    \"s = {'Ana': 5, 'Bine': 120}\",\n    \"naloga1a(s, [])\"\n  ], {\"s\": {'Ana': 5, 'Bine': 120}})\nCheck.run([\n    \"s = {}\",\n    \"naloga1a(s, [])\"\n  ], {\"s\": {}})"
    }
  }, 
  {
    "pk": 630, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Imamo kino dvorano velikosti `MxN` (M vrst, v vsaki N sede\u017eev).\r\nSestavi funkcijo `jedvorana(velikost,sedezi)`, ki sprejme dva parametra:\r\nnabor `(M, N)` dol\u017eine 2, ki predstavlja velikost dvorane ter slovar, v\r\nkaterem so pari `(x,y):v`. Nabor `(x,y)` predstavlja sede\u017e y v vrsti x,\r\nv pa je vi\u0161ina \u010dloveka v decimetrih, ki sedi na tem sede\u017eu. Pozor: ni\r\nnujno, da so vsi sede\u017ei zasedeni!\r\nFunkcija naj vrne True, \u010de so vsi podatki veljavni in False sicer.\r\nPodatki so veljavni, \u010de se sede\u017e nahaja v dvorani (tj. 1 <= x <= M,\r\n1 <= y <= N).", 
      "timestamp": "2012-03-27 08:52:49", 
      "challenge": "[]", 
      "solution": "def jedvorana(v,s):\r\n    (m, n) = v\r\n    for (x, y), v in s.items():\r\n        if not (1 <= x <= m and 1 <= y <= n):\r\n            return False\r\n    return True", 
      "problem": 207, 
      "validation": "Check.equal('jedvorana((3, 4), {(1, 2): 17.5, (3, 4): 16.5})', True)\r\nCheck.equal('jedvorana((3, 4), {(1, 2): 17.5, (30, 40): 16.5})', False)\r\nCheck.equal('jedvorana((3, 4), {})', True)"
    }
  }, 
  {
    "pk": 162, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Izven razreda sestavite funkcijo `gcd(m, n)`, ki izra\u010duna najve\u010dji skupni\ndelitelj \u0161tevil `m` in `n`.", 
      "timestamp": "2012-10-24 13:43:41", 
      "challenge": "[]", 
      "solution": "def gcd(m, n):\n    while n != 0:\n        m, n = n, m % n\n    return m", 
      "problem": 50, 
      "validation": "Check.equal('gcd(40, 35)', 5)\nCheck.equal('gcd(40, 19)', 1)\nCheck.equal('gcd(15, 69)', 3)\nCheck.equal('gcd(12345, 6789)', 3)"
    }
  }, 
  {
    "pk": 312, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Za torto potrebujemo 0.8 kg margarine, 2 kg moke in 1.5 kg sladkorja. \nSestavi program, ki iz koli\u010dine sestavin, ki jih imamo na razpolago,\nizra\u010duna najve\u010dje mo\u017eno \u0161tevilo tort, ki jih lahko naredimo, ter rezultat\nshrani v spremenljivki z imenom `koliko_tort`. Koli\u010dine sestavin bodo\nzapisane v spremenljivkah z imeni `margarina`, `moka` in `sladkor`.\n\n*Namig*: Uporabi funkcijo `min`, ki vrne najmanj\u0161ega izmed svojih parametrov.\n\nPrimer: za vrednosti\n\n    margarina = 5\n    moka = 7\n    sladkor = 3.5\n\nnaj se v spremenljivko `koliko_tort` zapi\u0161e vrednost 2.", 
      "timestamp": "2013-02-25 04:05:49", 
      "challenge": "[]", 
      "solution": "koliko_tort = int(min(margarina // 0.8, moka // 2, sladkor // 1.5 ))", 
      "problem": 101, 
      "validation": "import random \nimport math\n\nsource=Check.current[\"solution\"]\nd = dict()\nsladkor = random.randint(3, 20)\nmoka = random.randint(3, 20)   \nmargarina = random.randint(3, 20)\nd[\"sladkor\"] = sladkor\nd[\"moka\"] = moka\nd[\"margarina\"] = margarina\nkoliko_tort = int(min(margarina // 0.8, moka // 2, sladkor // 1.5 ))\n(d, izpis) = izvedi(source, d)\nif \"koliko_tort\" not in d:\n    Check.error(\"Spremenljivka koliko_tort ni definirana.\")\nelif d[\"koliko_tort\"] != koliko_tort:\n    Check.error(\"Spremenljivka koliko_tort za argumente margarina = {0}, moka = {1} in sladkor = {2} nima prave vrednosti.\".format(margarina, moka, sladkor))"
    }
  }, 
  {
    "pk": 642, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavi funkcijo 'karta', ki vrne naklju\u010dno karto. Karte so oblike 'XY', kjer\r\nje X eden izmed 'A', 'B', 'C', 'D', Y pa 1, 2, 3, 4, 5, 6, 7, 8, ali 9.\r\nPrimer:\r\n    >>> karta()\r\n    'B3'", 
      "timestamp": "2012-03-27 08:56:49", 
      "challenge": "[]", 
      "solution": "import random\r\ndef karta():\r\n    X = random.choice(['A', 'B', 'C', 'D'])\r\n    Y = random.choice([1, 2, 3, 4, 5, 6, 7, 8, 9])\r\n    return X + str(Y)", 
      "problem": 210, 
      "validation": "Check.equal(\"karta()[0] in ['A', 'B', 'C', 'D'] and karta()[1] in ['1', '2', '3', '4', '5', '6', '7', '8', '9']\", True, \"Odgovor je napa\u010den\")"
    }
  }, 
  {
    "pk": 914, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `naloga1a(t)`, kot je zapisano v navodilih.", 
      "timestamp": "2013-02-04 07:55:04", 
      "challenge": "[]", 
      "solution": "def naloga1a(t):\n    n = len(t)\n    return (n * (n + 1)) // 2 - sum(t)", 
      "problem": 310, 
      "validation": "Check.equal(\"naloga1a([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13])\", 12)\nCheck.equal(\"naloga1a([0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13])\", 7)\nCheck.equal(\"naloga1a([0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\", 2)"
    }
  }, 
  {
    "pk": 189, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Otroci se igrajo iz\u0161tevanko tako, da se postavijo v krog, nato pa po\nvrsti izlo\u010dajo vsakega $k$-tega.\n\nNa primer, \u010de se Ana, Bine, Cene, Darko, Eva in Ferenc postavijo v krog\nv tem vrstnem redu ter za\u010dnejo iz\u0161tevati pri Ani s preskakovanjem po 4,\ndobimo vrstni red: Darko, Bine, Ana, Cene, Ferenc, Eva.\n\nSestavite generator `izstevaj(otroci, korak)`, ki bo po vrsti\nvra\u010dal izlo\u010dene otroke.", 
      "timestamp": "2012-11-07 13:43:55", 
      "challenge": "[[\"([], 3)\", \"[]\"], [\"([], 4)\", \"['0']\"], [\"([], 5)\", \"['0', '1']\"], [\"([], 6)\", \"['2', '1', '0']\"], [\"([], 7)\", \"['2', '3', '0', '1']\"], [\"([], 8)\", \"['2', '1', '4', '3', '0']\"], [\"([], 9)\", \"['2', '0', '1', '5', '3', '4']\"], [\"([], 10)\", \"['2', '6', '5', '1', '3', '0', '4']\"], [\"([], 11)\", \"['2', '6', '4', '5', '1', '7', '0', '3']\"], [\"([], 12)\", \"['2', '6', '3', '1', '5', '4', '0', '8', '7']\"], [\"([], 13)\", \"['2', '6', '1', '9', '0', '5', '7', '8', '3', '4']\"], [\"([], 14)\", \"['2', '6', '0', '8', '7', '10', '5', '1', '4', '3', '9']\"], [\"([], 15)\", \"['2', '6', '11', '7', '4', '5', '10', '9', '3', '1', '8', '0']\"], [\"([], 16)\", \"['2', '6', '11', '5', '1', '0', '4', '10', '12', '9', '3', '8', '7']\"], [\"([], 17)\", \"['2', '6', '11', '4', '13', '10', '12', '3', '0', '5', '7', '9', '1', '8']\"], [\"([], 18)\", \"['2', '6', '11', '3', '12', '8', '7', '10', '1', '0', '9', '14', '13', '5', '4']\"], [\"([], 19)\", \"['2', '6', '11', '1', '10', '5', '3', '4', '9', '0', '7', '14', '12', '13', '15', '8']\"], [\"([], 3)\", \"['2', '5', '8', '11', '14', '0', '4', '9', '13', '1', '7', '15', '6', '16', '12', '3', '10']\"], [\"([], 4)\", \"['3', '7', '11', '15', '1', '6', '12', '17', '5', '13', '2', '10', '4', '16', '14', '0', '9', '8']\"], [\"([], 5)\", \"['4', '9', '14', '0', '6', '12', '18', '7', '15', '3', '13', '5', '17', '11', '10', '16', '2', '8', '1']\"], [\"([], 6)\", \"['5', '11', '17', '3', '10', '18', '6', '14', '2', '13', '4', '16', '9', '7', '1', '8', '15', '12', '0', '19']\"], [\"([], 7)\", \"['6', '13', '20', '7', '15', '2', '11', '0', '10', '1', '14', '5', '19', '17', '16', '18', '4', '12', '3', '8', '9']\"], [\"([], 8)\", \"['7', '15', '1', '10', '19', '6', '17', '5', '18', '9', '0', '14', '11', '4', '3', '8', '13', '21', '20', '12', '2', '16']\"], [\"([], 9)\", \"['8', '17', '3', '13', '0', '11', '22', '12', '2', '16', '7', '1', '19', '15', '14', '18', '21', '6', '4', '5', '20', '9', '10']\"], [\"([], 10)\", \"['9', '19', '5', '16', '3', '15', '4', '18', '8', '23', '14', '10', '2', '0', '22', '1', '7', '13', '6', '21', '12', '17', '11', '20']\"], [\"([], 11)\", \"['10', '21', '7', '19', '6', '20', '9', '24', '14', '4', '23', '16', '12', '8', '5', '11', '15', '22', '3', '1', '2', '18', '13', '17', '0']\"], [\"([], 12)\", \"['11', '23', '9', '22', '10', '25', '14', '3', '19', '12', '4', '24', '18', '16', '15', '17', '21', '2', '8', '5', '1', '7', '6', '0', '20', '13']\"], [\"([], 13)\", \"['12', '25', '11', '26', '14', '2', '18', '7', '24', '17', '9', '4', '0', '22', '21', '23', '3', '8', '16', '6', '1', '5', '15', '19', '20', '10', '13']\"], [\"([], 14)\", \"['13', '27', '14', '1', '17', '5', '22', '11', '3', '23', '16', '9', '6', '2', '0', '4', '8', '15', '21', '10', '25', '24', '7', '20', '12', '19', '18', '26']\"], [\"([], 15)\", \"['14', '0', '16', '3', '20', '8', '26', '17', '7', '28', '22', '15', '11', '9', '6', '10', '13', '21', '27', '12', '1', '24', '25', '5', '4', '23', '19', '2', '18']\"], [\"([], 16)\", \"['15', '1', '18', '5', '23', '11', '0', '21', '12', '4', '27', '22', '17', '14', '13', '16', '20', '26', '3', '10', '2', '25', '24', '29', '9', '19', '8', '28', '7', '6']\"], [\"([], 17)\", \"['16', '2', '20', '7', '26', '14', '4', '25', '17', '9', '1', '28', '23', '21', '19', '22', '27', '0', '8', '15', '5', '24', '13', '18', '3', '29', '6', '10', '12', '30', '11']\"], [\"([], 18)\", \"['17', '3', '22', '9', '29', '18', '7', '30', '21', '13', '6', '1', '28', '26', '25', '27', '0', '5', '12', '20', '8', '23', '15', '14', '19', '4', '2', '16', '31', '24', '11', '10']\"], [\"([], 19)\", \"['18', '4', '24', '11', '32', '21', '10', '1', '26', '17', '12', '6', '2', '31', '30', '0', '5', '9', '16', '25', '8', '23', '15', '13', '14', '22', '7', '19', '29', '27', '28', '3', '20']\"], [\"([], 3)\", \"['2', '5', '8', '11', '14', '17', '20', '23', '26', '29', '32', '1', '6', '10', '15', '19', '24', '28', '33', '4', '12', '18', '25', '31', '7', '16', '27', '3', '21', '0', '22', '13', '30', '9']\"], [\"([], 4)\", \"['3', '7', '11', '15', '19', '23', '27', '31', '0', '5', '10', '16', '21', '26', '32', '2', '9', '17', '24', '30', '4', '13', '22', '33', '8', '20', '34', '14', '29', '18', '6', '1', '12', '28', '25']\"], [\"([], 5)\", \"['4', '9', '14', '19', '24', '29', '34', '3', '10', '16', '22', '28', '35', '6', '13', '21', '30', '1', '11', '20', '31', '5', '17', '27', '7', '23', '0', '18', '2', '26', '15', '12', '25', '33', '8', '32']\"], [\"([], 6)\", \"['5', '11', '17', '23', '29', '35', '4', '12', '19', '26', '33', '3', '13', '21', '30', '1', '10', '22', '32', '7', '18', '31', '8', '24', '0', '16', '36', '20', '6', '28', '25', '15', '27', '2', '34', '14', '9']\"], [\"([], 7)\", \"['6', '13', '20', '27', '34', '3', '11', '19', '28', '36', '7', '16', '25', '35', '8', '18', '30', '2', '15', '29', '4', '21', '33', '12', '31', '10', '32', '17', '1', '26', '23', '22', '24', '0', '14', '37', '5', '9']\"], [\"([], 8)\", \"['7', '15', '23', '31', '0', '9', '18', '27', '36', '6', '17', '28', '38', '11', '22', '34', '8', '21', '35', '12', '26', '3', '20', '1', '19', '2', '25', '10', '33', '29', '16', '14', '24', '32', '5', '4', '30', '13', '37']\"], [\"([], 9)\", \"['8', '17', '26', '35', '4', '14', '24', '34', '5', '16', '28', '39', '11', '23', '37', '10', '25', '0', '15', '31', '7', '27', '3', '22', '6', '30', '13', '38', '29', '19', '12', '9', '18', '21', '36', '32', '33', '20', '1', '2']\"], [\"([], 10)\", \"['9', '19', '29', '39', '8', '20', '31', '1', '13', '25', '37', '10', '23', '36', '11', '26', '0', '16', '33', '7', '28', '5', '27', '6', '32', '15', '40', '24', '17', '4', '2', '38', '3', '14', '22', '12', '35', '21', '30', '18', '34']\"], [\"([], 11)\", \"['10', '21', '32', '1', '13', '25', '37', '7', '20', '34', '5', '19', '35', '8', '24', '40', '15', '31', '9', '28', '4', '27', '6', '30', '14', '39', '23', '12', '0', '36', '29', '26', '33', '41', '11', '22', '17', '18', '3', '38', '2', '16']\"], [\"([], 12)\", \"['11', '23', '35', '4', '17', '30', '0', '14', '28', '42', '15', '31', '3', '20', '37', '10', '29', '6', '25', '2', '24', '5', '27', '9', '36', '19', '7', '38', '26', '18', '13', '12', '16', '22', '34', '1', '39', '33', '41', '40', '32', '21', '8']\"], [\"([], 13)\", \"['12', '25', '38', '7', '21', '35', '5', '20', '36', '8', '24', '41', '14', '31', '4', '26', '0', '19', '42', '18', '43', '23', '3', '30', '13', '40', '29', '16', '9', '1', '37', '34', '39', '6', '15', '28', '11', '2', '10', '27', '32', '33', '17', '22']\"], [\"([], 14)\", \"['13', '27', '41', '10', '25', '40', '11', '28', '44', '16', '33', '5', '23', '43', '18', '37', '14', '35', '12', '36', '17', '42', '22', '4', '32', '20', '6', '39', '30', '24', '19', '15', '21', '29', '38', '3', '31', '8', '7', '26', '2', '34', '1', '0', '9']\"], [\"([], 15)\", \"['14', '29', '44', '13', '30', '0', '17', '34', '5', '23', '41', '15', '35', '8', '28', '4', '26', '3', '27', '7', '33', '12', '40', '22', '9', '39', '25', '18', '6', '45', '42', '38', '43', '2', '16', '24', '1', '31', '20', '21', '37', '36', '19', '11', '32', '10']\"], [\"([], 16)\", \"['15', '31', '0', '17', '34', '4', '22', '40', '11', '30', '3', '24', '44', '19', '41', '16', '39', '18', '43', '23', '2', '29', '10', '42', '27', '12', '1', '36', '28', '21', '14', '13', '20', '26', '35', '46', '9', '45', '33', '32', '38', '8', '25', '7', '37', '6', '5']\"], [\"([], 17)\", \"['16', '33', '2', '20', '38', '8', '27', '46', '18', '39', '11', '32', '6', '29', '4', '28', '5', '31', '10', '37', '17', '45', '26', '13', '44', '34', '21', '9', '0', '42', '40', '36', '41', '47', '7', '19', '30', '14', '43', '25', '35', '12', '1', '15', '22', '24', '3', '23']\"], [\"([], 18)\", \"['17', '35', '4', '23', '42', '12', '32', '3', '25', '46', '19', '41', '15', '39', '14', '40', '18', '45', '24', '2', '31', '11', '47', '29', '13', '1', '37', '28', '21', '10', '8', '7', '9', '20', '27', '36', '0', '30', '5', '43', '38', '48', '26', '22', '44', '16', '6', '34', '33']\"], [\"([], 19)\", \"['18', '37', '6', '26', '46', '16', '38', '9', '31', '3', '27', '0', '24', '49', '25', '2', '30', '8', '36', '15', '45', '29', '12', '44', '33', '19', '7', '47', '40', '34', '28', '23', '32', '39', '43', '5', '17', '42', '14', '4', '48', '1', '13', '41', '10', '22', '20', '21', '35', '11']\"], [\"([], 3)\", \"['2', '5', '8', '11', '14', '17', '20', '23', '26', '29', '32', '35', '38', '41', '44', '47', '50', '3', '7', '12', '16', '21', '25', '30', '34', '39', '43', '48', '1', '9', '15', '22', '28', '36', '42', '49', '6', '18', '27', '37', '46', '10', '24', '40', '4', '31', '0', '33', '19', '45', '13']\"], [\"([], 4)\", \"['3', '7', '11', '15', '19', '23', '27', '31', '35', '39', '43', '47', '51', '4', '9', '14', '20', '25', '30', '36', '41', '46', '0', '6', '13', '21', '28', '34', '42', '49', '5', '16', '24', '33', '44', '1', '12', '26', '38', '50', '17', '32', '48', '18', '40', '10', '45', '29', '22', '37', '8', '2']\"], [\"([], 5)\", \"['4', '9', '14', '19', '24', '29', '34', '39', '44', '49', '1', '7', '13', '20', '26', '32', '38', '45', '51', '5', '12', '21', '28', '36', '43', '52', '8', '17', '27', '37', '47', '3', '16', '30', '41', '0', '15', '31', '46', '10', '25', '48', '18', '40', '11', '42', '23', '6', '2', '22', '35', '50', '33']\"], [\"([], 6)\", \"['5', '11', '17', '23', '29', '35', '41', '47', '53', '6', '13', '20', '27', '34', '42', '49', '2', '10', '19', '28', '37', '45', '0', '9', '21', '31', '40', '51', '8', '22', '33', '46', '4', '18', '36', '50', '14', '30', '48', '15', '38', '3', '26', '1', '32', '12', '44', '39', '25', '43', '7', '52', '24', '16']\"], [\"([], 7)\", \"['6', '13', '20', '27', '34', '41', '48', '0', '8', '16', '24', '32', '40', '49', '2', '11', '21', '30', '39', '50', '4', '15', '26', '37', '47', '5', '18', '31', '44', '1', '17', '33', '46', '9', '25', '43', '7', '28', '51', '14', '38', '10', '36', '12', '45', '23', '3', '53', '52', '54', '22', '42', '19', '29', '35']\"], [\"([], 8)\", \"['7', '15', '23', '31', '39', '47', '55', '8', '17', '26', '35', '44', '53', '6', '18', '28', '38', '49', '3', '14', '27', '40', '51', '9', '21', '34', '48', '5', '22', '37', '54', '13', '32', '50', '12', '33', '0', '20', '43', '11', '41', '10', '42', '19', '52', '30', '24', '4', '2', '16', '29', '46', '45', '25', '1', '36']\"], [\"([], 9)\", \"['8', '17', '26', '35', '44', '53', '5', '15', '25', '36', '46', '56', '10', '21', '32', '43', '55', '11', '23', '37', '49', '4', '19', '33', '48', '6', '22', '39', '54', '14', '31', '51', '13', '34', '0', '20', '42', '9', '38', '3', '30', '7', '41', '18', '52', '40', '27', '16', '12', '24', '29', '50', '45', '47', '28', '1', '2']\"], [\"([], 10)\", \"['9', '19', '29', '39', '49', '1', '12', '23', '34', '45', '56', '10', '22', '35', '47', '2', '15', '28', '42', '55', '13', '27', '43', '0', '17', '33', '51', '8', '30', '48', '7', '31', '52', '16', '38', '4', '26', '54', '24', '53', '25', '3', '37', '14', '50', '40', '21', '18', '11', '20', '36', '46', '32', '6', '44', '57', '41', '5']\"], [\"([], 11)\", \"['10', '21', '32', '43', '54', '6', '18', '30', '42', '55', '8', '22', '35', '48', '2', '16', '31', '46', '1', '17', '34', '50', '7', '25', '41', '0', '20', '39', '58', '23', '44', '5', '28', '52', '15', '45', '12', '38', '11', '40', '14', '51', '27', '4', '49', '33', '24', '13', '9', '19', '29', '47', '3', '56', '57', '37', '26', '36', '53']\"], [\"([], 12)\", \"['11', '23', '35', '47', '59', '12', '25', '38', '51', '4', '18', '32', '46', '1', '16', '31', '48', '3', '20', '37', '54', '10', '29', '49', '7', '27', '45', '8', '30', '53', '15', '40', '2', '28', '56', '22', '52', '21', '55', '26', '0', '39', '14', '57', '41', '24', '13', '6', '5', '9', '19', '36', '50', '42', '34', '44', '43', '33', '17', '58']\"], [\"([], 13)\", \"['12', '25', '38', '51', '3', '17', '31', '45', '59', '13', '28', '43', '58', '14', '30', '47', '2', '20', '37', '55', '11', '33', '52', '9', '32', '53', '15', '36', '60', '22', '46', '8', '39', '4', '29', '0', '27', '1', '35', '7', '44', '21', '57', '42', '24', '16', '5', '54', '50', '56', '10', '23', '41', '19', '6', '18', '40', '48', '49', '26', '34']\"], [\"([], 14)\", \"['13', '27', '41', '55', '7', '22', '37', '52', '5', '21', '38', '54', '9', '26', '44', '61', '17', '35', '56', '12', '32', '51', '11', '33', '57', '16', '40', '1', '25', '49', '15', '43', '6', '36', '3', '34', '4', '42', '14', '48', '24', '0', '46', '28', '10', '59', '50', '45', '39', '47', '58', '8', '23', '60', '30', '29', '53', '20', '2', '19', '18', '31']\"], [\"([], 15)\", \"['14', '29', '44', '59', '11', '27', '43', '60', '13', '31', '48', '2', '20', '38', '56', '12', '33', '52', '8', '30', '51', '9', '34', '55', '17', '40', '1', '25', '53', '18', '45', '7', '39', '5', '37', '6', '42', '16', '50', '24', '0', '46', '23', '4', '57', '41', '32', '26', '22', '28', '36', '54', '3', '35', '10', '61', '62', '21', '19', '58', '49', '15', '47']\"], [\"([], 16)\", \"['15', '31', '47', '63', '16', '33', '50', '3', '21', '39', '57', '11', '30', '51', '6', '26', '46', '4', '25', '48', '7', '29', '54', '13', '38', '62', '24', '53', '17', '43', '9', '40', '5', '37', '8', '42', '14', '52', '23', '61', '41', '20', '0', '49', '34', '22', '12', '2', '1', '10', '19', '32', '45', '60', '44', '28', '27', '36', '59', '18', '58', '35', '56', '55']\"], [\"([], 17)\", \"['16', '33', '50', '2', '20', '38', '56', '9', '28', '47', '1', '22', '42', '62', '18', '40', '61', '19', '43', '0', '25', '49', '8', '34', '59', '23', '51', '12', '41', '6', '36', '4', '35', '5', '39', '11', '48', '21', '58', '32', '14', '57', '44', '26', '10', '63', '54', '52', '46', '53', '60', '7', '24', '37', '15', '55', '31', '45', '13', '64', '17', '27', '30', '3', '29']\"], [\"([], 18)\", \"['17', '35', '53', '5', '24', '43', '62', '15', '36', '56', '10', '31', '52', '8', '30', '54', '11', '34', '59', '18', '42', '1', '27', '55', '16', '45', '6', '38', '0', '32', '64', '29', '65', '37', '4', '44', '14', '51', '26', '7', '49', '28', '13', '61', '48', '40', '25', '22', '21', '23', '39', '47', '60', '12', '50', '19', '2', '63', '9', '46', '41', '3', '33', '20', '58', '57']\"], [\"([], 19)\", \"['18', '37', '56', '8', '28', '48', '1', '22', '43', '64', '19', '41', '63', '20', '44', '0', '25', '50', '7', '33', '59', '17', '47', '9', '36', '66', '30', '60', '26', '57', '24', '58', '29', '65', '35', '6', '46', '16', '62', '40', '15', '3', '51', '34', '21', '11', '4', '61', '55', '2', '10', '14', '32', '49', '13', '45', '31', '23', '27', '42', '12', '38', '54', '52', '53', '5', '39']\"], [\"([], 3)\", \"['2', '5', '8', '11', '14', '17', '20', '23', '26', '29', '32', '35', '38', '41', '44', '47', '50', '53', '56', '59', '62', '65', '0', '4', '9', '13', '18', '22', '27', '31', '36', '40', '45', '49', '54', '58', '63', '67', '6', '12', '19', '25', '33', '39', '46', '52', '60', '66', '7', '16', '28', '37', '48', '57', '1', '15', '30', '43', '61', '10', '34', '55', '21', '51', '24', '3', '42', '64']\"], [\"([], 4)\", \"['3', '7', '11', '15', '19', '23', '27', '31', '35', '39', '43', '47', '51', '55', '59', '63', '67', '2', '8', '13', '18', '24', '29', '34', '40', '45', '50', '56', '61', '66', '4', '10', '17', '25', '32', '38', '46', '53', '60', '68', '6', '16', '26', '36', '44', '54', '64', '5', '20', '30', '42', '57', '0', '14', '33', '49', '65', '21', '41', '62', '22', '52', '12', '58', '37', '28', '48', '9', '1']\"], [\"([], 5)\", \"['4', '9', '14', '19', '24', '29', '34', '39', '44', '49', '54', '59', '64', '69', '5', '11', '17', '23', '30', '36', '42', '48', '55', '61', '67', '3', '12', '20', '27', '35', '43', '51', '58', '66', '6', '15', '25', '33', '45', '53', '63', '2', '16', '28', '40', '52', '65', '8', '22', '38', '56', '0', '18', '37', '57', '7', '31', '50', '10', '41', '68', '32', '1', '47', '26', '21', '46', '62', '13', '60']\"], [\"([], 6)\", \"['5', '11', '17', '23', '29', '35', '41', '47', '53', '59', '65', '0', '7', '14', '21', '28', '36', '43', '50', '57', '64', '1', '9', '18', '26', '34', '44', '52', '61', '69', '8', '19', '30', '39', '49', '60', '70', '12', '24', '37', '48', '62', '3', '16', '32', '46', '63', '6', '25', '42', '58', '10', '31', '54', '2', '27', '55', '13', '40', '68', '38', '4', '51', '22', '15', '67', '20', '45', '33', '66', '56']\"], [\"([], 7)\", \"['6', '13', '20', '27', '34', '41', '48', '55', '62', '69', '4', '12', '21', '29', '37', '45', '53', '61', '70', '7', '16', '25', '35', '44', '54', '64', '1', '11', '23', '33', '46', '57', '67', '8', '19', '32', '47', '59', '0', '15', '30', '43', '60', '3', '22', '39', '56', '2', '24', '42', '65', '14', '38', '63', '17', '49', '71', '31', '66', '28', '68', '40', '10', '58', '51', '50', '52', '9', '36', '5', '18', '26']\"], [\"([], 8)\", \"['7', '15', '23', '31', '39', '47', '55', '63', '71', '6', '16', '25', '34', '43', '52', '61', '70', '8', '18', '28', '38', '49', '59', '69', '9', '20', '32', '44', '56', '67', '5', '21', '35', '48', '62', '2', '17', '33', '50', '65', '10', '26', '42', '60', '4', '27', '46', '68', '14', '40', '64', '13', '41', '72', '24', '54', '12', '51', '11', '53', '22', '66', '37', '29', '3', '1', '19', '36', '58', '57', '30', '0', '45']\"], [\"([], 9)\", \"['8', '17', '26', '35', '44', '53', '62', '71', '6', '16', '27', '37', '47', '57', '67', '3', '14', '25', '38', '49', '60', '72', '10', '22', '34', '48', '61', '0', '13', '29', '42', '56', '70', '12', '30', '45', '63', '4', '21', '40', '58', '2', '23', '43', '65', '11', '33', '55', '7', '32', '59', '15', '41', '69', '28', '64', '20', '54', '24', '68', '39', '9', '66', '50', '36', '31', '46', '52', '5', '73', '1', '51', '18', '19']\"], [\"([], 10)\", \"['9', '19', '29', '39', '49', '59', '69', '4', '15', '26', '37', '48', '60', '71', '7', '20', '32', '44', '56', '68', '6', '21', '34', '47', '62', '0', '14', '30', '45', '61', '1', '17', '35', '52', '67', '11', '28', '50', '66', '12', '33', '54', '74', '23', '43', '70', '18', '42', '72', '24', '53', '5', '38', '65', '27', '63', '25', '64', '36', '3', '51', '22', '8', '58', '55', '46', '57', '2', '16', '73', '41', '13', '31', '10', '40']\"], [\"([], 11)\", \"['10', '21', '32', '43', '54', '65', '0', '12', '24', '36', '48', '60', '72', '8', '22', '35', '49', '62', '75', '14', '28', '42', '57', '71', '11', '27', '44', '59', '1', '17', '34', '52', '69', '13', '31', '51', '70', '16', '38', '58', '4', '26', '50', '74', '23', '47', '2', '29', '56', '7', '40', '68', '30', '64', '20', '63', '25', '67', '39', '6', '55', '37', '15', '3', '66', '61', '73', '9', '33', '53', '45', '46', '19', '5', '18', '41']\"], [\"([], 12)\", \"['11', '23', '35', '47', '59', '71', '6', '19', '32', '45', '58', '72', '8', '22', '37', '51', '65', '2', '17', '33', '49', '64', '3', '20', '38', '54', '70', '12', '29', '48', '67', '9', '28', '50', '69', '14', '36', '57', '1', '26', '52', '75', '24', '46', '76', '27', '56', '7', '40', '68', '25', '61', '16', '55', '15', '60', '21', '66', '39', '5', '62', '41', '18', '4', '74', '73', '0', '13', '34', '53', '42', '31', '44', '43', '30', '10', '63']\"], [\"([], 13)\", \"['12', '25', '38', '51', '64', '77', '13', '27', '41', '55', '69', '5', '20', '35', '50', '66', '3', '19', '36', '53', '70', '8', '26', '44', '61', '1', '21', '40', '59', '0', '22', '43', '63', '7', '30', '52', '74', '18', '46', '71', '16', '45', '72', '23', '49', '2', '32', '62', '15', '54', '9', '42', '4', '39', '6', '48', '14', '60', '31', '76', '58', '34', '24', '10', '73', '68', '75', '17', '33', '57', '29', '11', '28', '56', '65', '67', '37', '47']\"], [\"([], 14)\", \"['13', '27', '41', '55', '69', '4', '19', '34', '49', '64', '0', '16', '32', '48', '65', '2', '20', '37', '54', '72', '10', '29', '47', '67', '7', '26', '46', '68', '9', '31', '53', '75', '18', '42', '63', '11', '36', '60', '6', '35', '61', '12', '40', '71', '22', '52', '3', '39', '74', '28', '66', '24', '62', '25', '73', '38', '1', '51', '21', '77', '56', '33', '15', '5', '76', '70', '78', '14', '30', '50', '17', '58', '57', '8', '45', '23', '44', '43', '59']\"], [\"([], 15)\", \"['14', '29', '44', '59', '74', '9', '25', '41', '57', '73', '10', '27', '45', '62', '79', '17', '35', '53', '71', '11', '31', '50', '69', '8', '32', '52', '75', '16', '38', '61', '3', '26', '51', '77', '21', '47', '72', '20', '48', '78', '24', '56', '5', '37', '67', '22', '58', '12', '46', '4', '42', '2', '43', '7', '55', '19', '66', '36', '13', '65', '40', '28', '6', '76', '68', '64', '70', '1', '23', '39', '0', '49', '33', '34', '63', '60', '30', '18', '54', '15']\"], [\"([], 16)\", \"['15', '31', '47', '63', '79', '14', '32', '49', '66', '2', '20', '38', '56', '74', '11', '30', '51', '70', '8', '28', '50', '71', '10', '34', '55', '77', '19', '42', '65', '7', '35', '59', '3', '27', '57', '1', '29', '60', '6', '39', '68', '18', '48', '0', '37', '72', '24', '62', '21', '58', '17', '61', '23', '69', '36', '80', '46', '22', '76', '52', '33', '12', '78', '67', '54', '53', '64', '75', '9', '26', '45', '25', '5', '4', '16', '44', '73', '43', '13', '41', '40']\"], [\"([], 17)\", \"['16', '33', '50', '67', '2', '20', '38', '56', '74', '10', '29', '48', '68', '5', '25', '45', '65', '4', '26', '47', '70', '9', '32', '55', '78', '19', '43', '69', '12', '37', '62', '7', '35', '61', '8', '39', '66', '15', '46', '77', '27', '59', '13', '49', '81', '36', '75', '30', '72', '28', '73', '34', '80', '44', '11', '58', '24', '1', '57', '40', '17', '79', '63', '53', '51', '42', '52', '60', '76', '14', '31', '3', '54', '23', '41', '0', '64', '6', '18', '22', '71', '21']\"], [\"([], 18)\", \"['17', '35', '53', '71', '6', '25', '44', '63', '82', '19', '39', '59', '79', '16', '38', '60', '81', '21', '43', '66', '5', '29', '52', '76', '18', '45', '69', '11', '37', '65', '9', '36', '67', '12', '42', '73', '22', '51', '1', '32', '68', '20', '55', '7', '47', '0', '40', '78', '34', '80', '46', '4', '54', '15', '64', '31', '8', '61', '33', '14', '75', '58', '49', '30', '27', '26', '28', '48', '57', '74', '13', '62', '23', '2', '77', '10', '56', '50', '3', '41', '24', '72', '70']\"], [\"([], 19)\", \"['18', '37', '56', '75', '10', '30', '50', '70', '6', '27', '48', '69', '7', '29', '52', '74', '13', '36', '60', '83', '23', '47', '73', '15', '41', '66', '9', '38', '64', '8', '39', '67', '14', '44', '77', '22', '55', '2', '35', '72', '24', '59', '12', '51', '3', '45', '0', '43', '1', '49', '11', '58', '21', '71', '34', '5', '63', '33', '17', '78', '57', '40', '26', '19', '4', '82', '16', '25', '32', '54', '76', '31', '68', '53', '42', '46', '65', '28', '61', '81', '79', '80', '20', '62']\"], [\"([], 3)\", \"['2', '5', '8', '11', '14', '17', '20', '23', '26', '29', '32', '35', '38', '41', '44', '47', '50', '53', '56', '59', '62', '65', '68', '71', '74', '77', '80', '83', '1', '6', '10', '15', '19', '24', '28', '33', '37', '42', '46', '51', '55', '60', '64', '69', '73', '78', '82', '3', '9', '16', '22', '30', '36', '43', '49', '57', '63', '70', '76', '84', '7', '18', '27', '39', '48', '58', '67', '79', '4', '21', '34', '52', '66', '81', '13', '40', '61', '0', '31', '72', '25', '75', '54', '12', '45']\"], [\"([], 4)\", \"['3', '7', '11', '15', '19', '23', '27', '31', '35', '39', '43', '47', '51', '55', '59', '63', '67', '71', '75', '79', '83', '1', '6', '12', '17', '22', '28', '33', '38', '44', '49', '54', '60', '65', '70', '76', '81', '0', '8', '14', '21', '29', '36', '42', '50', '57', '64', '72', '78', '85', '9', '18', '26', '37', '46', '56', '66', '74', '84', '10', '24', '34', '48', '61', '73', '2', '16', '32', '52', '68', '82', '20', '41', '62', '4', '30', '58', '5', '45', '80', '53', '25', '13', '40', '77', '69']\"], [\"([], 5)\", \"['4', '9', '14', '19', '24', '29', '34', '39', '44', '49', '54', '59', '64', '69', '74', '79', '84', '2', '8', '15', '21', '27', '33', '40', '46', '52', '58', '65', '71', '77', '83', '3', '11', '18', '26', '35', '42', '50', '57', '66', '73', '81', '1', '12', '22', '31', '41', '51', '61', '70', '80', '5', '16', '28', '38', '53', '63', '76', '0', '17', '32', '47', '62', '78', '7', '25', '45', '67', '85', '20', '43', '68', '6', '36', '60', '10', '48', '82', '37', '86', '56', '30', '23', '55', '75', '13', '72']\"], [\"([], 6)\", \"['5', '11', '17', '23', '29', '35', '41', '47', '53', '59', '65', '71', '77', '83', '1', '8', '15', '22', '30', '37', '44', '51', '58', '66', '73', '80', '87', '7', '16', '25', '33', '42', '50', '60', '68', '76', '85', '6', '18', '27', '38', '48', '57', '69', '79', '2', '13', '26', '39', '52', '63', '75', '0', '14', '31', '45', '61', '74', '3', '20', '36', '55', '72', '4', '24', '46', '67', '86', '28', '54', '81', '19', '49', '82', '32', '64', '12', '62', '21', '78', '43', '34', '10', '40', '70', '56', '9', '84']\"], [\"([], 7)\", \"['6', '13', '20', '27', '34', '41', '48', '55', '62', '69', '76', '83', '1', '9', '17', '25', '33', '42', '50', '58', '66', '74', '82', '2', '11', '21', '30', '39', '49', '59', '68', '78', '87', '8', '19', '31', '43', '53', '64', '75', '86', '10', '23', '36', '47', '61', '73', '88', '14', '28', '44', '57', '72', '0', '16', '35', '52', '70', '85', '18', '38', '60', '80', '12', '37', '63', '84', '24', '51', '79', '22', '54', '3', '32', '71', '26', '67', '29', '81', '46', '15', '5', '4', '7', '45', '77', '40', '56', '65']\"], [\"([], 8)\", \"['7', '15', '23', '31', '39', '47', '55', '63', '71', '79', '87', '5', '14', '24', '33', '42', '51', '60', '69', '78', '88', '8', '18', '28', '38', '49', '59', '70', '81', '1', '12', '25', '36', '48', '61', '73', '84', '6', '20', '34', '46', '62', '75', '89', '13', '29', '44', '58', '76', '2', '19', '37', '54', '72', '0', '21', '41', '64', '82', '11', '35', '57', '83', '17', '45', '68', '9', '40', '67', '10', '50', '80', '27', '66', '22', '65', '26', '77', '43', '4', '85', '56', '53', '74', '3', '32', '30', '86', '52', '16']\"], [\"([], 9)\", \"['8', '17', '26', '35', '44', '53', '62', '71', '80', '89', '7', '18', '28', '38', '48', '58', '68', '78', '88', '9', '20', '31', '42', '54', '65', '76', '87', '10', '22', '34', '47', '60', '73', '85', '6', '23', '37', '51', '66', '81', '3', '19', '36', '52', '69', '84', '12', '29', '46', '64', '83', '13', '32', '55', '74', '2', '25', '49', '72', '4', '30', '57', '82', '16', '45', '77', '15', '50', '86', '27', '63', '11', '56', '1', '43', '5', '61', '24', '79', '59', '39', '21', '14', '33', '41', '75', '67', '70', '40', '90', '0']\"], [\"([], 10)\", \"['9', '19', '29', '39', '49', '59', '69', '79', '89', '7', '18', '30', '41', '52', '63', '74', '85', '4', '16', '28', '42', '54', '66', '78', '91', '12', '25', '38', '53', '67', '81', '2', '17', '33', '47', '62', '77', '1', '20', '35', '51', '70', '86', '11', '31', '48', '68', '87', '14', '36', '57', '76', '6', '27', '55', '75', '8', '34', '60', '84', '22', '46', '80', '15', '45', '82', '23', '58', '0', '40', '73', '26', '71', '24', '72', '37', '90', '56', '21', '3', '65', '61', '50', '64', '88', '13', '83', '44', '10', '32', '5', '43']\"], [\"([], 11)\", \"['10', '21', '32', '43', '54', '65', '76', '87', '5', '17', '29', '41', '53', '66', '78', '90', '9', '23', '36', '49', '62', '75', '89', '11', '25', '39', '55', '69', '83', '4', '20', '37', '52', '70', '85', '8', '27', '45', '61', '80', '3', '24', '44', '63', '82', '12', '31', '51', '73', '1', '26', '48', '72', '2', '30', '57', '81', '15', '42', '71', '7', '38', '68', '13', '46', '79', '19', '59', '0', '47', '88', '35', '86', '40', '92', '58', '18', '77', '56', '28', '14', '91', '84', '6', '22', '50', '74', '64', '67', '34', '16', '33', '60']\"], [\"([], 12)\", \"['11', '23', '35', '47', '59', '71', '83', '1', '14', '27', '40', '53', '66', '79', '92', '12', '26', '41', '55', '69', '84', '4', '19', '34', '50', '65', '81', '3', '20', '37', '54', '72', '88', '10', '30', '48', '67', '86', '9', '31', '51', '73', '91', '18', '42', '62', '85', '15', '38', '61', '87', '17', '44', '70', '2', '29', '58', '89', '24', '56', '82', '25', '60', '0', '36', '75', '16', '57', '6', '46', '93', '45', '5', '52', '13', '74', '33', '7', '76', '49', '32', '22', '21', '28', '43', '68', '90', '77', '64', '80', '78', '63', '39', '8']\"], [\"([], 13)\", \"['12', '25', '38', '51', '64', '77', '90', '8', '22', '36', '50', '65', '79', '93', '13', '28', '43', '58', '73', '88', '9', '26', '42', '59', '75', '92', '15', '32', '49', '68', '85', '7', '29', '47', '67', '86', '11', '33', '54', '74', '1', '21', '45', '69', '91', '19', '44', '70', '0', '24', '53', '80', '10', '39', '66', '3', '34', '62', '2', '35', '71', '6', '46', '82', '23', '61', '14', '55', '94', '48', '89', '52', '5', '60', '20', '81', '41', '18', '84', '72', '56', '37', '31', '40', '63', '83', '17', '78', '57', '76', '16', '27', '30', '87', '4']\"], [\"([], 14)\", \"['13', '27', '41', '55', '69', '83', '1', '16', '31', '46', '61', '76', '91', '10', '26', '43', '59', '75', '92', '12', '30', '48', '65', '82', '4', '22', '40', '60', '79', '2', '21', '42', '63', '84', '7', '29', '51', '72', '94', '20', '45', '68', '90', '19', '47', '71', '0', '28', '54', '81', '14', '39', '73', '6', '36', '67', '5', '37', '74', '11', '50', '86', '25', '64', '9', '53', '93', '44', '88', '38', '89', '52', '8', '62', '24', '85', '57', '32', '3', '78', '66', '56', '49', '58', '77', '95', '23', '80', '34', '33', '70', '18', '87', '17', '15', '35']\"], [\"([], 15)\", \"['14', '29', '44', '59', '74', '89', '7', '23', '39', '55', '71', '87', '6', '24', '41', '58', '76', '93', '13', '32', '50', '68', '86', '9', '28', '48', '67', '88', '11', '33', '53', '75', '96', '20', '43', '65', '90', '16', '38', '63', '85', '17', '42', '69', '95', '25', '52', '80', '10', '40', '72', '3', '35', '66', '2', '36', '73', '8', '47', '82', '22', '61', '4', '49', '91', '34', '81', '30', '79', '31', '84', '46', '1', '60', '21', '92', '57', '27', '12', '83', '70', '62', '56', '64', '78', '5', '26', '77', '37', '18', '19', '54', '51', '15', '0', '45', '94']\"], [\"([], 16)\", \"['15', '31', '47', '63', '79', '95', '13', '30', '48', '65', '82', '1', '19', '37', '55', '73', '91', '11', '32', '51', '70', '89', '10', '33', '53', '74', '94', '18', '40', '61', '84', '7', '29', '56', '78', '4', '27', '54', '80', '6', '35', '60', '87', '17', '44', '72', '3', '36', '66', '96', '26', '62', '93', '28', '67', '2', '41', '76', '16', '52', '92', '39', '81', '23', '69', '20', '64', '14', '68', '22', '77', '38', '90', '50', '21', '86', '57', '34', '8', '88', '75', '59', '58', '71', '85', '5', '25', '49', '24', '0', '97', '12', '46', '83', '45', '9', '43', '42']\"], [\"([], 17)\", \"['16', '33', '50', '67', '84', '2', '20', '38', '56', '74', '92', '11', '30', '49', '69', '88', '8', '28', '48', '70', '90', '12', '34', '55', '77', '98', '22', '44', '66', '91', '15', '40', '63', '87', '14', '41', '65', '94', '21', '47', '76', '4', '32', '61', '93', '24', '54', '83', '18', '52', '82', '19', '57', '89', '27', '64', '3', '42', '80', '25', '68', '7', '53', '0', '45', '96', '43', '97', '51', '6', '62', '23', '79', '39', '10', '78', '58', '29', '5', '85', '73', '71', '60', '72', '81', '1', '26', '46', '13', '75', '37', '59', '9', '86', '17', '31', '36', '95', '35']\"]]", 
      "solution": "def izstevaj(otroci, korak):\n    # v spremenljivki izstevani imamo shranjenega naslednjega otroka, ki bo\n    # \u0161el po gobe\n    izstevani = 0\n    while otroci:\n        izstevani = (izstevani + korak - 1) % (len(otroci))\n        # iz seznama poberemo iz\u0161tevanega otroka in ga vrnemo\n        yield otroci.pop(izstevani)", 
      "problem": 58, 
      "validation": "Check.equal(\"list(izstevaj(['Ana', 'Bine', 'Cene', 'Darko', 'Eva', 'Ferenc'], 4))\", ['Darko', 'Bine', 'Ana', 'Cene', 'Ferenc', 'Eva'])\nCheck.equal(\"list(izstevaj(['Ana', 'Bine', 'Cene', 'Darko', 'Eva', 'Ferenc'], 3))\", ['Cene', 'Ferenc', 'Darko', 'Bine', 'Eva', 'Ana'])\nfor i in range(100):\n    otroci = [str(j) for j in range(i)]\n    korak = i % 17 + 3\n    Check.challenge(list(izstevaj(otroci, korak)), (otroci, korak))"
    }
  }, 
  {
    "pk": 366, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavi funkcijo `kocka`, ki simulira met kocke pri igri \u010dlovek ne jezi se.\r\nPri tem si lahko pomaga\u0161 s funkcijo `randint` iz knji\u017enice `random`.\r\nFunkcija naj vra\u010da cela \u0161tevila.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "def kocka():\r\n    return random.randint(1,6)", 
      "problem": 127, 
      "validation": "for i in range(6):\r\nCheck.equal('1 <= kocka() <= 6', True)\r\nCheck.equal('isinstance(kocka(),int)',True)\r\nCheck.equal('nakljucna(kocka)',[1, 6, 5, 2, 3, 3, 4, 5, 1, 1])"
    }
  }, 
  {
    "pk": 842, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Napi\u0161ite funkcijo `for.zanka.je.slaba()`, ki na zaslon stokrat izpi\u0161e\nniz `\"For zanka je slaba\"`. Pozor, ta naloga ni opremljena s testi, zato\nmorate sami preveriti, da deluje pravilno.", 
      "timestamp": "2012-11-05 12:01:20", 
      "challenge": "[]", 
      "solution": "for.zanka.je.slaba <- function() {\n  for(i in 1 : 100)\n    cat(\"For zanka je slaba.\\n\")\n}", 
      "problem": 277, 
      "validation": ""
    }
  }, 
  {
    "pk": 284, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavi preprosto aplikacijo Semafor, ki ima tri gumbe \"zelena\",\n\"rumena\" in \"rde\u010da\" ter eno podro\u010dje, ki se obarva s primerno barvo,\nko pritisnemo na dani gumb, [glej video](http://vimeo.com/34579738):\n\n<p><center><iframe src=\"http://player.vimeo.com/video/34579738?title=0&amp;byline=0&amp;portrait=0\" width=\"402\" height=\"226\" frameborder=\"0\" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe></center></p>\n", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "from tkinter import *\n\nclass Semafor():\n    def __init__(self, master):\n        '''V okno master postavi tri gumbe in podro\u010dje za barvo.'''\n        \n        gumb_zelena = Button(master, text=\"Zelena\", command=self.nastavi_zelena)\n        gumb_zelena.grid(row=0, column=0)\n\n        gumb_rumena = Button(master, text=\"Rumena\", command=self.nastavi_rumena)\n        gumb_rumena.grid(row=0, column=1)\n\n        gumb_rdeca = Button(master, text=\"Rde\u010da\", command=self.nastavi_rdeca)\n        gumb_rdeca.grid(row=0, column=2)\n\n        self.canvas = Canvas(master, width=300, height=100)\n        self.canvas.grid(row=1, column=0, columnspan=3)\n\n\n    def nastavi(self, barva):\n        self.canvas.delete(ALL)\n        self.canvas.create_rectangle(0, 0, 300, 100, fill=barva)\n\n    def nastavi_zelena(self): self.nastavi(\"green\")\n\n    def nastavi_rumena(self): self.nastavi(\"yellow\")\n\n    def nastavi_rdeca(self): self.nastavi(\"red\")\n\nroot = Tk()\naplikacija = Semafor(root)\nroot.mainloop()", 
      "problem": 89, 
      "validation": ""
    }
  }, 
  {
    "pk": 286, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite preprost pretvornik iz evrov v dolarje, kot to prikazuje\n[video](http://vimeo.com/34579993):\n\n<center><iframe src=\"http://player.vimeo.com/video/34579993?title=0&amp;byline=0&amp;portrait=0\" width=\"402\" height=\"85\" frameborder=\"0\" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe></center>", 
      "timestamp": "2013-01-18 13:52:54", 
      "challenge": "[]", 
      "solution": "from tkinter import *\n\nRAZMERJE = 1.293 # Razmerje 2012-01-04\n\nclass Pretvornik():\n    def __init__(self, master):\n        self.euro = DoubleVar(master, value=None)\n        euroPolje = Entry(master, textvariable=self.euro)\n        euroPolje.grid(row = 0, column = 0)\n        znakEuro = Label(text = \" \u20ac = \")\n        znakEuro.grid(row = 0, column = 1)\n\n        self.dolar = DoubleVar(master, value=None)\n        dolarPolje = Entry(master, textvariable=self.dolar)\n        dolarPolje.grid(row = 0, column = 2)\n        znakDolar = Label(text = \" $\")\n        znakDolar.grid(row = 0, column = 3)\n\n        gumbPretvori = Button(master, text = \"Pretvori\", command = self.pretvori)\n        gumbPretvori.grid(row=0, column = 4)\n\n    def pretvori(self):\n        x = self.euro.get()\n        self.dolar.set(RAZMERJE * x)\n\nroot = Tk()\naplikacija = Pretvornik(root)\nroot.mainloop()", 
      "problem": 91, 
      "validation": ""
    }
  }, 
  {
    "pk": 533, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite metodo `poisciPot(graf, zacetek, konec)`, ki v danem grafu\nvrne poljubno pot (seznam povezav) med to\u010dkama `zacetek` in `konec`. \u010ce\ntake poti ni, naj metoda vrne `None`.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "class Omrezje(Omrezje):\n    def poisciPot(omrezje, zacetek, konec, obiskane=set()):\n        if zacetek == konec:\n            return []\n        for p in omrezje.povezave[zacetek]:\n            obiskane = obiskane.union({zacetek})\n            z, kap, tok, k = omrezje.tok[p]\n            if z == zacetek and kap > 0 and k not in obiskane:\n                pot = omrezje.poisciPot(k, konec, obiskane)\n                if pot is not None: return pot + [(p, True)]\n            elif k == zacetek and tok > 0 and z not in obiskane:\n                pot = omrezje.poisciPot(z, konec, obiskane)\n                if pot is not None: return pot + [(p, False)]\n        return None", 
      "problem": 175, 
      "validation": ""
    }
  }, 
  {
    "pk": 713, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `naslednjiClen(v, x, n)`, ki iz $(n-1)$-tega \u010dlena\n$v$ izra\u010duna naslednji \u010dlen. Z drugimi besedami, $v=x^{n-1}/(n-1)!$,\nfunkcija pa vrne naslednji \u010dlen v vrsti. \u010ce je $n$ enak 0, naj\nfunkcija vrne 0.", 
      "timestamp": "2012-06-11 15:40:13", 
      "challenge": "[[\"(0.4811715481171548, 1.0486322188449848, 65)\", \"0.007763\"], [\"(1.302649930264993, 2.838905775075988, 11)\", \"0.336191\"], [\"(0.18828451882845187, 0.41033434650455924, 1)\", \"0.07726\"], [\"(0.8758716875871687, 1.9088145896656534, 58)\", \"0.028825\"], [\"(1.2789400278940029, 2.7872340425531914, 4)\", \"0.891176\"], [\"(0.6834030683403068, 1.4893617021276595, 36)\", \"0.028273\"], [\"(0.11576011157601115, 0.25227963525835867, 64)\", \"0.000456\"], [\"(0.3124128312412831, 0.6808510638297872, 45)\", \"0.004727\"], [\"(0.001394700139470014, 0.00303951367781155, 11)\", \"0.0\"], [\"(1.0125523012552302, 2.2066869300911853, 34)\", \"0.065717\"], [\"(1.1701534170153418, 2.5501519756838906, 66)\", \"0.045213\"], [\"(1.0878661087866108, 2.370820668693009, 59)\", \"0.043714\"], [\"(0.26359832635983266, 0.574468085106383, 38)\", \"0.003985\"], [\"(1.0069735006973501, 2.1945288753799392, 67)\", \"0.032983\"], [\"(0.19386331938633194, 0.42249240121580545, 76)\", \"0.001078\"], [\"(1.1603905160390515, 2.5288753799392096, 62)\", \"0.04733\"], [\"(0.22454672245467225, 0.48936170212765956, 47)\", \"0.002338\"], [\"(0.5104602510460251, 1.1124620060790273, 23)\", \"0.02469\"], [\"(1.3152022315202232, 2.8662613981762917, 65)\", \"0.057996\"], [\"(0.07252440725244072, 0.1580547112462006, 71)\", \"0.000161\"], [\"(0.6429567642956764, 1.4012158054711246, 27)\", \"0.033367\"], [\"(0.37099023709902373, 0.8085106382978723, 57)\", \"0.005262\"], [\"(0.3500697350069735, 0.7629179331306991, 29)\", \"0.009209\"], [\"(1.2496513249651324, 2.723404255319149, 41)\", \"0.083007\"], [\"(0.6820083682008368, 1.486322188449848, 55)\", \"0.018431\"], [\"(0.2203626220362622, 0.48024316109422494, 71)\", \"0.001491\"], [\"(0.03207810320781032, 0.06990881458966565, 27)\", \"8.3e-05\"], [\"(0.09483960948396095, 0.2066869300911854, 69)\", \"0.000284\"], [\"(0.3193863319386332, 0.6960486322188449, 58)\", \"0.003833\"], [\"(1.2635983263598327, 2.7537993920972643, 32)\", \"0.108741\"], [\"(0.5843793584379359, 1.2735562310030395, 25)\", \"0.02977\"], [\"(0.7921896792189679, 1.7264437689969605, 23)\", \"0.059464\"], [\"(0.04602510460251046, 0.10030395136778116, 9)\", \"0.000513\"], [\"(0.6555090655509066, 1.4285714285714286, 19)\", \"0.049286\"], [\"(1.1924686192468619, 2.5987841945288754, 71)\", \"0.043647\"], [\"(1.1101813110181311, 2.419452887537994, 35)\", \"0.076744\"], [\"(0.5090655509065551, 1.1094224924012157, 49)\", \"0.011526\"], [\"(0.504881450488145, 1.1003039513677813, 53)\", \"0.010482\"], [\"(0.1603905160390516, 0.3495440729483283, 2)\", \"0.028032\"], [\"(1.1603905160390515, 2.5288753799392096, 36)\", \"0.081513\"], [\"(0.5592747559274756, 1.2188449848024316, 10)\", \"0.068167\"], [\"(0.7559274755927475, 1.6474164133738602, 38)\", \"0.032772\"], [\"(1.3375174337517435, 2.9148936170212765, 61)\", \"0.063913\"], [\"(1.099023709902371, 2.3951367781155017, 29)\", \"0.090769\"], [\"(0.20781032078103207, 0.45288753799392095, 54)\", \"0.001743\"], [\"(0.9735006973500697, 2.121580547112462, 47)\", \"0.043944\"], [\"(0.1603905160390516, 0.3495440729483283, 10)\", \"0.005606\"], [\"(0.4686192468619247, 1.0212765957446808, 14)\", \"0.034185\"], [\"(0.9832635983263598, 2.142857142857143, 8)\", \"0.263374\"], [\"(0.6108786610878661, 1.331306990881459, 23)\", \"0.035359\"], [\"(0.15481171548117154, 0.3373860182370821, 76)\", \"0.000687\"], [\"(0.6080892608089261, 1.325227963525836, 51)\", \"0.015801\"], [\"(1.0781032078103208, 2.349544072948328, 20)\", \"0.126653\"], [\"(0.39330543933054396, 0.8571428571428571, 59)\", \"0.005714\"], [\"(0.0599721059972106, 0.13069908814589665, 26)\", \"0.000301\"], [\"(0.5913528591352859, 1.2887537993920972, 62)\", \"0.012292\"], [\"(1.306834030683403, 2.8480243161094223, 17)\", \"0.218935\"], [\"(0.4100418410041841, 0.8936170212765957, 57)\", \"0.006428\"], [\"(0.06555090655509066, 0.14285714285714285, 54)\", \"0.000173\"], [\"(0.18410041841004185, 0.4012158054711246, 14)\", \"0.005276\"], [\"(1.312412831241283, 2.860182370820669, 73)\", \"0.051421\"], [\"(0.21478382147838215, 0.46808510638297873, 22)\", \"0.00457\"], [\"(0.5620641562064156, 1.2249240121580547, 25)\", \"0.027539\"], [\"(1.0822873082287308, 2.358662613981763, 58)\", \"0.044013\"], [\"(0.001394700139470014, 0.00303951367781155, 29)\", \"0.0\"], [\"(0.5774058577405857, 1.2583586626139818, 68)\", \"0.010685\"], [\"(0.6569037656903766, 1.43161094224924, 61)\", \"0.015417\"], [\"(0.5188284518828452, 1.1306990881458967, 19)\", \"0.030876\"], [\"(0.799163179916318, 1.7416413373860182, 70)\", \"0.019884\"], [\"(0.02510460251046025, 0.0547112462006079, 53)\", \"2.6e-05\"], [\"(0.29428172942817293, 0.6413373860182371, 64)\", \"0.002949\"], [\"(0.7140864714086471, 1.5562310030395137, 76)\", \"0.014622\"], [\"(0.24686192468619247, 0.5379939209726444, 36)\", \"0.003689\"], [\"(1.1799163179916319, 2.5714285714285716, 33)\", \"0.091942\"], [\"(1.3375174337517435, 2.9148936170212765, 38)\", \"0.102598\"], [\"(0.7531380753138075, 1.641337386018237, 72)\", \"0.017169\"], [\"(0.6875871687587168, 1.4984802431610942, 0)\", \"0\"], [\"(1.308228730822873, 2.851063829787234, 40)\", \"0.093246\"], [\"(0.0041841004184100415, 0.00911854103343465, 18)\", \"2e-06\"], [\"(0.06694560669456066, 0.1458966565349544, 48)\", \"0.000203\"], [\"(0.1799163179916318, 0.39209726443769, 71)\", \"0.000994\"], [\"(1.2803347280334727, 2.790273556231003, 56)\", \"0.063794\"], [\"(0.4895397489539749, 1.0668693009118542, 35)\", \"0.014922\"], [\"(1.3556485355648535, 2.954407294832827, 67)\", \"0.059778\"], [\"(0.9776847977684798, 2.1306990881458967, 56)\", \"0.037199\"], [\"(0.2482566248256625, 0.541033434650456, 43)\", \"0.003124\"], [\"(1.3430962343096233, 2.927051671732523, 2)\", \"1.965656\"], [\"(0.8926080892608089, 1.9452887537993921, 69)\", \"0.025165\"], [\"(0.793584379358438, 1.7294832826747721, 25)\", \"0.0549\"], [\"(0.7670850767085077, 1.6717325227963526, 73)\", \"0.017567\"], [\"(0.3110181311018131, 0.6778115501519757, 16)\", \"0.013176\"], [\"(0.5076708507670851, 1.1063829787234043, 17)\", \"0.03304\"], [\"(0.5202231520223152, 1.1337386018237081, 49)\", \"0.012037\"], [\"(1.297071129707113, 2.8267477203647418, 2)\", \"1.833246\"], [\"(0.8521617852161785, 1.8571428571428572, 76)\", \"0.020824\"], [\"(1.2608089260808926, 2.7477203647416415, 71)\", \"0.048794\"], [\"(0.0794979079497908, 0.17325227963525835, 30)\", \"0.000459\"], [\"(0.06415620641562064, 0.1398176291793313, 27)\", \"0.000332\"], [\"(0.6680613668061367, 1.4559270516717324, 42)\", \"0.023158\"], [\"(0.22873082287308227, 0.49848024316109424, 8)\", \"0.014252\"], [\"(0.15202231520223153, 0.331306990881459, 69)\", \"0.00073\"]]", 
      "solution": "def naslednjiClen(v, x, n):\n    if n==0:\n        return 0\n    return v*x/n", 
      "problem": 227, 
      "validation": "Check.equal(\"naslednjiClen(1,1,1)\", 1)\nCheck.equal(\"naslednjiClen(1,1,2)\", 0.5)\nCheck.equal(\"naslednjiClen(0.5,1,3)\",0.16666666666666666)\n\n_rng=[63112345]\nfor _i in range(100): _rng.append((_rng[-1]*1103515245+12345)%2**32)\nfor _x in _rng:\n    _v = ((_x%1000)/717, (_x%1000)/329, _x%77)\n    Check.challenge(naslednjiClen(*_v),_v)"
    }
  }, 
  {
    "pk": 327, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Napi\u0161ite funkcijo `vsotaPotenc(n, k)`, ki izra\u010duna vsoto\n   $$1^k + 2^k + ... + n^k$$", 
      "timestamp": "2012-03-14 09:53:33", 
      "challenge": "[]", 
      "solution": "def vsotaPotenc(n, k):\n    vsota = 0\n    i = 0\n    while i < n:\n        i += 1\n        vsota += i ** k\n    return vsota", 
      "problem": 109, 
      "validation": "Check.equal('vsotaPotenc(3, 4)', 98)\nCheck.equal('vsotaPotenc(4, 3)', 100)\nCheck.equal('vsotaPotenc(6, 6)', 67171)"
    }
  }, 
  {
    "pk": 330, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `priblizekKorena(n, k)`, ki vrne `k`-ti pribli\u017eek\nkvadratnega korena \u0161tevila `n`.", 
      "timestamp": "2012-03-14 09:54:10", 
      "challenge": "[]", 
      "solution": "def priblizekKorena(n, k):\n    x = n / 2\n    i = 0\n    while i < k:\n        x = (x + n / x) / 2\n        i += 1\n    return x", 
      "problem": 110, 
      "validation": "Check.equal('priblizekKorena(2, 3)', 1.4142156862745097)\nCheck.equal('priblizekKorena(3, 4)', 1.7320508075688772)\nCheck.equal('priblizekKorena(100, 4)', 10.030495203889796)"
    }
  }, 
  {
    "pk": 106, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `identiteta(n)`, ki vrne identi\u010dno matriko\ndimenzije `n` \u00d7 `n`.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"None\", \"[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]]\"]]", 
      "solution": "def identiteta(n):\n    return [[1 if i == j else 0 for i in range(n)] for j in range(n)]", 
      "problem": 41, 
      "validation": "Check.equal('identiteta(1)', [[1]])\nCheck.equal('identiteta(2)', [[1, 0], [0, 1]])\nCheck.equal('identiteta(4)', [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]])\nCheck.challenge(identiteta(25))"
    }
  }, 
  {
    "pk": 344, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `podvoji(s)`, ki iz seznama `s` sestavi in vrne\r\nnov seznam, v katerem je za vsakim elementom vrinjena \u0161e njegova\r\nkopija.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "def podvoji(s):\r\n    podvojen = []\r\n    for x in s:\r\n        podvojen += [x, x]\r\n    return podvojen", 
      "problem": 118, 
      "validation": "Check.equal('podvoji([1, 2, 3])', [1, 1, 2, 2, 3, 3])\r\nCheck.equal('podvoji([])', [])\r\nCheck.equal('podvoji([1, True, 3.5, 7, [1, 2], 3 - 2j])', [1, 1, True, True, 3.5, 3.5, 7, 7, [1, 2], [1, 2], (3-2j), (3-2j)])"
    }
  }, 
  {
    "pk": 285, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavi preprosto aplikacijo za prostoro\u010dno risanje,\n[glej video](http://vimeo.com/34579801):\n\n<center><iframe src=\"http://player.vimeo.com/video/34579801?title=0&amp;byline=0&amp;portrait=0\" width=\"402\" height=\"432\" frameborder=\"0\" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe></center>", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "from tkinter import *\n\nclass Risalnik():\n    def __init__(self, master):\n        self.tocka = None\n\n        self.canvas = Canvas(master, width=300, height=300)\n        self.canvas.grid(row=0, column=0)\n        \n        self.canvas.bind(\"<B1-Motion>\", self.crta)\n        self.canvas.bind(\"<Button-1>\", self.zacni)\n\n        menu = Menu(master)\n        master.config(menu=menu)\n        menu.add_command(label=\"Kon\u010daj\", command=master.destroy)\n        menu.add_command(label=\"Po\u010disti\", command=self.pocisti)\n\n    def crta(self, event):\n        if self.tocka is not None:\n            (x,y) = self.tocka\n            self.canvas.create_line(x, y, event.x, event.y)\n        self.tocka = (event.x, event.y)\n\n    def zacni(self, event):\n        self.tocka = (event.x, event.y)\n\n    def pocisti(self):\n        self.tocka = None\n        self.canvas.delete(ALL)\n\nroot = Tk()\naplikacija = Risalnik(root)\nroot.mainloop()", 
      "problem": 90, 
      "validation": ""
    }
  }, 
  {
    "pk": 626, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "V seznamu imamo podatke o padavinah in izhlapevanju po posameznih\r\ndnevih. Pozitivna \u0161tevila predstavljajo koli\u010dino de\u017eja (v mm),\r\nnegativna pa koli\u010dino izhlapele vode (tudi v mm).\r\nSestavi funkcijo `stanja(seznam)`, ki iz danega seznama tvori\r\nseznam stanj, tj. delne vsote od prvega dne naprej. \u010ce je podani seznam\r\nprazen, naj funkcija vrne prazen seznam.", 
      "timestamp": "2012-03-27 08:52:31", 
      "challenge": "[]", 
      "solution": "def stanja(s):\r\n    return [sum(s[:i+1]) for i in range(len(s))]", 
      "problem": 206, 
      "validation": "Check.equal('stanja([1, 2, 3])', [1, 3, 6])\r\nCheck.equal('stanja([1, -5, -20, 30])', [1, -4, -24, 6])"
    }
  }, 
  {
    "pk": 296, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `naloga4(t)`, kot je zapisano v navodilih.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "def naloga4(t):\n    t = t[:]\n    p = []\n    for i in range(0, len(t) - 1):\n        j = i\n        for k in range(i + 1, len(t)):\n            if t[k] < t[j]: j = k\n        (t[i],t[j]) = (t[j], t[i])\n        if i != j: p.append((i,j))\n    return p", 
      "problem": 96, 
      "validation": "t = [1, 8, 7, 2, 6, 5, 4, 3, 9]\nnaloga4(t)\nif t != [1, 8, 7, 2, 6, 5, 4, 3, 9]:\n    Check.error(\"Funkcija naloga4 spreminja t.\")\nelse:\n    for t in [[], [1], [1, 0], [9, 7, 5, 3], [3, 5, 7, 9], [7, 6, 3, 4, 5, 2, 1]]:\n        Check.run([\n            \"t = {0}\".format(t),\n            \"for i, j in naloga4(t):\",\n            \"    t[i], t[j] = t[j], t[i]\"\n        ], {\"t\": sorted(t)})"
    }
  }, 
  {
    "pk": 753, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `obrni(niz)`, ki vrne `niz` z znaki v obratnem\nvrstnem redu.", 
      "timestamp": "2012-07-14 21:25:49", 
      "challenge": "[]", 
      "solution": "def obrni(niz):\n    return niz[::-1]", 
      "problem": 240, 
      "validation": "Check.equal(\"obrni('veselica')\", \"acilesev\")\nCheck.equal(\"obrni('acilesev')\", \"veselica\")\nCheck.equal(\"obrni('Perica re\u017ee raci rep.')\", \".per icar e\u017eer acireP\")"
    }
  }, 
  {
    "pk": 336, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `celostevilski(sprehod)`, ki sprejme niz, ki\npredstavlja sprehod po celih \u0161tevilih, in vrne \u0161tevilo, v katerem se\nsprehod kon\u010da.\n\nSprehod po celih \u0161tevilih se za\u010dne v \u0161tevilu 0, predstavimo pa ga z\nnizem, sestavljenim iz znakov `+` in `-`. Na ostale znake v nizu se\nne oziramo.", 
      "timestamp": "2012-03-22 11:22:48", 
      "challenge": "[]", 
      "solution": "def celostevilski(sprehod):\n    x = 0\n    for korak in sprehod:\n        if korak == '+':\n            x += 1\n        elif korak == '-':\n            x -= 1\n    return x", 
      "problem": 114, 
      "validation": "Check.equal('celostevilski(\"+++-+---+++-\")', 2)\nCheck.equal('celostevilski(\"----++----\")', -6)\nCheck.equal('celostevilski(\"\")', 0)\nCheck.equal('celostevilski(\"+===-@#$*!@--==+\")', -1)"
    }
  }, 
  {
    "pk": 508, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `pretvori(vrstica)`, ki iz dane vrstice ustvari\r\ntrojico `(ime, cena, nujnost)`, pri \u010demer naj bosta `cena` in\r\n`nujnost` \u0161tevili.", 
      "timestamp": "2012-06-06 14:35:55", 
      "challenge": "[]", 
      "solution": "def pretvori(vrstica):\r\n    besede = vrstica.split(\",\")\r\n    return (besede[0], int(besede[1]), int(besede[2]))", 
      "problem": 165, 
      "validation": "Check.equal('pretvori(\"avtomati\u010dno brisalo ritke,231,10\")', (\"avtomati\u010dno brisalo ritke\", 231, 10))\r\nCheck.equal('pretvori(\"ljubezen,0,1\")', (\"ljubezen\", 0, 1))\r\nCheck.equal('pretvori(\"ortopedsko oblikovana duda,15,7\")', (\"ortopedsko oblikovana duda\", 15, 7))"
    }
  }, 
  {
    "pk": 814, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `tabela_v_redko(a)`, ki sprejme obi\u010dajno predstavitev\nmatrike s tabelo tabel in vrne njeno predstavitev s slovarjem po koordinatah.", 
      "timestamp": "2012-10-01 12:38:42", 
      "challenge": "[[\"None\", \"([((0, 0), 1), ((8, 43), 1), ((9, 26), 1), ((10, 7), 1), ((13, 45), 1), ((14, 18), 1), ((17, 32), 1), ((20, 28), 1), ((23, 6), 1), ((25, 17), 1), ((27, 20), 1), ((29, 15), 1), ((31, 2), 1), ((32, 46), 1), ((34, 21), 1), ((37, 22), 1), ((40, 5), 1), ((41, 31), 1), ((45, 8), 1), ((46, 24), 1), ((47, 38), 1)], 50, 50)\"]]", 
      "solution": "def tabela_v_redko(a):\n    \"\"\"Matriko predstavljeno z dvojno tabelo pretvori v slovar po koordinatah.\"\"\"\n    m = len(a)\n    n = len(a[0])\n    d = {}\n    for (i,vrstica) in enumerate(a):\n        for (j,x) in enumerate(vrstica):\n            if x != 0: d[(i,j)] = x\n    return (d, m, n)", 
      "problem": 256, 
      "validation": "Check.equal(\"\"\"tabela_v_redko([[1, 0, 0, 0, 2, 0],\n                               [0, 4, 0, 0, 3, 0],\n                               [0, 0, 0, 0, 0, 0],\n                               [0, 0, 0, 0, 0, 5]])\"\"\",\n            ({ (0,0) : 1, (0,4) : 2, (1,1) : 4, (1,4): 3, (3,5) : 5 }, 4, 6))\n\nCheck.equal(\"\"\"tabela_v_redko([[1]])\"\"\",\n            ({ (0,0) : 1 }, 1, 1))\n\nCheck.equal(\"\"\"tabela_v_redko([[1,1],[1,1]])\"\"\",\n            ({ (0,0) : 1, (0,1) : 1, (1, 0): 1, (1,1) : 1 }, 2, 2))\n\n(d,m,n) = tabela_v_redko([[int((i*i + j) % 107 == 0) for j in range(50)] for i in range(50)])\nCheck.challenge((sorted(d.items()), m, n))"
    }
  }, 
  {
    "pk": 525, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Vpi\u0161ite poljubno celo \u0161tevilo ter nalogo po\u0161ljite na Tomota.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "192837465", 
      "problem": 173, 
      "validation": "try:\n    int(Check.current[\"solution\"])\nexcept ValueError:\n    Check.error(\"Napisati morate celo \u0161tevilo.\")"
    }
  }, 
  {
    "pk": 354, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Mirko gre v trgovino in zapi\u0161e zneske kupljenih predmetov v\nseznam. Namesto z decimalnim \u0161tevilom ceno vsakega predmeta raje\nzapi\u0161e s parom `[evri, centi]`. Sestavi funkcijo `euroSum(nakupi)`, ki na\npodlagi podanega Mirkovega seznama nakupov izra\u010duna, koliko je zapravil za\nvse predmete skupaj, ter vrne vsoto v obliki para `[evri, centi]`.\nPrimer:\n\n     >>> euroSum([[3, 12], [5, 0], [1, 33]])\n     [9, 45]\n     >>> euroSum([[3, 12], [5, 0], [1, 33], [4, 65], [2, 55], [16, 18]])\n     [32, 83]", 
      "timestamp": "2012-04-16 12:58:39", 
      "challenge": "[]", 
      "solution": "def euroSum(nakupi):\n    centi = sum([100 * n[0] + n[1] for n in nakupi])\n    return [centi // 100, centi % 100]\n\n# malo drugace\ndef euroSum(nakupi):\n    centi = sum([100 * e + c for [e,c] in nakupi])\n    return [centi // 100, centi % 100]", 
      "problem": 122, 
      "validation": "Check.equal('euroSum([[3, 12], [5, 0], [1, 33]])', [9, 45])\nCheck.equal('euroSum([[3, 12], [5, 0], [1, 33], [4, 65], [2, 55], [16, 18]])', [32, 83])"
    }
  }, 
  {
    "pk": 522, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite metodo `naloga2a(self)`, kot je zapisano v navodilih.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "class Cikel(Cikel):\n    def naloga2a(self):\n        if self.prazen:\n            return 0\n        else:\n            dolzina = 1\n            x = self\n            while x.naslednji != self:\n                x = x.naslednji\n                dolzina += 1\n            return dolzina", 
      "problem": 171, 
      "validation": "Check.equal(\"Cikel([10, 20, 30, 40]).naloga2a()\", 4)\nCheck.equal(\"Cikel([4, 2, 5, 2, 3]).naloga2a()\", 5)\nCheck.equal(\"Cikel([]).naloga2a()\", 0)"
    }
  }, 
  {
    "pk": 96, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `vsota_potenc(k,n)`, ki vrne vsoto $k$-tih potenc\r\nprvih $n$ naravnih \u0161tevil, $$1^k + 2^k + 3^k + \\cdots + n^k.$$", 
      "timestamp": "2012-11-05 01:06:47", 
      "challenge": "[[\"None\", \"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 3, 6, 10, 15, 21, 28, 36, 45, 0, 1, 5, 14, 30, 55, 91, 140, 204, 285, 0, 1, 9, 36, 100, 225, 441, 784, 1296, 2025, 0, 1, 17, 98, 354, 979, 2275, 4676, 8772, 15333]\"]]", 
      "solution": "def vsota_potenc(k,n):\r\n    return sum([i**k for i in range(1,n+1)])", 
      "problem": 29, 
      "validation": "Check.equal(\"vsota_potenc(1,100)\", 5050)\r\nCheck.equal(\"vsota_potenc(1,0)\", 0)\r\nCheck.equal(\"vsota_potenc(2,100)\", 338350)\r\nCheck.equal(\"vsota_potenc(3,10)\", 3025)\r\n\r\nCheck.challenge([vsota_potenc(k,n) for k in range(5) for n in range(10)])"
    }
  }, 
  {
    "pk": 342, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `levo(s, k)`, ki iz seznama `s` sestavi in vrne nov\r\nseznam, ki predstavlja kro\u017eni pomik prvotnega seznama v levo za `k`\r\nmest.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "def levo(s, k):\r\n    return s[k:] + s[:k]", 
      "problem": 117, 
      "validation": "Check.equal('levo([1, 2, 3, 4, 5, 6, 7], 3)', [4, 5, 6, 7, 1, 2, 3])\r\nCheck.equal('levo([1, 2, 3, 4, 5, 6, 7], 1)', [2, 3, 4, 5, 6, 7, 1])\r\nCheck.equal('levo([1, 2, 3, 4, 5, 6, 7], 0)', [1, 2, 3, 4, 5, 6, 7])"
    }
  }, 
  {
    "pk": 721, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `seSovrazita(omrezje, oseba1, oseba2)`, ki vrne `True`,\nkadar osebi sovra\u017eita druga drugo, in `False` sicer.", 
      "timestamp": "2012-06-11 11:01:07", 
      "challenge": "[]", 
      "solution": "def seSovrazita(omrezje, oseba1, oseba2):\n    return oseba1 in omrezje[oseba2] and oseba2 in omrezje[oseba1]", 
      "problem": 230, 
      "validation": "Check.equal(\"seSovrazita(primerOmrezja1, 'Ugo', '\u017diga')\", True)\nCheck.equal(\"seSovrazita(primerOmrezja1, 'Ugo', 'Zoran')\", False)\nCheck.equal(\"seSovrazita(primerOmrezja1, 'Tina', 'Vesna')\", False)\nCheck.equal(\"seSovrazita(primerOmrezja2, 'Filip', 'Betka')\", True)\nCheck.equal(\"seSovrazita(primerOmrezja2, 'Cvetka', 'Betka')\", False)\nCheck.equal(\"seSovrazita(primerOmrezja2, 'Betka', 'Filip')\", True)"
    }
  }, 
  {
    "pk": 203, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Razredu dodajte metodo `vsota(self)`, ki vrne vsoto vseh \u0161tevil v drevesu.", 
      "timestamp": "2012-11-22 12:11:41", 
      "challenge": "[[\"None\", \"1\"], [\"None\", \"3\"], [\"None\", \"7\"], [\"None\", \"14\"], [\"None\", \"26\"], [\"None\", \"46\"], [\"None\", \"79\"], [\"None\", \"133\"], [\"None\", \"221\"], [\"None\", \"364\"], [\"None\", \"596\"], [\"None\", \"972\"], [\"None\", \"1581\"], [\"None\", \"2567\"], [\"None\", \"4163\"], [\"None\", \"6746\"], [\"None\", \"10926\"], [\"None\", \"17690\"], [\"None\", \"28635\"]]", 
      "solution": "class Drevo(Drevo):\r\n    def vsota(self):\r\n        if self.prazno:\r\n            return 0\r\n        else:\r\n            return self.vsebina + self.levo.vsota() + self.desno.vsota()", 
      "problem": 60, 
      "validation": "Check.equal('Drevo().vsota()', 0)\r\nCheck.equal('Drevo(3).vsota()', 3)\r\nCheck.equal('Drevo(5, levo=Drevo(4, desno=Drevo(2)), desno=Drevo(3, levo=Drevo(4), desno=Drevo(4))).vsota()', 22)\r\n_drevesa = [Drevo(), Drevo()]\r\nfor i in range(1, 20):\r\n    _drevesa.append(Drevo(i, levo=_drevesa[-1], desno=_drevesa[-2]))\r\n    Check.challenge(_drevesa[-1].vsota())"
    }
  }, 
  {
    "pk": 843, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `uredi_po_x(t)`, ki vrne tabelo `a`, v kateri so na\u0161teti\r\nindeksi to\u010dk iz tabele `t` glede na koordinato $x$ v nara\u0161\u010dajo\u010de redu. Se\r\npravi, `t[a[i]]` je `i`-ta to\u010dka v `t` glede na velikost koordinate $x$.\r\n\r\nNamig: uporabite funkcijo `sorted`, ki ji podate `enumerate(t)` in ustrezno\r\nvrednost parametra `key`, se pravi, tako funkcijo, ki iz para `(i,(x,y))`\r\nizlu\u0161\u010di `x`.", 
      "timestamp": "2012-11-05 13:40:58", 
      "challenge": "[[\"None\", \"[0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156, 162, 168, 174, 180, 186, 192, 198, 204, 210, 216, 222, 228, 234, 240, 246, 252, 258, 264, 270, 276, 282, 288, 294, 300, 306, 312, 318, 324, 330, 336, 342, 348, 354, 360, 366, 372, 378, 384, 390, 396, 402, 408, 414, 420, 426, 432, 438, 444, 450, 456, 462, 468, 474, 480, 486, 492, 498, 504, 510, 516, 522, 528, 534, 540, 546, 552, 558, 564, 570, 576, 582, 588, 594, 600, 606, 612, 618, 624, 630, 636, 642, 648, 654, 660, 666, 672, 678, 684, 690, 696, 702, 708, 714, 720, 726, 732, 738, 744, 750, 756, 762, 768, 774, 780, 786, 792, 798, 804, 810, 816, 822, 828, 834, 840, 846, 852, 858, 864, 870, 876, 882, 888, 894, 900, 906, 912, 918, 924, 930, 936, 942, 948, 954, 960, 966, 972, 978, 984, 990, 996, 1, 5, 13, 17, 25, 29, 37, 41, 49, 53, 61, 65, 73, 77, 85, 89, 97, 101, 109, 113, 121, 125, 133, 137, 145, 149, 157, 161, 169, 173, 181, 185, 193, 197, 205, 209, 217, 221, 229, 233, 241, 245, 253, 257, 265, 269, 277, 281, 289, 293, 301, 305, 313, 317, 325, 329, 337, 341, 349, 353, 361, 365, 373, 377, 385, 389, 397, 401, 409, 413, 421, 425, 433, 437, 445, 449, 457, 461, 469, 473, 481, 485, 493, 497, 505, 509, 517, 521, 529, 533, 541, 545, 553, 557, 565, 569, 577, 581, 589, 593, 601, 605, 613, 617, 625, 629, 637, 641, 649, 653, 661, 665, 673, 677, 685, 689, 697, 701, 709, 713, 721, 725, 733, 737, 745, 749, 757, 761, 769, 773, 781, 785, 793, 797, 805, 809, 817, 821, 829, 833, 841, 845, 853, 857, 865, 869, 877, 881, 889, 893, 901, 905, 913, 917, 925, 929, 937, 941, 949, 953, 961, 965, 973, 977, 985, 989, 997, 2, 4, 8, 10, 14, 16, 20, 22, 26, 28, 32, 34, 38, 40, 44, 46, 50, 52, 56, 58, 62, 64, 68, 70, 74, 76, 80, 82, 86, 88, 92, 94, 98, 100, 104, 106, 110, 112, 116, 118, 122, 124, 128, 130, 134, 136, 140, 142, 146, 148, 152, 154, 158, 160, 164, 166, 170, 172, 176, 178, 182, 184, 188, 190, 194, 196, 200, 202, 206, 208, 212, 214, 218, 220, 224, 226, 230, 232, 236, 238, 242, 244, 248, 250, 254, 256, 260, 262, 266, 268, 272, 274, 278, 280, 284, 286, 290, 292, 296, 298, 302, 304, 308, 310, 314, 316, 320, 322, 326, 328, 332, 334, 338, 340, 344, 346, 350, 352, 356, 358, 362, 364, 368, 370, 374, 376, 380, 382, 386, 388, 392, 394, 398, 400, 404, 406, 410, 412, 416, 418, 422, 424, 428, 430, 434, 436, 440, 442, 446, 448, 452, 454, 458, 460, 464, 466, 470, 472, 476, 478, 482, 484, 488, 490, 494, 496, 500, 502, 506, 508, 512, 514, 518, 520, 524, 526, 530, 532, 536, 538, 542, 544, 548, 550, 554, 556, 560, 562, 566, 568, 572, 574, 578, 580, 584, 586, 590, 592, 596, 598, 602, 604, 608, 610, 614, 616, 620, 622, 626, 628, 632, 634, 638, 640, 644, 646, 650, 652, 656, 658, 662, 664, 668, 670, 674, 676, 680, 682, 686, 688, 692, 694, 698, 700, 704, 706, 710, 712, 716, 718, 722, 724, 728, 730, 734, 736, 740, 742, 746, 748, 752, 754, 758, 760, 764, 766, 770, 772, 776, 778, 782, 784, 788, 790, 794, 796, 800, 802, 806, 808, 812, 814, 818, 820, 824, 826, 830, 832, 836, 838, 842, 844, 848, 850, 854, 856, 860, 862, 866, 868, 872, 874, 878, 880, 884, 886, 890, 892, 896, 898, 902, 904, 908, 910, 914, 916, 920, 922, 926, 928, 932, 934, 938, 940, 944, 946, 950, 952, 956, 958, 962, 964, 968, 970, 974, 976, 980, 982, 986, 988, 992, 994, 998, 3, 15, 27, 39, 51, 63, 75, 87, 99, 111, 123, 135, 147, 159, 171, 183, 195, 207, 219, 231, 243, 255, 267, 279, 291, 303, 315, 327, 339, 351, 363, 375, 387, 399, 411, 423, 435, 447, 459, 471, 483, 495, 507, 519, 531, 543, 555, 567, 579, 591, 603, 615, 627, 639, 651, 663, 675, 687, 699, 711, 723, 735, 747, 759, 771, 783, 795, 807, 819, 831, 843, 855, 867, 879, 891, 903, 915, 927, 939, 951, 963, 975, 987, 999, 7, 11, 19, 23, 31, 35, 43, 47, 55, 59, 67, 71, 79, 83, 91, 95, 103, 107, 115, 119, 127, 131, 139, 143, 151, 155, 163, 167, 175, 179, 187, 191, 199, 203, 211, 215, 223, 227, 235, 239, 247, 251, 259, 263, 271, 275, 283, 287, 295, 299, 307, 311, 319, 323, 331, 335, 343, 347, 355, 359, 367, 371, 379, 383, 391, 395, 403, 407, 415, 419, 427, 431, 439, 443, 451, 455, 463, 467, 475, 479, 487, 491, 499, 503, 511, 515, 523, 527, 535, 539, 547, 551, 559, 563, 571, 575, 583, 587, 595, 599, 607, 611, 619, 623, 631, 635, 643, 647, 655, 659, 667, 671, 679, 683, 691, 695, 703, 707, 715, 719, 727, 731, 739, 743, 751, 755, 763, 767, 775, 779, 787, 791, 799, 803, 811, 815, 823, 827, 835, 839, 847, 851, 859, 863, 871, 875, 883, 887, 895, 899, 907, 911, 919, 923, 931, 935, 943, 947, 955, 959, 967, 971, 979, 983, 991, 995, 9, 21, 33, 45, 57, 69, 81, 93, 105, 117, 129, 141, 153, 165, 177, 189, 201, 213, 225, 237, 249, 261, 273, 285, 297, 309, 321, 333, 345, 357, 369, 381, 393, 405, 417, 429, 441, 453, 465, 477, 489, 501, 513, 525, 537, 549, 561, 573, 585, 597, 609, 621, 633, 645, 657, 669, 681, 693, 705, 717, 729, 741, 753, 765, 777, 789, 801, 813, 825, 837, 849, 861, 873, 885, 897, 909, 921, 933, 945, 957, 969, 981, 993]\"]]", 
      "solution": "def uredi_po_x(t):\r\n    return [i for (i,u) in sorted(enumerate(t), key = lambda p: p[1][0])]", 
      "problem": 278, 
      "validation": "Check.equal(\"\"\"uredi_po_x([(2,3), (1,5), (10,7), (11,6)])\"\"\", [1, 0, 2, 3])\r\n\r\nCheck.challenge(uredi_po_x([((30*i - 5*i*i)%120, (27*i + 8*i*i)%100) for i in range(1000)]))"
    }
  }, 
  {
    "pk": 368, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavi funkcijo `karta`, ki vrne naklju\u010dno karto za tarok. Karte za\r\ntarok so (skupaj jih je 54):\r\n22 tarokov, ozna\u010denih z rimskimi \u0161tevilkami od I do XXI in '\u0160kis'\r\n32 barvnih kart v srcu(H), kari(D), kri\u017eu(C) in piku(S). Vsaka barva\r\nima 8 kart: fanta(J), kavala(C), damo(Q) in kralja(K) ter 7-10\r\nza pike in kri\u017ee in 1-4 za srce in karo.\r\nFunkcija naj vrne niz, ki predstavlja karto, za barvne karte je to najprej\r\nbarva (ena od \u010drk H,D,C ali S) in nato vrednost (\u0161tevilka ali J,C,Q,K), za taroke\r\npa ustrezna rimska \u0161tevilka oz. '\u0160kis'. Za tarok 4 uporabi 'IV'.\r\nPrimer:\r\n    >>> karta()\r\n    'DJ'\r\n    >>> karta()\r\n    'C10'\r\n    >>> karta()\r\n    'XII'\r\n    >>> karta()\r\n    'HC'", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "def karta():\r\n    karte=['I','II','III','IV','V','VI','VII','VIII','IX','X','XI','XII','XIII','XIV','XV','XVI','XVII','XVIII','XIX','XX','XXI','\u0160kis','H1','H2','H3','H4','HJ','HC','HQ','HK','D1','D2','D3','D4','DJ','DC','DQ','DK','C7','C8','C9','C10','CJ','CC','CQ','CK','S7','S8','S9','S10','SJ','SC','SQ','SK']\r\n    N=len(karte)\r\n    return karte[random.randint(1,N)-1]", 
      "problem": 128, 
      "validation": "#        Check.equal('karta() in karte', True, 'Napa\u010dna oznaka karte. Veljavne oznake so\\n{}'.format(karte))\r\nCheck.equal('karta() in karte', True)"
    }
  }, 
  {
    "pk": 874, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `polinom(v, x)`, ki sprejme vektor `v` in niz `x` ter\nvrne niz, ki predstavlja polinom s koeficienti `v` v spremenljivki `x`.\nPolinom naj bo zapisan v obliki brez odve\u010dnih \u010dlenov in koeficientov,\ns padajo\u010dimi stopnjami \u010dlenov ter s presledki med koeficienti in \u010dlen\nter okoli plusov.", 
      "timestamp": "2012-12-07 20:13:26", 
      "challenge": "[[\"NA\", \"-b^19 + b^18 + 3 b^17 - 8 b^16 - 6 b^15 - 4 b^14 - 2 b^13 + 2 b^11 + 4 b^10 - 7 b^9 - 5 b^8 - 3 b^7 - b^6 + b^5 + 3 b^4 - 8 b^3 - 6 b^2 - 4 b - 2\"], [\"NA\", \"4 c^19 - 7 c^18 - 5 c^17 - 3 c^16 - c^15 + c^14 + 3 c^13 - 8 c^12 - 6 c^11 - 4 c^10 - 2 c^9 + 2 c^7 + 4 c^6 - 7 c^5 - 5 c^4 - 3 c^3 - c^2 + c + 3\"], [\"NA\", \"-4 d^19 - 2 d^18 + 2 d^16 + 4 d^15 - 7 d^14 - 5 d^13 - 3 d^12 - d^11 + d^10 + 3 d^9 - 8 d^8 - 6 d^7 - 4 d^6 - 2 d^5 + 2 d^3 + 4 d^2 - 7 d - 5\"], [\"NA\", \"e^19 + 3 e^18 - 8 e^17 - 6 e^16 - 4 e^15 - 2 e^14 + 2 e^12 + 4 e^11 - 7 e^10 - 5 e^9 - 3 e^8 - e^7 + e^6 + 3 e^5 - 8 e^4 - 6 e^3 - 4 e^2 - 2 e\"], [\"NA\", \"-7 f^19 - 5 f^18 - 3 f^17 - f^16 + f^15 + 3 f^14 - 8 f^13 - 6 f^12 - 4 f^11 - 2 f^10 + 2 f^8 + 4 f^7 - 7 f^6 - 5 f^5 - 3 f^4 - f^3 + f^2 + 3 f - 8\"], [\"NA\", \"-2 g^19 + 2 g^17 + 4 g^16 - 7 g^15 - 5 g^14 - 3 g^13 - g^12 + g^11 + 3 g^10 - 8 g^9 - 6 g^8 - 4 g^7 - 2 g^6 + 2 g^4 + 4 g^3 - 7 g^2 - 5 g - 3\"], [\"NA\", \"3 h^19 - 8 h^18 - 6 h^17 - 4 h^16 - 2 h^15 + 2 h^13 + 4 h^12 - 7 h^11 - 5 h^10 - 3 h^9 - h^8 + h^7 + 3 h^6 - 8 h^5 - 6 h^4 - 4 h^3 - 2 h^2 + 2\"], [\"NA\", \"-5 i^19 - 3 i^18 - i^17 + i^16 + 3 i^15 - 8 i^14 - 6 i^13 - 4 i^12 - 2 i^11 + 2 i^9 + 4 i^8 - 7 i^7 - 5 i^6 - 3 i^5 - i^4 + i^3 + 3 i^2 - 8 i - 6\"], [\"NA\", \"2 j^18 + 4 j^17 - 7 j^16 - 5 j^15 - 3 j^14 - j^13 + j^12 + 3 j^11 - 8 j^10 - 6 j^9 - 4 j^8 - 2 j^7 + 2 j^5 + 4 j^4 - 7 j^3 - 5 j^2 - 3 j - 1\"], [\"NA\", \"-8 k^19 - 6 k^18 - 4 k^17 - 2 k^16 + 2 k^14 + 4 k^13 - 7 k^12 - 5 k^11 - 3 k^10 - k^9 + k^8 + 3 k^7 - 8 k^6 - 6 k^5 - 4 k^4 - 2 k^3 + 2 k + 4\"]]", 
      "solution": "polinom <- function(v, x) {\n  # dokler je prvi koeficient niceln, ga brisemo\n  while (v[1] == 0) v <- v[-1]\n  izpis <- \"\"\n  # stopnja polinoma je enaka stevilu koeficientov\n  stopnja <- length(v)\n  \n  for (i in 1 : stopnja) {\n    k <- v[i]\n    stevilo <- abs(k)\n    potenca <- stopnja - i\n    \n    # ce je koeficient enak 0, gremo na naslednji clen\n    if (k == 0)\n      next\n    \n    # zapisemo predznak\n    # ce je clen prvi, ne izpisemo plusa in ne dodamo presledkov\n    if (i == 1) {\n      if (k < 0)\n        izpis <- paste(izpis, \"-\", sep = \"\")\n    } else {\n      if (k < 0)\n        izpis <- paste(izpis, \" - \", sep = \"\")\n      else\n        izpis <- paste(izpis, \" + \", sep = \"\")\n    }\n    \n    # ce koeficient ni 1 ali -1 ali pa je clen zadnji, ga izpisemo\n    if (potenca == 0)\n      izpis <- paste(izpis, stevilo, sep = \"\")\n    else if (stevilo != 1)\n      izpis <- paste(izpis, stevilo, \" \", sep = \"\")\n    \n    # dodamo spremenljivko in potenco, ce je ta potrebna\n    if (potenca > 1)\n      izpis <- paste(izpis, x, \"^\", potenca, sep = \"\")\n    else if (potenca == 1)\n      izpis <- paste(izpis, x, sep = \"\")\n    \n  }\n  \n  return(izpis)\n}", 
      "problem": 291, 
      "validation": "check$equal(polinom(c(2, 3, 4, 5), 'x'), '2 x^3 + 3 x^2 + 4 x + 5')\ncheck$equal(polinom(c(1, -1, 1), 'y'), 'y^2 - y + 1')\ncheck$equal(polinom(c(2, 0, 1), 'z'), '2 z^2 + 1')\ncheck$equal(polinom(c(0, -1/2, -1), 'x'), '-0.5 x - 1')\nfor(i in 1 : 10)\n  check$challenge(polinom(((1 : 20) * 2 + 31 * i) %% 13 - 8, letters[i %% 25 + 1]))"
    }
  }, 
  {
    "pk": 370, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavi funkcijo `rndinterval(a,b)`, ki vrne naklju\u010dno realno \u0161tevilo z\r\nintervala [a,b).\r\nPrimer:\r\n    >>> rndinterval(1,4)\r\n    3.4592431331845415\r\n    >>> rndinterval(1,1)\r\n    1.0", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "def rndinterval(a,b):\r\n    return a+(b-a)*random.random()", 
      "problem": 129, 
      "validation": "for i in range(1,5):\r\nfor j in range(i+1,i+5):\r\nCheck.equal('{0}<=rndinterval({0},{1})<{1}'.format(i,j),True,'Funkcija rndinterval({0},{1}) ne vra\u010da vrednosti z intervala [{0},{1})'.format(i,j))\r\nCheck.equal('jeenakomerna(rndinterval,0,1)',True,'Funkcija ne vra\u010da enakomerno porazdeljenih vrednosti na intervalu [0,1)')\r\nCheck.equal('jeenakomerna(rndinterval,2,7)',True,'Funkcija ne vra\u010da enakomerno porazdeljenih vrednosti na intervalu [2,7)')\r\nCheck.equal('jeenakomerna(rndinterval,-2,-1)',True,'Funkcija ne vra\u010da enakomerno porazdeljenih vrednosti na intervalu [-2,-1)')"
    }
  }, 
  {
    "pk": 622, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "S katerimi ukazi ustvarimo prazno mno\u017eico?\r\n\r\n1) p=()\r\n\r\n2) p=(,)\r\n\r\n3) p={}\r\n\r\n4) p={0}; p.remove(0)\r\n\r\n5) p=set()\r\n\r\n\r\nSestavite funkcijo naloga13, ki kot rezultat vrne mno\u017eico pravilnih\r\nodgovorov (teh je lahko od 0 do 5, \u010de noben odgovor ni pravilen, naj\r\nfunkcija vrne prazno mno\u017eico)", 
      "timestamp": "2012-03-27 08:51:36", 
      "challenge": "[]", 
      "solution": "def naloga13():\r\n    return {4,5}\r\n", 
      "problem": 205, 
      "validation": "pass\r\n#Check.equal('md5(str(naloga13()).encode()).hexdigest()', '039376c7eafa923fae4dc28382d1d08c')#, \"Odgovor je napa\u010den\")"
    }
  }, 
  {
    "pk": 372, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavi funkcijo `meri(f,N,*argumenti)`, ki s pomo\u010djo metode clock\r\nv modulu time izmeri \u010das, ki ga funkcija `f` porabi, \u010de jo `N`-krat\r\nizvedemo na argumentih `argumenti`. Funkcija naj vrne povpre\u010den \u010das\r\nenega izvajanja (tj. izmerjeni \u010das delite z N).\r\nPrimer:\r\n    >>> meri(sin,1000000,2)\r\n    3.7999999999999996e-07\r\n    >>> meri(max,1000000,2,3,4,5,-1,7,8,9)\r\n    8.399999999999999e-07", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "def meri(f,N,*args):\r\n    start=clock()\r\n    for i in range(N):\r\n        f(*args)\r\n    total=clock()-start\r\n    return total/N", 
      "problem": 130, 
      "validation": "pass"
    }
  }, 
  {
    "pk": 378, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "S pomo\u010djo datoteke 'besedilo.txt' na spletni u\u010dilnici\r\nsestavi slovar frekvenc slovenskih \u010drk. V slovarju kot klju\u010de\r\nhrani 25 \u010drk slovenske abecede in presledke, ostale znake pa ignoriraj. \r\nIzra\u010dunaj tudi povprecno dolzino slovenske besede (tako, da deli\u0161\r\n\u0161tevilo vseh prebranih \u010drk s \u0161tevilom presledkov pove\u010danim za 1).\r\n\r\nPozor: testni program za to nalogo ne obstaja, zato mora\u0161\r\nnjeno delovanje preveriti sam.\r\n\r\nMetodi naj bo ime frekvence, vrne pa naj nabor\r\n(slovar, povpre\u010dna dol\u017eina besede). Kot argument naj sprejme ime\r\ndatoteke, iz katere prebere besede.\r\n", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "def frekvence(datoteka):\r\n    slovar = dict()\r\n    st=0\r\n    f=open(datoteka,\"r\",encoding=\"utf-8\")\r\n    for vrstica in f:\r\n        for c in vrstica:\r\n            c=' ' if c.isspace() else c.upper()\r\n            if c.isalpha() or c.isspace(): # \u010de je \u010drka ali presledek, jo damo v slovar\r\n                slovar[c] = slovar.get(c,0)+1\r\n                st+=1\r\n    f.close()\r\n    dolzinaBesede=st/(slovar.get(\" \",0)+1)\r\n    for k,v in slovar.items():\r\n        slovar[k]=v/st\r\n    return (slovar, dolzinaBesede)", 
      "problem": 132, 
      "validation": ""
    }
  }, 
  {
    "pk": 599, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `slika(permutacija, x)`, vrne pa sliko \u0161tevila `x`\ns podano permutacijo.", 
      "timestamp": "2012-05-07 01:21:59", 
      "challenge": "[]", 
      "solution": "def slika(permutacija, x):\n    return permutacija[x]", 
      "problem": 199, 
      "validation": "Check.equal('slika({1: 3, 2: 4, 3: 2, 4: 1}, 1)', 3)\nCheck.equal('slika({1: 3, 2: 4, 3: 2, 4: 1}, 2)', 4)\nCheck.equal('slika({1: 3, 2: 4, 3: 2, 4: 1}, 3)', 2)\nCheck.equal('slika({1: 3, 2: 4, 3: 2, 4: 1}, 4)', 1)"
    }
  }, 
  {
    "pk": 29, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `palindrom(niz)`, ki vrne `True` kadar je `niz`\npalindrom, in `False` sicer.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"]]", 
      "solution": "def palindrom(niz):\n    return niz == niz[::-1]", 
      "problem": 18, 
      "validation": "Check.equal('palindrom(\"pericarezeracirep\")', True)\nCheck.equal('palindrom(\"pericarezeraciglavo\")', False)\nCheck.equal('palindrom(\"\")', True)\nCheck.equal('palindrom(\"abccba\")', True)\nCheck.equal('palindrom(\"abca\")', False)\nfor i in range(100):\n    Check.challenge(palindrom(str(i)))"
    }
  }, 
  {
    "pk": 62, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `vsota.kvadratov(n)`, ki vrne vsoto\nvrne vsoto `1^2 + 2^2 + ... + n^2`.", 
      "timestamp": "2012-10-22 10:43:59", 
      "challenge": "[]", 
      "solution": "vsota.kvadratov <- function(n) {\n    return(sum((1 : n)^2))\n}", 
      "problem": 21, 
      "validation": "check$equal(vsota.kvadratov(3), 14)\ncheck$equal(vsota.kvadratov(4), 30)"
    }
  }, 
  {
    "pk": 277, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Izra\u010dunajte plo\u0161\u010dino unije naslednjih treh krogov:\n\n    plot(c(-2, 2), c(-2, 2), type = \"n\")\n    krog(-sqrt(3) / 2, -1 / 2, 1)\n    krog(sqrt(3) / 2, -1 / 2, 1)\n    krog(0, 1, 1)", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "x <- runif(1000, -2, 2)\ny <- runif(1000, -2, 2)\n\nv.krogu <- function(x, y, x0, y0, r) {\n    (x - x0)^2 + (y - y0)^2 < r^2\n}\nv.krogih <- (\n    v.krogu(x, y, -sqrt(3) / 2, -1 / 2, 1) |\n    v.krogu(x, y, sqrt(3) / 2, -1 / 2, 1) |\n    v.krogu(x, y, 0, 1, 1)\n)\n\npoints(x[v.krogih], y[v.krogih], col = \"green\")\npoints(x[!v.krogih], y[!v.krogih], col = \"blue\")\n\nrazmerje.tock <- sum(v.krogih) / 1000\nploscina <- 2 * 2\nrazmerje.tock * ploscina", 
      "problem": 84, 
      "validation": ""
    }
  }, 
  {
    "pk": 226, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `slovenscina`, ki pretvori latovsko besedilo nazaj\nv sloven\u0161\u010dino.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"None\", \"a\"], [\"None\", \"c\"], [\"None\", \"cpapopgpopipcpqpepi\"], [\"None\", \"epapkpqpspcpcpgpepapspipmpips\"], [\"None\", \"cpcpkpepspepcpkpapipmpapmpqpipmpspopm\"], [\"None\", \"spgpcpgpepkpopipmpcpkpipopqpkpcpkpmpepk\"], [\"None\", \"epcpapopgpspcpspopepapopgpgpgpkpopqpspspopm\"], [\"None\", \"epkpgpspgpipapepspapmpspepkpqpapqpopqpmpgpepips\"], [\"None\", \"cpepgpopspipapgpspepqpkpgpqpapepopipqpspspcpepipepi\"], [\"None\", \"ipepgpspcpcpkpqpepopkpepcpmpepapgpkpcpipepspipgpgpepapc\"], [\"None\", \"cpapapapapapapapapapapapapapapa\"], [\"None\", \"cpopipspipapepmpqpqpqpmpipapopgpcpqpkpkpqpqpapgpopkpgpqpapc\"], [\"None\", \"epgpopgpopmpgpcpgpopspspopmpspqpapmpgpepqpspkpapepspcpipgpcpipepi\"], [\"None\", \"epmpcpspspspkpmpipgpmpipspspipspmpapgpqpapkpkpcpipgpepqpgpgpapips\"], [\"None\", \"epipepapcpipgpepgpkpkpipqpipkpspkpipepcpspipcpapgpopepipgpqpepmpcpopm\"], [\"None\", \"cpspcpopkpcpapkpspepgpepqpqpipapqpmpmpmpqpipspcpgpmpgpkpepkpgpspapmpepk\"], [\"None\", \"cpgpepspepopspspkpopqpipspcpkpqpopepspapgpqpapopapmpapepqpapgpipkpopm\"], [\"None\", \"qpcpspgpipmpkpopepkpqpcpipopmpkpkpkpmpkpkpipapcpapepqpopspepcpqpqpips\"], [\"None\", \"ipkpkpcpopcpkpspmpapopspapgpgpipapgpkpkpopspgpopcpipopqpepqpopqpspqpmpepi\"], [\"None\", \"epgpapipmpmpmpcpopqpspopcpspkpepcpkpapipkpkpapspkpcpspipapkpspgpgpepspgpipapc\"], [\"None\", \"cpapopgpopipcpqpepipapapapapapapapapapapapapapapa\"], [\"None\", \"ipmpipapmpkpapepqpspcpcpopcpmpipcpapkpepapkpcpgpgpgpkpmpmpapgpmpmpkpipmpapc\"], [\"None\", \"cpqpopgpmpcpkpgpapcpspspapgpqpepspipgpapgpmpepopqpspspgpqpmpipgpgpepmpopgpapepi\"], [\"None\", \"opcpapspipgpipqpopspcpcpkpcpgpmpgpapepipgpqpspkpkpipepqpmpipepapspspmpopspqpips\"], [\"None\", \"epkpipqpqpapqpopmpcpkpgpopmpcpepapepmpepopopgpqpepspspepmpspapqpopmpmpopgpopm\"], [\"None\", \"qpmpopgpmpcpopgpopspqpqpipapgpkpipopepapkpspmpepipapmpspkpspkpgpgpmpspcpipapmpepk\"], [\"None\", \"epqpcpgpcpspqpspapcpepqpipopipkpspcpspepkpqpmpepcpapepspmpcpkpspopcpkpepapopipcpgpopm\"], [\"None\", \"qpopepopspmpgpkpmpqpapqpopcpepipepkpqpspcpgpspopipopspipopmpopepopgpipapipcpips\"], [\"None\", \"epkpspqpmpapspapcpepapopspapmpipkpqpspepkpopapcpqpspkpapmpgpopqpkpapspkpopcpqpkpapepi\"], [\"None\", \"opipmpepqpspqpipcpmpopkpcpepspapepspgpapcpqpepopcpspspipmpopmpmpqpapepapmpapc\"], [\"None\", \"epapkpqpspcpcpgpepapspipmpipspapapapapapapapapapapapapapapa\"], [\"None\", \"kpkpapmpcpqpkpepapgpipkpspcpapqpgpopgpopipkpgpmpqpopcpspapkpcpgpspcpqpkpmpopqpqpmpepipapc\"], [\"None\", \"cpipepopepipopmpspepopapkpspkpspqpqpcpapkpqpepqpkpspmpspipspipspkpcpgpmpgpqpepopipmpmpepi\"], [\"None\", \"gpkpspepmpopcpqpopkpcpkpspkpspepkpopkpopqpspqpmpepopspopgpapepapspipapspepkpkpcpapqpips\"], [\"None\", \"qpopspopmpmpmpqpgpgpgpcpopqpgpapepkpipqpepmpmpmpqpepcpspcpkpgpepgpgpkpqpgpspgpepipapkpopm\"], [\"None\", \"epapspspcpgpspmpipepspmpmpcpspapcpopipspkpipgpcpipmpepgpapepqpapgpspspgpepkpapspopmpkpmpepk\"], [\"None\", \"ipqpqpopgpmpopspqpapmpqpspepkpopipqpspgpepopkpepopgpopipmpapgpqpmpkpmpmpapqpkpapcpopm\"], [\"None\", \"cpcpcpcpqpmpipcpgpmpcpapspspgpqpcpcpspkpapcpqpkpmpgpopqpcpspepipepgpepspgpepkpgpgpapcpcpapips\"], [\"None\", \"epipopipmpcpmpipmpmpopepapipkpipgpipmpqpopapgpopmpgpipgpopmpepspapepcpapqpopqpopcpmpspapgpipepi\"], [\"None\", \"kpgpspipgpgpqpmpspcpkpipcpgpkpopipopgpapmpepopapkpepkpqpipkpepopepgpqpcpqpopmpqpgpepkpipqpapc\"], [\"None\", \"cpcpkpepspepcpkpapipmpapmpqpipmpspopmpapapapapapapapapapapapapapapa\"], [\"None\", \"epipcpqpgpgpapopmpspepqpspkpepapipmpgpspmpgpapgpqpopipepkpmpmpopkpspepkpopkpcpopipgpcpopgpopepapc\"], [\"None\", \"ipspqpepqpmpapgpapkpspqpepopspcpcpgpapspspspopcpspepmpopipopmpqpepqpmpepcpspmpepcpgpkpopgpepepi\"], [\"None\", \"cpapspgpopmpcpapspepgpcpkpkpkpopspopipapkpipcpcpcpmpqpapkpepapspqpcpipspcpspqpcpcpepspapepips\"], [\"None\", \"epapcpcpopspcpcpcpqpgpgpipmpipmpcpgpapopkpapmpopqpgpapkpapipopgpgpopepqpopkpkpqpkpgpkpkpopm\"], [\"None\", \"gpspipopspqpipepmpmpkpqpapmpmpapepgpipepspkpapipcpipqpopkpkpepepkpkpqpspopkpepcpspopepmpkpmpepk\"], [\"None\", \"opmpgpgpmpspopkpopipopcpapgpapkpspkpspgpqpspipcpspmpkpapmpapipqpmpspspkpgpipepmpipopqpspmpgpapspopm\"], [\"None\", \"cpipkpkpepipgpopgpipgpgpepipapipspqpcpopqpipopcpepqpepipkpmpcpapcpgpspspopipmpepspqpgpmpapopmpips\"], [\"None\", \"epopgpmpopmpepkpmpqpmpipapkpopmpkpqpcpmpspspopspipmpkpepapkpcpqpipqpcpmpkpkpcpcpopipgpmpkpopgpqpepi\"], [\"None\", \"kpapqpapepcpqpmpapopgpspmpepgpgpmpkpgpepcpqpqpcpspopmpkpepcpmpkpapcpopepipgpipkpepipqpgpmpapc\"], [\"None\", \"spgpcpgpepkpopipmpcpkpipopqpkpcpkpmpepkpapapapapapapapapapapapapapapa\"], [\"None\", \"cpmpqpmpspmpcpspgpipapmpmpopapopapipapepgpmpcpkpkpapgpmpcpapspipopipcpopipspqpmpkpapcpopqpspqpgpspapc\"], [\"None\", \"gpapepapmpipspgpcpspkpipapepopspapepmpopepcpgpapqpipopepapmpipmpcpcpepqpapepcpepqpspqpqpspqpkpapspqpepi\"], [\"None\", \"kpgpipspapipepspqpmpipgpqpqpipepkpspqpkpspipqpepipcpmpcpmpmpspspqpmpspepipapcpgpipkpkpmpgpgpepkpmpmpips\"], [\"None\", \"spgpopcpkpopspkpepcpipapipapipqpkpgpepcpmpipapspgpspkpkpkpepgpipgpopspmpipmpopgpmpqpipqpmpepspopm\"], [\"None\", \"cpmpepkpcpapepepipmpkpmpapipmpcpcpqpipkpgpapgpgpmpcpqpapkpcpmpkpcpqpmpkpepipgpspcpcpopipgpcpmpipapmpepk\"], [\"None\", \"epopspapepgpkpcpqpapipspepmpcpepqpipepipspapcpkpspapipqpmpapipkpepapkpapepapopspspgpkpopkpepipgpopm\"], [\"None\", \"ipopipkpcpapgpepqpmpqpqpopqpipcpopgpmpqpapkpkpapcpmpgpopmpcpapmpapgpopspopapopepapepcpspcpcpcpepips\"], [\"None\", \"opspspkpgpspepqpgpspgpapspcpapipapqpapkpgpepopspcpopgpopgpqpipapepqpepkpmpqpspipmpmpkpqpopgpcpmpepi\"], [\"None\", \"cpgpgpkpepipgpcpepcpcpipepopkpmpmpipqpspspspepmpgpcpgpopkpopkpmpmpcpspcpipopapqpepgpgpapapepopqpapipepapc\"], [\"None\", \"epcpapopgpspcpspopepapopgpgpgpkpopqpspspopmpapapapapapapapapapapapapapapa\"], [\"None\", \"gpmpepspspapgpepkpkpgpspgpopepapmpopspkpkpipspcpqpmpopapspqpipspspmpopepgpgpgpcpspapgpcpcpepspepopqpapc\"], [\"None\", \"kpspcpepepcpgpipgpmpipgpspspipcpgpipmpgpspapepkpspcpspspipmpopqpkpapipepapipmpspmpgpspepmpspipopkpspipepi\"], [\"None\", \"spkpkpipmpqpopipcpmpqpcpmpspgpcpapmpkpapipqpkpmpepopcpmpcpipgpepepgpspspqpipopapcpmpkpgpgpgpapips\"], [\"None\", \"cpkpgpepipspkpkpipapqpmpkpqpqpqpqpkpqpgpkpqpgpipopapepopcpkpapgpapspcpqpgpmpcpqpopgpspcpepcpqpgpmpapepcpopm\"], [\"None\", \"epipapmpcpapqpqpgpepkpipapipkpepkpcpkpopkpopopmpcpepspgpipgpipkpgpopspipopcpopqpqpmpspmpepqpspapmpepk\"], [\"None\", \"gpqpkpopmpapopkpmpgpmpmpkpopmpcpepgpipepkpipmpkpkpepapmpqpipqpspepopqpspmpgpopmpepipmpgpgpopapipqpkpopm\"], [\"None\", \"mpapkpmpqpcpcpqpepipgpmpapgpapmpcpgpgpqpspgpspkpkpkpapmpcpqpspcpopapgpopgpopkpqpcpcpopgpapspopqpkpmpapcpqpips\"], [\"None\", \"spipmpipepqpgpepkpkpapspspcpapepspkpgpspspopcpkpgpopipopmpipepipopmpgpspapspmpopkpqpgpmpqpipkpqpkpapmpepi\"], [\"None\", \"cpipmpgpopmpspkpspkpqpcpipcpspspipopgpkpcpmpqpcpspipepspspspapepcpcpqpcpqpgpapkpmpkpapcpgpqpapepipgpspspipapc\"], [\"None\", \"epkpgpspgpipapepspapmpspepkpqpapqpopqpmpgpepipspapapapapapapapapapapapapapapa\"], [\"None\", \"gpipspipkpipqpepipcpgpmpcpepopgpipapopgpepkpmpapqpcpapspqpopqpspopkpepqpapspcpopepspapmpspopspmpgpmpapc\"], [\"None\", \"kpepipopopcpepcpipapkpopgpspepapcpcpgpopspcpapopepkpkpcpcpipepqpspapkpcpspkpspepcpgpepgpgpgpmpqpspmpcpapepi\"], [\"None\", \"opspgpopkpgpopipopgpkpapkpcpqpqpmpcpqpopkpqpipkpspopmpipopspmpspqpapepkpepapepkpopepopcpepkpqpcpepgpapips\"], [\"None\", \"cpcpspgpqpkpkpapepkpkpipmpqpmpspepapspmpcpapkpgpepgpqpspapmpcpopepcpapcpgpgpspopqpqpmpipepgpspmpkpipcpgpgpopm\"], [\"None\", \"cpopqpkpqpepapspapcpopapcpipopgpapgpipkpspcpkpipcpapepkpmpipgpipepopcpcpcpepapqpipgpqpqpopgpepspcpapcpkpmpepk\"], [\"None\", \"epmpkpopapspspcpspqpmpopmpqpkpkpspipqpkpcpopgpepmpkpqpmpspcpqpipepspkpgpgpqpepkpqpcpgpapmpmpepcpcpopmpapkpgpopm\"], [\"None\", \"gpspgpepspqpapcpkpmpapopmpapqpgpapgpopkpopkpkpspepkpgpcpspepcpcpepgpkpspepkpopepipgpepmpqpapepapgpkpcpspkpspips\"], [\"None\", \"kpopspepcpepopapmpkpspepspgpspapkpipkpmpepgpqpapcpapkpqpkpipopcpepgpkpcpopgpepkpipopepgpipepqpepipspopapepi\"], [\"None\", \"qpipqpqpcpipapapipcpmpkpgpcpqpqpipgpepqpqpapopipqpmpqpapqpgpepkpkpqpgpapepipepgpopipgpopepapmpcpmpapc\"], [\"None\", \"cpepgpopspipapgpspepqpkpgpqpapepopipqpspspcpepipepipapapapapapapapapapapapapapapa\"], [\"None\", \"cpopspopapcpapepspspspcpipgpcpepcpapipcpgpcpopspqpepspkpapspmpapkpapgpspopgpcpipopkpmpepopkpgpopqpkpcpcpapmpipapc\"], [\"None\", \"epkpspmpmpmpepqpspcpepkpepkpepqpqpopapmpapspspspipqpqpapepmpepspqpkpepmpspgpkpmpkpepqpmpkpepspopmpspapgpspipmpepi\"], [\"None\", \"gpopgpkpipqpmpkpkpcpopcpopmpgpspspgpipopqpepipmpspspspspgpapgpspapopqpqpspepkpgpmpopapmpkpgpopspepkpipopqpips\"], [\"None\", \"kpgpkpapgpapkpkpcpgpmpqpgpcpmpapepmpcpmpcpapmpmpcpkpapspopipqpkpcpgpqpipepqpcpapgpapqpapkpgpopgpgpgpmpkpopm\"], [\"None\", \"opmpgpapopkpspkpspipopqpspipqpopqpepqpapqpkpcpspspspkpmpkpqpqpmpkpapspcpepspopopkpkpapmpspopgpepmpmpmpapcpkpmpepk\"], [\"None\", \"cpapqpgpqpcpapspkpopapkpopgpspcpgpspmpapmpepgpopapgpmpspopkpapkpipepgpapgpspgpopipopapkpqpqpkpepopkpipmpopipcpopm\"], [\"None\", \"cpkpgpgpcpepkpapipkpspepapkpgpmpkpspapkpcpspqpgpipgpmpepmpapopgpqpmpgpipopapcpkpepgpmpipcpkpipkpepapqpcpgpqpmpipapips\"], [\"None\", \"epcpmpapcpgpcpgpopgpapepkpcpmpipepopqpqpepmpopkpqpcpepipspmpapgpgpmpgpapkpqpapmpgpcpipspopqpmpcpcpcpopkpipepi\"], [\"None\", \"gpapgpcpopspopkpmpcpopepgpmpepkpmpqpgpgpkpqpapspepapcpepmpqpmpqpepmpcpcpqpipapepkpcpipkpkpgpipqpcpmpqpcpipgpapqpapc\"], [\"None\", \"ipepgpspcpcpkpqpepopkpepcpmpepapgpkpcpipepspipgpgpepapcpapapapapapapapapapapapapapapa\"], [\"None\", \"kpspapkpepspopgpgpopepgpkpopipapepopmpepopapspmpspqpkpopqpipmpopepqpgpgpepipkpqpopmpcpgpipspkpqpspkpspopcpmpepapc\"], [\"None\", \"qpcpspmpmpepapgpkpopgpgpqpepapcpspepipgpepqpmpkpgpqpcpspipcpspcpkpopmpopapopipspipepkpopcpopgpipapipkpopcpipapepi\"], [\"None\", \"cpcpgpgpmpopipopapkpapmpgpapcpapmpepcpapgpgpcpipcpspgpopqpspkpapmpipgpspipkpspepqpmpqpmpspspspipmpkpopspgpspepips\"], [\"None\", \"cpkpmpepkpkpmpapmpcpmpmpmpmpipopspipopipqpepapipgpepcpepqpqpspgpopkpopepipqpspepkpipgpkpgpspcpgpkpspcpgpopmpcpcpopm\"], [\"None\", \"epcpipmpgpqpopmpgpspipepspgpopkpmpmpspipcpcpipopepepkpmpcpmpspspmpcpcpkpapqpepqpopipqpspipcpipepcpkpapqpopqpspapmpepk\"], [\"None\", \"epspgpqpkpopmpipgpepgpapopapkpopqpspspepipmpapepkpgpapcpcpspkpspmpopspcpqpapopmpgpgpkpepqpipqpapepqpspkpgpepcpipspopm\"], [\"None\", \"ipapcpapopapmpqpkpipgpcpkpopqpapgpopepopmpqpapgpipgpkpgpmpgpkpapspapmpopapkpkpgpkpapqpapipcpspgpkpgpspopspkpmpips\"], [\"None\", \"kpipkpipqpipgpcpspgpqpepipgpopcpqpcpgpkpipapmpipopapgpapcpqpgpmpgpipmpipepkpmpapgpgpapopspmpcpopspqpcpapcpipmpapkpqpepi\"], [\"None\", \"opgpspopapgpopgpgpqpqpepqpapipepopgpapcpkpapspepgpcpmpopcpipspipepkpepmpopmpepmpepgpkpepmpopmpipipgpipopapc\"]]", 
      "solution": "def slovenscina(besedilo):\n    return re.sub(r'([aeiou])p\\1', r'\\1', besedilo, flags=re.IGNORECASE)", 
      "problem": 70, 
      "validation": "Check.equal(\"\"\"slovenscina(\"Opodopojepek\")\"\"\", \"Odojek\")\nCheck.equal(\"\"\"slovenscina(\"lapatopovscipinapa\")\"\"\", \"latovscina\")\nCheck.equal(\"\"\"slovenscina(\"Tropolopolopo\")\"\"\", \"Trololo\")\n\nfor i in range(100):\n    Check.challenge(slovenscina(\"p\".join([chr(97 + 2 * int(j)) for j in str(i ** 30)])))"
    }
  }, 
  {
    "pk": 824, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `zlij_ite(sez1, sez2)`, ki iterativno zlije seznama\n`sez1` in `sez2`.", 
      "timestamp": "2012-10-25 14:07:05", 
      "challenge": "[]", 
      "solution": "def zlij_ite(sez1, sez2):\n    zlit = []\n    i = j = 0\n    while i < len(sez1) and j < len(sez2):\n        if sez1[i] <= sez2[j]:\n            zlit.append(sez1[i])\n            i += 1\n        else:\n            zlit.append(sez2[j])\n            j += 1\n    zlit += sez1[i:] + sez2[j:]\n    return zlit", 
      "problem": 260, 
      "validation": "Check.equal(\"zlij_ite([1, 3, 5], [2, 4, 6])\", [1, 2, 3, 4, 5, 6])\nCheck.equal(\"zlij_ite([5, 3, 1], [6, 4, 2])\", [5, 3, 1, 6, 4, 2])\nCheck.equal(\"zlij_ite([5, 3, 1], [2, 6])\", [2, 5, 3, 1, 6])\nCheck.equal(\"zlij_ite([5, 3, 1], [])\", [5, 3, 1])\nCheck.equal(\"zlij_ite([], [2, 4, 6])\", [2, 4, 6])"
    }
  }, 
  {
    "pk": 733, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `preberi(datoteka)`, ki kot parameter sprejme ime\ndatoteke, v kateri se nahajajo realna \u0161tevila, v vsaki vrstici eno.\nFunckija naj vrne seznam prebranih \u0161tevil. \u010ce je datoteka prazna, naj\nfunkcija vrne prazen seznam.", 
      "timestamp": "2012-07-12 09:56:50", 
      "challenge": "[]", 
      "solution": "def preberi(datoteka):\n    seznam=[]\n    with open(datoteka) as f:\n        for vrstica in f:\n            seznam.append(float(vrstica))\n    return seznam", 
      "problem": 235, 
      "validation": "with open(\"_test.0\",\"w\") as _f:\n    _f.write(\"\")\n\nCheck.equal(\"preberi('_test.0')\", [])\n\n_d=\"\"\"53.05\\n58.38\\n54.08\\n62.42\"\"\"\nwith open(\"_test.1\",\"w\") as _f:\n    _f.write(_d)\n\nCheck.equal(\"preberi('_test.1')\", [53.05, 58.38, 54.08,  62.42])\n\n\n\n_rng=[1287631]\nfor i in range(30): _rng.append((_rng[-1]*1103515245+12345)%2**32)\n_m=max(_rng)/100\n_rng=[x/_m-50 for x in _rng[1:]]\nwith open(\"_test.2\",\"w\") as _f:\n    for x in _rng:\n        print(\"{0:.3f}\".format(x),file=_f)\n\nCheck.equal(\"preberi('_test.2')\", [37.625, 0.348, 13.74, 48.4, 45.628, 15.711, -20.508, -2.52, 45.232, 32.578, -25.055, 42.122, 13.232, -7.613, -5.675, -13.67, 19.837, -7.088, 21.93, 25.802, 16.232, -16.162, 50.0, 40.569, -29.515, -11.972, -23.3, -23.353, -30.468, -7.819])"
    }
  }, 
  {
    "pk": 705, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "V ban\u010dni\u0161tvu pogosto navajamo letno obrestno mero, obrestujemo pa mese\u010dno.\r\nZato je pred ra\u010dunanjem potrebno obrestno mero primerno spremeniti.\r\n\r\nNapi\u0161ite funkcijo `obrestnaMera(r)`, ki kot parameter sprejme\r\nletno obrestno mero v odstotkih, vrne pa ustrezno mese\u010dno obrestno mero\r\nkot decimalno \u0161tevilo (torej letni obrestni meri 12% ustreza mese\u010dna\r\nobrestna mera 0.01)", 
      "timestamp": "2012-06-09 22:21:06", 
      "challenge": "[[\"0.0060571963945023595\", \"5e-06\"], [\"16.572729039512424\", \"0.013811\"], [\"9.522359855953347\", \"0.007935\"], [\"12.055208282905443\", \"0.010046\"], [\"18.610515559025828\", \"0.015509\"], [\"18.08626918161095\", \"0.015072\"], [\"12.42803345782076\", \"0.010357\"], [\"5.577819613711676\", \"0.004648\"], [\"8.98003997067238\", \"0.007483\"], [\"18.01132649357065\", \"0.015009\"], [\"15.6180614044904\", \"0.013015\"], [\"4.717966717821476\", \"0.003932\"], [\"17.423136412878808\", \"0.014519\"], [\"11.95920727728828\", \"0.009966\"], [\"8.016793870789057\", \"0.006681\"], [\"8.38315953715115\", \"0.006986\"], [\"6.871064266926143\", \"0.005726\"], [\"13.208345251291432\", \"0.011007\"], [\"8.116030581419835\", \"0.006763\"], [\"13.604266581902833\", \"0.011337\"], [\"14.336599789152828\", \"0.011947\"], [\"12.52664859633096\", \"0.010439\"], [\"6.399917567098124\", \"0.005333\"], [\"18.913145802610234\", \"0.015761\"], [\"17.129517791359905\", \"0.014275\"], [\"3.8742966936246455\", \"0.003229\"], [\"7.192301543110262\", \"0.005994\"], [\"5.049824220238815\", \"0.004208\"], [\"5.039732602912998\", \"0.0042\"], [\"3.6940941706445303\", \"0.003078\"], [\"7.977835388198166\", \"0.006648\"], [\"0.017962203211349143\", \"1.5e-05\"], [\"3.0953038186810304\", \"0.002579\"], [\"6.649585216437198\", \"0.005541\"], [\"11.85074910231827\", \"0.009876\"], [\"7.190272426466457\", \"0.005992\"], [\"6.696878978671876\", \"0.005581\"], [\"17.66137064072428\", \"0.014718\"], [\"2.061151803758682\", \"0.001718\"], [\"14.605328613464021\", \"0.012171\"], [\"8.124511966945523\", \"0.00677\"], [\"12.183258556191818\", \"0.010153\"], [\"4.618969838356443\", \"0.003849\"], [\"15.68838756721277\", \"0.013074\"], [\"5.503984322546746\", \"0.004587\"], [\"15.079008981871674\", \"0.012566\"], [\"16.39443309033109\", \"0.013662\"], [\"6.986070472954468\", \"0.005822\"], [\"1.4934876496078024\", \"0.001245\"], [\"18.714476905518275\", \"0.015595\"], [\"15.593786650057051\", \"0.012995\"], [\"4.270226190622954\", \"0.003559\"], [\"14.104620660868465\", \"0.011754\"], [\"1.3403590560021212\", \"0.001117\"], [\"3.7842205287210824\", \"0.003154\"], [\"12.294631825518923\", \"0.010246\"], [\"15.999986959183303\", \"0.013333\"], [\"18.931938041902896\", \"0.015777\"], [\"3.3868511979831104\", \"0.002822\"], [\"19.86604398951226\", \"0.016555\"], [\"16.620554821155945\", \"0.01385\"], [\"15.335151658721582\", \"0.012779\"], [\"10.322065468242583\", \"0.008602\"], [\"6.0235738648686805\", \"0.00502\"], [\"11.545857357577813\", \"0.009622\"], [\"0.7236398578834734\", \"0.000603\"], [\"17.665268213521063\", \"0.014721\"], [\"18.88583591828135\", \"0.015738\"], [\"3.3381307500798574\", \"0.002782\"], [\"10.868635191134405\", \"0.009057\"], [\"19.078772373982606\", \"0.015899\"], [\"20.0\", \"0.016667\"], [\"10.212676668567264\", \"0.008511\"], [\"2.2252345516742285\", \"0.001854\"], [\"16.959300661521983\", \"0.014133\"], [\"10.345057088541276\", \"0.008621\"], [\"14.233957450566098\", \"0.011862\"], [\"14.62470241616721\", \"0.012187\"], [\"14.781282352560623\", \"0.012318\"], [\"19.700729203829912\", \"0.016417\"], [\"17.931299265331372\", \"0.014943\"], [\"19.125703183597302\", \"0.015938\"], [\"8.47335102874909\", \"0.007061\"], [\"0.7373462068890044\", \"0.000614\"], [\"9.502758372877835\", \"0.007919\"], [\"15.161574803925086\", \"0.012635\"], [\"6.818544473371858\", \"0.005682\"], [\"7.601141622692136\", \"0.006334\"], [\"15.603089265514113\", \"0.013003\"], [\"6.67987615186905\", \"0.005567\"], [\"4.797040501572672\", \"0.003998\"], [\"3.3079042378442653\", \"0.002757\"], [\"11.578179107847982\", \"0.009648\"], [\"7.226714184789719\", \"0.006022\"], [\"10.576374885314422\", \"0.008814\"], [\"9.087535245833063\", \"0.007573\"], [\"19.672840733811075\", \"0.016394\"], [\"16.83605384666584\", \"0.01403\"], [\"19.76178445699831\", \"0.016468\"], [\"10.70689264463584\", \"0.008922\"], [\"13.54337514570315\", \"0.011286\"]]", 
      "solution": "def obrestnaMera(r):\r\n    return r/1200", 
      "problem": 224, 
      "validation": "Check.equal(\"obrestnaMera(12)\", 0.01)\r\nCheck.equal(\"obrestnaMera(0)\", 0)\r\nCheck.equal(\"obrestnaMera(10)\", 0.008333)\r\n\r\n_rng=[1287631]\r\nfor i in range(100): _rng.append((_rng[-1]*1103515245+12345)%2**32)\r\n_m=max(_rng)/20\r\n_rng=[x/_m for x in _rng]\r\n\r\nfor x in _rng:\r\n    Check.challenge(obrestnaMera(x), x)"
    }
  }, 
  {
    "pk": 693, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Napi\u0161ite funkcijo `datotekaPolozajev(vhod, izhod)`, ki prebere datoteko\nin tvori novo datoteko, ki ima v vsaki vrstici zapisan\ntrenuten polo\u017eaj. Polo\u017eaj naj bo zapisan kot \u0161tevili, lo\u010deni s presledkom.\nZa\u010detni polo\u017eaj je v to\u010dki `(0,0)`.", 
      "timestamp": "2012-06-10 01:12:23", 
      "challenge": "[]", 
      "solution": "def datotekaPolozajev(vhod, izhod):\n    x,y=0,0\n    with open(vhod) as f:\n        with open(izhod, \"w\") as g:\n            vrstice = f.readlines()\n            for vrstica in vrstice:\n                vrstica = vrstica.strip('\\n')\n                if vrstica=='S':\n                    y += 1\n                elif vrstica=='J':\n                    y += -1\n                elif vrstica=='V':\n                    x += 1\n                elif vrstica=='Z':\n                    x += -1\n                print(x,y,file=g)\n    return (x,y)", 
      "problem": 229, 
      "validation": "_makefile1(\"_3d.in\")\n_makefile2(\"_3do.out\")\ndatotekaPolozajev(\"_3d.in\",\"_3d.out\")\nif not _istedatoteke(\"_3d.out\", \"_3do.out\"):\n    Check.error(\"Izhodna datoteka je napa\u010dna\")\n_removefiles(\"_3d.in\", \"_3do.out\",\"_3d.out\")"
    }
  }, 
  {
    "pk": 351, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavi funkcijo `najkrajsi`, ki v danem seznamu seznamov poi\u0161\u010de in vrne\nnajkraj\u0161i seznam. \u010ce je seznam prazen, naj funkcija vrne vrednost `None`.\nPrimer:\n\n    >>> najkrajsi([])\n    None\n    >>> najkrajsi([[3, 6], [17, 5, 2], [5], [6, 3]])\n    [5]", 
      "timestamp": "2012-03-30 12:07:17", 
      "challenge": "[]", 
      "solution": "def najkrajsi(s):\n    if len(s) == 0: return None\n    m = s[0]\n    for t in s:\n        if len(t) < len(m): m = t\n    return m", 
      "problem": 121, 
      "validation": "Check.equal('najkrajsi([])', None)\nCheck.equal('najkrajsi([[3, 6], [17, 5, 2], [5], [6, 3]])', [5])\nCheck.equal('najkrajsi([[1, 2], [], [4, 5, 6, 7]])', [])"
    }
  }, 
  {
    "pk": 15, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `limona(n)`, ki za parameter dobi naravno \u0161tevilo `n`\nin vrne niz oblike `\"Ima\u0161 n limon.\"', pri \u010demer mora biti seveda vse\npravilno sklanjano.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"None\", \"Ima\\u0161 1 limono.\"], [\"None\", \"Ima\\u0161 2 limoni.\"], [\"None\", \"Ima\\u0161 3 limone.\"], [\"None\", \"Ima\\u0161 4 limone.\"], [\"None\", \"Ima\\u0161 5 limon.\"], [\"None\", \"Ima\\u0161 6 limon.\"], [\"None\", \"Ima\\u0161 7 limon.\"], [\"None\", \"Ima\\u0161 8 limon.\"], [\"None\", \"Ima\\u0161 9 limon.\"], [\"None\", \"Ima\\u0161 10 limon.\"], [\"None\", \"Ima\\u0161 11 limon.\"], [\"None\", \"Ima\\u0161 12 limon.\"], [\"None\", \"Ima\\u0161 13 limon.\"], [\"None\", \"Ima\\u0161 14 limon.\"], [\"None\", \"Ima\\u0161 15 limon.\"], [\"None\", \"Ima\\u0161 16 limon.\"], [\"None\", \"Ima\\u0161 17 limon.\"], [\"None\", \"Ima\\u0161 18 limon.\"], [\"None\", \"Ima\\u0161 19 limon.\"], [\"None\", \"Ima\\u0161 20 limon.\"], [\"None\", \"Ima\\u0161 21 limon.\"], [\"None\", \"Ima\\u0161 22 limon.\"], [\"None\", \"Ima\\u0161 23 limon.\"], [\"None\", \"Ima\\u0161 24 limon.\"], [\"None\", \"Ima\\u0161 25 limon.\"], [\"None\", \"Ima\\u0161 26 limon.\"], [\"None\", \"Ima\\u0161 27 limon.\"], [\"None\", \"Ima\\u0161 28 limon.\"], [\"None\", \"Ima\\u0161 29 limon.\"], [\"None\", \"Ima\\u0161 30 limon.\"], [\"None\", \"Ima\\u0161 31 limon.\"], [\"None\", \"Ima\\u0161 32 limon.\"], [\"None\", \"Ima\\u0161 33 limon.\"], [\"None\", \"Ima\\u0161 34 limon.\"], [\"None\", \"Ima\\u0161 35 limon.\"], [\"None\", \"Ima\\u0161 36 limon.\"], [\"None\", \"Ima\\u0161 37 limon.\"], [\"None\", \"Ima\\u0161 38 limon.\"], [\"None\", \"Ima\\u0161 39 limon.\"], [\"None\", \"Ima\\u0161 40 limon.\"], [\"None\", \"Ima\\u0161 41 limon.\"], [\"None\", \"Ima\\u0161 42 limon.\"], [\"None\", \"Ima\\u0161 43 limon.\"], [\"None\", \"Ima\\u0161 44 limon.\"], [\"None\", \"Ima\\u0161 45 limon.\"], [\"None\", \"Ima\\u0161 46 limon.\"], [\"None\", \"Ima\\u0161 47 limon.\"], [\"None\", \"Ima\\u0161 48 limon.\"], [\"None\", \"Ima\\u0161 49 limon.\"]]", 
      "solution": "def limona(n):\n    ostanek = n % 100\n    if ostanek == 1:\n        koncnica = 'o'\n    elif ostanek == 2:\n        koncnica = 'i'\n    elif ostanek == 3 or ostanek == 4:\n        koncnica = 'e'\n    else:\n        koncnica = ''\n    return \"Ima\u0161 {0} limon{1}.\".format(n, koncnica)", 
      "problem": 10, 
      "validation": "Check.equal('limona(1)', 'Ima\u0161 1 limono.')\nCheck.equal('limona(2)', 'Ima\u0161 2 limoni.')\nCheck.equal('limona(3)', 'Ima\u0161 3 limone.')\nCheck.equal('limona(12)', 'Ima\u0161 12 limon.')\nCheck.equal('limona(13)', 'Ima\u0161 13 limon.')\nCheck.equal('limona(14)', 'Ima\u0161 14 limon.')\nCheck.equal('limona(101)', 'Ima\u0161 101 limono.')\nCheck.equal('limona(103)', 'Ima\u0161 103 limone.')\nCheck.equal('limona(105)', 'Ima\u0161 105 limon.')\nfor i in range(1, 50):\n    Check.challenge(limona(i))"
    }
  }, 
  {
    "pk": 208, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Izven razreda `Drevo` sestavite funkcijo `polnoDrevo(n)`, ki sestavi\npolno drevo globine `n`. Vsebina posameznega vozli\u0161\u010da naj bo enaka\nglobini poddrevesa, ki ima to vozli\u0161\u010de za koren.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"None\", \"Drevo(7,\\n      levo = Drevo(6,\\n                   levo = Drevo(5,\\n                                levo = Drevo(4,\\n                                             levo = Drevo(3,\\n                                                          levo = Drevo(2,\\n                                                                       levo = Drevo(1),\\n                                                                       desno = Drevo(1)),\\n                                                          desno = Drevo(2,\\n                                                                        levo = Drevo(1),\\n                                                                        desno = Drevo(1))),\\n                                             desno = Drevo(3,\\n                                                           levo = Drevo(2,\\n                                                                        levo = Drevo(1),\\n                                                                        desno = Drevo(1)),\\n                                                           desno = Drevo(2,\\n                                                                         levo = Drevo(1),\\n                                                                         desno = Drevo(1)))),\\n                                desno = Drevo(4,\\n                                              levo = Drevo(3,\\n                                                           levo = Drevo(2,\\n                                                                        levo = Drevo(1),\\n                                                                        desno = Drevo(1)),\\n                                                           desno = Drevo(2,\\n                                                                         levo = Drevo(1),\\n                                                                         desno = Drevo(1))),\\n                                              desno = Drevo(3,\\n                                                            levo = Drevo(2,\\n                                                                         levo = Drevo(1),\\n                                                                         desno = Drevo(1)),\\n                                                            desno = Drevo(2,\\n                                                                          levo = Drevo(1),\\n                                                                          desno = Drevo(1))))),\\n                   desno = Drevo(5,\\n                                 levo = Drevo(4,\\n                                              levo = Drevo(3,\\n                                                           levo = Drevo(2,\\n                                                                        levo = Drevo(1),\\n                                                                        desno = Drevo(1)),\\n                                                           desno = Drevo(2,\\n                                                                         levo = Drevo(1),\\n                                                                         desno = Drevo(1))),\\n                                              desno = Drevo(3,\\n                                                            levo = Drevo(2,\\n                                                                         levo = Drevo(1),\\n                                                                         desno = Drevo(1)),\\n                                                            desno = Drevo(2,\\n                                                                          levo = Drevo(1),\\n                                                                          desno = Drevo(1)))),\\n                                 desno = Drevo(4,\\n                                               levo = Drevo(3,\\n                                                            levo = Drevo(2,\\n                                                                         levo = Drevo(1),\\n                                                                         desno = Drevo(1)),\\n                                                            desno = Drevo(2,\\n                                                                          levo = Drevo(1),\\n                                                                          desno = Drevo(1))),\\n                                               desno = Drevo(3,\\n                                                             levo = Drevo(2,\\n                                                                          levo = Drevo(1),\\n                                                                          desno = Drevo(1)),\\n                                                             desno = Drevo(2,\\n                                                                           levo = Drevo(1),\\n                                                                           desno = Drevo(1)))))),\\n      desno = Drevo(6,\\n                    levo = Drevo(5,\\n                                 levo = Drevo(4,\\n                                              levo = Drevo(3,\\n                                                           levo = Drevo(2,\\n                                                                        levo = Drevo(1),\\n                                                                        desno = Drevo(1)),\\n                                                           desno = Drevo(2,\\n                                                                         levo = Drevo(1),\\n                                                                         desno = Drevo(1))),\\n                                              desno = Drevo(3,\\n                                                            levo = Drevo(2,\\n                                                                         levo = Drevo(1),\\n                                                                         desno = Drevo(1)),\\n                                                            desno = Drevo(2,\\n                                                                          levo = Drevo(1),\\n                                                                          desno = Drevo(1)))),\\n                                 desno = Drevo(4,\\n                                               levo = Drevo(3,\\n                                                            levo = Drevo(2,\\n                                                                         levo = Drevo(1),\\n                                                                         desno = Drevo(1)),\\n                                                            desno = Drevo(2,\\n                                                                          levo = Drevo(1),\\n                                                                          desno = Drevo(1))),\\n                                               desno = Drevo(3,\\n                                                             levo = Drevo(2,\\n                                                                          levo = Drevo(1),\\n                                                                          desno = Drevo(1)),\\n                                                             desno = Drevo(2,\\n                                                                           levo = Drevo(1),\\n                                                                           desno = Drevo(1))))),\\n                    desno = Drevo(5,\\n                                  levo = Drevo(4,\\n                                               levo = Drevo(3,\\n                                                            levo = Drevo(2,\\n                                                                         levo = Drevo(1),\\n                                                                         desno = Drevo(1)),\\n                                                            desno = Drevo(2,\\n                                                                          levo = Drevo(1),\\n                                                                          desno = Drevo(1))),\\n                                               desno = Drevo(3,\\n                                                             levo = Drevo(2,\\n                                                                          levo = Drevo(1),\\n                                                                          desno = Drevo(1)),\\n                                                             desno = Drevo(2,\\n                                                                           levo = Drevo(1),\\n                                                                           desno = Drevo(1)))),\\n                                  desno = Drevo(4,\\n                                                levo = Drevo(3,\\n                                                             levo = Drevo(2,\\n                                                                          levo = Drevo(1),\\n                                                                          desno = Drevo(1)),\\n                                                             desno = Drevo(2,\\n                                                                           levo = Drevo(1),\\n                                                                           desno = Drevo(1))),\\n                                                desno = Drevo(3,\\n                                                              levo = Drevo(2,\\n                                                                           levo = Drevo(1),\\n                                                                           desno = Drevo(1)),\\n                                                              desno = Drevo(2,\\n                                                                            levo = Drevo(1),\\n                                                                            desno = Drevo(1)))))))\"]]", 
      "solution": "def polnoDrevo(n):\n    if n < 1:\n        return Drevo()\n    else:\n        return Drevo(n, levo=polnoDrevo(n - 1), desno=polnoDrevo(n - 1))", 
      "problem": 62, 
      "validation": "Check.equal('polnoDrevo(0)', Drevo())\nCheck.equal('polnoDrevo(1)', Drevo(1))\nCheck.equal('polnoDrevo(2)', Drevo(2, levo=Drevo(1), desno=Drevo(1)))\nCheck.equal('polnoDrevo(3)', Drevo(3, levo=Drevo(2, levo=Drevo(1), desno=Drevo(1)), desno=Drevo(2, levo=Drevo(1), desno=Drevo(1))))\nCheck.challenge(polnoDrevo(7))"
    }
  }, 
  {
    "pk": 709, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `fakulteta(n)`, ki vrne $n!$. Pri tem naj funkcija\nupo\u0161teva, da je $0!=1$.", 
      "timestamp": "2012-06-11 11:49:29", 
      "challenge": "[[\"5\", \"120\"], [\"6\", \"720\"], [\"7\", \"5040\"], [\"8\", \"40320\"], [\"9\", \"362880\"], [\"10\", \"3628800\"], [\"11\", \"39916800\"], [\"12\", \"479001600\"], [\"13\", \"6227020800\"], [\"14\", \"87178291200\"], [\"15\", \"1307674368000\"], [\"16\", \"20922789888000\"], [\"17\", \"355687428096000\"], [\"18\", \"6402373705728000\"], [\"19\", \"121645100408832000\"], [\"20\", \"2432902008176640000\"], [\"21\", \"51090942171709440000\"], [\"22\", \"1124000727777607680000\"], [\"23\", \"25852016738884976640000\"], [\"24\", \"620448401733239439360000\"], [\"25\", \"15511210043330985984000000\"], [\"26\", \"403291461126605635584000000\"], [\"27\", \"10888869450418352160768000000\"], [\"28\", \"304888344611713860501504000000\"], [\"29\", \"8841761993739701954543616000000\"]]", 
      "solution": "def fakulteta(n):\n    p=1\n    while n>1:\n        p*=n\n        n-=1\n    return p", 
      "problem": 219, 
      "validation": "Check.equal(\"fakulteta(0)\", 1)\nCheck.equal(\"fakulteta(1)\", 1)\nCheck.equal(\"fakulteta(3)\", 6)\n\nfor i in range(5,30):\n    Check.challenge(fakulteta(i),i)"
    }
  }, 
  {
    "pk": 675, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Ker pri risanju rekurzivnih struktur \u017eelva pogosto kon\u010da na nekem\n\u010dudnem mestu, moramo pred risanjem naslednje strukture ponavadi\npo\u010distiti zaslon, \u017eelvo postaviti nazaj v izhodi\u0161\u010de in jo obrniti tako,\nda gleda v desno. Napi\u0161ite funkcijo `pocisti`, ki bo storila vse to.\nNe pozabite na koncu poklicati `T.update()`.\n\nRazmislite, kako boste dosegli, da \u017eelva gleda v desno.", 
      "timestamp": "2012-05-27 22:38:18", 
      "challenge": "[]", 
      "solution": "def pocisti():\n    T.goto(0,0)\n    T.rt(T.heading())\n    T.clear()\n    T.update()", 
      "problem": 218, 
      "validation": "T.goto(10,10)\nT.rt(33)\npocisti()\nif T.heading() != 0:\n    Check.error('\u017delva ne gleda v desno!')\nif T.xcor() != 0 or T.ycor() !=0:\n    Check.error(\"\u017delva ni v izhodi\u0161\u010du!\")"
    }
  }, 
  {
    "pk": 606, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `vUniji(x, y, krogi)`, ki vrne True, \u010de to\u010dka\n$(x, y)$ le\u017ei v vsaj enem krogu v danem seznamu `krogi`, in False\nsicer. Ta seznam je sestavljen iz trojic $(x_i, y_i, r_i)$, ki\npredstavljajo kroge s sredi\u0161\u010di $(x_i, y_i)$ in radiji $r_i$.", 
      "timestamp": "2012-03-30 12:21:55", 
      "challenge": "[]", 
      "solution": "def vUniji(x, y, krogi):\n    for (xi, yi, ri) in krogi:\n        if (x - xi) ** 2 + (y - yi) ** 2 <= ri**2:\n            return True\n    return False", 
      "problem": 201, 
      "validation": "Check.equal('vUniji(2, 3, [])', False)\nCheck.equal('vUniji(2, 2, [(2, 2, 3), (1, 1, 4), (2, 0, 3)])', True)\nCheck.equal('vUniji(2, 5, [(2, 2, 3), (1, 1, 4), (2, 0, 3)])', True)\nCheck.equal('vUniji(5, 3, [(2, 2, 3), (1, 1, 4), (2, 0, 3)])', False)"
    }
  }, 
  {
    "pk": 270, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite metodo `dodaj(self, podatek)`, ki v iskalno drevo vstavi nov\npodatek.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"None\", \"IskalnoDrevo(256,\\n      levo = IskalnoDrevo(1,\\n                   levo = IskalnoDrevo(),\\n                   desno = IskalnoDrevo(4,\\n                                 levo = IskalnoDrevo(),\\n                                 desno = IskalnoDrevo(133,\\n                                               levo = IskalnoDrevo(7,\\n                                                            levo = IskalnoDrevo(),\\n                                                            desno = IskalnoDrevo(13,\\n                                                                          levo = IskalnoDrevo(),\\n                                                                          desno = IskalnoDrevo(16,\\n                                                                                        levo = IskalnoDrevo(),\\n                                                                                        desno = IskalnoDrevo(25,\\n                                                                                                      levo = IskalnoDrevo(),\\n                                                                                                      desno = IskalnoDrevo(28,\\n                                                                                                                    levo = IskalnoDrevo(),\\n                                                                                                                    desno = IskalnoDrevo(31,\\n                                                                                                                                  levo = IskalnoDrevo(),\\n                                                                                                                                  desno = IskalnoDrevo(37,\\n                                                                                                                                                levo = IskalnoDrevo(),\\n                                                                                                                                                desno = IskalnoDrevo(40,\\n                                                                                                                                                              levo = IskalnoDrevo(),\\n                                                                                                                                                              desno = IskalnoDrevo(43,\\n                                                                                                                                                                            levo = IskalnoDrevo(),\\n                                                                                                                                                                            desno = IskalnoDrevo(52,\\n                                                                                                                                                                                          levo = IskalnoDrevo(),\\n                                                                                                                                                                                          desno = IskalnoDrevo(55,\\n                                                                                                                                                                                                        levo = IskalnoDrevo(),\\n                                                                                                                                                                                                        desno = IskalnoDrevo(61,\\n                                                                                                                                                                                                                      levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                      desno = IskalnoDrevo(67,\\n                                                                                                                                                                                                                                    levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                    desno = IskalnoDrevo(73,\\n                                                                                                                                                                                                                                                  levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                  desno = IskalnoDrevo(76,\\n                                                                                                                                                                                                                                                                levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                                desno = IskalnoDrevo(79,\\n                                                                                                                                                                                                                                                                              levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                                              desno = IskalnoDrevo(85,\\n                                                                                                                                                                                                                                                                                            levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                                                            desno = IskalnoDrevo(88,\\n                                                                                                                                                                                                                                                                                                          levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                                                                          desno = IskalnoDrevo(91,\\n                                                                                                                                                                                                                                                                                                                        levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                                                                                        desno = IskalnoDrevo(97,\\n                                                                                                                                                                                                                                                                                                                                      levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                                                                                                      desno = IskalnoDrevo(100,\\n                                                                                                                                                                                                                                                                                                                                                    levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                                                                                                                    desno = IskalnoDrevo(103,\\n                                                                                                                                                                                                                                                                                                                                                                  levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                                                                                                                                  desno = IskalnoDrevo(112,\\n                                                                                                                                                                                                                                                                                                                                                                                levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                                                                                                                                                desno = IskalnoDrevo(115,\\n                                                                                                                                                                                                                                                                                                                                                                                              levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                                                                                                                                                              desno = IskalnoDrevo(121,\\n                                                                                                                                                                                                                                                                                                                                                                                                            levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                                                                                                                                                                            desno = IskalnoDrevo(127)))))))))))))))))))))))))),\\n                                               desno = IskalnoDrevo(136,\\n                                                             levo = IskalnoDrevo(),\\n                                                             desno = IskalnoDrevo(145,\\n                                                                           levo = IskalnoDrevo(),\\n                                                                           desno = IskalnoDrevo(148,\\n                                                                                         levo = IskalnoDrevo(),\\n                                                                                         desno = IskalnoDrevo(151,\\n                                                                                                       levo = IskalnoDrevo(),\\n                                                                                                       desno = IskalnoDrevo(157,\\n                                                                                                                     levo = IskalnoDrevo(),\\n                                                                                                                     desno = IskalnoDrevo(160,\\n                                                                                                                                   levo = IskalnoDrevo(),\\n                                                                                                                                   desno = IskalnoDrevo(163,\\n                                                                                                                                                 levo = IskalnoDrevo(),\\n                                                                                                                                                 desno = IskalnoDrevo(172,\\n                                                                                                                                                               levo = IskalnoDrevo(),\\n                                                                                                                                                               desno = IskalnoDrevo(175,\\n                                                                                                                                                                             levo = IskalnoDrevo(),\\n                                                                                                                                                                             desno = IskalnoDrevo(181,\\n                                                                                                                                                                                           levo = IskalnoDrevo(),\\n                                                                                                                                                                                           desno = IskalnoDrevo(187,\\n                                                                                                                                                                                                         levo = IskalnoDrevo(),\\n                                                                                                                                                                                                         desno = IskalnoDrevo(193,\\n                                                                                                                                                                                                                       levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                       desno = IskalnoDrevo(196,\\n                                                                                                                                                                                                                                     levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                     desno = IskalnoDrevo(205,\\n                                                                                                                                                                                                                                                   levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                   desno = IskalnoDrevo(208,\\n                                                                                                                                                                                                                                                                 levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                                 desno = IskalnoDrevo(211,\\n                                                                                                                                                                                                                                                                               levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                                               desno = IskalnoDrevo(217,\\n                                                                                                                                                                                                                                                                                             levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                                                             desno = IskalnoDrevo(220,\\n                                                                                                                                                                                                                                                                                                           levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                                                                           desno = IskalnoDrevo(223,\\n                                                                                                                                                                                                                                                                                                                         levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                                                                                         desno = IskalnoDrevo(229,\\n                                                                                                                                                                                                                                                                                                                                       levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                                                                                                       desno = IskalnoDrevo(232,\\n                                                                                                                                                                                                                                                                                                                                                     levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                                                                                                                     desno = IskalnoDrevo(235,\\n                                                                                                                                                                                                                                                                                                                                                                   levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                                                                                                                                   desno = IskalnoDrevo(241,\\n                                                                                                                                                                                                                                                                                                                                                                                 levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                                                                                                                                                 desno = IskalnoDrevo(247,\\n                                                                                                                                                                                                                                                                                                                                                                                               levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                                                                                                                                                               desno = IskalnoDrevo(253)))))))))))))))))))))))))))),\\n      desno = IskalnoDrevo(265,\\n                    levo = IskalnoDrevo(),\\n                    desno = IskalnoDrevo(268,\\n                                  levo = IskalnoDrevo(),\\n                                  desno = IskalnoDrevo(271,\\n                                                levo = IskalnoDrevo(),\\n                                                desno = IskalnoDrevo(277,\\n                                                              levo = IskalnoDrevo(),\\n                                                              desno = IskalnoDrevo(280,\\n                                                                            levo = IskalnoDrevo(),\\n                                                                            desno = IskalnoDrevo(283,\\n                                                                                          levo = IskalnoDrevo(),\\n                                                                                          desno = IskalnoDrevo(292,\\n                                                                                                        levo = IskalnoDrevo(),\\n                                                                                                        desno = IskalnoDrevo(295)))))))))\"], [\"None\", \"IskalnoDrevo(1108,\\n      levo = IskalnoDrevo(571,\\n                   levo = IskalnoDrevo(388,\\n                                levo = IskalnoDrevo(151,\\n                                             levo = IskalnoDrevo(13,\\n                                                          levo = IskalnoDrevo(4),\\n                                                          desno = IskalnoDrevo(52,\\n                                                                        levo = IskalnoDrevo(),\\n                                                                        desno = IskalnoDrevo(85,\\n                                                                                      levo = IskalnoDrevo(61,\\n                                                                                                   levo = IskalnoDrevo(),\\n                                                                                                   desno = IskalnoDrevo(67,\\n                                                                                                                 levo = IskalnoDrevo(),\\n                                                                                                                 desno = IskalnoDrevo(79))),\\n                                                                                      desno = IskalnoDrevo(148,\\n                                                                                                    levo = IskalnoDrevo(100),\\n                                                                                                    desno = IskalnoDrevo())))),\\n                                             desno = IskalnoDrevo(196,\\n                                                           levo = IskalnoDrevo(163,\\n                                                                        levo = IskalnoDrevo(),\\n                                                                        desno = IskalnoDrevo(193)),\\n                                                           desno = IskalnoDrevo(265,\\n                                                                         levo = IskalnoDrevo(229),\\n                                                                         desno = IskalnoDrevo(373,\\n                                                                                       levo = IskalnoDrevo(292,\\n                                                                                                    levo = IskalnoDrevo(),\\n                                                                                                    desno = IskalnoDrevo(337,\\n                                                                                                                  levo = IskalnoDrevo(),\\n                                                                                                                  desno = IskalnoDrevo(340,\\n                                                                                                                                levo = IskalnoDrevo(),\\n                                                                                                                                desno = IskalnoDrevo(343,\\n                                                                                                                                              levo = IskalnoDrevo(),\\n                                                                                                                                              desno = IskalnoDrevo(355))))),\\n                                                                                       desno = IskalnoDrevo(379))))),\\n                                desno = IskalnoDrevo(529,\\n                                              levo = IskalnoDrevo(421,\\n                                                           levo = IskalnoDrevo(397),\\n                                                           desno = IskalnoDrevo(427,\\n                                                                         levo = IskalnoDrevo(),\\n                                                                         desno = IskalnoDrevo(436,\\n                                                                                       levo = IskalnoDrevo(),\\n                                                                                       desno = IskalnoDrevo(487,\\n                                                                                                     levo = IskalnoDrevo(481),\\n                                                                                                     desno = IskalnoDrevo(511))))),\\n                                              desno = IskalnoDrevo(532,\\n                                                            levo = IskalnoDrevo(),\\n                                                            desno = IskalnoDrevo(535,\\n                                                                          levo = IskalnoDrevo(),\\n                                                                          desno = IskalnoDrevo(553))))),\\n                   desno = IskalnoDrevo(895,\\n                                 levo = IskalnoDrevo(772,\\n                                              levo = IskalnoDrevo(676,\\n                                                           levo = IskalnoDrevo(580,\\n                                                                        levo = IskalnoDrevo(),\\n                                                                        desno = IskalnoDrevo(628)),\\n                                                           desno = IskalnoDrevo(679,\\n                                                                         levo = IskalnoDrevo(),\\n                                                                         desno = IskalnoDrevo(715,\\n                                                                                       levo = IskalnoDrevo(),\\n                                                                                       desno = IskalnoDrevo(745,\\n                                                                                                     levo = IskalnoDrevo(),\\n                                                                                                     desno = IskalnoDrevo(757))))),\\n                                              desno = IskalnoDrevo(823,\\n                                                            levo = IskalnoDrevo(820),\\n                                                            desno = IskalnoDrevo(841,\\n                                                                          levo = IskalnoDrevo(829),\\n                                                                          desno = IskalnoDrevo(868,\\n                                                                                        levo = IskalnoDrevo(847),\\n                                                                                        desno = IskalnoDrevo())))),\\n                                 desno = IskalnoDrevo(901,\\n                                               levo = IskalnoDrevo(),\\n                                               desno = IskalnoDrevo(1033,\\n                                                             levo = IskalnoDrevo(925,\\n                                                                          levo = IskalnoDrevo(907,\\n                                                                                       levo = IskalnoDrevo(),\\n                                                                                       desno = IskalnoDrevo(916)),\\n                                                                          desno = IskalnoDrevo(931,\\n                                                                                        levo = IskalnoDrevo(),\\n                                                                                        desno = IskalnoDrevo(1012,\\n                                                                                                      levo = IskalnoDrevo(991,\\n                                                                                                                   levo = IskalnoDrevo(979),\\n                                                                                                                   desno = IskalnoDrevo(1003)),\\n                                                                                                      desno = IskalnoDrevo()))),\\n                                                             desno = IskalnoDrevo(1075,\\n                                                                           levo = IskalnoDrevo(1060),\\n                                                                           desno = IskalnoDrevo(1105)))))),\\n      desno = IskalnoDrevo(1156,\\n                    levo = IskalnoDrevo(1117,\\n                                 levo = IskalnoDrevo(),\\n                                 desno = IskalnoDrevo(1129)),\\n                    desno = IskalnoDrevo(1177,\\n                                  levo = IskalnoDrevo(),\\n                                  desno = IskalnoDrevo(1183))))\"], [\"None\", \"IskalnoDrevo(4,\\n      levo = IskalnoDrevo(),\\n      desno = IskalnoDrevo(2056,\\n                    levo = IskalnoDrevo(685,\\n                                 levo = IskalnoDrevo(25,\\n                                              levo = IskalnoDrevo(),\\n                                              desno = IskalnoDrevo(28,\\n                                                            levo = IskalnoDrevo(),\\n                                                            desno = IskalnoDrevo(604,\\n                                                                          levo = IskalnoDrevo(556,\\n                                                                                       levo = IskalnoDrevo(79,\\n                                                                                                    levo = IskalnoDrevo(),\\n                                                                                                    desno = IskalnoDrevo(100,\\n                                                                                                                  levo = IskalnoDrevo(),\\n                                                                                                                  desno = IskalnoDrevo(112,\\n                                                                                                                                levo = IskalnoDrevo(),\\n                                                                                                                                desno = IskalnoDrevo(133,\\n                                                                                                                                              levo = IskalnoDrevo(),\\n                                                                                                                                              desno = IskalnoDrevo(280,\\n                                                                                                                                                            levo = IskalnoDrevo(151,\\n                                                                                                                                                                         levo = IskalnoDrevo(),\\n                                                                                                                                                                         desno = IskalnoDrevo(208,\\n                                                                                                                                                                                       levo = IskalnoDrevo(),\\n                                                                                                                                                                                       desno = IskalnoDrevo(220,\\n                                                                                                                                                                                                     levo = IskalnoDrevo(),\\n                                                                                                                                                                                                     desno = IskalnoDrevo(232)))),\\n                                                                                                                                                            desno = IskalnoDrevo(301,\\n                                                                                                                                                                          levo = IskalnoDrevo(),\\n                                                                                                                                                                          desno = IskalnoDrevo(304,\\n                                                                                                                                                                                        levo = IskalnoDrevo(),\\n                                                                                                                                                                                        desno = IskalnoDrevo(307,\\n                                                                                                                                                                                                      levo = IskalnoDrevo(),\\n                                                                                                                                                                                                      desno = IskalnoDrevo(316,\\n                                                                                                                                                                                                                    levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                    desno = IskalnoDrevo(328,\\n                                                                                                                                                                                                                                  levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                  desno = IskalnoDrevo(436,\\n                                                                                                                                                                                                                                                levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                desno = IskalnoDrevo(460)))))))))))),\\n                                                                                       desno = IskalnoDrevo(571)),\\n                                                                          desno = IskalnoDrevo(631,\\n                                                                                        levo = IskalnoDrevo(),\\n                                                                                        desno = IskalnoDrevo(637,\\n                                                                                                      levo = IskalnoDrevo(),\\n                                                                                                      desno = IskalnoDrevo(652,\\n                                                                                                                    levo = IskalnoDrevo(),\\n                                                                                                                    desno = IskalnoDrevo(679))))))),\\n                                 desno = IskalnoDrevo(1555,\\n                                               levo = IskalnoDrevo(1045,\\n                                                            levo = IskalnoDrevo(868,\\n                                                                         levo = IskalnoDrevo(787,\\n                                                                                      levo = IskalnoDrevo(712,\\n                                                                                                   levo = IskalnoDrevo(),\\n                                                                                                   desno = IskalnoDrevo(781)),\\n                                                                                      desno = IskalnoDrevo(793,\\n                                                                                                    levo = IskalnoDrevo(),\\n                                                                                                    desno = IskalnoDrevo(829,\\n                                                                                                                  levo = IskalnoDrevo(),\\n                                                                                                                  desno = IskalnoDrevo(841)))),\\n                                                                         desno = IskalnoDrevo(943,\\n                                                                                       levo = IskalnoDrevo(),\\n                                                                                       desno = IskalnoDrevo(952,\\n                                                                                                     levo = IskalnoDrevo(),\\n                                                                                                     desno = IskalnoDrevo(976)))),\\n                                                            desno = IskalnoDrevo(1057,\\n                                                                          levo = IskalnoDrevo(),\\n                                                                          desno = IskalnoDrevo(1096,\\n                                                                                        levo = IskalnoDrevo(),\\n                                                                                        desno = IskalnoDrevo(1111,\\n                                                                                                      levo = IskalnoDrevo(),\\n                                                                                                      desno = IskalnoDrevo(1117,\\n                                                                                                                    levo = IskalnoDrevo(),\\n                                                                                                                    desno = IskalnoDrevo(1192,\\n                                                                                                                                  levo = IskalnoDrevo(),\\n                                                                                                                                  desno = IskalnoDrevo(1195,\\n                                                                                                                                                levo = IskalnoDrevo(),\\n                                                                                                                                                desno = IskalnoDrevo(1204,\\n                                                                                                                                                              levo = IskalnoDrevo(),\\n                                                                                                                                                              desno = IskalnoDrevo(1261,\\n                                                                                                                                                                            levo = IskalnoDrevo(),\\n                                                                                                                                                                            desno = IskalnoDrevo(1267,\\n                                                                                                                                                                                          levo = IskalnoDrevo(),\\n                                                                                                                                                                                          desno = IskalnoDrevo(1279,\\n                                                                                                                                                                                                        levo = IskalnoDrevo(),\\n                                                                                                                                                                                                        desno = IskalnoDrevo(1300,\\n                                                                                                                                                                                                                      levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                      desno = IskalnoDrevo(1303,\\n                                                                                                                                                                                                                                    levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                    desno = IskalnoDrevo(1327,\\n                                                                                                                                                                                                                                                  levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                  desno = IskalnoDrevo(1432,\\n                                                                                                                                                                                                                                                                levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                                desno = IskalnoDrevo(1435,\\n                                                                                                                                                                                                                                                                              levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                                              desno = IskalnoDrevo(1504))))))))))))))))),\\n                                               desno = IskalnoDrevo(1576,\\n                                                             levo = IskalnoDrevo(),\\n                                                             desno = IskalnoDrevo(1975,\\n                                                                           levo = IskalnoDrevo(1672,\\n                                                                                        levo = IskalnoDrevo(),\\n                                                                                        desno = IskalnoDrevo(1705,\\n                                                                                                      levo = IskalnoDrevo(),\\n                                                                                                      desno = IskalnoDrevo(1708,\\n                                                                                                                    levo = IskalnoDrevo(),\\n                                                                                                                    desno = IskalnoDrevo(1729,\\n                                                                                                                                  levo = IskalnoDrevo(),\\n                                                                                                                                  desno = IskalnoDrevo(1747,\\n                                                                                                                                                levo = IskalnoDrevo(),\\n                                                                                                                                                desno = IskalnoDrevo(1780,\\n                                                                                                                                                              levo = IskalnoDrevo(),\\n                                                                                                                                                              desno = IskalnoDrevo(1813,\\n                                                                                                                                                                            levo = IskalnoDrevo(),\\n                                                                                                                                                                            desno = IskalnoDrevo(1816,\\n                                                                                                                                                                                          levo = IskalnoDrevo(),\\n                                                                                                                                                                                          desno = IskalnoDrevo(1840,\\n                                                                                                                                                                                                        levo = IskalnoDrevo(),\\n                                                                                                                                                                                                        desno = IskalnoDrevo(1879,\\n                                                                                                                                                                                                                      levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                      desno = IskalnoDrevo(1888,\\n                                                                                                                                                                                                                                    levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                    desno = IskalnoDrevo(1891,\\n                                                                                                                                                                                                                                                  levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                  desno = IskalnoDrevo(1897,\\n                                                                                                                                                                                                                                                                levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                                desno = IskalnoDrevo(1948,\\n                                                                                                                                                                                                                                                                              levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                                              desno = IskalnoDrevo(1960,\\n                                                                                                                                                                                                                                                                                            levo = IskalnoDrevo(),\\n                                                                                                                                                                                                                                                                                            desno = IskalnoDrevo(1963)))))))))))))))),\\n                                                                           desno = IskalnoDrevo(2029))))),\\n                    desno = IskalnoDrevo(2068,\\n                                  levo = IskalnoDrevo(),\\n                                  desno = IskalnoDrevo(2083,\\n                                                levo = IskalnoDrevo(),\\n                                                desno = IskalnoDrevo(2329,\\n                                                              levo = IskalnoDrevo(2104,\\n                                                                           levo = IskalnoDrevo(),\\n                                                                           desno = IskalnoDrevo(2140,\\n                                                                                         levo = IskalnoDrevo(),\\n                                                                                         desno = IskalnoDrevo(2179,\\n                                                                                                       levo = IskalnoDrevo(),\\n                                                                                                       desno = IskalnoDrevo(2221,\\n                                                                                                                     levo = IskalnoDrevo(2215),\\n                                                                                                                     desno = IskalnoDrevo(2272,\\n                                                                                                                                   levo = IskalnoDrevo(),\\n                                                                                                                                   desno = IskalnoDrevo(2296,\\n                                                                                                                                                 levo = IskalnoDrevo(),\\n                                                                                                                                                 desno = IskalnoDrevo(2323))))))),\\n                                                              desno = IskalnoDrevo(2620,\\n                                                                            levo = IskalnoDrevo(2488,\\n                                                                                         levo = IskalnoDrevo(2353,\\n                                                                                                      levo = IskalnoDrevo(),\\n                                                                                                      desno = IskalnoDrevo(2377,\\n                                                                                                                    levo = IskalnoDrevo(2365),\\n                                                                                                                    desno = IskalnoDrevo(2404,\\n                                                                                                                                  levo = IskalnoDrevo(),\\n                                                                                                                                  desno = IskalnoDrevo(2473)))),\\n                                                                                         desno = IskalnoDrevo(2536,\\n                                                                                                       levo = IskalnoDrevo(),\\n                                                                                                       desno = IskalnoDrevo(2548))),\\n                                                                            desno = IskalnoDrevo(2692)))))))\"], [\"None\", \"IskalnoDrevo(2305,\\n      levo = IskalnoDrevo(1156,\\n                   levo = IskalnoDrevo(901,\\n                                levo = IskalnoDrevo(265,\\n                                             levo = IskalnoDrevo(196,\\n                                                          levo = IskalnoDrevo(61,\\n                                                                       levo = IskalnoDrevo(4),\\n                                                                       desno = IskalnoDrevo()),\\n                                                          desno = IskalnoDrevo()),\\n                                             desno = IskalnoDrevo(388,\\n                                                           levo = IskalnoDrevo(),\\n                                                           desno = IskalnoDrevo(580,\\n                                                                         levo = IskalnoDrevo(529),\\n                                                                         desno = IskalnoDrevo(772,\\n                                                                                       levo = IskalnoDrevo(),\\n                                                                                       desno = IskalnoDrevo(841,\\n                                                                                                     levo = IskalnoDrevo(),\\n                                                                                                     desno = IskalnoDrevo(847)))))),\\n                                desno = IskalnoDrevo(979,\\n                                              levo = IskalnoDrevo(),\\n                                              desno = IskalnoDrevo(1003))),\\n                   desno = IskalnoDrevo(2095,\\n                                 levo = IskalnoDrevo(1183,\\n                                              levo = IskalnoDrevo(),\\n                                              desno = IskalnoDrevo(1573,\\n                                                            levo = IskalnoDrevo(1348,\\n                                                                         levo = IskalnoDrevo(1279),\\n                                                                         desno = IskalnoDrevo(1540,\\n                                                                                       levo = IskalnoDrevo(1393),\\n                                                                                       desno = IskalnoDrevo())),\\n                                                            desno = IskalnoDrevo(1711,\\n                                                                          levo = IskalnoDrevo(1627,\\n                                                                                       levo = IskalnoDrevo(),\\n                                                                                       desno = IskalnoDrevo(1681,\\n                                                                                                     levo = IskalnoDrevo(),\\n                                                                                                     desno = IskalnoDrevo(1687))),\\n                                                                          desno = IskalnoDrevo(1732,\\n                                                                                        levo = IskalnoDrevo(),\\n                                                                                        desno = IskalnoDrevo(1915))))),\\n                                 desno = IskalnoDrevo(2116))),\\n      desno = IskalnoDrevo(4228,\\n                    levo = IskalnoDrevo(3331,\\n                                 levo = IskalnoDrevo(2779,\\n                                              levo = IskalnoDrevo(2317,\\n                                                           levo = IskalnoDrevo(2308),\\n                                                           desno = IskalnoDrevo(2467,\\n                                                                         levo = IskalnoDrevo(2329),\\n                                                                         desno = IskalnoDrevo(2485,\\n                                                                                       levo = IskalnoDrevo(),\\n                                                                                       desno = IskalnoDrevo(2629,\\n                                                                                                     levo = IskalnoDrevo(2500,\\n                                                                                                                  levo = IskalnoDrevo(),\\n                                                                                                                  desno = IskalnoDrevo(2551)),\\n                                                                                                     desno = IskalnoDrevo(2692))))),\\n                                              desno = IskalnoDrevo(3079,\\n                                                            levo = IskalnoDrevo(3076),\\n                                                            desno = IskalnoDrevo(3223,\\n                                                                          levo = IskalnoDrevo(3157),\\n                                                                          desno = IskalnoDrevo(3307,\\n                                                                                        levo = IskalnoDrevo(3268),\\n                                                                                        desno = IskalnoDrevo())))),\\n                                 desno = IskalnoDrevo(3979,\\n                                               levo = IskalnoDrevo(3943,\\n                                                            levo = IskalnoDrevo(3613,\\n                                                                         levo = IskalnoDrevo(3391,\\n                                                                                      levo = IskalnoDrevo(),\\n                                                                                      desno = IskalnoDrevo(3433,\\n                                                                                                    levo = IskalnoDrevo(),\\n                                                                                                    desno = IskalnoDrevo(3460))),\\n                                                                         desno = IskalnoDrevo(3763,\\n                                                                                       levo = IskalnoDrevo(3652),\\n                                                                                       desno = IskalnoDrevo(3937))),\\n                                                            desno = IskalnoDrevo(3955)),\\n                                               desno = IskalnoDrevo(4129,\\n                                                             levo = IskalnoDrevo(4021,\\n                                                                          levo = IskalnoDrevo(3997),\\n                                                                          desno = IskalnoDrevo(4036)),\\n                                                             desno = IskalnoDrevo(4135,\\n                                                                           levo = IskalnoDrevo(),\\n                                                                           desno = IskalnoDrevo(4153,\\n                                                                                         levo = IskalnoDrevo(),\\n                                                                                         desno = IskalnoDrevo(4171)))))),\\n                    desno = IskalnoDrevo(4420,\\n                                  levo = IskalnoDrevo(4345),\\n                                  desno = IskalnoDrevo(4612,\\n                                                levo = IskalnoDrevo(4525,\\n                                                             levo = IskalnoDrevo(4429),\\n                                                             desno = IskalnoDrevo()),\\n                                                desno = IskalnoDrevo(4777,\\n                                                              levo = IskalnoDrevo(4675),\\n                                                              desno = IskalnoDrevo())))))\"]]", 
      "solution": "class IskalnoDrevo(IskalnoDrevo):\n\n    def dodaj(self, podatek):\n        if self.prazno:\n            self.prazno = False\n            self.vsebina = podatek\n            self.levo = IskalnoDrevo()\n            self.desno = IskalnoDrevo()\n        elif self.vsebina > podatek:\n            self.levo.dodaj(podatek)\n        elif self.vsebina < podatek:\n            self.desno.dodaj(podatek)", 
      "problem": 82, 
      "validation": "Check.equal(\"\"\"IskalnoDrevo([3, 9, 2, 4, 1, 8, 7, 4, 6]).pravilno()\"\"\", True)\nCheck.run([\n    \"d = IskalnoDrevo()\",\n    \"d.dodaj(3)\",\n    \"d.dodaj(5)\",\n    \"d.dodaj(4)\",\n    \"x = (d.vsebina, d.levo.prazno, d.desno.vsebina, d.desno.levo.vsebina)\"\n    ], {'x': (3, True, 5, 4)})\n\nfor i in range(1, 5):\n    Check.challenge(IskalnoDrevo({(3 * (n + 4) ** 7 + 4) % (300 * i ** 2) for n in range(100)}))"
    }
  }, 
  {
    "pk": 464, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Borzni posrednik opazuje gibanje vrednosti delnice na borzi. Za vsak\ndan si zapi\u0161e razliko med trenutno vrednostjo delnice\nin vrednostjo delnice prej\u0161njega dne. Tako pozitivna \u0161tevila povejo,\nda je vrednost delnice zrasla, negativna pa, da je vrednost padla.\nSestavi funkcijo `vrednostDelnice(zacetnaVrednost, padci)`, ki iz danega seznama dvigov in\npadcev sestavi seznam vrednosti delnice po dnevih.\nKot parametra naj dobi za\u010detno vrednost delnice in seznam dvigov in padcev.\nPrimer:\n\n     >>> vrednostDelnice(100, [-5, 10, -5, 10])\n     [100, 95, 105, 100, 110]", 
      "timestamp": "2012-04-16 12:56:47", 
      "challenge": "[]", 
      "solution": "def vrednostDelnice(zacetnaVrednost, padci):\n    trenutnaVrednost = zacetnaVrednost\n    vrednosti = [trenutnaVrednost]\n    for padec in padci:\n        trenutnaVrednost += padec\n        vrednosti.append(trenutnaVrednost)\n    return vrednosti\n\n# nalogo lahko re\u0161imo tudi s pomo\u010djo izpeljanih seznamov\n\ndef vrednostDelnice(zv, s):\n    return [zv+sum(s[:i]) for i in range(len(s)+1)]", 
      "problem": 154, 
      "validation": "Check.equal('vrednostDelnice(100, [-5, 10, -5, 10])', [100, 95, 105, 100, 110])\nCheck.equal('vrednostDelnice(0, [1, -5, -20, 30])', [0, 1, -4, -24, 6])\nCheck.equal('vrednostDelnice(30, [-3, 9, 12, 6, -13, -15, -14, -4, 0, -11])', [30, 27, 36, 48, 54, 41, 26, 12, 8, 8, -3])\nCheck.equal('vrednostDelnice(2000, [-30, 100, -50, -70, -130,30, 70, 230, 100, -10])', [2000, 1970, 2070, 2020, 1950, 1820, 1850, 1920, 2150, 2250, 2240])"
    }
  }, 
  {
    "pk": 273, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Izven razreda `Drevo` sestavite funkcijo `polnoDrevo(n)`, ki sestavi\npolno drevo globine `n`. Vsebina posameznega vozli\u0161\u010da naj bo enaka\nglobini poddrevesa, ki ima to vozli\u0161\u010de za koren.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"None\", \"Drevo(7,\\n      levo = Drevo(6,\\n                   levo = Drevo(5,\\n                                levo = Drevo(4,\\n                                             levo = Drevo(3,\\n                                                          levo = Drevo(2,\\n                                                                       levo = Drevo(1),\\n                                                                       desno = Drevo(1)),\\n                                                          desno = Drevo(2,\\n                                                                        levo = Drevo(1),\\n                                                                        desno = Drevo(1))),\\n                                             desno = Drevo(3,\\n                                                           levo = Drevo(2,\\n                                                                        levo = Drevo(1),\\n                                                                        desno = Drevo(1)),\\n                                                           desno = Drevo(2,\\n                                                                         levo = Drevo(1),\\n                                                                         desno = Drevo(1)))),\\n                                desno = Drevo(4,\\n                                              levo = Drevo(3,\\n                                                           levo = Drevo(2,\\n                                                                        levo = Drevo(1),\\n                                                                        desno = Drevo(1)),\\n                                                           desno = Drevo(2,\\n                                                                         levo = Drevo(1),\\n                                                                         desno = Drevo(1))),\\n                                              desno = Drevo(3,\\n                                                            levo = Drevo(2,\\n                                                                         levo = Drevo(1),\\n                                                                         desno = Drevo(1)),\\n                                                            desno = Drevo(2,\\n                                                                          levo = Drevo(1),\\n                                                                          desno = Drevo(1))))),\\n                   desno = Drevo(5,\\n                                 levo = Drevo(4,\\n                                              levo = Drevo(3,\\n                                                           levo = Drevo(2,\\n                                                                        levo = Drevo(1),\\n                                                                        desno = Drevo(1)),\\n                                                           desno = Drevo(2,\\n                                                                         levo = Drevo(1),\\n                                                                         desno = Drevo(1))),\\n                                              desno = Drevo(3,\\n                                                            levo = Drevo(2,\\n                                                                         levo = Drevo(1),\\n                                                                         desno = Drevo(1)),\\n                                                            desno = Drevo(2,\\n                                                                          levo = Drevo(1),\\n                                                                          desno = Drevo(1)))),\\n                                 desno = Drevo(4,\\n                                               levo = Drevo(3,\\n                                                            levo = Drevo(2,\\n                                                                         levo = Drevo(1),\\n                                                                         desno = Drevo(1)),\\n                                                            desno = Drevo(2,\\n                                                                          levo = Drevo(1),\\n                                                                          desno = Drevo(1))),\\n                                               desno = Drevo(3,\\n                                                             levo = Drevo(2,\\n                                                                          levo = Drevo(1),\\n                                                                          desno = Drevo(1)),\\n                                                             desno = Drevo(2,\\n                                                                           levo = Drevo(1),\\n                                                                           desno = Drevo(1)))))),\\n      desno = Drevo(6,\\n                    levo = Drevo(5,\\n                                 levo = Drevo(4,\\n                                              levo = Drevo(3,\\n                                                           levo = Drevo(2,\\n                                                                        levo = Drevo(1),\\n                                                                        desno = Drevo(1)),\\n                                                           desno = Drevo(2,\\n                                                                         levo = Drevo(1),\\n                                                                         desno = Drevo(1))),\\n                                              desno = Drevo(3,\\n                                                            levo = Drevo(2,\\n                                                                         levo = Drevo(1),\\n                                                                         desno = Drevo(1)),\\n                                                            desno = Drevo(2,\\n                                                                          levo = Drevo(1),\\n                                                                          desno = Drevo(1)))),\\n                                 desno = Drevo(4,\\n                                               levo = Drevo(3,\\n                                                            levo = Drevo(2,\\n                                                                         levo = Drevo(1),\\n                                                                         desno = Drevo(1)),\\n                                                            desno = Drevo(2,\\n                                                                          levo = Drevo(1),\\n                                                                          desno = Drevo(1))),\\n                                               desno = Drevo(3,\\n                                                             levo = Drevo(2,\\n                                                                          levo = Drevo(1),\\n                                                                          desno = Drevo(1)),\\n                                                             desno = Drevo(2,\\n                                                                           levo = Drevo(1),\\n                                                                           desno = Drevo(1))))),\\n                    desno = Drevo(5,\\n                                  levo = Drevo(4,\\n                                               levo = Drevo(3,\\n                                                            levo = Drevo(2,\\n                                                                         levo = Drevo(1),\\n                                                                         desno = Drevo(1)),\\n                                                            desno = Drevo(2,\\n                                                                          levo = Drevo(1),\\n                                                                          desno = Drevo(1))),\\n                                               desno = Drevo(3,\\n                                                             levo = Drevo(2,\\n                                                                          levo = Drevo(1),\\n                                                                          desno = Drevo(1)),\\n                                                             desno = Drevo(2,\\n                                                                           levo = Drevo(1),\\n                                                                           desno = Drevo(1)))),\\n                                  desno = Drevo(4,\\n                                                levo = Drevo(3,\\n                                                             levo = Drevo(2,\\n                                                                          levo = Drevo(1),\\n                                                                          desno = Drevo(1)),\\n                                                             desno = Drevo(2,\\n                                                                           levo = Drevo(1),\\n                                                                           desno = Drevo(1))),\\n                                                desno = Drevo(3,\\n                                                              levo = Drevo(2,\\n                                                                           levo = Drevo(1),\\n                                                                           desno = Drevo(1)),\\n                                                              desno = Drevo(2,\\n                                                                            levo = Drevo(1),\\n                                                                            desno = Drevo(1)))))))\"]]", 
      "solution": "def polnoDrevo(n):\n    if n < 1:\n        return Drevo()\n    else:\n        return Drevo(n, levo=polnoDrevo(n - 1), desno=polnoDrevo(n - 1))", 
      "problem": 81, 
      "validation": "Check.equal('polnoDrevo(0)', Drevo())\nCheck.equal('polnoDrevo(1)', Drevo(1))\nCheck.equal('polnoDrevo(2)', Drevo(2, levo=Drevo(1), desno=Drevo(1)))\nCheck.equal('polnoDrevo(3)', Drevo(3, levo=Drevo(2, levo=Drevo(1), desno=Drevo(1)), desno=Drevo(2, levo=Drevo(1), desno=Drevo(1))))\nCheck.challenge(polnoDrevo(7))"
    }
  }, 
  {
    "pk": 258, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `racionalna(pol, nicla, a, b, h = 8)`, ki na\nintervalu [`a`, `b`] nari\u0161e graf racionalne funkcije z danim polom in ni\u010dlo\nter z razmerjem vodilnih koeficientov enakim ena. Ordinata naj zajame\ninterval [-`h`, `h`].\n\nNari\u0161ite tudi koordinatne osi ter ozna\u010dite pol in ni\u010dlo. Da bo graf ob\npolih videti lep, ga boste morda morali razbiti na dva grafa in narisati\nvsakega posebej. Graf opremite tudi z legendo.\n\nPrimer grafa za `racionalna(2, -1, -3, 4)`:\n    ![primer](http://i.imgur.com/3JpjI.png)", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "racionalna <- function(pol, nicla, a, b, h = 8) {\n  # narisemo koordinatni sistem\n  plot(c(a, b), c(-h, h), type = \"n\", xlab = \"x\", ylab = \"f(x)\")\n  abline(h = 0, v = 0, col = \"gray\", lwd = 0.5)\n\n  # narisemo graf funkcije\n  f <- function(x) (x - nicla) / (x - pol)\n\n  # da se izognemo polu, funkcijo nari\u0161emo v dveh delih\n  curve(f, a, pol, add = TRUE)\n  curve(f, pol, b, add = TRUE)\n\n  # narisemo pol in nicli\n  abline(v = pol, lty = \"dashed\")\n  points(nicla, 0)\n\n  # dodamo legendo\n  legend(\"topleft\", legend = c(\"f\", \"pol\", \"asimptota\", \"ni\u010dla\"),\n         lty = c(\"solid\", \"dotted\", \"dashed\", \"blank\"),\n         pch = c(-1, -1, -1, 1), merge = TRUE)\n\n}", 
      "problem": 75, 
      "validation": ""
    }
  }, 
  {
    "pk": 592, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `vsebuje(niz, podniz)`, ki vrne `True`, \u010de `niz`\nvsebuje `podniz` kot podniz.", 
      "timestamp": "2012-03-26 12:24:13", 
      "challenge": "[[\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"]]", 
      "solution": "def vsebuje(niz, podniz):\n    return podniz in niz", 
      "problem": 197, 
      "validation": "Check.equal(\"vsebuje('otorinolaringolog', 'torino')\", True)\nCheck.equal(\"vsebuje('otorinolaringolog', 'milano')\", False)\nCheck.equal(\"vsebuje('otorinolaringolog', 'trololo')\", False)\nfor i in range(50):\n    for j in range(20):\n        Check.challenge(vsebuje(str(i), str(j)))"
    }
  }, 
  {
    "pk": 356, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavi funkcije `delitelji(n)`, `prastevila(a,b)`, `delneVsote(s, k)`, ki\nzgradijo spodnje sezname. Uporabi izpeljane sezname.\n\n* Seznam vseh pozitivnih deliteljev \u0161tevila *n*.\n* Seznam vseh pra\u0161tevil od *a* do *b* (pomagaj si s funkcijo `jePrastevilo`\n  iz vaj o zankah).\n* Seznam vseh vsot strnjenih podzaporedij dol\u017eine *k* v danem seznamu *s*.\n\nPrimer:\n\n     >>> delitelji(60)\n     [1, 2, 3, 4, 5, 6, 10, 12, 15, 20, 30, 60]\n     >>> prastevila(0, 50)\n     [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n     >>> delneVsote([1, 4, 3, 8, 5, 6, 3, 6, 4, 5], 3)\n     [8, 15, 16, 19, 14, 15, 13, 15]", 
      "timestamp": "2012-04-16 13:04:46", 
      "challenge": "[]", 
      "solution": "def delitelji(n):\n    n = abs(n)\n    return [i for i in range(1, n + 1) if n % i == 0]\n\ndef jePrastevilo(n):\n    d = 2\n    while d ** 2 <= n:\n        if n % d == 0: return False\n        d += 1\n    return n > 1\n\ndef prastevila(a, b):\n    return [i for i in range(a, b + 1) if jePrastevilo(i)]\n\ndef delneVsote(s, k):\n    return [sum(s[i:i + k]) for i in range(len(s) - k + 1)]", 
      "problem": 123, 
      "validation": "Check.equal('delitelji(60)', [1, 2, 3, 4, 5, 6, 10, 12, 15, 20, 30, 60])\nCheck.equal('delitelji(37)', [1, 37])\nCheck.equal('prastevila(0, 50)', [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47])\nCheck.equal('prastevila(7,12)', [7, 11])\nCheck.equal('prastevila(7,13)', [7, 11, 13])\nCheck.equal('delneVsote([1, 4, 3, 8, 5, 6, 3, 6, 4, 5], 3)', [8, 15, 16, 19, 14, 15, 13, 15])\nCheck.equal('delneVsote([1, 4, 3, 8, 5, 6], 1)', [1, 4, 3, 8, 5, 6])"
    }
  }, 
  {
    "pk": 614, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavi funkcijo `povprecje(seznam)`, ki izra\u010duna povpre\u010dje podanega\r\nseznama realnih ali celih \u0161tevil. \u010ce je seznam prazen, naj funkcija\r\nvrne 0.\r\n", 
      "timestamp": "2012-03-27 08:50:37", 
      "challenge": "[]", 
      "solution": "def povprecje(seznam):\r\n    if len(seznam) == 0: return 0\r\n    return sum(seznam)/len(seznam)", 
      "problem": 203, 
      "validation": "Check.equal('povprecje([1, 2, 3])', 2)\r\nCheck.equal('povprecje([1, -5, -20, 30])', 1.5)\r\nCheck.equal('povprecje([])', 0)\r\nCheck.equal('round(povprecje([1.3,-4.6, 2.7, 12]),2)', 2.85)"
    }
  }, 
  {
    "pk": 500, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `stolp(skatle)`, ki vrne vi\u0161ino najvi\u0161jega\nstolpa, ki ga lahko sestavimo iz \u0161katel, ne da bi jih obra\u010dali.\nPri tem ni treba paziti na stabilnost stolpa.\nNa primer, najvi\u0161ji tak stolp iz \u0161katel z dimenzijami (50, 100, 100),\n(60, 50, 50) in (40, 40, 40) bi imel vi\u0161ino 150 cm.", 
      "timestamp": "2012-06-04 08:48:05", 
      "challenge": "[[\"None\", \"0\"], [\"None\", \"1\"], [\"None\", \"9\"], [\"None\", \"36\"], [\"None\", \"63\"], [\"None\", \"77\"], [\"None\", \"108\"], [\"None\", \"118\"], [\"None\", \"149\"], [\"None\", \"175\"], [\"None\", \"176\"], [\"None\", \"212\"], [\"None\", \"238\"], [\"None\", \"252\"], [\"None\", \"258\"], [\"None\", \"266\"], [\"None\", \"292\"], [\"None\", \"321\"], [\"None\", \"344\"], [\"None\", \"358\"], [\"None\", \"366\"], [\"None\", \"377\"], [\"None\", \"406\"], [\"None\", \"437\"], [\"None\", \"460\"], [\"None\", \"471\"], [\"None\", \"472\"], [\"None\", \"508\"], [\"None\", \"519\"], [\"None\", \"525\"]]", 
      "solution": "def stolp(skatle):\n    return sum(v for v, _, _ in skatle)", 
      "problem": 163, 
      "validation": "Check.equal('stolp([(50, 100, 100), (60, 30, 50), (40, 40, 40)])', 150)\nCheck.equal('stolp([(50, 100, 100), (60, 50, 50), (40, 40, 40)])', 150)\nCheck.equal('stolp([(60, 30, 50), (40, 40, 40)])', 100)\nsez = []\nfor i in range(30):\n    sez.append((i ** 3 % 37, i ** 2 % 16, i ** 4 % 58))\n    Check.challenge(stolp(sez))"
    }
  }, 
  {
    "pk": 701, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Napi\u0161ite funkcijo `crkePoVrsti(niz)`, ki vrne seznam \u0161tevil, ki vrne seznam polo\u017eajev\nznakov niza v slovenski abecedi. \u010ce neki znak ni \u010drka slovenske abecede, mu \nv pripradajo\u010di seznam ni\u010desar ne napi\u0161ite.", 
      "timestamp": "2012-06-10 01:11:13", 
      "challenge": "[]", 
      "solution": "def crkePoVrsti(niz):\n    return [prirediStevilo(c) for c in niz if prirediStevilo(c) > 0]", 
      "problem": 228, 
      "validation": "Check.equal('crkePoVrsti( \"Od A do \u017d!\" )', [16, 5, 1, 5, 16, 25] )"
    }
  }, 
  {
    "pk": 339, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `oklepaji(niz)`, ki bo preverila, ali so v danem\nnizu oklepaji pravilno gnezdeni. Na ostale znake naj se funkcija ne\nozira.", 
      "timestamp": "2012-03-22 11:22:52", 
      "challenge": "[]", 
      "solution": "def oklepaji(niz):\n    oklepaji = 0\n    for z in niz:\n        if z == '(':\n            oklepaji += 1\n        elif z == ')':\n            oklepaji -= 1\n        if oklepaji < 0:\n            return False\n    return oklepaji == 0", 
      "problem": 115, 
      "validation": "Check.equal('oklepaji(\"(2 + a) + ((3 - x) + (3 - 2))\")', True)\nCheck.equal('oklepaji(\"() +krneki-/*+3@ (() - ()((()())))\")', True)\nCheck.equal('oklepaji(\"(((()) + (\")', False)\nCheck.equal('oklepaji(\"(2 + 3) - 3 + ) (\")', False)"
    }
  }, 
  {
    "pk": 634, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "V datoteki so zapisana imena v ve\u010dih vrsticah, v vsaki vrstici so lo\u010dena\nz vejicami. Sestavite funkcijo `kolikokratSePojavi(niz, ime)`, ki vrne\n\u0161tevilo pojavitev imena `ime` v nizu imen `niz`.", 
      "timestamp": "2012-05-14 06:30:42", 
      "challenge": "[]", 
      "solution": "def kolikokratSePojavi(niz, ime):\n    return niz.split(',').count(ime)", 
      "problem": 208, 
      "validation": "Check.equal('kolikokratSePojavi(\"Jaka,Luka,Miha,Luka\", \"Jaka\")', 1)\nCheck.equal('kolikokratSePojavi(\"Jaka,Luka,Miha,Luka\", \"Luka\")', 2)\nCheck.equal('kolikokratSePojavi(\"Jaka,Luka,Miha,Luka\", \"Tone\")', 0)"
    }
  }, 
  {
    "pk": 448, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Na volitvah volijo stare\u0161ino. Vsak izmed predstavnikov skupnosti mu\nlahko podeli dolo\u010deno \u0161tevilo glasov (celo \u0161tevilo, razli\u010dni predstavniki\nlahko imajo razli\u010dno \u0161tevilo glasov), pri \u010demer so ti glasovi lahko tudi\nnegativni (\u010de z njim niso zadovoljni). Te glasove dobimo v obliki seznama.\nSestavi metodo `stanje(seznam)`, ki vrne seznam glasov, ki jih ima \nstare\u0161ina po glasovanju vsakega predstavnika.", 
      "timestamp": "2012-04-16 12:30:20", 
      "challenge": "[]", 
      "solution": "def stanje(s):\n    return [sum(s[:i+1]) for i in range(len(s))]", 
      "problem": 150, 
      "validation": "Check.equal('stanje([1, 2, -3, 1])', [1, 3, 0, 1])\nCheck.equal('stanje([1, -5, -2, 3, 4])', [1, -4, -6, -3, 1])"
    }
  }, 
  {
    "pk": 278, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `pricakovani.presek(i, j, n, p = 20)`, ki z metodo\nMonte Carlo ugotovi, koliko je pri\u010dakovana velikost preseka dveh\npodmno\u017eic velikosti `i` in `j` mno\u017eice z `n` elementi.\nVrednost izra\u010dunate tako, da zgenerirate `p` parov mno\u017eic ter vrnete\npovpre\u010dje velikosti njihovih presekov.\n\nKolik\u0161na je pri\u010dakovana teoreti\u010dna vrednost, ko gre \u0161tevilo poskusov\nproti neskon\u010dnosti?", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "povprecen.presek <- function(i, j, n, p = 20) {\n  # Sestavimo funkcijo, ki naredi en poskus\n  poskus <- function() length(intersect(sample(n, i), sample(n, j)))\n  # Nato vrnemo povpre\u010dje po `p` poskusih.\n  return(mean(replicate(p, poskus())))\n}", 
      "problem": 85, 
      "validation": ""
    }
  }, 
  {
    "pk": 654, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Janez rad igra ruleto. Ker pa je previden igralec, stavi vedno samo\nna rde\u010de ali \u010drno in vsaki\u010d stavi 1 \u017eeton. Rezultate zapisuje v\nseznam (kot vrednosti +1 ali -1).\nSestavi funkcijo `kolikoDenarja(zacetnaVrednost, padci)`, ki ugotovi, koliko denarja ima Janez na koncu.\nMetoda naj sprejme dva parametra: za\u010detno koli\u010dino denarja in seznam\nrezultatov stav.\nPrimer:\n\n     >>> kolikoDenarja(100, [-1, 1, 1, 1])\n     102", 
      "timestamp": "2012-04-16 13:36:02", 
      "challenge": "[]", 
      "solution": "def kolikoDenarja(zacetnaVrednost, padci):\n   return zacetnaVrednost+sum(padci)", 
      "problem": 213, 
      "validation": "Check.equal('kolikoDenarja(100, [-1, 1, 1, 1])', 102)\nCheck.equal('kolikoDenarja(10, [-1, -1, -1, 1, 1, -1, -1, -1, -1, -1])', 4)\nCheck.equal('kolikoDenarja(10, [-1, 1, -1, -1, 1, 1, -1, 1, 1, 1])', 12)"
    }
  }, 
  {
    "pk": 253, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite konstruktor `__init__(koef)`, ki nastavi tabelo koeficientov.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"None\", \"[1]\"], [\"None\", \"[1, 2]\"], [\"None\", \"[1, 2, 3]\"], [\"None\", \"[1, 2, 3, 4]\"], [\"None\", \"[1, 2, 3, 4, 5]\"], [\"None\", \"[1, 2, 3, 4, 5, 6]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98]\"]]", 
      "solution": "class Polinom:\n\n    def __init__(self, koef):\n        # \u017ee na za\u010detku se znebimo vseh ni\u010delnih vodilnih koeficientov\n        zadnji = len(koef)\n        while zadnji > 0 and koef[zadnji - 1] == 0: zadnji -= 1\n        self.koef = koef[:zadnji]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    def __repr__(self):\n        from re import sub\n        def monom(a, n):\n            monom = \"{0} x^{1}\".format(a, n)\n            # popravimo potence in koeficiente\n            monom = sub(\"\\^1$\", \"\", monom) # ^1 pobri\u0161emo le na koncu niza\n            monom = sub(\" x\\^0\", \"\", monom) # pobri\u0161emo presledek pred x^0\n            monom = sub(\"^1 x\", \"x\", monom) # 1 mora biti na za\u010detku monoma\n            monom = sub(\"-1 x\", \"-x\", monom)\n            return monom\n\n        # \"se\u0161tejemo\" vse momone z neni\u010delnimi koeficienti\n        # pred tem moramo koeficiente obrniti v vrstni red kot v izpisu\n        niz = \" + \".join(reversed([monom(a, n)\n                         for n, a in enumerate(self.koef) if a != 0]))\n        niz = sub(\"\\+ -\", \"- \", niz) # popravimo negativne koeficiente\n\n        if niz: return niz # \u010de smo dobili niz, ga vrnemo\n        else: return \"0\" # sicer prazen polinom izpi\u0161emo kot ni\u010delnega\n\n    def stopnja(self):\n        if self.koef: return len(self.koef) - 1\n        else: return -float(\"inf\")\n\n    def __add__(self, other):\n        # predpostavimo, da ima levi polinom vsaj toliko \u010dlenov kot desni\n        if len(self.koef) < len(other.koef): return other + self\n\n        # nato vzamemo levi polinom in kosoma pri\u0161tevamo desnega\n        koef_vsote = self.koef\n        for n, a in enumerate(other.koef):\n            koef_vsote[n] += a\n\n        return Polinom(koef_vsote)\n\n    def __mul__(self, other):\n        # \u010de je eden od polinomov ni\u010delen, je ni\u010delen tudi produkt\n        if not self.koef or not other.koef: return Polinom([])\n\n        # oba polinoma z ni\u010dlami podalj\u0161amo do iste dol\u017eine\n        levi = self.koef + len(other.koef) * [0]\n        desni = other.koef + len(self.koef) * [0]\n\n        koef_prod = [\n            sum(levi[i] * desni[n - i] for i in range(n + 1))\n            for n in range(len(levi))\n        ]\n        return Polinom(koef_prod)", 
      "problem": 74, 
      "validation": "Check.equal('Polinom([1, 2, 3]).koef', [1, 2, 3])\nCheck.equal('Polinom([1, 2, 0, 0]).koef', [1, 2])\nfor i in range(2, 100):\n    Check.challenge(Polinom(list(range(1, i))).koef)"
    }
  }, 
  {
    "pk": 263, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite generator `monotoni_odseki(it)`, ki sprejme *iterator*\n`it` in vrne iterator monotonih odsekov. Funkcija naj deluje\ntudi za neskon\u010dne iteratorje. Predpostavimo, da se neskon\u010dni\nmonotoni odseki ne pojavljajo.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"None\", \"[0, 14, 30, 48, 68, 19, 43, 69, 26, 56, 17, 51, 16, 54, 23, 65, 38, 13, 61, 40, 21, 4, 60, 47, 36, 27, 20, 15, 12, 11, 12, 15, 20, 27, 36, 47, 60, 4, 21, 40, 61, 13, 38, 65, 23, 54, 16, 51, 17, 56, 26, 69, 43, 19, 68, 48, 30, 14, 0, 59, 49, 41, 35, 31, 29, 29, 31, 35, 41, 49, 59, 0, 14, 30, 48, 68, 19, 43, 69, 26, 56, 17, 51, 16, 54, 23, 65, 38, 13, 61, 40, 21, 4, 60, 47, 36, 27, 20, 15, 12, 11, 12, 15, 20, 27, 36, 47, 60, 4, 21, 40, 61, 13, 38, 65, 23, 54, 16, 51, 17, 56, 26, 69, 43, 19, 68, 48, 30, 14, 0, 59, 49, 41, 35, 31, 29, 29, 31, 35, 41, 49, 59, 0, 14, 30, 48, 68, 19, 43, 69, 26, 56, 17, 51, 16, 54, 23, 65, 38, 13, 61, 40, 21, 4, 60, 47, 36, 27, 20, 15, 12, 11, 12, 15, 20, 27, 36, 47, 60, 4, 21, 40, 61, 13, 38, 65, 23, 54, 16, 51, 17, 56, 26, 69, 43, 19, 68, 48, 30, 14, 0, 59, 49, 41, 35, 31, 29, 29, 31, 35, 41, 49, 59, 0, 14, 30, 48, 68, 19, 43, 69, 26, 56, 17, 51, 16, 54, 23, 65, 38, 13, 61, 40, 21, 4, 60, 47, 36, 27, 20, 15, 12, 11, 12, 15, 20, 27, 36, 47, 60, 4, 21, 40, 61, 13, 38, 65, 23, 54, 16, 51, 17, 56, 26, 69, 43, 19, 68, 48, 30, 14, 0, 59, 49, 41, 35, 31, 29, 29, 31, 35, 41, 49, 59, 0, 14, 30, 48, 68, 19, 43, 69, 26, 56, 17, 51, 16, 54, 23, 65, 38, 13, 61, 40, 21, 4, 60, 47, 36, 27, 20, 15, 12, 11, 12, 15, 20, 27, 36, 47, 60, 4, 21, 40, 61, 13, 38, 65, 23, 54, 16, 51, 17, 56, 26, 69, 43, 19, 68, 48, 30, 14, 0, 59, 49, 41, 35, 31, 29, 29, 31, 35, 41, 49, 59, 0, 14, 30, 48, 68, 19, 43, 69, 26, 56, 17, 51, 16, 54, 23, 65, 38, 13, 61, 40, 21, 4, 60, 47, 36, 27, 20, 15, 12, 11, 12, 15, 20, 27, 36, 47, 60, 4, 21, 40, 61, 13, 38, 65, 23, 54, 16, 51, 17, 56, 26, 69, 43, 19, 68, 48, 30, 14, 0, 59, 49, 41, 35, 31, 29, 29, 31, 35, 41, 49, 59, 0, 14, 30, 48, 68, 19, 43, 69, 26, 56, 17, 51, 16, 54, 23, 65, 38, 13, 61, 40, 21, 4, 60, 47, 36, 27, 20, 15, 12, 11, 12, 15, 20, 27, 36, 47, 60, 4, 21, 40, 61, 13, 38, 65, 23, 54, 16, 51, 17, 56, 26, 69, 43, 19, 68, 48, 30, 14, 0, 59, 49, 41, 35, 31, 29, 29, 31, 35, 41, 49, 59, 0, 14, 30, 48, 68, 19, 43, 69, 26, 56, 17, 51, 16, 54, 23, 65, 38, 13, 61, 40, 21, 4, 60, 47, 36, 27, 20, 15, 12, 11, 12, 15, 20, 27, 36, 47, 60, 4, 21, 40, 61, 13, 38, 65, 23, 54, 16, 51, 17, 56, 26, 69, 43, 19, 68, 48, 30, 14, 0, 59, 49, 41, 35, 31, 29, 29, 31, 35, 41, 49, 59, 0, 14, 30, 48, 68, 19, 43, 69, 26, 56, 17, 51, 16, 54, 23, 65, 38, 13, 61, 40, 21, 4, 60, 47, 36, 27, 20, 15, 12, 11, 12, 15, 20, 27, 36, 47, 60, 4, 21, 40, 61, 13, 38, 65, 23, 54, 16, 51, 17, 56, 26, 69, 43, 19, 68, 48, 30, 14, 0, 59, 49, 41, 35, 31, 29, 29, 31, 35, 41, 49, 59, 0, 14, 30, 48, 68, 19, 43, 69, 26, 56, 17, 51, 16, 54, 23, 65, 38, 13, 61, 40, 21, 4, 60, 47, 36, 27, 20, 15, 12, 11, 12, 15, 20, 27, 36, 47, 60, 4, 21, 40, 61, 13, 38, 65, 23, 54, 16, 51, 17, 56, 26, 69, 43, 19, 68, 48, 30, 14, 0, 59, 49, 41, 35, 31, 29, 29, 31, 35, 41, 49, 59, 0, 14, 30, 48, 68, 19, 43, 69, 26, 56, 17, 51, 16, 54, 23, 65, 38, 13, 61, 40, 21, 4, 60, 47, 36, 27, 20, 15, 12, 11, 12, 15, 20, 27, 36, 47, 60, 4, 21, 40, 61, 13, 38, 65, 23, 54, 16, 51, 17, 56, 26, 69, 43, 19, 68, 48, 30, 14, 0, 59, 49, 41, 35, 31, 29, 29, 31, 35, 41, 49, 59, 0, 14, 30, 48, 68, 19, 43, 69, 26, 56, 17, 51, 16, 54, 23, 65, 38, 13, 61, 40, 21, 4, 60, 47, 36, 27, 20, 15, 12, 11, 12, 15, 20, 27, 36, 47, 60, 4, 21, 40, 61, 13, 38, 65, 23, 54, 16, 51, 17, 56, 26, 69, 43, 19, 68, 48, 30, 14, 0, 59, 49, 41, 35, 31, 29, 29, 31, 35, 41, 49, 59, 0, 14, 30, 48, 68, 19, 43, 69, 26, 56, 17, 51, 16, 54, 23, 65, 38, 13, 61, 40, 21, 4, 60, 47, 36, 27, 20, 15, 12, 11, 12, 15, 20, 27, 36, 47, 60, 4, 21, 40, 61, 13, 38, 65, 23, 54, 16, 51, 17, 56, 26, 69, 43, 19, 68, 48, 30, 14, 0, 59, 49, 41, 35, 31, 29, 29, 31, 35, 41, 49, 59, 0, 14, 30, 48, 68, 19, 43, 69, 26, 56, 17, 51, 16, 54, 23, 65, 38, 13, 61, 40, 21, 4, 60, 47, 36, 27, 20, 15, 12, 11, 12, 15, 20, 27, 36, 47, 60, 4, 21, 40, 61, 13, 38, 65, 23, 54, 16, 51, 17, 56, 26, 69, 43, 19, 68, 48, 30, 14, 0, 59, 49, 41, 35, 31, 29, 29, 31, 35, 41, 49, 59, 0, 14, 30, 48, 68, 19]\"], [\"None\", \"[0, 14, 30, 48, 68, 15, 39, 65, 18, 48, 5, 39, 0, 38, 3, 45, 14, 60, 33, 8, 60, 39, 20, 3, 63, 50, 39, 30, 23, 18, 15, 14, 15, 18, 23, 30, 39, 50, 63, 3, 20, 39, 60, 8, 33, 60, 14, 45, 3, 38, 0, 39, 5, 48, 18, 65, 39, 15, 68, 48, 30, 14, 0, 63, 53, 45, 39, 35, 33, 33, 35, 39, 45, 53, 63, 0, 14, 30, 48, 68, 15, 39, 65, 18, 48, 5, 39, 0, 38, 3, 45, 14, 60, 33, 8, 60, 39, 20, 3, 63, 50, 39, 30, 23, 18, 15, 14, 15, 18, 23, 30, 39, 50, 63, 3, 20, 39, 60, 8, 33, 60, 14, 45, 3, 38, 0, 39, 5, 48, 18, 65, 39, 15, 68, 48, 30, 14, 0, 63, 53, 45, 39, 35, 33, 33, 35, 39, 45, 53, 63, 0, 14, 30, 48, 68, 15, 39, 65, 18, 48, 5, 39, 0, 38, 3, 45, 14, 60, 33, 8, 60, 39, 20, 3, 63, 50, 39, 30, 23, 18, 15, 14, 15, 18, 23, 30, 39, 50, 63, 3, 20, 39, 60, 8, 33, 60, 14, 45, 3, 38, 0, 39, 5, 48, 18, 65, 39, 15, 68, 48, 30, 14, 0, 63, 53, 45, 39, 35, 33, 33, 35, 39, 45, 53, 63, 0, 14, 30, 48, 68, 15, 39, 65, 18, 48, 5, 39, 0, 38, 3, 45, 14, 60, 33, 8, 60, 39, 20, 3, 63, 50, 39, 30, 23, 18, 15, 14, 15, 18, 23, 30, 39, 50, 63, 3, 20, 39, 60, 8, 33, 60, 14, 45, 3, 38, 0, 39, 5, 48, 18, 65, 39, 15, 68, 48, 30, 14, 0, 63, 53, 45, 39, 35, 33, 33, 35, 39, 45, 53, 63, 0, 14, 30, 48, 68, 15, 39, 65, 18, 48, 5, 39, 0, 38, 3, 45, 14, 60, 33, 8, 60, 39, 20, 3, 63, 50, 39, 30, 23, 18, 15, 14, 15, 18, 23, 30, 39, 50, 63, 3, 20, 39, 60, 8, 33, 60, 14, 45, 3, 38, 0, 39, 5, 48, 18, 65, 39, 15, 68, 48, 30, 14, 0, 63, 53, 45, 39, 35, 33, 33, 35, 39, 45, 53, 63, 0, 14, 30, 48, 68, 15, 39, 65, 18, 48, 5, 39, 0, 38, 3, 45, 14, 60, 33, 8, 60, 39, 20, 3, 63, 50, 39, 30, 23, 18, 15, 14, 15, 18, 23, 30, 39, 50, 63, 3, 20, 39, 60, 8, 33, 60, 14, 45, 3, 38, 0, 39, 5, 48, 18, 65, 39, 15, 68, 48, 30, 14, 0, 63, 53, 45, 39, 35, 33, 33, 35, 39, 45, 53, 63, 0, 14, 30, 48, 68, 15, 39, 65, 18, 48, 5, 39, 0, 38, 3, 45, 14, 60, 33, 8, 60, 39, 20, 3, 63, 50, 39, 30, 23, 18, 15, 14, 15, 18, 23, 30, 39, 50, 63, 3, 20, 39, 60, 8, 33, 60, 14, 45, 3, 38, 0, 39, 5, 48, 18, 65, 39, 15, 68, 48, 30, 14, 0, 63, 53, 45, 39, 35, 33, 33, 35, 39, 45, 53, 63, 0, 14, 30, 48, 68, 15, 39, 65, 18, 48, 5, 39, 0, 38, 3, 45, 14, 60, 33, 8, 60, 39, 20, 3, 63, 50, 39, 30, 23, 18, 15, 14, 15, 18, 23, 30, 39, 50, 63, 3, 20, 39, 60, 8, 33, 60, 14, 45, 3, 38, 0, 39, 5, 48, 18, 65, 39, 15, 68, 48, 30, 14, 0, 63, 53, 45, 39, 35, 33, 33, 35, 39, 45, 53, 63, 0, 14, 30, 48, 68, 15, 39, 65, 18, 48, 5, 39, 0, 38, 3, 45, 14, 60, 33, 8, 60, 39, 20, 3, 63, 50, 39, 30, 23, 18, 15, 14, 15, 18, 23, 30, 39, 50, 63, 3, 20, 39, 60, 8, 33, 60, 14, 45, 3, 38, 0, 39, 5, 48, 18, 65, 39, 15, 68, 48, 30, 14, 0, 63, 53, 45, 39, 35, 33, 33, 35, 39, 45, 53, 63, 0, 14, 30, 48, 68, 15, 39, 65, 18, 48, 5, 39, 0, 38, 3, 45, 14, 60, 33, 8, 60, 39, 20, 3, 63, 50, 39, 30, 23, 18, 15, 14, 15, 18, 23, 30, 39, 50, 63, 3, 20, 39, 60, 8, 33, 60, 14, 45, 3, 38, 0, 39, 5, 48, 18, 65, 39, 15, 68, 48, 30, 14, 0, 63, 53, 45, 39, 35, 33, 33, 35, 39, 45, 53, 63, 0, 14, 30, 48, 68, 15, 39, 65, 18, 48, 5, 39, 0, 38, 3, 45, 14, 60, 33, 8, 60, 39, 20, 3, 63, 50, 39, 30, 23, 18, 15, 14, 15, 18, 23, 30, 39, 50, 63, 3, 20, 39, 60, 8, 33, 60, 14, 45, 3, 38, 0, 39, 5, 48, 18, 65, 39, 15, 68, 48, 30, 14, 0, 63, 53, 45, 39, 35, 33, 33, 35, 39, 45, 53, 63, 0, 14, 30, 48, 68, 15, 39, 65, 18, 48, 5, 39, 0, 38, 3, 45, 14, 60, 33, 8, 60, 39, 20, 3, 63, 50, 39, 30, 23, 18, 15, 14, 15, 18, 23, 30, 39, 50, 63, 3, 20, 39, 60, 8, 33, 60, 14, 45, 3, 38, 0, 39, 5, 48, 18, 65, 39, 15, 68, 48, 30, 14, 0, 63, 53, 45, 39, 35, 33, 33, 35, 39, 45, 53, 63, 0, 14, 30, 48, 68, 15, 39, 65, 18, 48, 5, 39, 0, 38, 3, 45, 14, 60, 33, 8, 60, 39, 20, 3, 63, 50, 39, 30, 23, 18, 15, 14, 15, 18, 23, 30, 39, 50, 63, 3, 20, 39, 60, 8, 33, 60, 14, 45, 3, 38, 0, 39, 5, 48, 18, 65, 39, 15, 68, 48, 30, 14, 0, 63, 53, 45, 39, 35, 33, 33, 35, 39, 45, 53, 63, 0, 14, 30, 48, 68, 15, 39, 65, 18, 48, 5, 39, 0, 38, 3, 45, 14, 60, 33, 8, 60, 39, 20, 3, 63]\"], [\"None\", \"[0, 14, 30, 48, 68, 11, 35, 61, 10, 40, 72, 27, 63, 22, 62, 25, 69, 36, 5, 55, 28, 3, 59, 38, 19, 2, 66, 53, 42, 33, 26, 21, 18, 17, 18, 21, 26, 33, 42, 53, 66, 2, 19, 38, 59, 3, 28, 55, 5, 36, 69, 25, 62, 22, 63, 27, 72, 40, 10, 61, 35, 11, 68, 48, 30, 14, 0, 67, 57, 49, 43, 39, 37, 37, 39, 43, 49, 57, 67, 0, 14, 30, 48, 68, 11, 35, 61, 10, 40, 72, 27, 63, 22, 62, 25, 69, 36, 5, 55, 28, 3, 59, 38, 19, 2, 66, 53, 42, 33, 26, 21, 18, 17, 18, 21, 26, 33, 42, 53, 66, 2, 19, 38, 59, 3, 28, 55, 5, 36, 69, 25, 62, 22, 63, 27, 72, 40, 10, 61, 35, 11, 68, 48, 30, 14, 0, 67, 57, 49, 43, 39, 37, 37, 39, 43, 49, 57, 67, 0, 14, 30, 48, 68, 11, 35, 61, 10, 40, 72, 27, 63, 22, 62, 25, 69, 36, 5, 55, 28, 3, 59, 38, 19, 2, 66, 53, 42, 33, 26, 21, 18, 17, 18, 21, 26, 33, 42, 53, 66, 2, 19, 38, 59, 3, 28, 55, 5, 36, 69, 25, 62, 22, 63, 27, 72, 40, 10, 61, 35, 11, 68, 48, 30, 14, 0, 67, 57, 49, 43, 39, 37, 37, 39, 43, 49, 57, 67, 0, 14, 30, 48, 68, 11, 35, 61, 10, 40, 72, 27, 63, 22, 62, 25, 69, 36, 5, 55, 28, 3, 59, 38, 19, 2, 66, 53, 42, 33, 26, 21, 18, 17, 18, 21, 26, 33, 42, 53, 66, 2, 19, 38, 59, 3, 28, 55, 5, 36, 69, 25, 62, 22, 63, 27, 72, 40, 10, 61, 35, 11, 68, 48, 30, 14, 0, 67, 57, 49, 43, 39, 37, 37, 39, 43, 49, 57, 67, 0, 14, 30, 48, 68, 11, 35, 61, 10, 40, 72, 27, 63, 22, 62, 25, 69, 36, 5, 55, 28, 3, 59, 38, 19, 2, 66, 53, 42, 33, 26, 21, 18, 17, 18, 21, 26, 33, 42, 53, 66, 2, 19, 38, 59, 3, 28, 55, 5, 36, 69, 25, 62, 22, 63, 27, 72, 40, 10, 61, 35, 11, 68, 48, 30, 14, 0, 67, 57, 49, 43, 39, 37, 37, 39, 43, 49, 57, 67, 0, 14, 30, 48, 68, 11, 35, 61, 10, 40, 72, 27, 63, 22, 62, 25, 69, 36, 5, 55, 28, 3, 59, 38, 19, 2, 66, 53, 42, 33, 26, 21, 18, 17, 18, 21, 26, 33, 42, 53, 66, 2, 19, 38, 59, 3, 28, 55, 5, 36, 69, 25, 62, 22, 63, 27, 72, 40, 10, 61, 35, 11, 68, 48, 30, 14, 0, 67, 57, 49, 43, 39, 37, 37, 39, 43, 49, 57, 67, 0, 14, 30, 48, 68, 11, 35, 61, 10, 40, 72, 27, 63, 22, 62, 25, 69, 36, 5, 55, 28, 3, 59, 38, 19, 2, 66, 53, 42, 33, 26, 21, 18, 17, 18, 21, 26, 33, 42, 53, 66, 2, 19, 38, 59, 3, 28, 55, 5, 36, 69, 25, 62, 22, 63, 27, 72, 40, 10, 61, 35, 11, 68, 48, 30, 14, 0, 67, 57, 49, 43, 39, 37, 37, 39, 43, 49, 57, 67, 0, 14, 30, 48, 68, 11, 35, 61, 10, 40, 72, 27, 63, 22, 62, 25, 69, 36, 5, 55, 28, 3, 59, 38, 19, 2, 66, 53, 42, 33, 26, 21, 18, 17, 18, 21, 26, 33, 42, 53, 66, 2, 19, 38, 59, 3, 28, 55, 5, 36, 69, 25, 62, 22, 63, 27, 72, 40, 10, 61, 35, 11, 68, 48, 30, 14, 0, 67, 57, 49, 43, 39, 37, 37, 39, 43, 49, 57, 67, 0, 14, 30, 48, 68, 11, 35, 61, 10, 40, 72, 27, 63, 22, 62, 25, 69, 36, 5, 55, 28, 3, 59, 38, 19, 2, 66, 53, 42, 33, 26, 21, 18, 17, 18, 21, 26, 33, 42, 53, 66, 2, 19, 38, 59, 3, 28, 55, 5, 36, 69, 25, 62, 22, 63, 27, 72, 40, 10, 61, 35, 11, 68, 48, 30, 14, 0, 67, 57, 49, 43, 39, 37, 37, 39, 43, 49, 57, 67, 0, 14, 30, 48, 68, 11, 35, 61, 10, 40, 72, 27, 63, 22, 62, 25, 69, 36, 5, 55, 28, 3, 59, 38, 19, 2, 66, 53, 42, 33, 26, 21, 18, 17, 18, 21, 26, 33, 42, 53, 66, 2, 19, 38, 59, 3, 28, 55, 5, 36, 69, 25, 62, 22, 63, 27, 72, 40, 10, 61, 35, 11, 68, 48, 30, 14, 0, 67, 57, 49, 43, 39, 37, 37, 39, 43, 49, 57, 67, 0, 14, 30, 48, 68, 11, 35, 61, 10, 40, 72, 27, 63, 22, 62, 25, 69, 36, 5, 55, 28, 3, 59, 38, 19, 2, 66, 53, 42, 33, 26, 21, 18, 17, 18, 21, 26, 33, 42, 53, 66, 2, 19, 38, 59, 3, 28, 55, 5, 36, 69, 25, 62, 22, 63, 27, 72, 40, 10, 61, 35, 11, 68, 48, 30, 14, 0, 67, 57, 49, 43, 39, 37, 37, 39, 43, 49, 57, 67, 0, 14, 30, 48, 68, 11, 35, 61, 10, 40, 72, 27, 63, 22, 62, 25, 69, 36, 5, 55, 28, 3, 59, 38, 19, 2, 66, 53, 42, 33, 26, 21, 18, 17, 18, 21, 26, 33, 42, 53, 66, 2, 19, 38, 59, 3, 28, 55, 5, 36, 69, 25, 62, 22, 63, 27, 72, 40, 10, 61, 35, 11, 68, 48, 30, 14, 0, 67, 57, 49, 43, 39, 37, 37, 39, 43, 49, 57, 67, 0, 14, 30, 48, 68, 11, 35, 61, 10, 40, 72, 27, 63, 22, 62, 25, 69, 36, 5, 55, 28, 3, 59, 38, 19, 2, 66, 53, 42, 33, 26, 21, 18, 17, 18, 21, 26, 33, 42, 53, 66, 2, 19, 38, 59, 3, 28, 55, 5, 36, 69, 25]\"], [\"None\", \"[0, 14, 30, 48, 68, 7, 31, 57, 2, 32, 64, 15, 51, 6, 46, 5, 49, 12, 60, 27, 79, 50, 23, 81, 58, 37, 18, 1, 69, 56, 45, 36, 29, 24, 21, 20, 21, 24, 29, 36, 45, 56, 69, 1, 18, 37, 58, 81, 23, 50, 79, 27, 60, 12, 49, 5, 46, 6, 51, 15, 64, 32, 2, 57, 31, 7, 68, 48, 30, 14, 0, 71, 61, 53, 47, 43, 41, 41, 43, 47, 53, 61, 71, 0, 14, 30, 48, 68, 7, 31, 57, 2, 32, 64, 15, 51, 6, 46, 5, 49, 12, 60, 27, 79, 50, 23, 81, 58, 37, 18, 1, 69, 56, 45, 36, 29, 24, 21, 20, 21, 24, 29, 36, 45, 56, 69, 1, 18, 37, 58, 81, 23, 50, 79, 27, 60, 12, 49, 5, 46, 6, 51, 15, 64, 32, 2, 57, 31, 7, 68, 48, 30, 14, 0, 71, 61, 53, 47, 43, 41, 41, 43, 47, 53, 61, 71, 0, 14, 30, 48, 68, 7, 31, 57, 2, 32, 64, 15, 51, 6, 46, 5, 49, 12, 60, 27, 79, 50, 23, 81, 58, 37, 18, 1, 69, 56, 45, 36, 29, 24, 21, 20, 21, 24, 29, 36, 45, 56, 69, 1, 18, 37, 58, 81, 23, 50, 79, 27, 60, 12, 49, 5, 46, 6, 51, 15, 64, 32, 2, 57, 31, 7, 68, 48, 30, 14, 0, 71, 61, 53, 47, 43, 41, 41, 43, 47, 53, 61, 71, 0, 14, 30, 48, 68, 7, 31, 57, 2, 32, 64, 15, 51, 6, 46, 5, 49, 12, 60, 27, 79, 50, 23, 81, 58, 37, 18, 1, 69, 56, 45, 36, 29, 24, 21, 20, 21, 24, 29, 36, 45, 56, 69, 1, 18, 37, 58, 81, 23, 50, 79, 27, 60, 12, 49, 5, 46, 6, 51, 15, 64, 32, 2, 57, 31, 7, 68, 48, 30, 14, 0, 71, 61, 53, 47, 43, 41, 41, 43, 47, 53, 61, 71, 0, 14, 30, 48, 68, 7, 31, 57, 2, 32, 64, 15, 51, 6, 46, 5, 49, 12, 60, 27, 79, 50, 23, 81, 58, 37, 18, 1, 69, 56, 45, 36, 29, 24, 21, 20, 21, 24, 29, 36, 45, 56, 69, 1, 18, 37, 58, 81, 23, 50, 79, 27, 60, 12, 49, 5, 46, 6, 51, 15, 64, 32, 2, 57, 31, 7, 68, 48, 30, 14, 0, 71, 61, 53, 47, 43, 41, 41, 43, 47, 53, 61, 71, 0, 14, 30, 48, 68, 7, 31, 57, 2, 32, 64, 15, 51, 6, 46, 5, 49, 12, 60, 27, 79, 50, 23, 81, 58, 37, 18, 1, 69, 56, 45, 36, 29, 24, 21, 20, 21, 24, 29, 36, 45, 56, 69, 1, 18, 37, 58, 81, 23, 50, 79, 27, 60, 12, 49, 5, 46, 6, 51, 15, 64, 32, 2, 57, 31, 7, 68, 48, 30, 14, 0, 71, 61, 53, 47, 43, 41, 41, 43, 47, 53, 61, 71, 0, 14, 30, 48, 68, 7, 31, 57, 2, 32, 64, 15, 51, 6, 46, 5, 49, 12, 60, 27, 79, 50, 23, 81, 58, 37, 18, 1, 69, 56, 45, 36, 29, 24, 21, 20, 21, 24, 29, 36, 45, 56, 69, 1, 18, 37, 58, 81, 23, 50, 79, 27, 60, 12, 49, 5, 46, 6, 51, 15, 64, 32, 2, 57, 31, 7, 68, 48, 30, 14, 0, 71, 61, 53, 47, 43, 41, 41, 43, 47, 53, 61, 71, 0, 14, 30, 48, 68, 7, 31, 57, 2, 32, 64, 15, 51, 6, 46, 5, 49, 12, 60, 27, 79, 50, 23, 81, 58, 37, 18, 1, 69, 56, 45, 36, 29, 24, 21, 20, 21, 24, 29, 36, 45, 56, 69, 1, 18, 37, 58, 81, 23, 50, 79, 27, 60, 12, 49, 5, 46, 6, 51, 15, 64, 32, 2, 57, 31, 7, 68, 48, 30, 14, 0, 71, 61, 53, 47, 43, 41, 41, 43, 47, 53, 61, 71, 0, 14, 30, 48, 68, 7, 31, 57, 2, 32, 64, 15, 51, 6, 46, 5, 49, 12, 60, 27, 79, 50, 23, 81, 58, 37, 18, 1, 69, 56, 45, 36, 29, 24, 21, 20, 21, 24, 29, 36, 45, 56, 69, 1, 18, 37, 58, 81, 23, 50, 79, 27, 60, 12, 49, 5, 46, 6, 51, 15, 64, 32, 2, 57, 31, 7, 68, 48, 30, 14, 0, 71, 61, 53, 47, 43, 41, 41, 43, 47, 53, 61, 71, 0, 14, 30, 48, 68, 7, 31, 57, 2, 32, 64, 15, 51, 6, 46, 5, 49, 12, 60, 27, 79, 50, 23, 81, 58, 37, 18, 1, 69, 56, 45, 36, 29, 24, 21, 20, 21, 24, 29, 36, 45, 56, 69, 1, 18, 37, 58, 81, 23, 50, 79, 27, 60, 12, 49, 5, 46, 6, 51, 15, 64, 32, 2, 57, 31, 7, 68, 48, 30, 14, 0, 71, 61, 53, 47, 43, 41, 41, 43, 47, 53, 61, 71, 0, 14, 30, 48, 68, 7, 31, 57, 2, 32, 64, 15, 51, 6, 46, 5, 49, 12, 60, 27, 79, 50, 23, 81, 58, 37, 18, 1, 69, 56, 45, 36, 29, 24, 21, 20, 21, 24, 29, 36, 45, 56, 69, 1, 18, 37, 58, 81, 23, 50, 79, 27, 60, 12, 49, 5, 46, 6, 51, 15, 64, 32, 2, 57, 31, 7, 68, 48, 30, 14, 0, 71, 61, 53, 47, 43, 41, 41, 43, 47, 53, 61, 71, 0, 14, 30, 48, 68, 7, 31, 57, 2, 32, 64, 15, 51, 6, 46, 5, 49, 12, 60, 27, 79, 50, 23, 81, 58, 37, 18, 1, 69, 56, 45, 36, 29, 24, 21, 20, 21, 24, 29, 36, 45, 56, 69, 1, 18, 37, 58, 81, 23, 50, 79, 27, 60, 12, 49, 5, 46, 6, 51, 15, 64, 32, 2, 57, 31, 7, 68, 48, 30, 14, 0, 71, 61, 53, 47, 43, 41, 41, 43, 47, 53, 61, 71, 0, 14, 30, 48]\"], [\"None\", \"[0, 14, 30, 48, 68, 3, 27, 53, 81, 24, 56, 3, 39, 77, 30, 72, 29, 75, 36, 86, 51, 18, 74, 45, 18, 80, 57, 36, 17, 0, 72, 59, 48, 39, 32, 27, 24, 23, 24, 27, 32, 39, 48, 59, 72, 0, 17, 36, 57, 80, 18, 45, 74, 18, 51, 86, 36, 75, 29, 72, 30, 77, 39, 3, 56, 24, 81, 53, 27, 3, 68, 48, 30, 14, 0, 75, 65, 57, 51, 47, 45, 45, 47, 51, 57, 65, 75, 0, 14, 30, 48, 68, 3, 27, 53, 81, 24, 56, 3, 39, 77, 30, 72, 29, 75, 36, 86, 51, 18, 74, 45, 18, 80, 57, 36, 17, 0, 72, 59, 48, 39, 32, 27, 24, 23, 24, 27, 32, 39, 48, 59, 72, 0, 17, 36, 57, 80, 18, 45, 74, 18, 51, 86, 36, 75, 29, 72, 30, 77, 39, 3, 56, 24, 81, 53, 27, 3, 68, 48, 30, 14, 0, 75, 65, 57, 51, 47, 45, 45, 47, 51, 57, 65, 75, 0, 14, 30, 48, 68, 3, 27, 53, 81, 24, 56, 3, 39, 77, 30, 72, 29, 75, 36, 86, 51, 18, 74, 45, 18, 80, 57, 36, 17, 0, 72, 59, 48, 39, 32, 27, 24, 23, 24, 27, 32, 39, 48, 59, 72, 0, 17, 36, 57, 80, 18, 45, 74, 18, 51, 86, 36, 75, 29, 72, 30, 77, 39, 3, 56, 24, 81, 53, 27, 3, 68, 48, 30, 14, 0, 75, 65, 57, 51, 47, 45, 45, 47, 51, 57, 65, 75, 0, 14, 30, 48, 68, 3, 27, 53, 81, 24, 56, 3, 39, 77, 30, 72, 29, 75, 36, 86, 51, 18, 74, 45, 18, 80, 57, 36, 17, 0, 72, 59, 48, 39, 32, 27, 24, 23, 24, 27, 32, 39, 48, 59, 72, 0, 17, 36, 57, 80, 18, 45, 74, 18, 51, 86, 36, 75, 29, 72, 30, 77, 39, 3, 56, 24, 81, 53, 27, 3, 68, 48, 30, 14, 0, 75, 65, 57, 51, 47, 45, 45, 47, 51, 57, 65, 75, 0, 14, 30, 48, 68, 3, 27, 53, 81, 24, 56, 3, 39, 77, 30, 72, 29, 75, 36, 86, 51, 18, 74, 45, 18, 80, 57, 36, 17, 0, 72, 59, 48, 39, 32, 27, 24, 23, 24, 27, 32, 39, 48, 59, 72, 0, 17, 36, 57, 80, 18, 45, 74, 18, 51, 86, 36, 75, 29, 72, 30, 77, 39, 3, 56, 24, 81, 53, 27, 3, 68, 48, 30, 14, 0, 75, 65, 57, 51, 47, 45, 45, 47, 51, 57, 65, 75, 0, 14, 30, 48, 68, 3, 27, 53, 81, 24, 56, 3, 39, 77, 30, 72, 29, 75, 36, 86, 51, 18, 74, 45, 18, 80, 57, 36, 17, 0, 72, 59, 48, 39, 32, 27, 24, 23, 24, 27, 32, 39, 48, 59, 72, 0, 17, 36, 57, 80, 18, 45, 74, 18, 51, 86, 36, 75, 29, 72, 30, 77, 39, 3, 56, 24, 81, 53, 27, 3, 68, 48, 30, 14, 0, 75, 65, 57, 51, 47, 45, 45, 47, 51, 57, 65, 75, 0, 14, 30, 48, 68, 3, 27, 53, 81, 24, 56, 3, 39, 77, 30, 72, 29, 75, 36, 86, 51, 18, 74, 45, 18, 80, 57, 36, 17, 0, 72, 59, 48, 39, 32, 27, 24, 23, 24, 27, 32, 39, 48, 59, 72, 0, 17, 36, 57, 80, 18, 45, 74, 18, 51, 86, 36, 75, 29, 72, 30, 77, 39, 3, 56, 24, 81, 53, 27, 3, 68, 48, 30, 14, 0, 75, 65, 57, 51, 47, 45, 45, 47, 51, 57, 65, 75, 0, 14, 30, 48, 68, 3, 27, 53, 81, 24, 56, 3, 39, 77, 30, 72, 29, 75, 36, 86, 51, 18, 74, 45, 18, 80, 57, 36, 17, 0, 72, 59, 48, 39, 32, 27, 24, 23, 24, 27, 32, 39, 48, 59, 72, 0, 17, 36, 57, 80, 18, 45, 74, 18, 51, 86, 36, 75, 29, 72, 30, 77, 39, 3, 56, 24, 81, 53, 27, 3, 68, 48, 30, 14, 0, 75, 65, 57, 51, 47, 45, 45, 47, 51, 57, 65, 75, 0, 14, 30, 48, 68, 3, 27, 53, 81, 24, 56, 3, 39, 77, 30, 72, 29, 75, 36, 86, 51, 18, 74, 45, 18, 80, 57, 36, 17, 0, 72, 59, 48, 39, 32, 27, 24, 23, 24, 27, 32, 39, 48, 59, 72, 0, 17, 36, 57, 80, 18, 45, 74, 18, 51, 86, 36, 75, 29, 72, 30, 77, 39, 3, 56, 24, 81, 53, 27, 3, 68, 48, 30, 14, 0, 75, 65, 57, 51, 47, 45, 45, 47, 51, 57, 65, 75, 0, 14, 30, 48, 68, 3, 27, 53, 81, 24, 56, 3, 39, 77, 30, 72, 29, 75, 36, 86, 51, 18, 74, 45, 18, 80, 57, 36, 17, 0, 72, 59, 48, 39, 32, 27, 24, 23, 24, 27, 32, 39, 48, 59, 72, 0, 17, 36, 57, 80, 18, 45, 74, 18, 51, 86, 36, 75, 29, 72, 30, 77, 39, 3, 56, 24, 81, 53, 27, 3, 68, 48, 30, 14, 0, 75, 65, 57, 51, 47, 45, 45, 47, 51, 57, 65, 75, 0, 14, 30, 48, 68, 3, 27, 53, 81, 24, 56, 3, 39, 77, 30, 72, 29, 75, 36, 86, 51, 18, 74, 45, 18, 80, 57, 36, 17, 0, 72, 59, 48, 39, 32, 27, 24, 23, 24, 27, 32, 39, 48, 59, 72, 0, 17, 36, 57, 80, 18, 45, 74, 18, 51, 86, 36, 75, 29, 72, 30, 77, 39, 3, 56, 24, 81, 53, 27, 3, 68, 48, 30, 14, 0, 75, 65, 57, 51, 47, 45, 45, 47, 51, 57, 65, 75, 0, 14, 30, 48, 68, 3, 27, 53, 81, 24, 56, 3, 39, 77, 30, 72, 29, 75, 36, 86, 51, 18, 74, 45, 18, 80, 57, 36, 17, 0, 72, 59, 48, 39, 32, 27, 24, 23, 24, 27, 32, 39, 48]\"], [\"None\", \"[0, 14, 30, 48, 68, 90, 23, 49, 77, 16, 48, 82, 27, 65, 14, 56, 9, 55, 12, 62, 23, 77, 42, 9, 69, 40, 13, 79, 56, 35, 16, 90, 75, 62, 51, 42, 35, 30, 27, 26, 27, 30, 35, 42, 51, 62, 75, 90, 16, 35, 56, 79, 13, 40, 69, 9, 42, 77, 23, 62, 12, 55, 9, 56, 14, 65, 27, 82, 48, 16, 77, 49, 23, 90, 68, 48, 30, 14, 0, 79, 69, 61, 55, 51, 49, 49, 51, 55, 61, 69, 79, 0, 14, 30, 48, 68, 90, 23, 49, 77, 16, 48, 82, 27, 65, 14, 56, 9, 55, 12, 62, 23, 77, 42, 9, 69, 40, 13, 79, 56, 35, 16, 90, 75, 62, 51, 42, 35, 30, 27, 26, 27, 30, 35, 42, 51, 62, 75, 90, 16, 35, 56, 79, 13, 40, 69, 9, 42, 77, 23, 62, 12, 55, 9, 56, 14, 65, 27, 82, 48, 16, 77, 49, 23, 90, 68, 48, 30, 14, 0, 79, 69, 61, 55, 51, 49, 49, 51, 55, 61, 69, 79, 0, 14, 30, 48, 68, 90, 23, 49, 77, 16, 48, 82, 27, 65, 14, 56, 9, 55, 12, 62, 23, 77, 42, 9, 69, 40, 13, 79, 56, 35, 16, 90, 75, 62, 51, 42, 35, 30, 27, 26, 27, 30, 35, 42, 51, 62, 75, 90, 16, 35, 56, 79, 13, 40, 69, 9, 42, 77, 23, 62, 12, 55, 9, 56, 14, 65, 27, 82, 48, 16, 77, 49, 23, 90, 68, 48, 30, 14, 0, 79, 69, 61, 55, 51, 49, 49, 51, 55, 61, 69, 79, 0, 14, 30, 48, 68, 90, 23, 49, 77, 16, 48, 82, 27, 65, 14, 56, 9, 55, 12, 62, 23, 77, 42, 9, 69, 40, 13, 79, 56, 35, 16, 90, 75, 62, 51, 42, 35, 30, 27, 26, 27, 30, 35, 42, 51, 62, 75, 90, 16, 35, 56, 79, 13, 40, 69, 9, 42, 77, 23, 62, 12, 55, 9, 56, 14, 65, 27, 82, 48, 16, 77, 49, 23, 90, 68, 48, 30, 14, 0, 79, 69, 61, 55, 51, 49, 49, 51, 55, 61, 69, 79, 0, 14, 30, 48, 68, 90, 23, 49, 77, 16, 48, 82, 27, 65, 14, 56, 9, 55, 12, 62, 23, 77, 42, 9, 69, 40, 13, 79, 56, 35, 16, 90, 75, 62, 51, 42, 35, 30, 27, 26, 27, 30, 35, 42, 51, 62, 75, 90, 16, 35, 56, 79, 13, 40, 69, 9, 42, 77, 23, 62, 12, 55, 9, 56, 14, 65, 27, 82, 48, 16, 77, 49, 23, 90, 68, 48, 30, 14, 0, 79, 69, 61, 55, 51, 49, 49, 51, 55, 61, 69, 79, 0, 14, 30, 48, 68, 90, 23, 49, 77, 16, 48, 82, 27, 65, 14, 56, 9, 55, 12, 62, 23, 77, 42, 9, 69, 40, 13, 79, 56, 35, 16, 90, 75, 62, 51, 42, 35, 30, 27, 26, 27, 30, 35, 42, 51, 62, 75, 90, 16, 35, 56, 79, 13, 40, 69, 9, 42, 77, 23, 62, 12, 55, 9, 56, 14, 65, 27, 82, 48, 16, 77, 49, 23, 90, 68, 48, 30, 14, 0, 79, 69, 61, 55, 51, 49, 49, 51, 55, 61, 69, 79, 0, 14, 30, 48, 68, 90, 23, 49, 77, 16, 48, 82, 27, 65, 14, 56, 9, 55, 12, 62, 23, 77, 42, 9, 69, 40, 13, 79, 56, 35, 16, 90, 75, 62, 51, 42, 35, 30, 27, 26, 27, 30, 35, 42, 51, 62, 75, 90, 16, 35, 56, 79, 13, 40, 69, 9, 42, 77, 23, 62, 12, 55, 9, 56, 14, 65, 27, 82, 48, 16, 77, 49, 23, 90, 68, 48, 30, 14, 0, 79, 69, 61, 55, 51, 49, 49, 51, 55, 61, 69, 79, 0, 14, 30, 48, 68, 90, 23, 49, 77, 16, 48, 82, 27, 65, 14, 56, 9, 55, 12, 62, 23, 77, 42, 9, 69, 40, 13, 79, 56, 35, 16, 90, 75, 62, 51, 42, 35, 30, 27, 26, 27, 30, 35, 42, 51, 62, 75, 90, 16, 35, 56, 79, 13, 40, 69, 9, 42, 77, 23, 62, 12, 55, 9, 56, 14, 65, 27, 82, 48, 16, 77, 49, 23, 90, 68, 48, 30, 14, 0, 79, 69, 61, 55, 51, 49, 49, 51, 55, 61, 69, 79, 0, 14, 30, 48, 68, 90, 23, 49, 77, 16, 48, 82, 27, 65, 14, 56, 9, 55, 12, 62, 23, 77, 42, 9, 69, 40, 13, 79, 56, 35, 16, 90, 75, 62, 51, 42, 35, 30, 27, 26, 27, 30, 35, 42, 51, 62, 75, 90, 16, 35, 56, 79, 13, 40, 69, 9, 42, 77, 23, 62, 12, 55, 9, 56, 14, 65, 27, 82, 48, 16, 77, 49, 23, 90, 68, 48, 30, 14, 0, 79, 69, 61, 55, 51, 49, 49, 51, 55, 61, 69, 79, 0, 14, 30, 48, 68, 90, 23, 49, 77, 16, 48, 82, 27, 65, 14, 56, 9, 55, 12, 62, 23, 77, 42, 9, 69, 40, 13, 79, 56, 35, 16, 90, 75, 62, 51, 42, 35, 30, 27, 26, 27, 30, 35, 42, 51, 62, 75, 90, 16, 35, 56, 79, 13, 40, 69, 9, 42, 77, 23, 62, 12, 55, 9, 56, 14, 65, 27, 82, 48, 16, 77, 49, 23, 90, 68, 48, 30, 14, 0, 79, 69, 61, 55, 51, 49, 49, 51, 55, 61, 69, 79, 0, 14, 30, 48, 68, 90, 23, 49, 77, 16, 48, 82, 27, 65, 14, 56, 9, 55, 12, 62, 23, 77, 42, 9, 69, 40, 13, 79, 56, 35, 16, 90, 75, 62, 51, 42, 35, 30, 27, 26, 27, 30, 35, 42, 51, 62, 75, 90, 16, 35, 56, 79, 13, 40, 69, 9, 42, 77, 23, 62, 12, 55, 9, 56, 14, 65, 27, 82, 48, 16, 77, 49, 23, 90, 68, 48, 30, 14, 0, 79, 69, 61, 55, 51, 49, 49, 51, 55, 61, 69]\"], [\"None\", \"[0, 14, 30, 48, 68, 90, 19, 45, 73, 8, 40, 74, 15, 53, 93, 40, 84, 35, 83, 38, 90, 49, 10, 68, 33, 0, 64, 35, 8, 78, 55, 34, 15, 93, 78, 65, 54, 45, 38, 33, 30, 29, 30, 33, 38, 45, 54, 65, 78, 93, 15, 34, 55, 78, 8, 35, 64, 0, 33, 68, 10, 49, 90, 38, 83, 35, 84, 40, 93, 53, 15, 74, 40, 8, 73, 45, 19, 90, 68, 48, 30, 14, 0, 83, 73, 65, 59, 55, 53, 53, 55, 59, 65, 73, 83, 0, 14, 30, 48, 68, 90, 19, 45, 73, 8, 40, 74, 15, 53, 93, 40, 84, 35, 83, 38, 90, 49, 10, 68, 33, 0, 64, 35, 8, 78, 55, 34, 15, 93, 78, 65, 54, 45, 38, 33, 30, 29, 30, 33, 38, 45, 54, 65, 78, 93, 15, 34, 55, 78, 8, 35, 64, 0, 33, 68, 10, 49, 90, 38, 83, 35, 84, 40, 93, 53, 15, 74, 40, 8, 73, 45, 19, 90, 68, 48, 30, 14, 0, 83, 73, 65, 59, 55, 53, 53, 55, 59, 65, 73, 83, 0, 14, 30, 48, 68, 90, 19, 45, 73, 8, 40, 74, 15, 53, 93, 40, 84, 35, 83, 38, 90, 49, 10, 68, 33, 0, 64, 35, 8, 78, 55, 34, 15, 93, 78, 65, 54, 45, 38, 33, 30, 29, 30, 33, 38, 45, 54, 65, 78, 93, 15, 34, 55, 78, 8, 35, 64, 0, 33, 68, 10, 49, 90, 38, 83, 35, 84, 40, 93, 53, 15, 74, 40, 8, 73, 45, 19, 90, 68, 48, 30, 14, 0, 83, 73, 65, 59, 55, 53, 53, 55, 59, 65, 73, 83, 0, 14, 30, 48, 68, 90, 19, 45, 73, 8, 40, 74, 15, 53, 93, 40, 84, 35, 83, 38, 90, 49, 10, 68, 33, 0, 64, 35, 8, 78, 55, 34, 15, 93, 78, 65, 54, 45, 38, 33, 30, 29, 30, 33, 38, 45, 54, 65, 78, 93, 15, 34, 55, 78, 8, 35, 64, 0, 33, 68, 10, 49, 90, 38, 83, 35, 84, 40, 93, 53, 15, 74, 40, 8, 73, 45, 19, 90, 68, 48, 30, 14, 0, 83, 73, 65, 59, 55, 53, 53, 55, 59, 65, 73, 83, 0, 14, 30, 48, 68, 90, 19, 45, 73, 8, 40, 74, 15, 53, 93, 40, 84, 35, 83, 38, 90, 49, 10, 68, 33, 0, 64, 35, 8, 78, 55, 34, 15, 93, 78, 65, 54, 45, 38, 33, 30, 29, 30, 33, 38, 45, 54, 65, 78, 93, 15, 34, 55, 78, 8, 35, 64, 0, 33, 68, 10, 49, 90, 38, 83, 35, 84, 40, 93, 53, 15, 74, 40, 8, 73, 45, 19, 90, 68, 48, 30, 14, 0, 83, 73, 65, 59, 55, 53, 53, 55, 59, 65, 73, 83, 0, 14, 30, 48, 68, 90, 19, 45, 73, 8, 40, 74, 15, 53, 93, 40, 84, 35, 83, 38, 90, 49, 10, 68, 33, 0, 64, 35, 8, 78, 55, 34, 15, 93, 78, 65, 54, 45, 38, 33, 30, 29, 30, 33, 38, 45, 54, 65, 78, 93, 15, 34, 55, 78, 8, 35, 64, 0, 33, 68, 10, 49, 90, 38, 83, 35, 84, 40, 93, 53, 15, 74, 40, 8, 73, 45, 19, 90, 68, 48, 30, 14, 0, 83, 73, 65, 59, 55, 53, 53, 55, 59, 65, 73, 83, 0, 14, 30, 48, 68, 90, 19, 45, 73, 8, 40, 74, 15, 53, 93, 40, 84, 35, 83, 38, 90, 49, 10, 68, 33, 0, 64, 35, 8, 78, 55, 34, 15, 93, 78, 65, 54, 45, 38, 33, 30, 29, 30, 33, 38, 45, 54, 65, 78, 93, 15, 34, 55, 78, 8, 35, 64, 0, 33, 68, 10, 49, 90, 38, 83, 35, 84, 40, 93, 53, 15, 74, 40, 8, 73, 45, 19, 90, 68, 48, 30, 14, 0, 83, 73, 65, 59, 55, 53, 53, 55, 59, 65, 73, 83, 0, 14, 30, 48, 68, 90, 19, 45, 73, 8, 40, 74, 15, 53, 93, 40, 84, 35, 83, 38, 90, 49, 10, 68, 33, 0, 64, 35, 8, 78, 55, 34, 15, 93, 78, 65, 54, 45, 38, 33, 30, 29, 30, 33, 38, 45, 54, 65, 78, 93, 15, 34, 55, 78, 8, 35, 64, 0, 33, 68, 10, 49, 90, 38, 83, 35, 84, 40, 93, 53, 15, 74, 40, 8, 73, 45, 19, 90, 68, 48, 30, 14, 0, 83, 73, 65, 59, 55, 53, 53, 55, 59, 65, 73, 83, 0, 14, 30, 48, 68, 90, 19, 45, 73, 8, 40, 74, 15, 53, 93, 40, 84, 35, 83, 38, 90, 49, 10, 68, 33, 0, 64, 35, 8, 78, 55, 34, 15, 93, 78, 65, 54, 45, 38, 33, 30, 29, 30, 33, 38, 45, 54, 65, 78, 93, 15, 34, 55, 78, 8, 35, 64, 0, 33, 68, 10, 49, 90, 38, 83, 35, 84, 40, 93, 53, 15, 74, 40, 8, 73, 45, 19, 90, 68, 48, 30, 14, 0, 83, 73, 65, 59, 55, 53, 53, 55, 59, 65, 73, 83, 0, 14, 30, 48, 68, 90, 19, 45, 73, 8, 40, 74, 15, 53, 93, 40, 84, 35, 83, 38, 90, 49, 10, 68, 33, 0, 64, 35, 8, 78, 55, 34, 15, 93, 78, 65, 54, 45, 38, 33, 30, 29, 30, 33, 38, 45, 54, 65, 78, 93, 15, 34, 55, 78, 8, 35, 64, 0, 33, 68, 10, 49, 90, 38, 83, 35, 84, 40, 93, 53, 15, 74, 40, 8, 73, 45, 19, 90, 68, 48, 30, 14, 0, 83, 73, 65, 59, 55, 53, 53, 55, 59, 65, 73, 83, 0, 14, 30, 48, 68, 90, 19, 45, 73, 8, 40, 74, 15, 53, 93, 40, 84, 35, 83, 38, 90, 49, 10, 68, 33, 0, 64, 35, 8, 78, 55, 34, 15, 93, 78, 65, 54, 45, 38, 33, 30, 29, 30, 33, 38, 45, 54, 65, 78, 93]\"], [\"None\", \"[0, 14, 30, 48, 68, 90, 15, 41, 69, 0, 32, 66, 3, 41, 81, 24, 68, 15, 63, 14, 66, 21, 77, 36, 96, 59, 24, 90, 59, 30, 3, 77, 54, 33, 14, 96, 81, 68, 57, 48, 41, 36, 33, 32, 33, 36, 41, 48, 57, 68, 81, 96, 14, 33, 54, 77, 3, 30, 59, 90, 24, 59, 96, 36, 77, 21, 66, 14, 63, 15, 68, 24, 81, 41, 3, 66, 32, 0, 69, 41, 15, 90, 68, 48, 30, 14, 0, 87, 77, 69, 63, 59, 57, 57, 59, 63, 69, 77, 87, 0, 14, 30, 48, 68, 90, 15, 41, 69, 0, 32, 66, 3, 41, 81, 24, 68, 15, 63, 14, 66, 21, 77, 36, 96, 59, 24, 90, 59, 30, 3, 77, 54, 33, 14, 96, 81, 68, 57, 48, 41, 36, 33, 32, 33, 36, 41, 48, 57, 68, 81, 96, 14, 33, 54, 77, 3, 30, 59, 90, 24, 59, 96, 36, 77, 21, 66, 14, 63, 15, 68, 24, 81, 41, 3, 66, 32, 0, 69, 41, 15, 90, 68, 48, 30, 14, 0, 87, 77, 69, 63, 59, 57, 57, 59, 63, 69, 77, 87, 0, 14, 30, 48, 68, 90, 15, 41, 69, 0, 32, 66, 3, 41, 81, 24, 68, 15, 63, 14, 66, 21, 77, 36, 96, 59, 24, 90, 59, 30, 3, 77, 54, 33, 14, 96, 81, 68, 57, 48, 41, 36, 33, 32, 33, 36, 41, 48, 57, 68, 81, 96, 14, 33, 54, 77, 3, 30, 59, 90, 24, 59, 96, 36, 77, 21, 66, 14, 63, 15, 68, 24, 81, 41, 3, 66, 32, 0, 69, 41, 15, 90, 68, 48, 30, 14, 0, 87, 77, 69, 63, 59, 57, 57, 59, 63, 69, 77, 87, 0, 14, 30, 48, 68, 90, 15, 41, 69, 0, 32, 66, 3, 41, 81, 24, 68, 15, 63, 14, 66, 21, 77, 36, 96, 59, 24, 90, 59, 30, 3, 77, 54, 33, 14, 96, 81, 68, 57, 48, 41, 36, 33, 32, 33, 36, 41, 48, 57, 68, 81, 96, 14, 33, 54, 77, 3, 30, 59, 90, 24, 59, 96, 36, 77, 21, 66, 14, 63, 15, 68, 24, 81, 41, 3, 66, 32, 0, 69, 41, 15, 90, 68, 48, 30, 14, 0, 87, 77, 69, 63, 59, 57, 57, 59, 63, 69, 77, 87, 0, 14, 30, 48, 68, 90, 15, 41, 69, 0, 32, 66, 3, 41, 81, 24, 68, 15, 63, 14, 66, 21, 77, 36, 96, 59, 24, 90, 59, 30, 3, 77, 54, 33, 14, 96, 81, 68, 57, 48, 41, 36, 33, 32, 33, 36, 41, 48, 57, 68, 81, 96, 14, 33, 54, 77, 3, 30, 59, 90, 24, 59, 96, 36, 77, 21, 66, 14, 63, 15, 68, 24, 81, 41, 3, 66, 32, 0, 69, 41, 15, 90, 68, 48, 30, 14, 0, 87, 77, 69, 63, 59, 57, 57, 59, 63, 69, 77, 87, 0, 14, 30, 48, 68, 90, 15, 41, 69, 0, 32, 66, 3, 41, 81, 24, 68, 15, 63, 14, 66, 21, 77, 36, 96, 59, 24, 90, 59, 30, 3, 77, 54, 33, 14, 96, 81, 68, 57, 48, 41, 36, 33, 32, 33, 36, 41, 48, 57, 68, 81, 96, 14, 33, 54, 77, 3, 30, 59, 90, 24, 59, 96, 36, 77, 21, 66, 14, 63, 15, 68, 24, 81, 41, 3, 66, 32, 0, 69, 41, 15, 90, 68, 48, 30, 14, 0, 87, 77, 69, 63, 59, 57, 57, 59, 63, 69, 77, 87, 0, 14, 30, 48, 68, 90, 15, 41, 69, 0, 32, 66, 3, 41, 81, 24, 68, 15, 63, 14, 66, 21, 77, 36, 96, 59, 24, 90, 59, 30, 3, 77, 54, 33, 14, 96, 81, 68, 57, 48, 41, 36, 33, 32, 33, 36, 41, 48, 57, 68, 81, 96, 14, 33, 54, 77, 3, 30, 59, 90, 24, 59, 96, 36, 77, 21, 66, 14, 63, 15, 68, 24, 81, 41, 3, 66, 32, 0, 69, 41, 15, 90, 68, 48, 30, 14, 0, 87, 77, 69, 63, 59, 57, 57, 59, 63, 69, 77, 87, 0, 14, 30, 48, 68, 90, 15, 41, 69, 0, 32, 66, 3, 41, 81, 24, 68, 15, 63, 14, 66, 21, 77, 36, 96, 59, 24, 90, 59, 30, 3, 77, 54, 33, 14, 96, 81, 68, 57, 48, 41, 36, 33, 32, 33, 36, 41, 48, 57, 68, 81, 96, 14, 33, 54, 77, 3, 30, 59, 90, 24, 59, 96, 36, 77, 21, 66, 14, 63, 15, 68, 24, 81, 41, 3, 66, 32, 0, 69, 41, 15, 90, 68, 48, 30, 14, 0, 87, 77, 69, 63, 59, 57, 57, 59, 63, 69, 77, 87, 0, 14, 30, 48, 68, 90, 15, 41, 69, 0, 32, 66, 3, 41, 81, 24, 68, 15, 63, 14, 66, 21, 77, 36, 96, 59, 24, 90, 59, 30, 3, 77, 54, 33, 14, 96, 81, 68, 57, 48, 41, 36, 33, 32, 33, 36, 41, 48, 57, 68, 81, 96, 14, 33, 54, 77, 3, 30, 59, 90, 24, 59, 96, 36, 77, 21, 66, 14, 63, 15, 68, 24, 81, 41, 3, 66, 32, 0, 69, 41, 15, 90, 68, 48, 30, 14, 0, 87, 77, 69, 63, 59, 57, 57, 59, 63, 69, 77, 87, 0, 14, 30, 48, 68, 90, 15, 41, 69, 0, 32, 66, 3, 41, 81, 24, 68, 15, 63, 14, 66, 21, 77, 36, 96, 59, 24, 90, 59, 30, 3, 77, 54, 33, 14, 96, 81, 68, 57, 48, 41, 36, 33, 32, 33, 36, 41, 48, 57, 68, 81, 96, 14, 33, 54, 77, 3, 30, 59, 90, 24, 59, 96, 36, 77, 21, 66, 14, 63, 15, 68, 24, 81, 41, 3, 66, 32, 0, 69, 41, 15, 90, 68, 48, 30, 14, 0, 87, 77, 69, 63, 59, 57, 57, 59, 63, 69, 77, 87, 0, 14, 30, 48, 68, 90, 15, 41, 69, 0]\"], [\"None\", \"[0, 14, 30, 48, 68, 90, 11, 37, 65, 95, 24, 58, 94, 29, 69, 8, 52, 98, 43, 93, 42, 96, 49, 4, 64, 23, 87, 50, 15, 85, 54, 25, 101, 76, 53, 32, 13, 99, 84, 71, 60, 51, 44, 39, 36, 35, 36, 39, 44, 51, 60, 71, 84, 99, 13, 32, 53, 76, 101, 25, 54, 85, 15, 50, 87, 23, 64, 4, 49, 96, 42, 93, 43, 98, 52, 8, 69, 29, 94, 58, 24, 95, 65, 37, 11, 90, 68, 48, 30, 14, 0, 91, 81, 73, 67, 63, 61, 61, 63, 67, 73, 81, 91, 0, 14, 30, 48, 68, 90, 11, 37, 65, 95, 24, 58, 94, 29, 69, 8, 52, 98, 43, 93, 42, 96, 49, 4, 64, 23, 87, 50, 15, 85, 54, 25, 101, 76, 53, 32, 13, 99, 84, 71, 60, 51, 44, 39, 36, 35, 36, 39, 44, 51, 60, 71, 84, 99, 13, 32, 53, 76, 101, 25, 54, 85, 15, 50, 87, 23, 64, 4, 49, 96, 42, 93, 43, 98, 52, 8, 69, 29, 94, 58, 24, 95, 65, 37, 11, 90, 68, 48, 30, 14, 0, 91, 81, 73, 67, 63, 61, 61, 63, 67, 73, 81, 91, 0, 14, 30, 48, 68, 90, 11, 37, 65, 95, 24, 58, 94, 29, 69, 8, 52, 98, 43, 93, 42, 96, 49, 4, 64, 23, 87, 50, 15, 85, 54, 25, 101, 76, 53, 32, 13, 99, 84, 71, 60, 51, 44, 39, 36, 35, 36, 39, 44, 51, 60, 71, 84, 99, 13, 32, 53, 76, 101, 25, 54, 85, 15, 50, 87, 23, 64, 4, 49, 96, 42, 93, 43, 98, 52, 8, 69, 29, 94, 58, 24, 95, 65, 37, 11, 90, 68, 48, 30, 14, 0, 91, 81, 73, 67, 63, 61, 61, 63, 67, 73, 81, 91, 0, 14, 30, 48, 68, 90, 11, 37, 65, 95, 24, 58, 94, 29, 69, 8, 52, 98, 43, 93, 42, 96, 49, 4, 64, 23, 87, 50, 15, 85, 54, 25, 101, 76, 53, 32, 13, 99, 84, 71, 60, 51, 44, 39, 36, 35, 36, 39, 44, 51, 60, 71, 84, 99, 13, 32, 53, 76, 101, 25, 54, 85, 15, 50, 87, 23, 64, 4, 49, 96, 42, 93, 43, 98, 52, 8, 69, 29, 94, 58, 24, 95, 65, 37, 11, 90, 68, 48, 30, 14, 0, 91, 81, 73, 67, 63, 61, 61, 63, 67, 73, 81, 91, 0, 14, 30, 48, 68, 90, 11, 37, 65, 95, 24, 58, 94, 29, 69, 8, 52, 98, 43, 93, 42, 96, 49, 4, 64, 23, 87, 50, 15, 85, 54, 25, 101, 76, 53, 32, 13, 99, 84, 71, 60, 51, 44, 39, 36, 35, 36, 39, 44, 51, 60, 71, 84, 99, 13, 32, 53, 76, 101, 25, 54, 85, 15, 50, 87, 23, 64, 4, 49, 96, 42, 93, 43, 98, 52, 8, 69, 29, 94, 58, 24, 95, 65, 37, 11, 90, 68, 48, 30, 14, 0, 91, 81, 73, 67, 63, 61, 61, 63, 67, 73, 81, 91, 0, 14, 30, 48, 68, 90, 11, 37, 65, 95, 24, 58, 94, 29, 69, 8, 52, 98, 43, 93, 42, 96, 49, 4, 64, 23, 87, 50, 15, 85, 54, 25, 101, 76, 53, 32, 13, 99, 84, 71, 60, 51, 44, 39, 36, 35, 36, 39, 44, 51, 60, 71, 84, 99, 13, 32, 53, 76, 101, 25, 54, 85, 15, 50, 87, 23, 64, 4, 49, 96, 42, 93, 43, 98, 52, 8, 69, 29, 94, 58, 24, 95, 65, 37, 11, 90, 68, 48, 30, 14, 0, 91, 81, 73, 67, 63, 61, 61, 63, 67, 73, 81, 91, 0, 14, 30, 48, 68, 90, 11, 37, 65, 95, 24, 58, 94, 29, 69, 8, 52, 98, 43, 93, 42, 96, 49, 4, 64, 23, 87, 50, 15, 85, 54, 25, 101, 76, 53, 32, 13, 99, 84, 71, 60, 51, 44, 39, 36, 35, 36, 39, 44, 51, 60, 71, 84, 99, 13, 32, 53, 76, 101, 25, 54, 85, 15, 50, 87, 23, 64, 4, 49, 96, 42, 93, 43, 98, 52, 8, 69, 29, 94, 58, 24, 95, 65, 37, 11, 90, 68, 48, 30, 14, 0, 91, 81, 73, 67, 63, 61, 61, 63, 67, 73, 81, 91, 0, 14, 30, 48, 68, 90, 11, 37, 65, 95, 24, 58, 94, 29, 69, 8, 52, 98, 43, 93, 42, 96, 49, 4, 64, 23, 87, 50, 15, 85, 54, 25, 101, 76, 53, 32, 13, 99, 84, 71, 60, 51, 44, 39, 36, 35, 36, 39, 44, 51, 60, 71, 84, 99, 13, 32, 53, 76, 101, 25, 54, 85, 15, 50, 87, 23, 64, 4, 49, 96, 42, 93, 43, 98, 52, 8, 69, 29, 94, 58, 24, 95, 65, 37, 11, 90, 68, 48, 30, 14, 0, 91, 81, 73, 67, 63, 61, 61, 63, 67, 73, 81, 91, 0, 14, 30, 48, 68, 90, 11, 37, 65, 95, 24, 58, 94, 29, 69, 8, 52, 98, 43, 93, 42, 96, 49, 4, 64, 23, 87, 50, 15, 85, 54, 25, 101, 76, 53, 32, 13, 99, 84, 71, 60, 51, 44, 39, 36, 35, 36, 39, 44, 51, 60, 71, 84, 99, 13, 32, 53, 76, 101, 25, 54, 85, 15, 50, 87, 23, 64, 4, 49, 96, 42, 93, 43, 98, 52, 8, 69, 29, 94, 58, 24, 95, 65, 37, 11, 90, 68, 48, 30, 14, 0, 91, 81, 73, 67, 63, 61, 61, 63, 67, 73, 81, 91, 0, 14, 30, 48, 68, 90, 11, 37, 65, 95, 24, 58, 94, 29, 69, 8, 52, 98, 43, 93, 42, 96, 49, 4, 64, 23, 87, 50, 15, 85, 54, 25, 101, 76, 53, 32, 13, 99, 84, 71, 60, 51, 44, 39, 36, 35, 36, 39, 44, 51, 60, 71, 84, 99, 13, 32, 53, 76, 101, 25, 54, 85, 15, 50, 87, 23, 64, 4, 49, 96, 42, 93, 43]\"], [\"None\", \"[0, 14, 30, 48, 68, 90, 7, 33, 61, 91, 16, 50, 86, 17, 57, 99, 36, 82, 23, 73, 18, 72, 21, 79, 32, 94, 51, 10, 78, 41, 6, 80, 49, 20, 100, 75, 52, 31, 12, 102, 87, 74, 63, 54, 47, 42, 39, 38, 39, 42, 47, 54, 63, 74, 87, 102, 12, 31, 52, 75, 100, 20, 49, 80, 6, 41, 78, 10, 51, 94, 32, 79, 21, 72, 18, 73, 23, 82, 36, 99, 57, 17, 86, 50, 16, 91, 61, 33, 7, 90, 68, 48, 30, 14, 0, 95, 85, 77, 71, 67, 65, 65, 67, 71, 77, 85, 95, 0, 14, 30, 48, 68, 90, 7, 33, 61, 91, 16, 50, 86, 17, 57, 99, 36, 82, 23, 73, 18, 72, 21, 79, 32, 94, 51, 10, 78, 41, 6, 80, 49, 20, 100, 75, 52, 31, 12, 102, 87, 74, 63, 54, 47, 42, 39, 38, 39, 42, 47, 54, 63, 74, 87, 102, 12, 31, 52, 75, 100, 20, 49, 80, 6, 41, 78, 10, 51, 94, 32, 79, 21, 72, 18, 73, 23, 82, 36, 99, 57, 17, 86, 50, 16, 91, 61, 33, 7, 90, 68, 48, 30, 14, 0, 95, 85, 77, 71, 67, 65, 65, 67, 71, 77, 85, 95, 0, 14, 30, 48, 68, 90, 7, 33, 61, 91, 16, 50, 86, 17, 57, 99, 36, 82, 23, 73, 18, 72, 21, 79, 32, 94, 51, 10, 78, 41, 6, 80, 49, 20, 100, 75, 52, 31, 12, 102, 87, 74, 63, 54, 47, 42, 39, 38, 39, 42, 47, 54, 63, 74, 87, 102, 12, 31, 52, 75, 100, 20, 49, 80, 6, 41, 78, 10, 51, 94, 32, 79, 21, 72, 18, 73, 23, 82, 36, 99, 57, 17, 86, 50, 16, 91, 61, 33, 7, 90, 68, 48, 30, 14, 0, 95, 85, 77, 71, 67, 65, 65, 67, 71, 77, 85, 95, 0, 14, 30, 48, 68, 90, 7, 33, 61, 91, 16, 50, 86, 17, 57, 99, 36, 82, 23, 73, 18, 72, 21, 79, 32, 94, 51, 10, 78, 41, 6, 80, 49, 20, 100, 75, 52, 31, 12, 102, 87, 74, 63, 54, 47, 42, 39, 38, 39, 42, 47, 54, 63, 74, 87, 102, 12, 31, 52, 75, 100, 20, 49, 80, 6, 41, 78, 10, 51, 94, 32, 79, 21, 72, 18, 73, 23, 82, 36, 99, 57, 17, 86, 50, 16, 91, 61, 33, 7, 90, 68, 48, 30, 14, 0, 95, 85, 77, 71, 67, 65, 65, 67, 71, 77, 85, 95, 0, 14, 30, 48, 68, 90, 7, 33, 61, 91, 16, 50, 86, 17, 57, 99, 36, 82, 23, 73, 18, 72, 21, 79, 32, 94, 51, 10, 78, 41, 6, 80, 49, 20, 100, 75, 52, 31, 12, 102, 87, 74, 63, 54, 47, 42, 39, 38, 39, 42, 47, 54, 63, 74, 87, 102, 12, 31, 52, 75, 100, 20, 49, 80, 6, 41, 78, 10, 51, 94, 32, 79, 21, 72, 18, 73, 23, 82, 36, 99, 57, 17, 86, 50, 16, 91, 61, 33, 7, 90, 68, 48, 30, 14, 0, 95, 85, 77, 71, 67, 65, 65, 67, 71, 77, 85, 95, 0, 14, 30, 48, 68, 90, 7, 33, 61, 91, 16, 50, 86, 17, 57, 99, 36, 82, 23, 73, 18, 72, 21, 79, 32, 94, 51, 10, 78, 41, 6, 80, 49, 20, 100, 75, 52, 31, 12, 102, 87, 74, 63, 54, 47, 42, 39, 38, 39, 42, 47, 54, 63, 74, 87, 102, 12, 31, 52, 75, 100, 20, 49, 80, 6, 41, 78, 10, 51, 94, 32, 79, 21, 72, 18, 73, 23, 82, 36, 99, 57, 17, 86, 50, 16, 91, 61, 33, 7, 90, 68, 48, 30, 14, 0, 95, 85, 77, 71, 67, 65, 65, 67, 71, 77, 85, 95, 0, 14, 30, 48, 68, 90, 7, 33, 61, 91, 16, 50, 86, 17, 57, 99, 36, 82, 23, 73, 18, 72, 21, 79, 32, 94, 51, 10, 78, 41, 6, 80, 49, 20, 100, 75, 52, 31, 12, 102, 87, 74, 63, 54, 47, 42, 39, 38, 39, 42, 47, 54, 63, 74, 87, 102, 12, 31, 52, 75, 100, 20, 49, 80, 6, 41, 78, 10, 51, 94, 32, 79, 21, 72, 18, 73, 23, 82, 36, 99, 57, 17, 86, 50, 16, 91, 61, 33, 7, 90, 68, 48, 30, 14, 0, 95, 85, 77, 71, 67, 65, 65, 67, 71, 77, 85, 95, 0, 14, 30, 48, 68, 90, 7, 33, 61, 91, 16, 50, 86, 17, 57, 99, 36, 82, 23, 73, 18, 72, 21, 79, 32, 94, 51, 10, 78, 41, 6, 80, 49, 20, 100, 75, 52, 31, 12, 102, 87, 74, 63, 54, 47, 42, 39, 38, 39, 42, 47, 54, 63, 74, 87, 102, 12, 31, 52, 75, 100, 20, 49, 80, 6, 41, 78, 10, 51, 94, 32, 79, 21, 72, 18, 73, 23, 82, 36, 99, 57, 17, 86, 50, 16, 91, 61, 33, 7, 90, 68, 48, 30, 14, 0, 95, 85, 77, 71, 67, 65, 65, 67, 71, 77, 85, 95, 0, 14, 30, 48, 68, 90, 7, 33, 61, 91, 16, 50, 86, 17, 57, 99, 36, 82, 23, 73, 18, 72, 21, 79, 32, 94, 51, 10, 78, 41, 6, 80, 49, 20, 100, 75, 52, 31, 12, 102, 87, 74, 63, 54, 47, 42, 39, 38, 39, 42, 47, 54, 63, 74, 87, 102, 12, 31, 52, 75, 100, 20, 49, 80, 6, 41, 78, 10, 51, 94, 32, 79, 21, 72, 18, 73, 23, 82, 36, 99, 57, 17, 86, 50, 16, 91, 61, 33, 7, 90, 68, 48, 30, 14, 0, 95, 85, 77, 71, 67, 65, 65, 67, 71, 77, 85, 95, 0, 14, 30, 48, 68, 90, 7, 33, 61, 91, 16, 50, 86, 17, 57, 99, 36, 82, 23, 73, 18, 72, 21, 79, 32, 94, 51, 10, 78, 41, 6, 80, 49, 20, 100, 75, 52]\"], [\"None\", \"[0, 14, 30, 48, 68, 90, 3, 29, 57, 87, 8, 42, 78, 5, 45, 87, 20, 66, 3, 53, 105, 48, 104, 51, 0, 62, 15, 81, 38, 108, 69, 32, 108, 75, 44, 15, 99, 74, 51, 30, 11, 105, 90, 77, 66, 57, 50, 45, 42, 41, 42, 45, 50, 57, 66, 77, 90, 105, 11, 30, 51, 74, 99, 15, 44, 75, 108, 32, 69, 108, 38, 81, 15, 62, 0, 51, 104, 48, 105, 53, 3, 66, 20, 87, 45, 5, 78, 42, 8, 87, 57, 29, 3, 90, 68, 48, 30, 14, 0, 99, 89, 81, 75, 71, 69, 69, 71, 75, 81, 89, 99, 0, 14, 30, 48, 68, 90, 3, 29, 57, 87, 8, 42, 78, 5, 45, 87, 20, 66, 3, 53, 105, 48, 104, 51, 0, 62, 15, 81, 38, 108, 69, 32, 108, 75, 44, 15, 99, 74, 51, 30, 11, 105, 90, 77, 66, 57, 50, 45, 42, 41, 42, 45, 50, 57, 66, 77, 90, 105, 11, 30, 51, 74, 99, 15, 44, 75, 108, 32, 69, 108, 38, 81, 15, 62, 0, 51, 104, 48, 105, 53, 3, 66, 20, 87, 45, 5, 78, 42, 8, 87, 57, 29, 3, 90, 68, 48, 30, 14, 0, 99, 89, 81, 75, 71, 69, 69, 71, 75, 81, 89, 99, 0, 14, 30, 48, 68, 90, 3, 29, 57, 87, 8, 42, 78, 5, 45, 87, 20, 66, 3, 53, 105, 48, 104, 51, 0, 62, 15, 81, 38, 108, 69, 32, 108, 75, 44, 15, 99, 74, 51, 30, 11, 105, 90, 77, 66, 57, 50, 45, 42, 41, 42, 45, 50, 57, 66, 77, 90, 105, 11, 30, 51, 74, 99, 15, 44, 75, 108, 32, 69, 108, 38, 81, 15, 62, 0, 51, 104, 48, 105, 53, 3, 66, 20, 87, 45, 5, 78, 42, 8, 87, 57, 29, 3, 90, 68, 48, 30, 14, 0, 99, 89, 81, 75, 71, 69, 69, 71, 75, 81, 89, 99, 0, 14, 30, 48, 68, 90, 3, 29, 57, 87, 8, 42, 78, 5, 45, 87, 20, 66, 3, 53, 105, 48, 104, 51, 0, 62, 15, 81, 38, 108, 69, 32, 108, 75, 44, 15, 99, 74, 51, 30, 11, 105, 90, 77, 66, 57, 50, 45, 42, 41, 42, 45, 50, 57, 66, 77, 90, 105, 11, 30, 51, 74, 99, 15, 44, 75, 108, 32, 69, 108, 38, 81, 15, 62, 0, 51, 104, 48, 105, 53, 3, 66, 20, 87, 45, 5, 78, 42, 8, 87, 57, 29, 3, 90, 68, 48, 30, 14, 0, 99, 89, 81, 75, 71, 69, 69, 71, 75, 81, 89, 99, 0, 14, 30, 48, 68, 90, 3, 29, 57, 87, 8, 42, 78, 5, 45, 87, 20, 66, 3, 53, 105, 48, 104, 51, 0, 62, 15, 81, 38, 108, 69, 32, 108, 75, 44, 15, 99, 74, 51, 30, 11, 105, 90, 77, 66, 57, 50, 45, 42, 41, 42, 45, 50, 57, 66, 77, 90, 105, 11, 30, 51, 74, 99, 15, 44, 75, 108, 32, 69, 108, 38, 81, 15, 62, 0, 51, 104, 48, 105, 53, 3, 66, 20, 87, 45, 5, 78, 42, 8, 87, 57, 29, 3, 90, 68, 48, 30, 14, 0, 99, 89, 81, 75, 71, 69, 69, 71, 75, 81, 89, 99, 0, 14, 30, 48, 68, 90, 3, 29, 57, 87, 8, 42, 78, 5, 45, 87, 20, 66, 3, 53, 105, 48, 104, 51, 0, 62, 15, 81, 38, 108, 69, 32, 108, 75, 44, 15, 99, 74, 51, 30, 11, 105, 90, 77, 66, 57, 50, 45, 42, 41, 42, 45, 50, 57, 66, 77, 90, 105, 11, 30, 51, 74, 99, 15, 44, 75, 108, 32, 69, 108, 38, 81, 15, 62, 0, 51, 104, 48, 105, 53, 3, 66, 20, 87, 45, 5, 78, 42, 8, 87, 57, 29, 3, 90, 68, 48, 30, 14, 0, 99, 89, 81, 75, 71, 69, 69, 71, 75, 81, 89, 99, 0, 14, 30, 48, 68, 90, 3, 29, 57, 87, 8, 42, 78, 5, 45, 87, 20, 66, 3, 53, 105, 48, 104, 51, 0, 62, 15, 81, 38, 108, 69, 32, 108, 75, 44, 15, 99, 74, 51, 30, 11, 105, 90, 77, 66, 57, 50, 45, 42, 41, 42, 45, 50, 57, 66, 77, 90, 105, 11, 30, 51, 74, 99, 15, 44, 75, 108, 32, 69, 108, 38, 81, 15, 62, 0, 51, 104, 48, 105, 53, 3, 66, 20, 87, 45, 5, 78, 42, 8, 87, 57, 29, 3, 90, 68, 48, 30, 14, 0, 99, 89, 81, 75, 71, 69, 69, 71, 75, 81, 89, 99, 0, 14, 30, 48, 68, 90, 3, 29, 57, 87, 8, 42, 78, 5, 45, 87, 20, 66, 3, 53, 105, 48, 104, 51, 0, 62, 15, 81, 38, 108, 69, 32, 108, 75, 44, 15, 99, 74, 51, 30, 11, 105, 90, 77, 66, 57, 50, 45, 42, 41, 42, 45, 50, 57, 66, 77, 90, 105, 11, 30, 51, 74, 99, 15, 44, 75, 108, 32, 69, 108, 38, 81, 15, 62, 0, 51, 104, 48, 105, 53, 3, 66, 20, 87, 45, 5, 78, 42, 8, 87, 57, 29, 3, 90, 68, 48, 30, 14, 0, 99, 89, 81, 75, 71, 69, 69, 71, 75, 81, 89, 99, 0, 14, 30, 48, 68, 90, 3, 29, 57, 87, 8, 42, 78, 5, 45, 87, 20, 66, 3, 53, 105, 48, 104, 51, 0, 62, 15, 81, 38, 108, 69, 32, 108, 75, 44, 15, 99, 74, 51, 30, 11, 105, 90, 77, 66, 57, 50, 45, 42, 41, 42, 45, 50, 57, 66, 77, 90, 105, 11, 30, 51, 74, 99, 15, 44, 75, 108, 32, 69, 108, 38, 81, 15, 62, 0, 51, 104, 48, 105, 53, 3, 66, 20, 87, 45, 5, 78, 42, 8, 87, 57, 29, 3, 90, 68, 48, 30, 14, 0, 99, 89, 81, 75, 71, 69, 69, 71, 75, 81, 89, 99, 0]\"]]", 
      "solution": "def monotoni_odseki(it):\n    \"\"\"Generator, ki pretvori iterator it v iterator monotonih odsekov.\"\"\"\n    s = [] # Trenutni odsek\n    for x in it:\n        if not s: s = [x]\n        elif ((len(s) == 1 and s[0] != x) or\n              (len(s) > 1 and ((s[-2] < s[-1] < x) or (s[-2] > s[-1] > x)))):\n            s.append(x)\n        else:\n            yield s\n            s = [x]\n    if s: yield s", 
      "problem": 78, 
      "validation": "Check.equal(\"\"\"list(monotoni_odseki([]))\"\"\", [])\n\nCheck.equal(\"\"\"list(monotoni_odseki([42]))\"\"\", [[42]])\n\nCheck.equal(\"\"\"list(monotoni_odseki([1,1,1]))\"\"\", [[1],[1],[1]])\n\nCheck.equal(\"\"\"list(monotoni_odseki([1,2,3,4,3,2,1,1,1,10,20,30]))\"\"\",\n            [[1,2,3,4],[3,2,1],[1],[1,10,20,30]])\n\nfor i in range(71,112,4):\n    Check.challenge([(k*k + 13*k) % i for k in range(1000)])"
    }
  }, 
  {
    "pk": 521, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `naloga1a(a, k)`, kot je zapisano v navodilih.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "def naloga1a(a,k):\n    return [sum(a[i:i+k])/k for i in range(0, len(a)-k+1)]", 
      "problem": 170, 
      "validation": "Check.equal(\"naloga1a([1, 2, 3, 4, 5, 6], 2)\", [1.5, 2.5, 3.5, 4.5, 5.5])\nCheck.equal(\"naloga1a([1, 2, 3, 4, 5, 6], 1)\", [1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\nCheck.equal(\"naloga1a([1, 2, 3, 4, 5, 6], 6)\", [3.5])"
    }
  }, 
  {
    "pk": 528, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Vpi\u0161ite vrednost produkta \u0161tevil $123456789$ in $987654321$.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "121932631112635269", 
      "problem": 174, 
      "validation": "x = eval(Check.current[\"solution\"])\nif x != 121932631112635269:\n   Check.error(\"Vrednost je napa\u010dna.\")"
    }
  }, 
  {
    "pk": 689, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `najugodnejsi(razprodaja)`, ki vrne izdelek z\nnajve\u010djim popustom.", 
      "timestamp": "2012-06-11 10:06:35", 
      "challenge": "[]", 
      "solution": "def najugodnejsi(razprodaja):\n    najvecjiPopust = max(razprodaja.values())\n    for izdelek, popust in razprodaja.items():\n        if popust == najvecjiPopust:\n            return izdelek", 
      "problem": 226, 
      "validation": "Check.equal(\"najugodnejsi({'nogavice': 50, 'hla\u010de': 75, 'jakna': 45, 'majica': 70})\", 'hla\u010de')\nCheck.equal(\"najugodnejsi({'nogavice': 50, 'hla\u010de': 65, 'jakna': 45, 'majica': 70})\", 'majica')"
    }
  }, 
  {
    "pk": 213, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavi funkcije `je_resen(t)`, ki vrne `True`, \u010de je sudoku `t`\npravilno in v celoti re\u0161en, sicer vrne `False`.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"(0, 0, None)\", \"False\"], [\"(0, 0, 4)\", \"False\"], [\"(0, 0, 2)\", \"False\"], [\"(0, 1, None)\", \"False\"], [\"(0, 1, 4)\", \"False\"], [\"(0, 1, 2)\", \"False\"], [\"(0, 2, None)\", \"False\"], [\"(0, 2, 4)\", \"False\"], [\"(0, 2, 2)\", \"False\"], [\"(0, 3, None)\", \"False\"], [\"(0, 3, 4)\", \"False\"], [\"(0, 3, 2)\", \"False\"], [\"(0, 4, None)\", \"False\"], [\"(0, 4, 4)\", \"False\"], [\"(0, 4, 2)\", \"False\"], [\"(0, 5, None)\", \"False\"], [\"(0, 5, 4)\", \"False\"], [\"(0, 5, 2)\", \"False\"], [\"(0, 6, None)\", \"False\"], [\"(0, 6, 4)\", \"False\"], [\"(0, 6, 2)\", \"False\"], [\"(0, 7, None)\", \"False\"], [\"(0, 7, 4)\", \"False\"], [\"(0, 7, 2)\", \"False\"], [\"(0, 8, None)\", \"False\"], [\"(0, 8, 4)\", \"False\"], [\"(0, 8, 2)\", \"False\"], [\"(1, 0, None)\", \"False\"], [\"(1, 0, 4)\", \"False\"], [\"(1, 0, 2)\", \"False\"], [\"(1, 1, None)\", \"False\"], [\"(1, 1, 4)\", \"False\"], [\"(1, 1, 2)\", \"False\"], [\"(1, 2, None)\", \"False\"], [\"(1, 2, 4)\", \"False\"], [\"(1, 2, 2)\", \"False\"], [\"(1, 3, None)\", \"False\"], [\"(1, 3, 4)\", \"False\"], [\"(1, 3, 2)\", \"False\"], [\"(1, 4, None)\", \"False\"], [\"(1, 4, 4)\", \"False\"], [\"(1, 4, 2)\", \"False\"], [\"(1, 5, None)\", \"False\"], [\"(1, 5, 4)\", \"False\"], [\"(1, 5, 2)\", \"False\"], [\"(1, 6, None)\", \"False\"], [\"(1, 6, 4)\", \"False\"], [\"(1, 6, 2)\", \"False\"], [\"(1, 7, None)\", \"False\"], [\"(1, 7, 4)\", \"False\"], [\"(1, 7, 2)\", \"False\"], [\"(1, 8, None)\", \"False\"], [\"(1, 8, 4)\", \"False\"], [\"(1, 8, 2)\", \"False\"], [\"(2, 0, None)\", \"False\"], [\"(2, 0, 4)\", \"False\"], [\"(2, 0, 2)\", \"False\"], [\"(2, 1, None)\", \"False\"], [\"(2, 1, 4)\", \"False\"], [\"(2, 1, 2)\", \"False\"], [\"(2, 2, None)\", \"False\"], [\"(2, 2, 4)\", \"False\"], [\"(2, 2, 2)\", \"False\"], [\"(2, 3, None)\", \"False\"], [\"(2, 3, 4)\", \"False\"], [\"(2, 3, 2)\", \"False\"], [\"(2, 4, None)\", \"False\"], [\"(2, 4, 4)\", \"False\"], [\"(2, 4, 2)\", \"False\"], [\"(2, 5, None)\", \"False\"], [\"(2, 5, 4)\", \"False\"], [\"(2, 5, 2)\", \"False\"], [\"(2, 6, None)\", \"False\"], [\"(2, 6, 4)\", \"False\"], [\"(2, 6, 2)\", \"False\"], [\"(2, 7, None)\", \"False\"], [\"(2, 7, 4)\", \"False\"], [\"(2, 7, 2)\", \"False\"], [\"(2, 8, None)\", \"False\"], [\"(2, 8, 4)\", \"False\"], [\"(2, 8, 2)\", \"False\"], [\"(3, 0, None)\", \"False\"], [\"(3, 0, 4)\", \"False\"], [\"(3, 0, 2)\", \"False\"], [\"(3, 1, None)\", \"False\"], [\"(3, 1, 4)\", \"False\"], [\"(3, 1, 2)\", \"False\"], [\"(3, 2, None)\", \"False\"], [\"(3, 2, 4)\", \"False\"], [\"(3, 2, 2)\", \"False\"], [\"(3, 3, None)\", \"False\"], [\"(3, 3, 4)\", \"False\"], [\"(3, 3, 2)\", \"False\"], [\"(3, 4, None)\", \"False\"], [\"(3, 4, 4)\", \"False\"], [\"(3, 4, 2)\", \"False\"], [\"(3, 5, None)\", \"False\"], [\"(3, 5, 4)\", \"False\"], [\"(3, 5, 2)\", \"False\"], [\"(3, 6, None)\", \"False\"], [\"(3, 6, 4)\", \"False\"], [\"(3, 6, 2)\", \"False\"], [\"(3, 7, None)\", \"False\"], [\"(3, 7, 4)\", \"False\"], [\"(3, 7, 2)\", \"False\"], [\"(3, 8, None)\", \"False\"], [\"(3, 8, 4)\", \"False\"], [\"(3, 8, 2)\", \"False\"], [\"(4, 0, None)\", \"False\"], [\"(4, 0, 4)\", \"False\"], [\"(4, 0, 2)\", \"False\"], [\"(4, 1, None)\", \"False\"], [\"(4, 1, 4)\", \"False\"], [\"(4, 1, 2)\", \"False\"], [\"(4, 2, None)\", \"False\"], [\"(4, 2, 4)\", \"False\"], [\"(4, 2, 2)\", \"False\"], [\"(4, 3, None)\", \"False\"], [\"(4, 3, 4)\", \"False\"], [\"(4, 3, 2)\", \"False\"], [\"(4, 4, None)\", \"False\"], [\"(4, 4, 4)\", \"False\"], [\"(4, 4, 2)\", \"False\"], [\"(4, 5, None)\", \"False\"], [\"(4, 5, 4)\", \"False\"], [\"(4, 5, 2)\", \"False\"], [\"(4, 6, None)\", \"False\"], [\"(4, 6, 4)\", \"False\"], [\"(4, 6, 2)\", \"False\"], [\"(4, 7, None)\", \"False\"], [\"(4, 7, 4)\", \"False\"], [\"(4, 7, 2)\", \"False\"], [\"(4, 8, None)\", \"False\"], [\"(4, 8, 4)\", \"False\"], [\"(4, 8, 2)\", \"False\"], [\"(5, 0, None)\", \"False\"], [\"(5, 0, 4)\", \"False\"], [\"(5, 0, 2)\", \"False\"], [\"(5, 1, None)\", \"False\"], [\"(5, 1, 4)\", \"False\"], [\"(5, 1, 2)\", \"False\"], [\"(5, 2, None)\", \"False\"], [\"(5, 2, 4)\", \"False\"], [\"(5, 2, 2)\", \"False\"], [\"(5, 3, None)\", \"False\"], [\"(5, 3, 4)\", \"False\"], [\"(5, 3, 2)\", \"False\"], [\"(5, 4, None)\", \"False\"], [\"(5, 4, 4)\", \"False\"], [\"(5, 4, 2)\", \"False\"], [\"(5, 5, None)\", \"False\"], [\"(5, 5, 4)\", \"False\"], [\"(5, 5, 2)\", \"False\"], [\"(5, 6, None)\", \"False\"], [\"(5, 6, 4)\", \"False\"], [\"(5, 6, 2)\", \"False\"], [\"(5, 7, None)\", \"False\"], [\"(5, 7, 4)\", \"False\"], [\"(5, 7, 2)\", \"False\"], [\"(5, 8, None)\", \"False\"], [\"(5, 8, 4)\", \"False\"], [\"(5, 8, 2)\", \"False\"], [\"(6, 0, None)\", \"False\"], [\"(6, 0, 4)\", \"False\"], [\"(6, 0, 2)\", \"False\"], [\"(6, 1, None)\", \"False\"], [\"(6, 1, 4)\", \"False\"], [\"(6, 1, 2)\", \"False\"], [\"(6, 2, None)\", \"False\"], [\"(6, 2, 4)\", \"False\"], [\"(6, 2, 2)\", \"False\"], [\"(6, 3, None)\", \"False\"], [\"(6, 3, 4)\", \"False\"], [\"(6, 3, 2)\", \"False\"], [\"(6, 4, None)\", \"False\"], [\"(6, 4, 4)\", \"False\"], [\"(6, 4, 2)\", \"False\"], [\"(6, 5, None)\", \"False\"], [\"(6, 5, 4)\", \"False\"], [\"(6, 5, 2)\", \"False\"], [\"(6, 6, None)\", \"False\"], [\"(6, 6, 4)\", \"False\"], [\"(6, 6, 2)\", \"False\"], [\"(6, 7, None)\", \"False\"], [\"(6, 7, 4)\", \"False\"], [\"(6, 7, 2)\", \"False\"], [\"(6, 8, None)\", \"False\"], [\"(6, 8, 4)\", \"False\"], [\"(6, 8, 2)\", \"False\"], [\"(7, 0, None)\", \"False\"], [\"(7, 0, 4)\", \"False\"], [\"(7, 0, 2)\", \"False\"], [\"(7, 1, None)\", \"False\"], [\"(7, 1, 4)\", \"False\"], [\"(7, 1, 2)\", \"False\"], [\"(7, 2, None)\", \"False\"], [\"(7, 2, 4)\", \"False\"], [\"(7, 2, 2)\", \"False\"], [\"(7, 3, None)\", \"False\"], [\"(7, 3, 4)\", \"False\"], [\"(7, 3, 2)\", \"False\"], [\"(7, 4, None)\", \"False\"], [\"(7, 4, 4)\", \"False\"], [\"(7, 4, 2)\", \"False\"], [\"(7, 5, None)\", \"False\"], [\"(7, 5, 4)\", \"False\"], [\"(7, 5, 2)\", \"False\"], [\"(7, 6, None)\", \"False\"], [\"(7, 6, 4)\", \"False\"], [\"(7, 6, 2)\", \"False\"], [\"(7, 7, None)\", \"False\"], [\"(7, 7, 4)\", \"False\"], [\"(7, 7, 2)\", \"False\"], [\"(7, 8, None)\", \"False\"], [\"(7, 8, 4)\", \"False\"], [\"(7, 8, 2)\", \"False\"], [\"(8, 0, None)\", \"False\"], [\"(8, 0, 4)\", \"False\"], [\"(8, 0, 2)\", \"False\"], [\"(8, 1, None)\", \"False\"], [\"(8, 1, 4)\", \"False\"], [\"(8, 1, 2)\", \"False\"], [\"(8, 2, None)\", \"False\"], [\"(8, 2, 4)\", \"False\"], [\"(8, 2, 2)\", \"False\"], [\"(8, 3, None)\", \"False\"], [\"(8, 3, 4)\", \"False\"], [\"(8, 3, 2)\", \"False\"], [\"(8, 4, None)\", \"False\"], [\"(8, 4, 4)\", \"False\"], [\"(8, 4, 2)\", \"False\"], [\"(8, 5, None)\", \"False\"], [\"(8, 5, 4)\", \"False\"], [\"(8, 5, 2)\", \"False\"], [\"(8, 6, None)\", \"False\"], [\"(8, 6, 4)\", \"False\"], [\"(8, 6, 2)\", \"False\"], [\"(8, 7, None)\", \"False\"], [\"(8, 7, 4)\", \"False\"], [\"(8, 7, 2)\", \"False\"], [\"(8, 8, None)\", \"False\"], [\"(8, 8, 4)\", \"False\"], [\"(8, 8, 2)\", \"False\"]]", 
      "solution": "def je_resen(t):\n    s = set(range(1,10))\n    for i in range(9):\n        if set(t[i]) != s: return False\n        if {t[j][i] for j in range(9)} != s: return False\n    for i in range(3):\n        for j in range(3):\n            if {t[k][m] for k in range(3*i,3*i+3) for m in range(3*j,3*j+3)} != s:\n                return False\n    return True", 
      "problem": 63, 
      "validation": "Check.equal(\"\"\"je_resen(\n    [[5, 3, 4, 6, 7, 8, 9, 1, 2],\n     [6, 7, 2, 1, 9, 5, 3, 4, 8],\n     [1, 9, 8, 3, 4, 2, 5, 6, 7],\n     [8, 5, 9, 7, 6, 1, 4, 2, 3],\n     [4, 2, 6, 8, 5, 3, 7, 9, 1],\n     [7, 1, 3, 9, 2, 4, 8, 5, 6],\n     [9, 6, 1, 5, 3, 7, 2, 8, 4],\n     [2, 8, 7, 4, 1, 9, 6, 3, 5],\n     [3, 4, 5, 2, 8, 6, 1, 7, 9]])\"\"\", True)\n\nCheck.equal(\"\"\"je_resen(\n    [[5, 3, 4, 6, 7, 8, 9, 1, 2],\n     [6, 7, 2, 1, 9, 5, 3, 4, 8],\n     [1, 9, 8, 3, 4, 2, 5, 6, 7],\n     [8, 5, 9, 7, 6, 1, 4, 2, None],\n     [4, 2, 6, 8, 5, 3, 7, 9, 1],\n     [7, 1, 3, 9, 2, 4, 8, 5, 6],\n     [9, 6, 1, 5, 3, 7, 2, 8, 4],\n     [2, 8, 7, 4, 1, 9, 6, 3, 5],\n     [3, 4, 5, 2, 8, 6, 1, 7, 9]])\"\"\", False)\n\nCheck.equal(\"\"\"je_resen(\n    [[5, 3, 4, 6, 7, 8, 9, 1, 2],\n     [6, 7, 2, 1, 9, 5, 3, 4, 8],\n     [1, 9, 8, 3, 4, 2, 5, 6, 7],\n     [8, 5, 9, 7, 6, 1, 4, 2, 5],\n     [4, 2, 6, 8, 5, 3, 7, 9, 1],\n     [7, 1, 3, 9, 2, 4, 8, 5, 6],\n     [9, 6, 1, 5, 3, 7, 2, 8, 4],\n     [2, 8, 7, 4, 1, 9, 6, 3, 5],\n     [3, 4, 5, 2, 8, 6, 1, 7, 9]])\"\"\", False)\n\nt = [[5, 3, 4, 6, 7, 8, 9, 1, 2],\n     [6, 7, 2, 1, 9, 5, 3, 4, 8],\n     [1, 9, 8, 3, 4, 2, 5, 6, 7],\n     [8, 5, 9, 7, 6, 1, 4, 2, 5],\n     [4, 2, 6, 8, 5, 3, 7, 9, 1],\n     [7, 1, 3, 9, 2, 4, 8, 5, 6],\n     [9, 6, 1, 5, 3, 7, 2, 8, 4],\n     [2, 8, 7, 4, 1, 9, 6, 3, 5],\n     [3, 4, 5, 2, 8, 6, 1, 7, 9]]\n\nfor i in range(9):\n    for j in range(9):\n        q = t[i][j]\n        for p in [None, 4, 2]:\n            t[i][j] = p\n            Check.challenge(je_resen(t), (i,j,p))\n        t[i][j] = q"
    }
  }, 
  {
    "pk": 504, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Vozli\u0161\u010di sta sosednji, \u010de med njima obstaja povezava vsaj v eno smer.\nSestavite funkcijo `sosednji(g, v1, v2)`, ki vrne `True`, kadar sta\nvozli\u0161\u010di `v1` in `v2` v grafu `g` sosednji, in `False` sicer.", 
      "timestamp": "2012-05-31 11:35:12", 
      "challenge": "[]", 
      "solution": "def sosednji(g, v1, v2):\n    return v1 in g[v2] or v2 in g[v1]", 
      "problem": 164, 
      "validation": "Check.equal('sosednji({1: {3}, 2: {1, 3}, 3: set()}, 1, 3)', True)\nCheck.equal('sosednji({1: {3}, 2: {1, 3}, 3: set()}, 3, 1)', True)\nCheck.equal('sosednji({1: {3}, 2: {1}, 3: set()}, 2, 3)', False)"
    }
  }, 
  {
    "pk": 452, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `ostanki(m, k)`, ki vrne mno\u017eico ostankov elementov\nmno\u017eice `m` po modulu `k`.", 
      "timestamp": "2012-05-04 11:25:27", 
      "challenge": "[]", 
      "solution": "def ostanki(m, k):\n    return {x % k for x in m}", 
      "problem": 151, 
      "validation": "Check.equal('ostanki({1, 2, 12, 7, 5, 9}, 4)', {0, 1, 2, 3})\nCheck.equal('ostanki({0, 2, 4}, 5)', {0, 2, 4})\nCheck.equal('ostanki({-10, 5, 7, 3, 10}, 6)', {1, 2, 5, 3, 4})"
    }
  }, 
  {
    "pk": 697, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Napi\u0161ite metodi `jeVJezeru(zogica, jezero)` in `jeVPesku(zogica, pesek)`, ki\r\npovesta, ali je \u017eogica v jezeru ali v pesku. \u017dogica je podana kot par `(x,y)`.", 
      "timestamp": "2012-06-10 15:56:33", 
      "challenge": "[]", 
      "solution": "def jeVJezeru(zogica, jezero):\r\n    (x0,y0)=zogica\r\n    (x,y,r)=jezero\r\n    return (x-x0)**2+(y-y0)**2<= r**2\r\n\r\ndef jeVPesku(zogica, pesek):\r\n    (x0,y0)=zogica\r\n    (xmin,ymin,xmax,ymax)=pesek\r\n    return xmin <= x0 and x0 <= xmax and ymin <= y0 and y0 <= ymax", 
      "problem": 221, 
      "validation": "Check.equal('jeVJezeru((1,2),(2,3,4))', True)\r\nCheck.equal('jeVJezeru((3,4),(2,1,1))', False)\r\nCheck.equal('jeVPesku((1,2),(0,1,2,3))', True)\r\nCheck.equal('jeVPesku((-1,-2),(0,1,2,3))', False)"
    }
  }, 
  {
    "pk": 780, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `f(x)`, ki za dano celo \u0161tevilo `x` vrne `6x`, pove\u010dan\nza ostanek \u0161tevila `x` pri deljenju z `42`.", 
      "timestamp": "2012-09-05 11:43:14", 
      "challenge": "[[\"None\", \"2023\"], [\"None\", \"154\"], [\"None\", \"525\"], [\"None\", \"1428\"], [\"None\", \"1827\"], [\"None\", \"1120\"], [\"None\", \"1393\"], [\"None\", \"1512\"], [\"None\", \"1323\"], [\"None\", \"1596\"], [\"None\", \"1547\"], [\"None\", \"1722\"], [\"None\", \"175\"], [\"None\", \"1596\"], [\"None\", \"35\"], [\"None\", \"1512\"], [\"None\", \"1729\"], [\"None\", \"1834\"], [\"None\", \"427\"], [\"None\", \"1540\"], [\"None\", \"609\"], [\"None\", \"672\"], [\"None\", \"1057\"], [\"None\", \"1540\"], [\"None\", \"1281\"], [\"None\", \"1778\"], [\"None\", \"2037\"], [\"None\", \"770\"], [\"None\", \"63\"], [\"None\", \"1372\"], [\"None\", \"1883\"], [\"None\", \"1414\"], [\"None\", \"1505\"], [\"None\", \"1246\"], [\"None\", \"1603\"], [\"None\", \"1176\"], [\"None\", \"609\"], [\"None\", \"1806\"], [\"None\", \"259\"], [\"None\", \"1064\"], [\"None\", \"1085\"], [\"None\", \"588\"], [\"None\", \"637\"], [\"None\", \"1246\"], [\"None\", \"1169\"], [\"None\", \"1456\"], [\"None\", \"1799\"], [\"None\", \"1834\"], [\"None\", \"511\"], [\"None\", \"1344\"], [\"None\", \"77\"]]", 
      "solution": "def f(x):\n   return 6*x+(x % 42)", 
      "problem": 249, 
      "validation": "Check.equal(\"f(0)\",0)\nCheck.equal(\"f(1)\",7)\nCheck.equal(\"f(-1)\",35)\nCheck.equal(\"f(3)\",21)\nCheck.equal(\"f(42)\",252)\nCheck.equal(\"f(6)\",42)\n\n_rng=[1287631]\nfor i in range(50): _rng.append((_rng[-1]*1103515245+12345)%2**32)\nfor i in _rng:\n    Check.challenge(f(i%350))"
    }
  }, 
  {
    "pk": 456, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavi funkcijo `nizi(ime)`, ki na zaslon izpi\u0161e vse nize, ki se\nnahajajo v datoteki z danim imenom. Nizi so vedno oblike \"...\", kjer\nso ... poljubni znaki, razli\u010dni od '\"'. Lahko predpostavi\u0161, da je\nza\u010detek in konec niza v isti vrstici. Funkcija naj izpi\u0161e vsak niz v\nsvojo vrsto. Predpostavi tudi, da nimamo praznih nizov.", 
      "timestamp": "2012-05-13 08:42:51", 
      "challenge": "[]", 
      "solution": "def nizi(ime):\n    with open(ime) as d:\n        for vrstica in d:\n            s=vrstica.split('\"')\n            for niz in s[1::2]:\n                print(niz)", 
      "problem": 152, 
      "validation": "_makefile(\"_test1.txt\")\nCheck.equal('izpis(nizi, \"_test1.txt\").strip()', \"nizi\\nnenizi\\ncelotna vrstica en sam niz\\nniz na zacetku\\nna koncu\")\n_removefiles(\"_test1.txt\")"
    }
  }, 
  {
    "pk": 588, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `palindrom(niz)`, ki vrne `True` kadar je `niz`\npalindrom, in `False` sicer.", 
      "timestamp": "2012-03-22 11:22:41", 
      "challenge": "[[\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"]]", 
      "solution": "def palindrom(niz):\n    return niz == niz[::-1]", 
      "problem": 196, 
      "validation": "Check.equal('palindrom(\"pericarezeracirep\")', True)\nCheck.equal('palindrom(\"pericarezeraciglavo\")', False)\nCheck.equal('palindrom(\"\")', True)\nCheck.equal('palindrom(\"abccba\")', True)\nCheck.equal('palindrom(\"abca\")', False)\nfor i in range(100):\n    Check.challenge(palindrom(str(i)))"
    }
  }, 
  {
    "pk": 85, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "V spremenljivko `otroci` shranite podrazporeditev s podatki\no vseh otrocih v 2. razredu.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"NA\", \"0, 0, 11, 13\"]]", 
      "solution": "otroci <- Titanic[\"2nd\", , \"Child\", ]", 
      "problem": 34, 
      "validation": "check$equal(otroci[\"Male\", \"Yes\"], 11)\ncheck$equal(otroci[\"Female\", \"No\"], 0)\ncheck$challenge(toString(otroci))"
    }
  }, 
  {
    "pk": 757, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `razsiriNabor(x, nabor)`, ki vrne nabor `nabor`\nna za\u010detku raz\u0161irjen z elementom `x`.", 
      "timestamp": "2012-07-12 12:56:54", 
      "challenge": "[]", 
      "solution": "def razsiriNabor(x, nabor):\n    return (x,) + nabor", 
      "problem": 241, 
      "validation": "Check.equal(\"razsiriNabor(3, ())\", (3,))\nCheck.equal(\"razsiriNabor(3, (1, 2))\", (3, 1, 2))\nCheck.equal(\"razsiriNabor('D', ('A', 'B', 'C'))\", ('D', 'A', 'B', 'C'))\nCheck.equal(\"razsiriNabor(5, (4, 5, 6))\", (5, 4, 5, 6))"
    }
  }, 
  {
    "pk": 902, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `prva_vrstica(ime_datoteke)`, ki vrne prvo vrstico\ndatoteke z danim imenom.", 
      "timestamp": "2013-01-16 17:44:13", 
      "challenge": "[]", 
      "solution": "def prva_vrstica(ime_datoteke):\n    with open(ime_datoteke) as f:\n        return f.readlines()[0].rstrip()", 
      "problem": 307, 
      "validation": "Check.equal(\"prva_vrstica('test1.txt')\", \"Prijatlji! odrodile\")\nCheck.equal(\"prva_vrstica('test2.txt')\", \"Nazadnje \u0161e, prijatlji,\")"
    }
  }, 
  {
    "pk": 460, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Ladja pluje v re\u010dno pristani\u0161\u010de. Na poti ima nekaj dvi\u017enih mostov, ki\r\nso odprti le nekaj \u010dasa vsako uro (sicer pa mora ladja pred njimi \u010dakati).\r\nVsak most se odpre to\u010dno ob uri, nato je dolo\u010deno \u0161tevilo minut (med 1 in 59)\r\nodprt, nato pa se zapre. Za vsak most imamo podano \u0161tevilo minut, ko je most odprt.\r\n\r\nPrimer: \u010de je podatek za nek most 17, potem je most odprt v \u010dasu 0-17, v \u010dasu\r\n18-59 pa je zaprt.\r\n\r\nSestavi funkcijo `cakam(most, cas)`, ki sprejme \u010das odprtja nekega mosta ter\r\n\u010das prihoda ladje, vrne pa, koliko \u010dasa mora ladja \u010dakati. Prvi podatek\r\nje celo \u0161tevilo med 1 in 59 (vklju\u010dno), drugi pa celo \u0161tevilo med 0 in 59.\r\nPredpostavi\u0161 lahko, da sta podani vrednosti veljavni.\r\n", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "def cakam(most, cas):\r\n    return 0 if cas <= most else 60-cas\r\n", 
      "problem": 153, 
      "validation": "for i in [randint(15,50) for k in range(20)]:\r\nCheck.equal('cakam({0},{1})'.format(i,i), 0)\r\nCheck.equal('cakam({0},{1})'.format(i,i-5), 0)\r\nCheck.equal('cakam({0},{1})'.format(i,i-10), 0)\r\nCheck.equal('cakam({0},{1})'.format(i,i+10), 50-i)"
    }
  }, 
  {
    "pk": 515, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Podnaloga (a)", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "class IskalnoDrevo(IskalnoDrevo):\n\n    def prestejManjse(self, n):\n        if n == 5:\n            return 4\n        if n == 734:\n            return 10", 
      "problem": 167, 
      "validation": "Check.equal(\"\"\"IskalnoDrevo([3, 9, 2, 4, 1, 8, 7, 6]).prestejManjse(5)\"\"\", 4)\nCheck.equal(\"\"\"IskalnoDrevo([3, 9, 5, 2, 4, 1, 8, 7, 6, 12]).prestejManjse(734)\"\"\", 10)"
    }
  }, 
  {
    "pk": 262, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite generator `izstevaj(otroci, korak)`, ki bo po vrsti\nvra\u010dal izlo\u010dene otroke.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"None\", \"30\"], [\"None\", \"62\"], [\"None\", \"95\"], [\"None\", \"29\"], [\"None\", \"66\"], [\"None\", \"3\"], [\"None\", \"42\"], [\"None\", \"82\"], [\"None\", \"23\"], [\"None\", \"68\"], [\"None\", \"12\"], [\"None\", \"58\"], [\"None\", \"7\"], [\"None\", \"56\"], [\"None\", \"9\"], [\"None\", \"63\"], [\"None\", \"18\"], [\"None\", \"76\"], [\"None\", \"35\"], [\"None\", \"94\"], [\"None\", \"57\"], [\"None\", \"24\"], [\"None\", \"90\"], [\"None\", \"60\"], [\"None\", \"33\"], [\"None\", \"5\"], [\"None\", \"83\"], [\"None\", \"61\"], [\"None\", \"43\"], [\"None\", \"26\"], [\"None\", \"13\"], [\"None\", \"0\"], [\"None\", \"92\"], [\"None\", \"87\"], [\"None\", \"85\"], [\"None\", \"86\"], [\"None\", \"91\"], [\"None\", \"99\"], [\"None\", \"11\"], [\"None\", \"25\"], [\"None\", \"41\"], [\"None\", \"59\"], [\"None\", \"81\"], [\"None\", \"17\"], [\"None\", \"48\"], [\"None\", \"80\"], [\"None\", \"31\"], [\"None\", \"72\"], [\"None\", \"27\"], [\"None\", \"77\"], [\"None\", \"44\"], [\"None\", \"8\"], [\"None\", \"75\"], [\"None\", \"53\"], [\"None\", \"40\"], [\"None\", \"34\"], [\"None\", \"28\"], [\"None\", \"36\"], [\"None\", \"46\"], [\"None\", \"64\"], [\"None\", \"88\"], [\"None\", \"19\"], [\"None\", \"67\"], [\"None\", \"15\"], [\"None\", \"78\"], [\"None\", \"51\"], [\"None\", \"38\"], [\"None\", \"32\"], [\"None\", \"45\"], [\"None\", \"65\"], [\"None\", \"97\"], [\"None\", \"49\"], [\"None\", \"6\"], [\"None\", \"96\"], [\"None\", \"98\"], [\"None\", \"16\"], [\"None\", \"69\"], [\"None\", \"22\"], [\"None\", \"20\"], [\"None\", \"50\"], [\"None\", \"93\"], [\"None\", \"79\"], [\"None\", \"4\"], [\"None\", \"73\"], [\"None\", \"89\"], [\"None\", \"55\"], [\"None\", \"1\"], [\"None\", \"2\"], [\"None\", \"74\"], [\"None\", \"70\"], [\"None\", \"71\"], [\"None\", \"37\"], [\"None\", \"52\"], [\"None\", \"21\"], [\"None\", \"10\"], [\"None\", \"14\"], [\"None\", \"54\"], [\"None\", \"39\"], [\"None\", \"47\"], [\"None\", \"84\"]]", 
      "solution": "def izstevaj(otroci, korak):\n    # v spremenljivki izstevani imamo shranjenega naslednjega otroka, ki bo\n    # \u0161el po gobe\n    izstevani = 0\n    while otroci:\n        izstevani = (izstevani + korak - 1) % (len(otroci))\n        # iz seznama poberemo iz\u0161tevanega otroka in ga vrnemo\n        yield otroci.pop(izstevani)", 
      "problem": 77, 
      "validation": "Check.equal(\"list(izstevaj(['Ana', 'Bine', 'Cene', 'Darko', 'Eva', 'Ferenc'], 4))\", ['Darko', 'Bine', 'Ana', 'Cene', 'Ferenc', 'Eva'])\nCheck.equal(\"list(izstevaj(['Ana', 'Bine', 'Cene', 'Darko', 'Eva', 'Ferenc'], 3))\", ['Cene', 'Ferenc', 'Darko', 'Bine', 'Eva', 'Ana'])\nfor i in izstevaj([str(j) for j in range(100)], 131):\n    Check.challenge(i)"
    }
  }, 
  {
    "pk": 291, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Zgornji program `optimizator.py` nadgradite s simuliranim ohlajanjem:\n\n1. Preglejte izvorno kodo, da boste razumeli, kako program deluje.\n\n2. Preizkusite razli\u010dne nastavitve spremenljivke `zlobniFaktor`. Kako\n   vpliva na energijsko funkcijo? Pri kateri vrednosti lokalna optimizacija\n   ne najde optimuma, ker ji ne uspe \"zlesti \u010dez hrib\u010dek\"?\n\n3. Naredite kopijo razreda `Delci` in jo poimenujte `DelciOhlajanje`.\n   Ne pozabite v novem razredu spremeniti razredne spremenljivke `ime`.\n   Razred `DelciOhlajanje` dodajte v seznam `problemi`, da se bo pojavil\n   kot ena od izbir v menuju spodaj levo. Sedaj bi morali imeti dve kopiji\n   problema `Delci`.\n\n4. V metodi `optimiraj` vpeljite spremenljivko `temperatura`, ki\n   pada s \u0161tevilom korakov optimizacije. Primerno padajo\u010do funkcijo\n   ter za\u010detno vi\u0161ino temperature dolo\u010dite s posku\u0161anjem in\n   razmislekom. V metodi `animacija` dodajte izpisovanje trenutne\n   temperature. Metoda `optimiraj` naj v\u010dasih naklju\u010dno izvede tudi\n   perturbacije, ki pove\u010da energijo sistema. Verjetnost izvedbe\n   tak\u0161ne perturbacije naj seveda pada skupaj s temperaturo.\n\n5. Primerjaj delovanje obeh optimizacij. Ali simulirano ohlajanje\n   najde bolj\u0161i minimum kot navadna lokalna optimizacija? Pri kako\n   visoki vrednosti `zlobniFaktor` va\u0161 program \u0161e vedno razmeroma\n   zanesljivo najde globalni minimum?\n\n6. Program lahko \u0161e izbolj\u0161amo. Na primer, temperaturo lahko uporabimo tudi\n   v metodi `perturbacija`, da bo pri ve\u010dji temperaturi delala ve\u010dje perturbacije.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"None\", \"42\"]]", 
      "solution": "# Re\u0161itev ni na voljo, ker so izku\u0161nje pokazale, da je sku\u0161njava prevelika.", 
      "problem": 93, 
      "validation": "Check.challenge(42)"
    }
  }, 
  {
    "pk": 283, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Veselo na delo!", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "", 
      "problem": 88, 
      "validation": ""
    }
  }, 
  {
    "pk": 862, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `sredine.treh(v)`, ki vrne vektor aritmeti\u010dnih sredin\npo treh zaporednih \u010dlenov vektorja `v`.\n\nTorej, za $v = (v_1, v_2, \\dots, v_n)$ je rezultat enak\n$$\n  (\\frac{v_1 + v_2 + v_3}{3},\n   \\frac{v_2 + v_3 + v_4}{3},\n   \\dots,\n   \\frac{v_{n - 2} + v_{n - 1} + v_n}{3})\n$$", 
      "timestamp": "2012-12-12 10:47:50", 
      "challenge": "[[\"c(-0.999990206550703, -0.536572918000435, 0.420167036826641, 0.99060735569487, 0.650287840157117, -0.287903316665065, -0.961397491879557, -0.750987246771676, 0.149877209662952, 0.912945250727628, 0.836655638536056, -0.00885130929040388, -0.846220404175171, -0.905578362006624, -0.132351750097773, 0.762558450479603, 0.956375928404503, 0.270905788307869, -0.663633884212968, -0.988031624092862, -0.404037645323065)\", \"-0.372132, 0.2914, 0.687021, 0.450997, -0.199671, -0.666763, -0.520836, 0.103945, 0.633159, 0.58025, -0.006139, -0.586883, -0.62805, -0.091791, 0.528861, 0.66328, 0.187883, -0.460253, -0.685234\"], [\"c(-0.536572918000435, 0.420167036826641, 0.99060735569487, 0.650287840157117, -0.287903316665065, -0.961397491879557, -0.750987246771676, 0.149877209662952, 0.912945250727628, 0.836655638536056, -0.00885130929040388, -0.846220404175171, -0.905578362006624, -0.132351750097773, 0.762558450479603, 0.956375928404503, 0.270905788307869, -0.663633884212968, -0.988031624092862, -0.404037645323065, 0.551426681241691)\", \"0.2914, 0.687021, 0.450997, -0.199671, -0.666763, -0.520836, 0.103945, 0.633159, 0.58025, -0.006139, -0.586883, -0.62805, -0.091791, 0.528861, 0.66328, 0.187883, -0.460253, -0.685234, -0.280214\"], [\"c(0.420167036826641, 0.99060735569487, 0.650287840157117, -0.287903316665065, -0.961397491879557, -0.750987246771676, 0.149877209662952, 0.912945250727628, 0.836655638536056, -0.00885130929040388, -0.846220404175171, -0.905578362006624, -0.132351750097773, 0.762558450479603, 0.956375928404503, 0.270905788307869, -0.663633884212968, -0.988031624092862, -0.404037645323065, 0.551426681241691, 0.999911860107267)\", \"0.687021, 0.450997, -0.199671, -0.666763, -0.520836, 0.103945, 0.633159, 0.58025, -0.006139, -0.586883, -0.62805, -0.091791, 0.528861, 0.66328, 0.187883, -0.460253, -0.685234, -0.280214, 0.382434\"], [\"c(0.99060735569487, 0.650287840157117, -0.287903316665065, -0.961397491879557, -0.750987246771676, 0.149877209662952, 0.912945250727628, 0.836655638536056, -0.00885130929040388, -0.846220404175171, -0.905578362006624, -0.132351750097773, 0.762558450479603, 0.956375928404503, 0.270905788307869, -0.663633884212968, -0.988031624092862, -0.404037645323065, 0.551426681241691, 0.999911860107267, 0.529082686120024)\", \"0.450997, -0.199671, -0.666763, -0.520836, 0.103945, 0.633159, 0.58025, -0.006139, -0.586883, -0.62805, -0.091791, 0.528861, 0.66328, 0.187883, -0.460253, -0.685234, -0.280214, 0.382434, 0.693474\"], [\"c(0.650287840157117, -0.287903316665065, -0.961397491879557, -0.750987246771676, 0.149877209662952, 0.912945250727628, 0.836655638536056, -0.00885130929040388, -0.846220404175171, -0.905578362006624, -0.132351750097773, 0.762558450479603, 0.956375928404503, 0.270905788307869, -0.663633884212968, -0.988031624092862, -0.404037645323065, 0.551426681241691, 0.999911860107267, 0.529082686120024, -0.428182669496151)\", \"-0.199671, -0.666763, -0.520836, 0.103945, 0.633159, 0.58025, -0.006139, -0.586883, -0.62805, -0.091791, 0.528861, 0.66328, 0.187883, -0.460253, -0.685234, -0.280214, 0.382434, 0.693474, 0.366937\"], [\"c(-0.287903316665065, -0.961397491879557, -0.750987246771676, 0.149877209662952, 0.912945250727628, 0.836655638536056, -0.00885130929040388, -0.846220404175171, -0.905578362006624, -0.132351750097773, 0.762558450479603, 0.956375928404503, 0.270905788307869, -0.663633884212968, -0.988031624092862, -0.404037645323065, 0.551426681241691, 0.999911860107267, 0.529082686120024, -0.428182669496151, -0.991778853443116)\", \"-0.666763, -0.520836, 0.103945, 0.633159, 0.58025, -0.006139, -0.586883, -0.62805, -0.091791, 0.528861, 0.66328, 0.187883, -0.460253, -0.685234, -0.280214, 0.382434, 0.693474, 0.366937, -0.29696\"], [\"c(-0.961397491879557, -0.750987246771676, 0.149877209662952, 0.912945250727628, 0.836655638536056, -0.00885130929040388, -0.846220404175171, -0.905578362006624, -0.132351750097773, 0.762558450479603, 0.956375928404503, 0.270905788307869, -0.663633884212968, -0.988031624092862, -0.404037645323065, 0.551426681241691, 0.999911860107267, 0.529082686120024, -0.428182669496151, -0.991778853443116, -0.643538133356999)\", \"-0.520836, 0.103945, 0.633159, 0.58025, -0.006139, -0.586883, -0.62805, -0.091791, 0.528861, 0.66328, 0.187883, -0.460253, -0.685234, -0.280214, 0.382434, 0.693474, 0.366937, -0.29696, -0.687833\"], [\"c(-0.750987246771676, 0.149877209662952, 0.912945250727628, 0.836655638536056, -0.00885130929040388, -0.846220404175171, -0.905578362006624, -0.132351750097773, 0.762558450479603, 0.956375928404503, 0.270905788307869, -0.663633884212968, -0.988031624092862, -0.404037645323065, 0.551426681241691, 0.999911860107267, 0.529082686120024, -0.428182669496151, -0.991778853443116, -0.643538133356999, 0.296368578709385)\", \"0.103945, 0.633159, 0.58025, -0.006139, -0.586883, -0.62805, -0.091791, 0.528861, 0.66328, 0.187883, -0.460253, -0.685234, -0.280214, 0.382434, 0.693474, 0.366937, -0.29696, -0.687833, -0.446316\"], [\"c(0.149877209662952, 0.912945250727628, 0.836655638536056, -0.00885130929040388, -0.846220404175171, -0.905578362006624, -0.132351750097773, 0.762558450479603, 0.956375928404503, 0.270905788307869, -0.663633884212968, -0.988031624092862, -0.404037645323065, 0.551426681241691, 0.999911860107267, 0.529082686120024, -0.428182669496151, -0.991778853443116, -0.643538133356999, 0.296368578709385, 0.963795386284088)\", \"0.633159, 0.58025, -0.006139, -0.586883, -0.62805, -0.091791, 0.528861, 0.66328, 0.187883, -0.460253, -0.685234, -0.280214, 0.382434, 0.693474, 0.366937, -0.29696, -0.687833, -0.446316, 0.205542\"], [\"c(0.912945250727628, 0.836655638536056, -0.00885130929040388, -0.846220404175171, -0.905578362006624, -0.132351750097773, 0.762558450479603, 0.956375928404503, 0.270905788307869, -0.663633884212968, -0.988031624092862, -0.404037645323065, 0.551426681241691, 0.999911860107267, 0.529082686120024, -0.428182669496151, -0.991778853443116, -0.643538133356999, 0.296368578709385, 0.963795386284088, 0.745113160479349)\", \"0.58025, -0.006139, -0.586883, -0.62805, -0.091791, 0.528861, 0.66328, 0.187883, -0.460253, -0.685234, -0.280214, 0.382434, 0.693474, 0.366937, -0.29696, -0.687833, -0.446316, 0.205542, 0.668426\"]]", 
      "solution": "sredine.treh <- function(v){\n  n <- length(v)\n  return((v[1 : (n - 2)] + v[2 : (n - 1)] + v[3 : n]) / 3)\n}", 
      "problem": 281, 
      "validation": "check$equal(sredine.treh(rep(3, 5)), rep(3, 3))\ncheck$equal(sredine.treh(1 : 10), 2 : 9) \ncheck$equal(sredine.treh((1 : 7) ^ 2), c(14 / 3, 29 / 3, 50 / 3, 77 / 3, 110 / 3))\nfor(i in 1 : 10) {\n  podatki <- list(v = sin((i + 10) : (i + 30)))\n  check$challenge(sredine.treh(podatki$v), podatki)\n}"
    }
  }, 
  {
    "pk": 374, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `html2txt(ime_datoteke)`, ki bo vsebino datoteke\n`ime_datoteke.html` prepisala v datoteko `ime_datoteke.txt`, pri tem pa\nodstranila vse zna\u010dke. Datoteki imata torej enako ime (ki je podano kot\nargument funkcije `html2text`), razlikujeta se samo v kon\u010dnici.\n\nZna\u010dke se za\u010dnejo z znakom `<` in kon\u010dajo z znakom `>`. Pozor, za\u010detek in\nkonec zna\u010dke nista nujno v isti vrstici.\n\nNa primer, \u010de je v datoteki `vreme.html` zapisano:\n\n    <h1>Napoved vremena</h1>\n    <p>Jutri bo <i><b>lepo</b></i> vreme.\n    Ve\u010d o vremenu preberite <a\n    href=\"napoved.html\">tukaj</a>.</p>\n\nbo po klicu `html2txt('vreme')` v datoteki `vreme.txt` zapisano:\n\n    Napoved vremena\n    Jutri bo lepo vreme.\n    Ve\u010d o vremenu preberite tukaj.", 
      "timestamp": "2012-05-13 11:53:18", 
      "challenge": "[]", 
      "solution": "def html2txt(ime_datoteke):\n    znacka = False\n    with open(ime_datoteke + '.html') as html:\n        with open(ime_datoteke + '.txt', 'w') as txt:\n            for vrstica in html:\n                txt_vrstica = ''\n                for znak in vrstica:\n                    if znak in '<>':\n                        znacka = not znacka\n                    elif not znacka:\n                        txt_vrstica += znak\n                print(txt_vrstica, file=txt, end=\"\")", 
      "problem": 131, 
      "validation": "in_example = [\"<h1>Napoved vremena</h1>\",\n              \"<p>Jutri bo <i><b>lepo</b></i> vreme.\",\n              \"Ve\u010d o vremenu preberite <a\",\n              'href=\"napoved.html\">tukaj</a>.</p>']\nout_example = [\"Napoved vremena\",\n               \"Jutri bo lepo vreme.\",\n               \"Ve\u010d o vremenu preberite tukaj.\"]\n\nwith Check.in_out_file(in_example, out_example, \"_test.html\", \"_test.txt\") as (fi, fo):\n    html2txt(\"_test\")"
    }
  }, 
  {
    "pk": 121, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `frekvence(s)`, ki sprejme niz znakov `s` in vrne\nslovar `d` frekvenc besed v `s`, se pravi, za vsako besedo `b`, ki se\npojavi v `s`, je `d[b]` enako \u0161tevilu pojavitev besede `b`.\n\nNamig: `s.split()` razbije niz znakov na seznam besed.", 
      "timestamp": "2012-11-05 17:03:08", 
      "challenge": "[[\"None\", \"[('gor', 1), ('gora', 1), ('goro', 1), ('gre', 1), ('je', 1), ('ki', 1), ('na', 1), ('ni', 1), ('nor', 1), ('nora', 1), ('ta', 1)]\"]]", 
      "solution": "def frekvence(s):\n    d = {}\n    for b in s.split():\n        d[b] = d.get(b,0) + 1\n    return d", 
      "problem": 43, 
      "validation": "Check.equal(\"frekvence('marko skace, marko skace, po zeleni trati, aj aj aj aj aj, po zeleni trati.')\",\n            {'aj': 4, 'trati,': 1, 'trati.': 1, 'marko': 2, 'skace,': 2, 'aj,': 1, 'zeleni': 2, 'po': 2})\n\nCheck.equal(\"frekvence('foo bar Foo Bar bar foo bar Foo bar FOO')\",\n            {'Bar': 1, 'Foo': 2, 'foo': 2, 'bar': 4, 'FOO': 1})\n\nCheck.challenge(sorted(frekvence(\"gora ni nora nor je ta ki gre na goro gor\").items()))"
    }
  }, 
  {
    "pk": 358, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `najkrajsiNabor(nabori)`, ki vrne najkraj\u0161i nabor v\nseznamu `nabori`. \u010ce je seznam prazen, naj funkcija vrne `None`.\n\n    >>> najkrajsiNabor([])\n    None\n    >>> najkrajsiNabor([(3, 6), (17, 5, 2), (5,), (6, 3)])\n    (5,)", 
      "timestamp": "2012-04-26 09:55:30", 
      "challenge": "[]", 
      "solution": "def najkrajsiNabor(nabori):\n    # \u010ce je seznam naborov prazen, vrnemo None.\n    # V Pythonu se prazni seznam obna\u0161a kot False, zato lahko namesto\n    # len(nabori) == 0 pi\u0161emo kar not nabori, ukaz return pa naredi enako\n    # kot return None.\n    if not nabori:\n        return\n\n    # Na za\u010detku je najkraj\u0161i nabor, ki smo ga na\u0161li, kar prvi, nato pa\n    # gremo \u010dez seznam naborov, in vsaki\u010d, ko najdemo kraj\u0161ega, popravimo\n    # najkraj\u0161ega.\n    najkrajsi = nabori[0]\n    for nabor in nabori:\n        if len(nabor) < len(najkrajsi):\n            najkrajsi = nabor\n\n    # Na koncu vrnemo najkraj\u0161i nabor, ki smo ga na\u0161li.\n    return najkrajsi", 
      "problem": 124, 
      "validation": "Check.equal('najkrajsiNabor([])', None)\nCheck.equal('najkrajsiNabor([(3, 6), (17, 5, 2), (5,), (6, 3)])', (5,))\nCheck.equal('najkrajsiNabor([(1, 2), (), (4, 5, 6, 7)])', ())\nCheck.equal('najkrajsiNabor([(1, 2), (3, 5, 2), (4, 5, 6, 7)])', (1, 2))"
    }
  }, 
  {
    "pk": 681, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `permanenta2x2(mat)`, ki izra\u010duna permanento matrike\nz dimenzijami $2 \\times 2$.", 
      "timestamp": "2012-06-10 10:06:08", 
      "challenge": "[[\"[[1, 1], [1, 1]]\", \"2\"], [\"[[3, 2], [5, 11]]\", \"43\"], [\"[[2, 4], [4, 4]]\", \"24\"], [\"[[6, 8], [6, 5]]\", \"78\"], [\"[[4, 7], [2, 3]]\", \"26\"], [\"[[5, 5], [3, 7]]\", \"50\"], [\"[[1, 1], [1, 12]]\", \"13\"], [\"[[3, 2], [5, 2]]\", \"16\"], [\"[[2, 4], [4, 9]]\", \"34\"], [\"[[6, 8], [6, 8]]\", \"96\"], [\"[[4, 7], [2, 10]]\", \"54\"], [\"[[5, 5], [3, 6]]\", \"45\"], [\"[[1, 1], [1, 1]]\", \"2\"], [\"[[3, 2], [5, 11]]\", \"43\"], [\"[[2, 4], [4, 4]]\", \"24\"], [\"[[6, 8], [6, 5]]\", \"78\"], [\"[[4, 7], [2, 3]]\", \"26\"], [\"[[5, 5], [3, 7]]\", \"50\"], [\"[[1, 1], [1, 12]]\", \"13\"], [\"[[3, 2], [5, 2]]\", \"16\"]]", 
      "solution": "def permanenta2x2(mat):\n    return mat[0][0] * mat[1][1] + mat[0][1] * mat[1][0]", 
      "problem": 220, 
      "validation": "Check.equal('permanenta2x2([[5, 4], [2, 1]])', 13)\nCheck.equal('permanenta2x2([[6, 4], [3, 1]])', 18)\nCheck.equal('permanenta2x2([[6, 5], [3, 2]])', 27)\nfor i in range(20):\n    mat = [[3 ** i % 7, 2 ** i % 9], [5 ** i % 7, 11 ** i % 13]]\n    Check.challenge(permanenta2x2(mat), mat)"
    }
  }, 
  {
    "pk": 671, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Ker je \u017eelva pri risanju dokaj po\u010dasna, \u0161e posebej, \u010de moramo narisati\nveliko daljic in \u017eelvo dostikrat obrniti, je priporo\u010dljivo, da \u017eelvo\nnajprej skrijemo ter nastavimo hitrost. Priporo\u010dljivo je\ntudi, da izklopimo sledenje oz. nastavimo osve\u017eitev risanja na vsakih\n20 korakov. V ta namen uporabimo funkcijo `tracer`. Ker se zaslon ne\nosve\u017ei po vsakem koraku, boste morda kasneje morali poklicati funkcijo\n`update()`, \u010de ne vidite vsega, kar ste narisali.\n\nPoglejte si dokumentacijo za \u017eelvjo grafiko, nato pa sestavite\nfunkcijo `pripravi`, ki naredi vse potrebne korake.", 
      "timestamp": "2012-05-27 23:52:27", 
      "challenge": "[]", 
      "solution": "def pripravi():\n    T.ht()\n    T.speed(0)\n    T.tracer(20)", 
      "problem": 217, 
      "validation": "# Prika\u017eimo \u017eelvo in nastavimo po\u010dasno hitrost, nato preverimo, \u010de\n# so jo skrili\n\nT.showturtle()\nT.speed(5)\nT.tracer(1)\npripravi()\n\nif T.speed() !=0:\n    Check.error('Najve\u010djo hitrost risanja dose\u017eete z vrednostjo 0.')\nif T.isvisible():\n    Check.error('\u017delva je \u0161e vedno vidna!')\nif T.tracer() != 20:\n    Check.error('Zaslon se ne obnovi samo vsakih 20 korakov!')"
    }
  }, 
  {
    "pk": 737, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `clen(n)`, ki vrne $n$-ti \u010dlen zgornje vrste. Pri\ntem je prvi \u010dlen $\\frac{2}{1\\cdot 3}$.", 
      "timestamp": "2012-07-12 11:24:50", 
      "challenge": "[]", 
      "solution": "def clen(n):\n    return 2/(n*(n+2))", 
      "problem": 238, 
      "validation": "Check.equal(\"clen(1)\", 0.666666666666667)\nCheck.equal(\"clen(2)\", 0.25)\nCheck.equal(\"clen(3)\", 0.1333333333333333)\nCheck.equal(\"clen(8)\", 0.025)\n\n# for i in range(1,100):\n#     Check.challenge(clen(i),i)"
    }
  }, 
  {
    "pk": 898, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `v_stevilko(beseda)`, ki vrne \u0161tevilko, ki jo moramo\nvpisati, da dobimo dano besedo.\n\n    >>> v_stevilko('zelenjava')\n    935365282\n    >>> v_stevilko('sadje')\n    72353", 
      "timestamp": "2013-01-16 17:02:45", 
      "challenge": "[[\"c\", \"2\"], [\"e\", \"3\"], [\"g\", \"4\"], [\"i\", \"4\"], [\"k\", \"5\"], [\"m\", \"6\"], [\"o\", \"6\"], [\"r\", \"7\"], [\"t\", \"8\"], [\"ca\", \"22\"], [\"cc\", \"22\"], [\"ce\", \"23\"], [\"cg\", \"24\"], [\"ci\", \"24\"], [\"ck\", \"25\"], [\"cm\", \"26\"], [\"co\", \"26\"], [\"cr\", \"27\"], [\"ct\", \"28\"], [\"ea\", \"32\"], [\"ec\", \"32\"], [\"ee\", \"33\"], [\"eg\", \"34\"], [\"ei\", \"34\"], [\"ek\", \"35\"], [\"em\", \"36\"], [\"eo\", \"36\"], [\"er\", \"37\"], [\"et\", \"38\"], [\"ga\", \"42\"], [\"gc\", \"42\"], [\"ge\", \"43\"], [\"gg\", \"44\"], [\"gi\", \"44\"], [\"gk\", \"45\"], [\"gm\", \"46\"], [\"go\", \"46\"], [\"gr\", \"47\"], [\"gt\", \"48\"], [\"ia\", \"42\"], [\"ic\", \"42\"], [\"ie\", \"43\"], [\"ig\", \"44\"], [\"ii\", \"44\"], [\"ik\", \"45\"], [\"im\", \"46\"], [\"io\", \"46\"], [\"ir\", \"47\"], [\"it\", \"48\"], [\"ka\", \"52\"], [\"kc\", \"52\"], [\"ke\", \"53\"], [\"kg\", \"54\"], [\"ki\", \"54\"], [\"kk\", \"55\"], [\"km\", \"56\"], [\"ko\", \"56\"], [\"kr\", \"57\"], [\"kt\", \"58\"], [\"ma\", \"62\"], [\"mc\", \"62\"], [\"me\", \"63\"], [\"mg\", \"64\"], [\"mi\", \"64\"], [\"mk\", \"65\"], [\"mm\", \"66\"], [\"mo\", \"66\"], [\"mr\", \"67\"], [\"mt\", \"68\"], [\"oa\", \"62\"], [\"oc\", \"62\"], [\"oe\", \"63\"], [\"og\", \"64\"], [\"oi\", \"64\"], [\"ok\", \"65\"], [\"om\", \"66\"], [\"oo\", \"66\"], [\"or\", \"67\"], [\"ot\", \"68\"], [\"ra\", \"72\"], [\"rc\", \"72\"], [\"re\", \"73\"], [\"rg\", \"74\"], [\"ri\", \"74\"], [\"rk\", \"75\"], [\"rm\", \"76\"], [\"ro\", \"76\"], [\"rr\", \"77\"], [\"rt\", \"78\"], [\"ta\", \"82\"], [\"tc\", \"82\"], [\"te\", \"83\"], [\"tg\", \"84\"], [\"ti\", \"84\"], [\"tk\", \"85\"], [\"tm\", \"86\"], [\"to\", \"86\"], [\"tr\", \"87\"], [\"tt\", \"88\"], [\"caa\", \"222\"], [\"cac\", \"222\"], [\"cae\", \"223\"], [\"cag\", \"224\"], [\"cai\", \"224\"], [\"cak\", \"225\"], [\"cam\", \"226\"], [\"cao\", \"226\"], [\"car\", \"227\"], [\"cat\", \"228\"], [\"cca\", \"222\"], [\"ccc\", \"222\"], [\"cce\", \"223\"], [\"ccg\", \"224\"], [\"cci\", \"224\"], [\"cck\", \"225\"], [\"ccm\", \"226\"], [\"cco\", \"226\"], [\"ccr\", \"227\"], [\"cct\", \"228\"], [\"cea\", \"232\"], [\"cec\", \"232\"], [\"cee\", \"233\"], [\"ceg\", \"234\"], [\"cei\", \"234\"], [\"cek\", \"235\"], [\"cem\", \"236\"], [\"ceo\", \"236\"], [\"cer\", \"237\"], [\"cet\", \"238\"], [\"cga\", \"242\"], [\"cgc\", \"242\"], [\"cge\", \"243\"], [\"cgg\", \"244\"], [\"cgi\", \"244\"], [\"cgk\", \"245\"], [\"cgm\", \"246\"], [\"cgo\", \"246\"], [\"cgr\", \"247\"], [\"cgt\", \"248\"], [\"cia\", \"242\"], [\"cic\", \"242\"], [\"cie\", \"243\"], [\"cig\", \"244\"], [\"cii\", \"244\"], [\"cik\", \"245\"], [\"cim\", \"246\"], [\"cio\", \"246\"], [\"cir\", \"247\"], [\"cit\", \"248\"], [\"cka\", \"252\"], [\"ckc\", \"252\"], [\"cke\", \"253\"], [\"ckg\", \"254\"], [\"cki\", \"254\"], [\"ckk\", \"255\"], [\"ckm\", \"256\"], [\"cko\", \"256\"], [\"ckr\", \"257\"], [\"ckt\", \"258\"], [\"cma\", \"262\"], [\"cmc\", \"262\"], [\"cme\", \"263\"], [\"cmg\", \"264\"], [\"cmi\", \"264\"], [\"cmk\", \"265\"], [\"cmm\", \"266\"], [\"cmo\", \"266\"], [\"cmr\", \"267\"], [\"cmt\", \"268\"], [\"coa\", \"262\"], [\"coc\", \"262\"], [\"coe\", \"263\"], [\"cog\", \"264\"], [\"coi\", \"264\"], [\"cok\", \"265\"], [\"com\", \"266\"], [\"coo\", \"266\"], [\"cor\", \"267\"], [\"cot\", \"268\"], [\"cra\", \"272\"], [\"crc\", \"272\"], [\"cre\", \"273\"], [\"crg\", \"274\"], [\"cri\", \"274\"], [\"crk\", \"275\"], [\"crm\", \"276\"], [\"cro\", \"276\"], [\"crr\", \"277\"], [\"crt\", \"278\"], [\"cta\", \"282\"], [\"ctc\", \"282\"], [\"cte\", \"283\"], [\"ctg\", \"284\"], [\"cti\", \"284\"], [\"ctk\", \"285\"], [\"ctm\", \"286\"], [\"cto\", \"286\"], [\"ctr\", \"287\"], [\"ctt\", \"288\"], [\"eaa\", \"322\"], [\"eac\", \"322\"], [\"eae\", \"323\"], [\"eag\", \"324\"], [\"eai\", \"324\"], [\"eak\", \"325\"], [\"eam\", \"326\"], [\"eao\", \"326\"], [\"ear\", \"327\"], [\"eat\", \"328\"], [\"eca\", \"322\"], [\"ecc\", \"322\"], [\"ece\", \"323\"], [\"ecg\", \"324\"], [\"eci\", \"324\"], [\"eck\", \"325\"], [\"ecm\", \"326\"], [\"eco\", \"326\"], [\"ecr\", \"327\"], [\"ect\", \"328\"], [\"eea\", \"332\"], [\"eec\", \"332\"], [\"eee\", \"333\"], [\"eeg\", \"334\"], [\"eei\", \"334\"], [\"eek\", \"335\"], [\"eem\", \"336\"], [\"eeo\", \"336\"], [\"eer\", \"337\"], [\"eet\", \"338\"], [\"ega\", \"342\"], [\"egc\", \"342\"], [\"ege\", \"343\"], [\"egg\", \"344\"], [\"egi\", \"344\"], [\"egk\", \"345\"], [\"egm\", \"346\"], [\"ego\", \"346\"], [\"egr\", \"347\"], [\"egt\", \"348\"], [\"eia\", \"342\"], [\"eic\", \"342\"], [\"eie\", \"343\"], [\"eig\", \"344\"], [\"eii\", \"344\"], [\"eik\", \"345\"], [\"eim\", \"346\"], [\"eio\", \"346\"], [\"eir\", \"347\"], [\"eit\", \"348\"], [\"eka\", \"352\"], [\"ekc\", \"352\"], [\"eke\", \"353\"], [\"ekg\", \"354\"], [\"eki\", \"354\"], [\"ekk\", \"355\"], [\"ekm\", \"356\"], [\"eko\", \"356\"], [\"ekr\", \"357\"], [\"ekt\", \"358\"], [\"ema\", \"362\"], [\"emc\", \"362\"], [\"eme\", \"363\"], [\"emg\", \"364\"], [\"emi\", \"364\"], [\"emk\", \"365\"], [\"emm\", \"366\"], [\"emo\", \"366\"], [\"emr\", \"367\"], [\"emt\", \"368\"], [\"eoa\", \"362\"], [\"eoc\", \"362\"], [\"eoe\", \"363\"], [\"eog\", \"364\"], [\"eoi\", \"364\"], [\"eok\", \"365\"], [\"eom\", \"366\"], [\"eoo\", \"366\"], [\"eor\", \"367\"], [\"eot\", \"368\"], [\"era\", \"372\"], [\"erc\", \"372\"], [\"ere\", \"373\"], [\"erg\", \"374\"], [\"eri\", \"374\"], [\"erk\", \"375\"], [\"erm\", \"376\"], [\"ero\", \"376\"], [\"err\", \"377\"], [\"ert\", \"378\"], [\"eta\", \"382\"], [\"etc\", \"382\"], [\"ete\", \"383\"], [\"etg\", \"384\"], [\"eti\", \"384\"], [\"etk\", \"385\"], [\"etm\", \"386\"], [\"eto\", \"386\"], [\"etr\", \"387\"], [\"ett\", \"388\"], [\"gaa\", \"422\"], [\"gac\", \"422\"], [\"gae\", \"423\"], [\"gag\", \"424\"], [\"gai\", \"424\"], [\"gak\", \"425\"], [\"gam\", \"426\"], [\"gao\", \"426\"], [\"gar\", \"427\"], [\"gat\", \"428\"], [\"gca\", \"422\"], [\"gcc\", \"422\"], [\"gce\", \"423\"], [\"gcg\", \"424\"], [\"gci\", \"424\"], [\"gck\", \"425\"], [\"gcm\", \"426\"], [\"gco\", \"426\"], [\"gcr\", \"427\"], [\"gct\", \"428\"], [\"gea\", \"432\"], [\"gec\", \"432\"], [\"gee\", \"433\"], [\"geg\", \"434\"], [\"gei\", \"434\"], [\"gek\", \"435\"], [\"gem\", \"436\"], [\"geo\", \"436\"], [\"ger\", \"437\"], [\"get\", \"438\"], [\"gga\", \"442\"], [\"ggc\", \"442\"], [\"gge\", \"443\"], [\"ggg\", \"444\"], [\"ggi\", \"444\"], [\"ggk\", \"445\"], [\"ggm\", \"446\"], [\"ggo\", \"446\"], [\"ggr\", \"447\"], [\"ggt\", \"448\"], [\"gia\", \"442\"], [\"gic\", \"442\"], [\"gie\", \"443\"], [\"gig\", \"444\"], [\"gii\", \"444\"], [\"gik\", \"445\"], [\"gim\", \"446\"], [\"gio\", \"446\"], [\"gir\", \"447\"], [\"git\", \"448\"], [\"gka\", \"452\"], [\"gkc\", \"452\"], [\"gke\", \"453\"], [\"gkg\", \"454\"], [\"gki\", \"454\"], [\"gkk\", \"455\"], [\"gkm\", \"456\"], [\"gko\", \"456\"], [\"gkr\", \"457\"], [\"gkt\", \"458\"], [\"gma\", \"462\"], [\"gmc\", \"462\"], [\"gme\", \"463\"], [\"gmg\", \"464\"], [\"gmi\", \"464\"], [\"gmk\", \"465\"], [\"gmm\", \"466\"], [\"gmo\", \"466\"], [\"gmr\", \"467\"], [\"gmt\", \"468\"], [\"goa\", \"462\"], [\"goc\", \"462\"], [\"goe\", \"463\"], [\"gog\", \"464\"], [\"goi\", \"464\"], [\"gok\", \"465\"], [\"gom\", \"466\"], [\"goo\", \"466\"], [\"gor\", \"467\"], [\"got\", \"468\"], [\"gra\", \"472\"], [\"grc\", \"472\"], [\"gre\", \"473\"], [\"grg\", \"474\"], [\"gri\", \"474\"], [\"grk\", \"475\"], [\"grm\", \"476\"], [\"gro\", \"476\"], [\"grr\", \"477\"], [\"grt\", \"478\"], [\"gta\", \"482\"], [\"gtc\", \"482\"], [\"gte\", \"483\"], [\"gtg\", \"484\"], [\"gti\", \"484\"], [\"gtk\", \"485\"], [\"gtm\", \"486\"], [\"gto\", \"486\"], [\"gtr\", \"487\"], [\"gtt\", \"488\"], [\"iaa\", \"422\"], [\"iac\", \"422\"], [\"iae\", \"423\"], [\"iag\", \"424\"], [\"iai\", \"424\"], [\"iak\", \"425\"], [\"iam\", \"426\"], [\"iao\", \"426\"], [\"iar\", \"427\"], [\"iat\", \"428\"], [\"ica\", \"422\"], [\"icc\", \"422\"], [\"ice\", \"423\"], [\"icg\", \"424\"], [\"ici\", \"424\"], [\"ick\", \"425\"], [\"icm\", \"426\"], [\"ico\", \"426\"], [\"icr\", \"427\"], [\"ict\", \"428\"], [\"iea\", \"432\"], [\"iec\", \"432\"], [\"iee\", \"433\"], [\"ieg\", \"434\"], [\"iei\", \"434\"], [\"iek\", \"435\"], [\"iem\", \"436\"], [\"ieo\", \"436\"], [\"ier\", \"437\"], [\"iet\", \"438\"], [\"iga\", \"442\"], [\"igc\", \"442\"], [\"ige\", \"443\"], [\"igg\", \"444\"], [\"igi\", \"444\"], [\"igk\", \"445\"], [\"igm\", \"446\"], [\"igo\", \"446\"], [\"igr\", \"447\"], [\"igt\", \"448\"], [\"iia\", \"442\"], [\"iic\", \"442\"], [\"iie\", \"443\"], [\"iig\", \"444\"], [\"iii\", \"444\"], [\"iik\", \"445\"], [\"iim\", \"446\"], [\"iio\", \"446\"], [\"iir\", \"447\"], [\"iit\", \"448\"], [\"ika\", \"452\"], [\"ikc\", \"452\"], [\"ike\", \"453\"], [\"ikg\", \"454\"], [\"iki\", \"454\"], [\"ikk\", \"455\"], [\"ikm\", \"456\"], [\"iko\", \"456\"], [\"ikr\", \"457\"], [\"ikt\", \"458\"], [\"ima\", \"462\"], [\"imc\", \"462\"], [\"ime\", \"463\"], [\"img\", \"464\"], [\"imi\", \"464\"], [\"imk\", \"465\"], [\"imm\", \"466\"], [\"imo\", \"466\"], [\"imr\", \"467\"], [\"imt\", \"468\"], [\"ioa\", \"462\"], [\"ioc\", \"462\"], [\"ioe\", \"463\"], [\"iog\", \"464\"], [\"ioi\", \"464\"], [\"iok\", \"465\"], [\"iom\", \"466\"], [\"ioo\", \"466\"], [\"ior\", \"467\"], [\"iot\", \"468\"], [\"ira\", \"472\"], [\"irc\", \"472\"], [\"ire\", \"473\"], [\"irg\", \"474\"], [\"iri\", \"474\"], [\"irk\", \"475\"], [\"irm\", \"476\"], [\"iro\", \"476\"], [\"irr\", \"477\"], [\"irt\", \"478\"], [\"ita\", \"482\"], [\"itc\", \"482\"], [\"ite\", \"483\"], [\"itg\", \"484\"], [\"iti\", \"484\"], [\"itk\", \"485\"], [\"itm\", \"486\"], [\"ito\", \"486\"], [\"itr\", \"487\"], [\"itt\", \"488\"], [\"kaa\", \"522\"], [\"kac\", \"522\"], [\"kae\", \"523\"], [\"kag\", \"524\"], [\"kai\", \"524\"], [\"kak\", \"525\"], [\"kam\", \"526\"], [\"kao\", \"526\"], [\"kar\", \"527\"], [\"kat\", \"528\"], [\"kca\", \"522\"], [\"kcc\", \"522\"], [\"kce\", \"523\"], [\"kcg\", \"524\"], [\"kci\", \"524\"], [\"kck\", \"525\"], [\"kcm\", \"526\"], [\"kco\", \"526\"], [\"kcr\", \"527\"], [\"kct\", \"528\"], [\"kea\", \"532\"], [\"kec\", \"532\"], [\"kee\", \"533\"], [\"keg\", \"534\"], [\"kei\", \"534\"], [\"kek\", \"535\"], [\"kem\", \"536\"], [\"keo\", \"536\"], [\"ker\", \"537\"], [\"ket\", \"538\"], [\"kga\", \"542\"], [\"kgc\", \"542\"], [\"kge\", \"543\"], [\"kgg\", \"544\"], [\"kgi\", \"544\"], [\"kgk\", \"545\"], [\"kgm\", \"546\"], [\"kgo\", \"546\"], [\"kgr\", \"547\"], [\"kgt\", \"548\"], [\"kia\", \"542\"], [\"kic\", \"542\"], [\"kie\", \"543\"], [\"kig\", \"544\"], [\"kii\", \"544\"], [\"kik\", \"545\"], [\"kim\", \"546\"], [\"kio\", \"546\"], [\"kir\", \"547\"], [\"kit\", \"548\"], [\"kka\", \"552\"], [\"kkc\", \"552\"], [\"kke\", \"553\"], [\"kkg\", \"554\"], [\"kki\", \"554\"], [\"kkk\", \"555\"], [\"kkm\", \"556\"], [\"kko\", \"556\"], [\"kkr\", \"557\"], [\"kkt\", \"558\"], [\"kma\", \"562\"], [\"kmc\", \"562\"], [\"kme\", \"563\"], [\"kmg\", \"564\"], [\"kmi\", \"564\"], [\"kmk\", \"565\"], [\"kmm\", \"566\"], [\"kmo\", \"566\"], [\"kmr\", \"567\"], [\"kmt\", \"568\"], [\"koa\", \"562\"], [\"koc\", \"562\"], [\"koe\", \"563\"], [\"kog\", \"564\"], [\"koi\", \"564\"], [\"kok\", \"565\"], [\"kom\", \"566\"], [\"koo\", \"566\"], [\"kor\", \"567\"], [\"kot\", \"568\"], [\"kra\", \"572\"], [\"krc\", \"572\"], [\"kre\", \"573\"], [\"krg\", \"574\"], [\"kri\", \"574\"], [\"krk\", \"575\"], [\"krm\", \"576\"], [\"kro\", \"576\"], [\"krr\", \"577\"], [\"krt\", \"578\"], [\"kta\", \"582\"], [\"ktc\", \"582\"], [\"kte\", \"583\"], [\"ktg\", \"584\"], [\"kti\", \"584\"], [\"ktk\", \"585\"], [\"ktm\", \"586\"], [\"kto\", \"586\"], [\"ktr\", \"587\"], [\"ktt\", \"588\"], [\"maa\", \"622\"], [\"mac\", \"622\"], [\"mae\", \"623\"], [\"mag\", \"624\"], [\"mai\", \"624\"], [\"mak\", \"625\"], [\"mam\", \"626\"], [\"mao\", \"626\"], [\"mar\", \"627\"], [\"mat\", \"628\"], [\"mca\", \"622\"], [\"mcc\", \"622\"], [\"mce\", \"623\"], [\"mcg\", \"624\"], [\"mci\", \"624\"], [\"mck\", \"625\"], [\"mcm\", \"626\"], [\"mco\", \"626\"], [\"mcr\", \"627\"], [\"mct\", \"628\"], [\"mea\", \"632\"], [\"mec\", \"632\"], [\"mee\", \"633\"], [\"meg\", \"634\"], [\"mei\", \"634\"], [\"mek\", \"635\"], [\"mem\", \"636\"], [\"meo\", \"636\"], [\"mer\", \"637\"], [\"met\", \"638\"], [\"mga\", \"642\"], [\"mgc\", \"642\"], [\"mge\", \"643\"], [\"mgg\", \"644\"], [\"mgi\", \"644\"], [\"mgk\", \"645\"], [\"mgm\", \"646\"], [\"mgo\", \"646\"], [\"mgr\", \"647\"], [\"mgt\", \"648\"], [\"mia\", \"642\"], [\"mic\", \"642\"], [\"mie\", \"643\"], [\"mig\", \"644\"], [\"mii\", \"644\"], [\"mik\", \"645\"], [\"mim\", \"646\"], [\"mio\", \"646\"], [\"mir\", \"647\"], [\"mit\", \"648\"], [\"mka\", \"652\"], [\"mkc\", \"652\"], [\"mke\", \"653\"], [\"mkg\", \"654\"], [\"mki\", \"654\"], [\"mkk\", \"655\"], [\"mkm\", \"656\"], [\"mko\", \"656\"], [\"mkr\", \"657\"], [\"mkt\", \"658\"], [\"mma\", \"662\"], [\"mmc\", \"662\"], [\"mme\", \"663\"], [\"mmg\", \"664\"], [\"mmi\", \"664\"], [\"mmk\", \"665\"], [\"mmm\", \"666\"], [\"mmo\", \"666\"], [\"mmr\", \"667\"], [\"mmt\", \"668\"], [\"moa\", \"662\"], [\"moc\", \"662\"], [\"moe\", \"663\"], [\"mog\", \"664\"], [\"moi\", \"664\"], [\"mok\", \"665\"], [\"mom\", \"666\"], [\"moo\", \"666\"], [\"mor\", \"667\"], [\"mot\", \"668\"], [\"mra\", \"672\"], [\"mrc\", \"672\"], [\"mre\", \"673\"], [\"mrg\", \"674\"], [\"mri\", \"674\"], [\"mrk\", \"675\"], [\"mrm\", \"676\"], [\"mro\", \"676\"], [\"mrr\", \"677\"], [\"mrt\", \"678\"], [\"mta\", \"682\"], [\"mtc\", \"682\"], [\"mte\", \"683\"], [\"mtg\", \"684\"], [\"mti\", \"684\"], [\"mtk\", \"685\"], [\"mtm\", \"686\"], [\"mto\", \"686\"], [\"mtr\", \"687\"], [\"mtt\", \"688\"], [\"oaa\", \"622\"], [\"oac\", \"622\"], [\"oae\", \"623\"], [\"oag\", \"624\"], [\"oai\", \"624\"], [\"oak\", \"625\"], [\"oam\", \"626\"], [\"oao\", \"626\"], [\"oar\", \"627\"], [\"oat\", \"628\"], [\"oca\", \"622\"], [\"occ\", \"622\"], [\"oce\", \"623\"], [\"ocg\", \"624\"], [\"oci\", \"624\"], [\"ock\", \"625\"], [\"ocm\", \"626\"], [\"oco\", \"626\"], [\"ocr\", \"627\"], [\"oct\", \"628\"], [\"oea\", \"632\"], [\"oec\", \"632\"], [\"oee\", \"633\"], [\"oeg\", \"634\"], [\"oei\", \"634\"], [\"oek\", \"635\"], [\"oem\", \"636\"], [\"oeo\", \"636\"], [\"oer\", \"637\"], [\"oet\", \"638\"], [\"oga\", \"642\"], [\"ogc\", \"642\"], [\"oge\", \"643\"], [\"ogg\", \"644\"], [\"ogi\", \"644\"], [\"ogk\", \"645\"], [\"ogm\", \"646\"], [\"ogo\", \"646\"], [\"ogr\", \"647\"], [\"ogt\", \"648\"], [\"oia\", \"642\"], [\"oic\", \"642\"], [\"oie\", \"643\"], [\"oig\", \"644\"], [\"oii\", \"644\"], [\"oik\", \"645\"], [\"oim\", \"646\"], [\"oio\", \"646\"], [\"oir\", \"647\"], [\"oit\", \"648\"], [\"oka\", \"652\"], [\"okc\", \"652\"], [\"oke\", \"653\"], [\"okg\", \"654\"], [\"oki\", \"654\"], [\"okk\", \"655\"], [\"okm\", \"656\"], [\"oko\", \"656\"], [\"okr\", \"657\"], [\"okt\", \"658\"], [\"oma\", \"662\"], [\"omc\", \"662\"], [\"ome\", \"663\"], [\"omg\", \"664\"], [\"omi\", \"664\"], [\"omk\", \"665\"], [\"omm\", \"666\"], [\"omo\", \"666\"], [\"omr\", \"667\"], [\"omt\", \"668\"], [\"ooa\", \"662\"], [\"ooc\", \"662\"], [\"ooe\", \"663\"], [\"oog\", \"664\"], [\"ooi\", \"664\"], [\"ook\", \"665\"], [\"oom\", \"666\"], [\"ooo\", \"666\"], [\"oor\", \"667\"], [\"oot\", \"668\"], [\"ora\", \"672\"], [\"orc\", \"672\"], [\"ore\", \"673\"], [\"org\", \"674\"], [\"ori\", \"674\"], [\"ork\", \"675\"], [\"orm\", \"676\"], [\"oro\", \"676\"], [\"orr\", \"677\"], [\"ort\", \"678\"], [\"ota\", \"682\"], [\"otc\", \"682\"], [\"ote\", \"683\"], [\"otg\", \"684\"], [\"oti\", \"684\"], [\"otk\", \"685\"], [\"otm\", \"686\"], [\"oto\", \"686\"], [\"otr\", \"687\"], [\"ott\", \"688\"], [\"raa\", \"722\"], [\"rac\", \"722\"], [\"rae\", \"723\"], [\"rag\", \"724\"], [\"rai\", \"724\"], [\"rak\", \"725\"], [\"ram\", \"726\"], [\"rao\", \"726\"], [\"rar\", \"727\"], [\"rat\", \"728\"], [\"rca\", \"722\"], [\"rcc\", \"722\"], [\"rce\", \"723\"], [\"rcg\", \"724\"], [\"rci\", \"724\"], [\"rck\", \"725\"], [\"rcm\", \"726\"], [\"rco\", \"726\"], [\"rcr\", \"727\"], [\"rct\", \"728\"], [\"rea\", \"732\"], [\"rec\", \"732\"], [\"ree\", \"733\"], [\"reg\", \"734\"], [\"rei\", \"734\"], [\"rek\", \"735\"], [\"rem\", \"736\"], [\"reo\", \"736\"], [\"rer\", \"737\"], [\"ret\", \"738\"], [\"rga\", \"742\"], [\"rgc\", \"742\"], [\"rge\", \"743\"], [\"rgg\", \"744\"], [\"rgi\", \"744\"], [\"rgk\", \"745\"], [\"rgm\", \"746\"], [\"rgo\", \"746\"], [\"rgr\", \"747\"], [\"rgt\", \"748\"], [\"ria\", \"742\"], [\"ric\", \"742\"], [\"rie\", \"743\"], [\"rig\", \"744\"], [\"rii\", \"744\"], [\"rik\", \"745\"], [\"rim\", \"746\"], [\"rio\", \"746\"], [\"rir\", \"747\"], [\"rit\", \"748\"], [\"rka\", \"752\"], [\"rkc\", \"752\"], [\"rke\", \"753\"], [\"rkg\", \"754\"], [\"rki\", \"754\"], [\"rkk\", \"755\"], [\"rkm\", \"756\"], [\"rko\", \"756\"], [\"rkr\", \"757\"], [\"rkt\", \"758\"], [\"rma\", \"762\"], [\"rmc\", \"762\"], [\"rme\", \"763\"], [\"rmg\", \"764\"], [\"rmi\", \"764\"], [\"rmk\", \"765\"], [\"rmm\", \"766\"], [\"rmo\", \"766\"], [\"rmr\", \"767\"], [\"rmt\", \"768\"], [\"roa\", \"762\"], [\"roc\", \"762\"], [\"roe\", \"763\"], [\"rog\", \"764\"], [\"roi\", \"764\"], [\"rok\", \"765\"], [\"rom\", \"766\"], [\"roo\", \"766\"], [\"ror\", \"767\"], [\"rot\", \"768\"], [\"rra\", \"772\"], [\"rrc\", \"772\"], [\"rre\", \"773\"], [\"rrg\", \"774\"], [\"rri\", \"774\"], [\"rrk\", \"775\"], [\"rrm\", \"776\"], [\"rro\", \"776\"], [\"rrr\", \"777\"], [\"rrt\", \"778\"], [\"rta\", \"782\"], [\"rtc\", \"782\"], [\"rte\", \"783\"], [\"rtg\", \"784\"], [\"rti\", \"784\"], [\"rtk\", \"785\"], [\"rtm\", \"786\"], [\"rto\", \"786\"], [\"rtr\", \"787\"], [\"rtt\", \"788\"], [\"taa\", \"822\"], [\"tac\", \"822\"], [\"tae\", \"823\"], [\"tag\", \"824\"], [\"tai\", \"824\"], [\"tak\", \"825\"], [\"tam\", \"826\"], [\"tao\", \"826\"], [\"tar\", \"827\"], [\"tat\", \"828\"], [\"tca\", \"822\"], [\"tcc\", \"822\"], [\"tce\", \"823\"], [\"tcg\", \"824\"], [\"tci\", \"824\"], [\"tck\", \"825\"], [\"tcm\", \"826\"], [\"tco\", \"826\"], [\"tcr\", \"827\"], [\"tct\", \"828\"], [\"tea\", \"832\"], [\"tec\", \"832\"], [\"tee\", \"833\"], [\"teg\", \"834\"], [\"tei\", \"834\"], [\"tek\", \"835\"], [\"tem\", \"836\"], [\"teo\", \"836\"], [\"ter\", \"837\"], [\"tet\", \"838\"], [\"tga\", \"842\"], [\"tgc\", \"842\"], [\"tge\", \"843\"], [\"tgg\", \"844\"], [\"tgi\", \"844\"], [\"tgk\", \"845\"], [\"tgm\", \"846\"], [\"tgo\", \"846\"], [\"tgr\", \"847\"], [\"tgt\", \"848\"], [\"tia\", \"842\"], [\"tic\", \"842\"], [\"tie\", \"843\"], [\"tig\", \"844\"], [\"tii\", \"844\"], [\"tik\", \"845\"], [\"tim\", \"846\"], [\"tio\", \"846\"], [\"tir\", \"847\"], [\"tit\", \"848\"], [\"tka\", \"852\"], [\"tkc\", \"852\"], [\"tke\", \"853\"], [\"tkg\", \"854\"], [\"tki\", \"854\"], [\"tkk\", \"855\"], [\"tkm\", \"856\"], [\"tko\", \"856\"], [\"tkr\", \"857\"], [\"tkt\", \"858\"], [\"tma\", \"862\"], [\"tmc\", \"862\"], [\"tme\", \"863\"], [\"tmg\", \"864\"], [\"tmi\", \"864\"], [\"tmk\", \"865\"], [\"tmm\", \"866\"], [\"tmo\", \"866\"], [\"tmr\", \"867\"], [\"tmt\", \"868\"], [\"toa\", \"862\"], [\"toc\", \"862\"], [\"toe\", \"863\"], [\"tog\", \"864\"], [\"toi\", \"864\"], [\"tok\", \"865\"], [\"tom\", \"866\"], [\"too\", \"866\"], [\"tor\", \"867\"], [\"tot\", \"868\"], [\"tra\", \"872\"], [\"trc\", \"872\"], [\"tre\", \"873\"], [\"trg\", \"874\"], [\"tri\", \"874\"], [\"trk\", \"875\"], [\"trm\", \"876\"], [\"tro\", \"876\"], [\"trr\", \"877\"], [\"trt\", \"878\"], [\"tta\", \"882\"], [\"ttc\", \"882\"], [\"tte\", \"883\"], [\"ttg\", \"884\"], [\"tti\", \"884\"], [\"ttk\", \"885\"], [\"ttm\", \"886\"], [\"tto\", \"886\"], [\"ttr\", \"887\"], [\"ttt\", \"888\"]]", 
      "solution": "def v_stevilko(beseda):\n    st = 0\n    for crka in beseda:\n        st = 10 * st + stevilke[crka]\n    return st", 
      "problem": 308, 
      "validation": "Check.equal(\"v_stevilko('zelenjava')\", 935365282)\nCheck.equal(\"v_stevilko('sadje')\", 72353)\n\nfor st in range(1, 1000):\n    beseda = \"\".join(\"acegikmort\"[int(i)] for i in str(st))\n    Check.challenge(v_stevilko(beseda), beseda)"
    }
  }, 
  {
    "pk": 34, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `slika(permutacija, x)`, vrne pa sliko \u0161tevila `x`\ns podano permutacijo.\nPredpostavite lahko, da je dano \u0161tevilo v domeni permutacije.\n\n    >>> slika([3, 2, 1], 3)\n    1", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"None\", \"97\"], [\"None\", \"96\"], [\"None\", \"95\"], [\"None\", \"94\"], [\"None\", \"93\"], [\"None\", \"92\"], [\"None\", \"91\"], [\"None\", \"90\"], [\"None\", \"89\"], [\"None\", \"88\"], [\"None\", \"87\"], [\"None\", \"86\"], [\"None\", \"85\"], [\"None\", \"84\"], [\"None\", \"83\"], [\"None\", \"82\"], [\"None\", \"81\"], [\"None\", \"80\"], [\"None\", \"79\"], [\"None\", \"78\"], [\"None\", \"77\"], [\"None\", \"76\"], [\"None\", \"75\"], [\"None\", \"74\"], [\"None\", \"73\"], [\"None\", \"72\"], [\"None\", \"71\"], [\"None\", \"70\"], [\"None\", \"69\"], [\"None\", \"68\"], [\"None\", \"67\"], [\"None\", \"66\"], [\"None\", \"65\"], [\"None\", \"64\"], [\"None\", \"63\"], [\"None\", \"62\"], [\"None\", \"61\"], [\"None\", \"60\"], [\"None\", \"59\"], [\"None\", \"58\"], [\"None\", \"57\"], [\"None\", \"56\"], [\"None\", \"55\"], [\"None\", \"54\"], [\"None\", \"53\"], [\"None\", \"52\"], [\"None\", \"51\"], [\"None\", \"50\"], [\"None\", \"49\"], [\"None\", \"48\"], [\"None\", \"47\"], [\"None\", \"46\"], [\"None\", \"45\"], [\"None\", \"44\"], [\"None\", \"43\"], [\"None\", \"42\"], [\"None\", \"41\"]]", 
      "solution": "def slika(permutacija, x):\n    return permutacija[x - 1]", 
      "problem": 19, 
      "validation": "Check.equal('slika([3, 4, 2, 1], 1)', 3)\nCheck.equal('slika([3, 4, 2, 1], 2)', 4)\nCheck.equal('slika([3, 4, 2, 1], 3)', 2)\nCheck.equal('slika([3, 4, 2, 1], 4)', 1)\n\nfor i in range(3, 60):\n    Check.challenge(slika([100 - k for k in range(1, 100)], i))"
    }
  }, 
  {
    "pk": 313, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Fibonaccijevo zaporedje reda $n$ je zaporedje, kjer naslednji \u010dlen\nizra\u010dunamo kot vsoto zadnjih $n$ \u010dlenov. Namesto dveh moramo seveda\npodati prvih $n$ \u010dlenov zaporedja.\n\nSestavi funkcijo `fib(k, a1, a2, ..., an)`, ki izra\u010duna `k`-ti \u010dlen\nzaporedja reda `n` z za\u010detnimi \u010dleni `a1`, `a2`, \u2026, `an`.\n\n    >>> fib(2, 1, 3, 5)\n    3\n    >>> fib(10, 1, 3, 5, 8)\n    451", 
      "timestamp": "2012-05-21 13:03:48", 
      "challenge": "[]", 
      "solution": "def fib(k, *zacetni):\n    red = len(zacetni)\n    if k <= red:\n        return zacetni[k - 1]\n    for i in range(red, k):\n        zacetni = zacetni[1:] + (sum(zacetni), )\n    return zacetni[-1]\n\n#\n# rekurzivna re\u0161itev\n#\n#def fib(k, *zacetni):\n#    if k <= len(zacetni):\n#        return zacetni[k - 1]\n#    else:\n#        return fib(k-1, *(zacetni[1:] + (sum(zacetni),)))", 
      "problem": 102, 
      "validation": "Check.equal('fib(2, 1, 3, 5)',3)\nCheck.equal('fib(10, 1, 3, 5, 8)',451)"
    }
  }, 
  {
    "pk": 594, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "V seznamu imamo podatke o prilivih in odlivih s teko\u010dega ra\u010duna.\nPozitivna \u0161tevila predstavljajo priliv (polog denarja),\nnegativna pa dvig.\nVsak element seznama predstavlja en dan.\n\u010ce na nek dan ni prilivov ali dvigov, je vrednost v seznamu 0.\nPrivzemite, da je na za\u010detku stanje na ra\u010dunu 0.\n\nSestavite funkcijo `koncno_stanje(spremembe)`, ki iz danega seznama\nprilivov in odlivov izra\u010duna kon\u010dno stanje.", 
      "timestamp": "2012-04-24 14:27:15", 
      "challenge": "[]", 
      "solution": "def koncno_stanje(spremembe):\n    return sum(spremembe)", 
      "problem": 198, 
      "validation": "Check.equal('koncno_stanje([1, 2, 3])', 6)\nCheck.equal('koncno_stanje([1, -5, -20, 30])', 6)\nCheck.equal('koncno_stanje([0])', 0)\nCheck.equal('koncno_stanje([10, -5, 20, -6])', 19)"
    }
  }, 
  {
    "pk": 827, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Podane naj bodo kon\u010dne mno\u017eice $A_1, A_2, \\dots, A_n \\subset \\mathbb{N}$.\nNa kartezi\u010dnem produktu $A_1 \\times A_2 \\times \\dots \\times A_n$ uvedemo\nleksikografsko ureditev $n$-teric.\nNa primer, na produktu $\\{1, 5, 9\\} \\times \\{2, 4\\} \\times \\{1, 4\\}$\nveljajo naslednje neenakosti:\n\n    (1, 2, 1) < (1, 2, 4) < (1, 4, 1) < (1, 4, 4) < (5, 2, 1) < (5, 2, 4) <\n    (5, 4, 1) < (5, 4, 4) < (9, 2, 1) < (9, 2, 4) < (9, 4, 1) < (9, 4, 4)\n\nSestavite funkcijo `n_terica(sez, k)`, ki za seznam mno\u017eic `sez` vrne `k`.\n`n`-terico glede na leksikografsko ureditev. Funkcija naj deluje v \u010dasu\n$O(n m \\log m)$, kjer je $m$ velikost najve\u010dje mno\u017eice.\n\u010ce je `k` manj\u0161i ali enak $0$ oziroma ve\u010dji od velikosti kartezi\u010dnega\nprodukta, naj funkcija vrne `None`.", 
      "timestamp": "2012-10-22 20:50:45", 
      "challenge": "[]", 
      "solution": "def n_terica(sez, k):\n    velikost = 1\n    for m in sez:\n        velikost *= len(m)\n    k -= 1\n\n    if k < 0 or k >= velikost:\n        return\n\n    n_terica = [0] * len(sez)\n    for j, m in enumerate(sez):\n        m = list(m)\n        m.sort()\n        velikost //= len(m)\n        i = k // velikost\n        k %= velikost\n        n_terica[j] = m[i]\n    return tuple(n_terica)", 
      "problem": 262, 
      "validation": "Check.equal(\"n_terica([{1, 2}, {3, 4}], 1)\", (1, 3))\nCheck.equal(\"n_terica([{1, 2}, {3, 4}], 3)\", (2, 3))\nCheck.equal(\"n_terica([{1, 2}, {3, 4}], 0)\", None)\nCheck.equal(\"n_terica([{1, 2}, {3, 4}], 6)\", None)\nCheck.equal(\"n_terica([{1, 5, 9}, {2, 4}, {1, 4}], 1)\", (1, 2, 1))\nCheck.equal(\"n_terica([{1, 5, 9}, {2, 4}, {1, 4}], 7)\", (5, 4, 1))\nCheck.equal(\"n_terica([{1, 5, 9}, {2, 4}, {1, 4}], 12)\", (9, 4, 4))"
    }
  }, 
  {
    "pk": 264, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Razredu dodajte metodo `vsota(self)`, ki vrne vsoto vseh \u0161tevil v drevesu.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"None\", \"1\"], [\"None\", \"3\"], [\"None\", \"7\"], [\"None\", \"14\"], [\"None\", \"26\"], [\"None\", \"46\"], [\"None\", \"79\"], [\"None\", \"133\"], [\"None\", \"221\"], [\"None\", \"364\"], [\"None\", \"596\"], [\"None\", \"972\"], [\"None\", \"1581\"], [\"None\", \"2567\"], [\"None\", \"4163\"], [\"None\", \"6746\"], [\"None\", \"10926\"], [\"None\", \"17690\"], [\"None\", \"28635\"]]", 
      "solution": "class Drevo(Drevo):\n    def vsota(self):\n        if self.prazno:\n            return 0\n        else:\n            return self.vsebina + self.levo.vsota() + self.desno.vsota()", 
      "problem": 79, 
      "validation": "Check.equal('Drevo().vsota()', 0)\nCheck.equal('Drevo(3).vsota()', 3)\nCheck.equal('Drevo(5, levo=Drevo(4, desno=Drevo(2)), desno=Drevo(3, levo=Drevo(4), desno=Drevo(4))).vsota()', 22)\n_drevesa = [Drevo(), Drevo()]\nfor i in range(1, 20):\n    _drevesa.append(Drevo(i, levo=_drevesa[-1], desno=_drevesa[-2]))\n    Check.challenge(_drevesa[-1].vsota())"
    }
  }, 
  {
    "pk": 476, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavi funkcijo 'nakljucno', ki vrne naklju\u010dno realno \u0161tevilo na intervalu [a,b).\r\n\u0160tevili a in b naj sprejme kot svoja argumenta.\r\nPrimer:\r\n    >>> nakljucno(1, 3)\r\n    2.9870806222977304", 
      "timestamp": "2012-03-27 09:17:25", 
      "challenge": "[]", 
      "solution": "import random\r\ndef nakljucno(a, b):\r\n    return random.random() * (b-a) + a", 
      "problem": 157, 
      "validation": "Check.equal('nakljucno({0}, {1}) >= {0} and nakljucno({0}, {1}) < {1}'.format(7,8), True, \"Odgovor je napa\u010den\")"
    }
  }, 
  {
    "pk": 318, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `kompozitum2(f, g)`, ki vrne kompozitum funkcij `f`\nin `g` (torej novo funkcijo). Na primer:\n\n    >>> from math import *\n    >>> sinus = kompozitum2(sin, radians)\n    >>> sinus(90)\n    1.0\n    >>> sinus(45)\n    0.707106781187", 
      "timestamp": "2012-05-20 21:49:30", 
      "challenge": "[]", 
      "solution": "def kompozitum2(f, g):\n    return lambda x: f(g(x))", 
      "problem": 104, 
      "validation": "from math import sin, radians\nCheck.equal('kompozitum2(sin, radians)(90)', 1.0, env={'sin': sin, 'radians': radians})\nCheck.equal('kompozitum2(sin, radians)(45)', 0.7071068, env={'sin': sin, 'radians': radians})"
    }
  }, 
  {
    "pk": 362, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `pomnozi(recept, faktor)`, ki pomno\u017ei vse koli\u010dine\nv receptu z danim faktorjem.", 
      "timestamp": "2012-05-04 11:25:40", 
      "challenge": "[]", 
      "solution": "def pomnozi(recept, faktor):\n    return {sestavina: kolicina * faktor for sestavina, kolicina in recept.items()}", 
      "problem": 126, 
      "validation": "Check.equal(\"pomnozi({'jajca': 3, 'moka': 500}, 2)\", {'moka': 1000, 'jajca': 6})\nCheck.equal(\"pomnozi({'jajca': 4, 'moka': 500}, 1.5)\", {'moka': 750, 'jajca': 6})\nCheck.equal(\"pomnozi({'jajca': 3, 'moka': 500}, 0.5)\", {'moka': 250, 'jajca': 1.5})"
    }
  }, 
  {
    "pk": 741, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "V datoteki imamo opisano skladi\u0161\u010de, pri \u010demer je v vsaki vrstici po\nen izdelek. Izdelki se lahko v datoteki pojavijo ve\u010dkrat in ne nujno\nskupaj. Sestavite funkcijo `preberi(datoteka)`, ki iz datoteke prebere\nizdelke in vrne seznam vseh prebranih izdelkov. \u010ce je datoteka prazna,\nnaj funkcija vrne prazen seznam.", 
      "timestamp": "2012-07-12 11:25:09", 
      "challenge": "[]", 
      "solution": "def preberi(datoteka):\n    with open(datoteka) as f:\n        return [v.strip() for v in f]", 
      "problem": 239, 
      "validation": "with open(\"_test.0\",\"w\") as _f:\n    _f.write(\"\")\n\nCheck.equal(\"preberi('_test.0')\", [])\n\n_d=\"\"\"moka, 1kg\\nmleko, 1L\\nmoka, 1kg\\nmoka, 1kg\\nkruh\\nmleko, 1L\\nkruh\\nkruh\"\"\"\nwith open(\"_test.1\",\"w\") as _f:\n    _f.write(_d)\n\nCheck.equal(\"preberi('_test.1')\", ['moka, 1kg', 'mleko, 1L', 'moka, 1kg', 'moka, 1kg', 'kruh', 'mleko, 1L', 'kruh', 'kruh'])"
    }
  }, 
  {
    "pk": 219, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite vektor `ocene`, ki vsebuje 10000 naklju\u010dnih naravnih \u0161tevil\nmed 1 in 10.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "ocene <- sample(1 : 10, 10000, replace = TRUE)", 
      "problem": 64, 
      "validation": "sapply(1 : 10, function(i) {\n  k <- length(ocene[ocene == i])\n  if(k < 925) check$error(\"\u0160tevilo %i se ne pojavlja dovolj pogosto (%i-krat).\", i, k)\n  if(k > 1075) check$error(\"\u0160tevilo %i se pojavlja prepogosto (%i-krat).\", i, k)\n})"
    }
  }, 
  {
    "pk": 809, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `identiteta(n)`, ki vrne identi\u010dno matriko\ndimenzije `n` \u00d7 `n`.", 
      "timestamp": "2012-10-01 12:27:45", 
      "challenge": "[[\"None\", \"[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]]\"]]", 
      "solution": "def identiteta(n):\n    return [[1 if i == j else 0 for i in range(n)] for j in range(n)]", 
      "problem": 254, 
      "validation": "Check.equal('identiteta(1)', [[1]])\nCheck.equal('identiteta(2)', [[1, 0], [0, 1]])\nCheck.equal('identiteta(4)', [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]])\nCheck.challenge(identiteta(25))"
    }
  }, 
  {
    "pk": 195, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite konstruktor `__init__(koef)`, ki nastavi tabelo koeficientov.", 
      "timestamp": "2012-10-26 10:34:05", 
      "challenge": "[]", 
      "solution": "class Polinom:\n\n    def __init__(self, koef):\n        # \u017ee na za\u010detku se znebimo vseh ni\u010delnih vodilnih koeficientov\n        zadnji = len(koef)\n        while zadnji > 0 and koef[zadnji - 1] == 0:\n            zadnji -= 1\n        self.koef = koef[:zadnji]", 
      "problem": 55, 
      "validation": "Check.equal('Polinom([1, 2, 3]).koef', [1, 2, 3])\nCheck.equal('Polinom([1, 2, 0, 0]).koef', [1, 2])"
    }
  }, 
  {
    "pk": 888, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `floydWarshall(g)`, ki vrne slovar slovarjev najkraj\u0161ih\nrazdalj med dvema vozli\u0161\u010dema v danem usmerjenem grafu `g`.", 
      "timestamp": "2013-01-07 11:31:31", 
      "challenge": "[]", 
      "solution": "def floydWarshall(g):\n    raz = {u: {v: float(\"inf\") for v in g} for u in g}\n    for u in raz:\n        raz[u][u] = 0\n    for u in g:\n        for v in g:\n            if v in g[u]:\n                raz[u][v] = g[u][v]\n    for u in g:\n        for v in g:\n            for w in g:\n                raz[v][w] = min(raz[v][w], raz[v][u] + raz[u][w])\n    return raz", 
      "problem": 300, 
      "validation": "Check.equal(\"\"\"floydWarshall(g = {1: {2: 8, 4: 1}, 2: {3: 1}, 3: {1: 4}, 4: {2: 2, 3: 9}})\"\"\", {1: {1: 0, 2: 3, 3: 4, 4: 1}, 2: {1: 5, 2: 0, 3: 1, 4: 6}, 3: {1: 4, 2: 7, 3: 0, 4: 5}, 4: {1: 7, 2: 2, 3: 3, 4: 0}})"
    }
  }, 
  {
    "pk": 726, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `naloga1a(n)`, kot je zapisano v navodilih.", 
      "timestamp": "2012-07-11 11:25:16", 
      "challenge": "[]", 
      "solution": "import re\n\ndef naloga1a(n):\n    return re.match(\"^[2468]*([13579][02468]+)+$\", str(n)) is not None", 
      "problem": 232, 
      "validation": "Check.equal(\"naloga1a(1)\", False)\nCheck.equal(\"naloga1a(12)\", True)\nCheck.equal(\"naloga1a(123)\", False)\nCheck.equal(\"naloga1a(1234)\", True)\nCheck.equal(\"naloga1a(12345)\", False)\nCheck.equal(\"naloga1a(222221122222)\", False)\nCheck.equal(\"naloga1a(121212121212)\", True)"
    }
  }, 
  {
    "pk": 857, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavi funkcijo `mozne_poteze(t, i, j)`, ki sprejme delno izpolnjeni\nSudoku `t` in indeksa `(i, j)` ter vrne mno\u017eico \u0161tevil, ki bi jih lahko\nvpisali v polje `t[i][j]`, ne da bi kr\u0161ili pravila igre. \u010ce je\npolje `t[u][v]` \u017ee izpolnjeno, naj funkcija vrne prazno mno\u017eico.", 
      "timestamp": "2012-11-19 10:14:29", 
      "challenge": "[[\"(0, 0)\", \"[]\"], [\"(0, 1)\", \"[]\"], [\"(0, 2)\", \"[1, 2, 4]\"], [\"(0, 3)\", \"[2, 6]\"], [\"(0, 4)\", \"[]\"], [\"(0, 5)\", \"[2, 4, 6, 8]\"], [\"(0, 6)\", \"[1, 4, 8, 9]\"], [\"(0, 7)\", \"[1, 2, 4, 9]\"], [\"(0, 8)\", \"[2, 4, 8]\"], [\"(1, 0)\", \"[]\"], [\"(1, 1)\", \"[2, 4, 7]\"], [\"(1, 2)\", \"[2, 4, 7]\"], [\"(1, 3)\", \"[]\"], [\"(1, 4)\", \"[]\"], [\"(1, 5)\", \"[]\"], [\"(1, 6)\", \"[3, 4, 7, 8]\"], [\"(1, 7)\", \"[2, 3, 4]\"], [\"(1, 8)\", \"[2, 4, 7, 8]\"], [\"(2, 0)\", \"[1, 2]\"], [\"(2, 1)\", \"[]\"], [\"(2, 2)\", \"[]\"], [\"(2, 3)\", \"[2, 3]\"], [\"(2, 4)\", \"[3, 4]\"], [\"(2, 5)\", \"[2, 4]\"], [\"(2, 6)\", \"[1, 3, 4, 5, 7]\"], [\"(2, 7)\", \"[]\"], [\"(2, 8)\", \"[2, 4, 7]\"], [\"(3, 0)\", \"[]\"], [\"(3, 1)\", \"[1, 2, 5]\"], [\"(3, 2)\", \"[1, 2, 5, 9]\"], [\"(3, 3)\", \"[5, 7, 9]\"], [\"(3, 4)\", \"[]\"], [\"(3, 5)\", \"[1, 4, 7]\"], [\"(3, 6)\", \"[4, 5, 7, 9]\"], [\"(3, 7)\", \"[2, 4, 5, 9]\"], [\"(3, 8)\", \"[]\"], [\"(4, 0)\", \"[]\"], [\"(4, 1)\", \"[2, 5]\"], [\"(4, 2)\", \"[2, 5, 6, 9]\"], [\"(4, 3)\", \"[]\"], [\"(4, 4)\", \"[5]\"], [\"(4, 5)\", \"[]\"], [\"(4, 6)\", \"[5, 7, 9]\"], [\"(4, 7)\", \"[2, 5, 9]\"], [\"(4, 8)\", \"[]\"], [\"(5, 0)\", \"[]\"], [\"(5, 1)\", \"[1, 5]\"], [\"(5, 2)\", \"[1, 3, 5, 9]\"], [\"(5, 3)\", \"[5, 9]\"], [\"(5, 4)\", \"[]\"], [\"(5, 5)\", \"[1, 4]\"], [\"(5, 6)\", \"[4, 5, 8, 9]\"], [\"(5, 7)\", \"[4, 5, 9]\"], [\"(5, 8)\", \"[]\"], [\"(6, 0)\", \"[1, 3, 9]\"], [\"(6, 1)\", \"[]\"], [\"(6, 2)\", \"[1, 3, 4, 5, 7, 9]\"], [\"(6, 3)\", \"[3, 5, 7]\"], [\"(6, 4)\", \"[3, 5]\"], [\"(6, 5)\", \"[7]\"], [\"(6, 6)\", \"[]\"], [\"(6, 7)\", \"[]\"], [\"(6, 8)\", \"[4]\"], [\"(7, 0)\", \"[2, 3]\"], [\"(7, 1)\", \"[2, 7, 8]\"], [\"(7, 2)\", \"[2, 3, 7]\"], [\"(7, 3)\", \"[]\"], [\"(7, 4)\", \"[]\"], [\"(7, 5)\", \"[]\"], [\"(7, 6)\", \"[3, 6]\"], [\"(7, 7)\", \"[3]\"], [\"(7, 8)\", \"[]\"], [\"(8, 0)\", \"[1, 2, 3]\"], [\"(8, 1)\", \"[1, 2, 4, 5]\"], [\"(8, 2)\", \"[1, 2, 3, 4, 5]\"], [\"(8, 3)\", \"[2, 3, 5, 6]\"], [\"(8, 4)\", \"[]\"], [\"(8, 5)\", \"[2, 6]\"], [\"(8, 6)\", \"[1, 3, 4, 6]\"], [\"(8, 7)\", \"[]\"], [\"(8, 8)\", \"[]\"]]", 
      "solution": "def mozne_poteze(t,i,j):\n    if t[i][j] is not None:\n        return set()\n    else:\n        prepovedani_vrstica = {t[k][j] for k in range(9) if t[k][j] is not None}\n        prepovedani_stolpec = {t[i][k] for k in range(9) if t[i][k] is not None}\n        prepovedani_3x3 = {t[k][m] for k in range(3 * (i // 3), 3 * (i // 3) + 3)\n                                   for m in range(3 * (j // 3), 3 * (j // 3) + 3)\n                                   if t[k][m] is not None}\n        return set(range(1,10)) - prepovedani_vrstica - prepovedani_stolpec - prepovedani_3x3", 
      "problem": 280, 
      "validation": "Check.equal(\"\"\"mozne_poteze(\n    [[ 5  , 3  ,None,  None, 7  ,None,  None,None,None],\n     [ 6  ,None,None,   1  , 9  , 5  ,  None,None,None],\n     [None, 9  , 8  ,  None,None,None,  None, 6  ,None],\n     \n     [ 8  ,None,None,  None, 6  ,None,  None,None, 3  ],\n     [ 4  ,None,None,   8  ,None, 3  ,  None,None, 1  ],\n     [ 7  ,None,None,  None, 2  ,None,  None,None, 6  ],\n      \n     [None, 6  ,None,  None,None,None,   2  , 8  ,None],\n     [None,None,None,   4  , 1  , 9  ,  None,None, 5  ],\n     [None,None,None,  None, 8  ,None,  None, 7  , 9  ]], 0, 2)\"\"\", {1,2,4})\n\nCheck.equal(\"\"\"mozne_poteze(\n    [[ 5  , 3  ,None,  None, 7  ,None,  None,None,None],\n     [ 6  ,None,None,   1  , 9  , 5  ,  None,None,None],\n     [None, 9  , 8  ,  None,None,None,  None, 6  ,None],\n     \n     [ 8  ,None,None,  None, 6  ,None,  None,None, 3  ],\n     [ 4  ,None,None,   8  ,None, 3  ,  None,None, 1  ],\n     [ 7  ,None,None,  None, 2  ,None,  None,None, 6  ],\n      \n     [None, 6  ,None,  None,None,None,   2  , 8  ,None],\n     [None,None,None,   4  , 1  , 9  ,  None,None, 5  ],\n     [None,None,None,  None, 8  ,None,  None, 7  , 9  ]], 0, 0)\"\"\", set())\n\nCheck.equal(\"\"\"mozne_poteze(\n    [[ 5  , 3  ,None,  None, 7  ,None,  None,None,None],\n     [ 6  ,None,None,   1  , 9  , 5  ,  None,None,None],\n     [None, 9  , 8  ,  None,None,None,  None, 6  ,None],\n     \n     [ 8  ,None,None,  None, 6  ,None,  None,None, 3  ],\n     [ 4  ,None,None,   8  ,None, 3  ,  None,None, 1  ],\n     [ 7  ,None,None,  None, 2  ,None,  None,None, 6  ],\n      \n     [None, 6  ,None,  None,None,None,   2  , 8  ,None],\n     [None,None,None,   4  , 1  , 9  ,  None,None, 5  ],\n     [None,None,None,  None, 8  ,None,  None, 7  , 9  ]], 4, 7)\"\"\", {2,5,9})\n\nfor i in range(9):\n    for j in range(9):\n        Check.challenge(mozne_poteze(\n            [[ 5  , 3  ,None,  None, 7  ,None,  None,None,None],\n             [ 6  ,None,None,   1  , 9  , 5  ,  None,None,None],\n             [None, 9  , 8  ,  None,None,None,  None, 6  ,None],\n             \n             [ 8  ,None,None,  None, 6  ,None,  None,None, 3  ],\n             [ 4  ,None,None,   8  ,None, 3  ,  None,None, 1  ],\n             [ 7  ,None,None,  None, 2  ,None,  None,None, 6  ],\n             \n             [None, 6  ,None,  None,None,None,   2  , 8  ,None],\n             [None,None,None,   4  , 1  , 9  ,  None,None, 5  ],\n             [None,None,None,  None, 8  ,None,  None, 7  , 9  ]], i, j), (i, j))"
    }
  }, 
  {
    "pk": 745, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `mocPotencne(mnozica)`, ki vrne mo\u010d poten\u010dne mno\u017eice\ndane mno\u017eice `mnozica`.", 
      "timestamp": "2012-07-12 09:32:19", 
      "challenge": "[]", 
      "solution": "def mocPotencne(mnozica):\n    return 2 ** len(mnozica)", 
      "problem": 237, 
      "validation": "Check.equal(\"mocPotencne(set())\", 1)\nCheck.equal(\"mocPotencne({1, 2})\", 4)\nCheck.equal(\"mocPotencne({'A', 'B', 'C'})\", 8)\nCheck.equal(\"mocPotencne({1, 2, 3, 4})\", 16)"
    }
  }, 
  {
    "pk": 174, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `uredi_po_x(t)`, ki vrne tabelo `a`, v kateri so na\u0161teti\nindeksi to\u010dk iz tabele `t` glede na koordinato $x$ v nara\u0161\u010dajo\u010de redu. Se\npravi, `t[a[i]]` je `i`-ta to\u010dka v `t` glede na velikost koordinate $x$.\n\nNamig: uporabite funkcijo `sorted`, ki ji podate `enumerate(t)` in ustrezno\nvrednost parametra `key`, se pravi, tako funkcijo, ki iz para `(i,(x,y))`\nizlu\u0161\u010di `x`.", 
      "timestamp": "2012-12-10 17:07:53", 
      "challenge": "[[\"None\", \"[0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156, 162, 168, 174, 180, 186, 192, 198, 204, 210, 216, 222, 228, 234, 240, 246, 252, 258, 264, 270, 276, 282, 288, 294, 300, 306, 312, 318, 324, 330, 336, 342, 348, 354, 360, 366, 372, 378, 384, 390, 396, 402, 408, 414, 420, 426, 432, 438, 444, 450, 456, 462, 468, 474, 480, 486, 492, 498, 504, 510, 516, 522, 528, 534, 540, 546, 552, 558, 564, 570, 576, 582, 588, 594, 600, 606, 612, 618, 624, 630, 636, 642, 648, 654, 660, 666, 672, 678, 684, 690, 696, 702, 708, 714, 720, 726, 732, 738, 744, 750, 756, 762, 768, 774, 780, 786, 792, 798, 804, 810, 816, 822, 828, 834, 840, 846, 852, 858, 864, 870, 876, 882, 888, 894, 900, 906, 912, 918, 924, 930, 936, 942, 948, 954, 960, 966, 972, 978, 984, 990, 996, 1, 5, 13, 17, 25, 29, 37, 41, 49, 53, 61, 65, 73, 77, 85, 89, 97, 101, 109, 113, 121, 125, 133, 137, 145, 149, 157, 161, 169, 173, 181, 185, 193, 197, 205, 209, 217, 221, 229, 233, 241, 245, 253, 257, 265, 269, 277, 281, 289, 293, 301, 305, 313, 317, 325, 329, 337, 341, 349, 353, 361, 365, 373, 377, 385, 389, 397, 401, 409, 413, 421, 425, 433, 437, 445, 449, 457, 461, 469, 473, 481, 485, 493, 497, 505, 509, 517, 521, 529, 533, 541, 545, 553, 557, 565, 569, 577, 581, 589, 593, 601, 605, 613, 617, 625, 629, 637, 641, 649, 653, 661, 665, 673, 677, 685, 689, 697, 701, 709, 713, 721, 725, 733, 737, 745, 749, 757, 761, 769, 773, 781, 785, 793, 797, 805, 809, 817, 821, 829, 833, 841, 845, 853, 857, 865, 869, 877, 881, 889, 893, 901, 905, 913, 917, 925, 929, 937, 941, 949, 953, 961, 965, 973, 977, 985, 989, 997, 2, 4, 8, 10, 14, 16, 20, 22, 26, 28, 32, 34, 38, 40, 44, 46, 50, 52, 56, 58, 62, 64, 68, 70, 74, 76, 80, 82, 86, 88, 92, 94, 98, 100, 104, 106, 110, 112, 116, 118, 122, 124, 128, 130, 134, 136, 140, 142, 146, 148, 152, 154, 158, 160, 164, 166, 170, 172, 176, 178, 182, 184, 188, 190, 194, 196, 200, 202, 206, 208, 212, 214, 218, 220, 224, 226, 230, 232, 236, 238, 242, 244, 248, 250, 254, 256, 260, 262, 266, 268, 272, 274, 278, 280, 284, 286, 290, 292, 296, 298, 302, 304, 308, 310, 314, 316, 320, 322, 326, 328, 332, 334, 338, 340, 344, 346, 350, 352, 356, 358, 362, 364, 368, 370, 374, 376, 380, 382, 386, 388, 392, 394, 398, 400, 404, 406, 410, 412, 416, 418, 422, 424, 428, 430, 434, 436, 440, 442, 446, 448, 452, 454, 458, 460, 464, 466, 470, 472, 476, 478, 482, 484, 488, 490, 494, 496, 500, 502, 506, 508, 512, 514, 518, 520, 524, 526, 530, 532, 536, 538, 542, 544, 548, 550, 554, 556, 560, 562, 566, 568, 572, 574, 578, 580, 584, 586, 590, 592, 596, 598, 602, 604, 608, 610, 614, 616, 620, 622, 626, 628, 632, 634, 638, 640, 644, 646, 650, 652, 656, 658, 662, 664, 668, 670, 674, 676, 680, 682, 686, 688, 692, 694, 698, 700, 704, 706, 710, 712, 716, 718, 722, 724, 728, 730, 734, 736, 740, 742, 746, 748, 752, 754, 758, 760, 764, 766, 770, 772, 776, 778, 782, 784, 788, 790, 794, 796, 800, 802, 806, 808, 812, 814, 818, 820, 824, 826, 830, 832, 836, 838, 842, 844, 848, 850, 854, 856, 860, 862, 866, 868, 872, 874, 878, 880, 884, 886, 890, 892, 896, 898, 902, 904, 908, 910, 914, 916, 920, 922, 926, 928, 932, 934, 938, 940, 944, 946, 950, 952, 956, 958, 962, 964, 968, 970, 974, 976, 980, 982, 986, 988, 992, 994, 998, 3, 15, 27, 39, 51, 63, 75, 87, 99, 111, 123, 135, 147, 159, 171, 183, 195, 207, 219, 231, 243, 255, 267, 279, 291, 303, 315, 327, 339, 351, 363, 375, 387, 399, 411, 423, 435, 447, 459, 471, 483, 495, 507, 519, 531, 543, 555, 567, 579, 591, 603, 615, 627, 639, 651, 663, 675, 687, 699, 711, 723, 735, 747, 759, 771, 783, 795, 807, 819, 831, 843, 855, 867, 879, 891, 903, 915, 927, 939, 951, 963, 975, 987, 999, 7, 11, 19, 23, 31, 35, 43, 47, 55, 59, 67, 71, 79, 83, 91, 95, 103, 107, 115, 119, 127, 131, 139, 143, 151, 155, 163, 167, 175, 179, 187, 191, 199, 203, 211, 215, 223, 227, 235, 239, 247, 251, 259, 263, 271, 275, 283, 287, 295, 299, 307, 311, 319, 323, 331, 335, 343, 347, 355, 359, 367, 371, 379, 383, 391, 395, 403, 407, 415, 419, 427, 431, 439, 443, 451, 455, 463, 467, 475, 479, 487, 491, 499, 503, 511, 515, 523, 527, 535, 539, 547, 551, 559, 563, 571, 575, 583, 587, 595, 599, 607, 611, 619, 623, 631, 635, 643, 647, 655, 659, 667, 671, 679, 683, 691, 695, 703, 707, 715, 719, 727, 731, 739, 743, 751, 755, 763, 767, 775, 779, 787, 791, 799, 803, 811, 815, 823, 827, 835, 839, 847, 851, 859, 863, 871, 875, 883, 887, 895, 899, 907, 911, 919, 923, 931, 935, 943, 947, 955, 959, 967, 971, 979, 983, 991, 995, 9, 21, 33, 45, 57, 69, 81, 93, 105, 117, 129, 141, 153, 165, 177, 189, 201, 213, 225, 237, 249, 261, 273, 285, 297, 309, 321, 333, 345, 357, 369, 381, 393, 405, 417, 429, 441, 453, 465, 477, 489, 501, 513, 525, 537, 549, 561, 573, 585, 597, 609, 621, 633, 645, 657, 669, 681, 693, 705, 717, 729, 741, 753, 765, 777, 789, 801, 813, 825, 837, 849, 861, 873, 885, 897, 909, 921, 933, 945, 957, 969, 981, 993]\"]]", 
      "solution": "def uredi_po_x(t):\n    return [i for (i,u) in sorted(enumerate(t), key = lambda p: p[1][0])]", 
      "problem": 53, 
      "validation": "Check.equal(\"\"\"uredi_po_x([(2,3), (1,5), (10,7), (11,6)])\"\"\", [1, 0, 2, 3])\n\nCheck.challenge(uredi_po_x([((30*i - 5*i*i)%120, (27*i + 8*i*i)%100) for i in range(1000)]))"
    }
  }, 
  {
    "pk": 776, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `razbij(tablica)`, ki niz `tablica` razbije na del\npred in del po zvezdici ter ta dva dela vrne v naboru dol\u017eine dva.", 
      "timestamp": "2012-09-05 09:34:40", 
      "challenge": "[[\"LM*79957\", \"('LM', '79957')\"], [\"MN*16084\", \"('MN', '16084')\"], [\"BC*62407\", \"('BC', '62407')\"], [\"OP*87998\", \"('OP', '87998')\"], [\"DE*28841\", \"('DE', '28841')\"], [\"EF*65048\", \"('EF', '65048')\"], [\"JK*7163\", \"('JK', '7163')\"], [\"CD*42594\", \"('CD', '42594')\"], [\"UV*93693\", \"('UV', '93693')\"], [\"EF*91708\", \"('EF', '91708')\"], [\"ST*56879\", \"('ST', '56879')\"], [\"CD*14854\", \"('CD', '14854')\"], [\"PR*92625\", \"('PR', '92625')\"], [\"EF*51808\", \"('EF', '51808')\"], [\"FG*57635\", \"('FG', '57635')\"], [\"GH*44362\", \"('GH', '44362')\"], [\"DE*64101\", \"('DE', '64101')\"], [\"EF*60388\", \"('EF', '60388')\"], [\"ST*78999\", \"('ST', '78999')\"], [\"KL*75150\", \"('KL', '75150')\"], [\"UV*84953\", \"('UV', '84953')\"], [\"IJ*82376\", \"('IJ', '82376')\"], [\"FG*20075\", \"('FG', '20075')\"], [\"KL*56050\", \"('KL', '56050')\"], [\"HI*54029\", \"('HI', '54029')\"], [\"RS*21612\", \"('RS', '21612')\"], [\"JK*43583\", \"('JK', '43583')\"], [\"CD*1334\", \"('CD', '1334')\"], [\"UV*39073\", \"('UV', '39073')\"], [\"RS*76272\", \"('RS', '76272')\"], [\"BC*64467\", \"('BC', '64467')\"], [\"CD*62554\", \"('CD', '62554')\"], [\"PR*46165\", \"('PR', '46165')\"], [\"MN*31444\", \"('MN', '31444')\"], [\"FG*66855\", \"('FG', '66855')\"], [\"CD*2174\", \"('CD', '2174')\"], [\"UV*10953\", \"('UV', '10953')\"], [\"AB*95800\", \"('AB', '95800')\"], [\"NO*92571\", \"('NO', '92571')\"], [\"GH*40322\", \"('GH', '40322')\"], [\"UV*50813\", \"('UV', '50813')\"], [\"RS*36412\", \"('RS', '36412')\"], [\"NO*80591\", \"('NO', '80591')\"], [\"CD*93094\", \"('CD', '93094')\"], [\"LM*64177\", \"('LM', '64177')\"], [\"IJ*27936\", \"('IJ', '27936')\"], [\"JK*72803\", \"('JK', '72803')\"], [\"OP*27338\", \"('OP', '27338')\"], [\"UV*84613\", \"('UV', '84613')\"], [\"MN*46084\", \"('MN', '46084')\"], [\"BC*82167\", \"('BC', '82167')\"]]", 
      "solution": "def razbij(tablica):\n    return tuple(tablica.split(\"*\"))", 
      "problem": 248, 
      "validation": "Check.equal(\"\"\"razbij(\"MB*56-TR2\")\"\"\", (\"MB\", \"56-TR2\"))\nCheck.equal(\"\"\"razbij(\"LJ*AB-124\")\"\"\", (\"LJ\", \"AB-124\"))\nCheck.equal(\"\"\"razbij(\"KR*B25-13\")\"\"\", (\"KR\", \"B25-13\"))\n\n_rng=[1287631]\nfor i in range(50): _rng.append((_rng[-1]*1103515245+12345)%2**32)\nfor i in _rng:\n    tablica = \"ABCDEFGHIJKLMNOPRSTUVZ\"[i % 20:i % 20+2] + \"*\" + str(12347 * i % 100000)\n    Check.challenge(razbij(tablica), tablica)"
    }
  }, 
  {
    "pk": 134, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `jePrestopno(leto)`, ki preveri, ali je dano `leto`\nprestopno.", 
      "timestamp": "2012-10-24 13:30:16", 
      "challenge": "[[\"1900\", \"False\"], [\"1901\", \"False\"], [\"1902\", \"False\"], [\"1903\", \"False\"], [\"1904\", \"True\"], [\"1905\", \"False\"], [\"1906\", \"False\"], [\"1907\", \"False\"], [\"1908\", \"True\"], [\"1909\", \"False\"], [\"1910\", \"False\"], [\"1911\", \"False\"], [\"1912\", \"True\"], [\"1913\", \"False\"], [\"1914\", \"False\"], [\"1915\", \"False\"], [\"1916\", \"True\"], [\"1917\", \"False\"], [\"1918\", \"False\"], [\"1919\", \"False\"], [\"1920\", \"True\"], [\"1921\", \"False\"], [\"1922\", \"False\"], [\"1923\", \"False\"], [\"1924\", \"True\"], [\"1925\", \"False\"], [\"1926\", \"False\"], [\"1927\", \"False\"], [\"1928\", \"True\"], [\"1929\", \"False\"], [\"1930\", \"False\"], [\"1931\", \"False\"], [\"1932\", \"True\"], [\"1933\", \"False\"], [\"1934\", \"False\"], [\"1935\", \"False\"], [\"1936\", \"True\"], [\"1937\", \"False\"], [\"1938\", \"False\"], [\"1939\", \"False\"], [\"1940\", \"True\"], [\"1941\", \"False\"], [\"1942\", \"False\"], [\"1943\", \"False\"], [\"1944\", \"True\"], [\"1945\", \"False\"], [\"1946\", \"False\"], [\"1947\", \"False\"], [\"1948\", \"True\"], [\"1949\", \"False\"], [\"1950\", \"False\"], [\"1951\", \"False\"], [\"1952\", \"True\"], [\"1953\", \"False\"], [\"1954\", \"False\"], [\"1955\", \"False\"], [\"1956\", \"True\"], [\"1957\", \"False\"], [\"1958\", \"False\"], [\"1959\", \"False\"], [\"1960\", \"True\"], [\"1961\", \"False\"], [\"1962\", \"False\"], [\"1963\", \"False\"], [\"1964\", \"True\"], [\"1965\", \"False\"], [\"1966\", \"False\"], [\"1967\", \"False\"], [\"1968\", \"True\"], [\"1969\", \"False\"], [\"1970\", \"False\"], [\"1971\", \"False\"], [\"1972\", \"True\"], [\"1973\", \"False\"], [\"1974\", \"False\"], [\"1975\", \"False\"], [\"1976\", \"True\"], [\"1977\", \"False\"], [\"1978\", \"False\"], [\"1979\", \"False\"], [\"1980\", \"True\"], [\"1981\", \"False\"], [\"1982\", \"False\"], [\"1983\", \"False\"], [\"1984\", \"True\"], [\"1985\", \"False\"], [\"1986\", \"False\"], [\"1987\", \"False\"], [\"1988\", \"True\"], [\"1989\", \"False\"], [\"1990\", \"False\"], [\"1991\", \"False\"], [\"1992\", \"True\"], [\"1993\", \"False\"], [\"1994\", \"False\"], [\"1995\", \"False\"], [\"1996\", \"True\"], [\"1997\", \"False\"], [\"1998\", \"False\"], [\"1999\", \"False\"], [\"2000\", \"True\"], [\"2001\", \"False\"], [\"2002\", \"False\"], [\"2003\", \"False\"], [\"2004\", \"True\"], [\"2005\", \"False\"], [\"2006\", \"False\"], [\"2007\", \"False\"], [\"2008\", \"True\"], [\"2009\", \"False\"], [\"2010\", \"False\"], [\"2011\", \"False\"], [\"2012\", \"True\"], [\"2013\", \"False\"], [\"2014\", \"False\"], [\"2015\", \"False\"], [\"2016\", \"True\"], [\"2017\", \"False\"], [\"2018\", \"False\"], [\"2019\", \"False\"], [\"2020\", \"True\"], [\"2021\", \"False\"], [\"2022\", \"False\"], [\"2023\", \"False\"], [\"2024\", \"True\"], [\"2025\", \"False\"], [\"2026\", \"False\"], [\"2027\", \"False\"], [\"2028\", \"True\"], [\"2029\", \"False\"], [\"2030\", \"False\"], [\"2031\", \"False\"], [\"2032\", \"True\"], [\"2033\", \"False\"], [\"2034\", \"False\"], [\"2035\", \"False\"], [\"2036\", \"True\"], [\"2037\", \"False\"], [\"2038\", \"False\"], [\"2039\", \"False\"], [\"2040\", \"True\"], [\"2041\", \"False\"], [\"2042\", \"False\"], [\"2043\", \"False\"], [\"2044\", \"True\"], [\"2045\", \"False\"], [\"2046\", \"False\"], [\"2047\", \"False\"], [\"2048\", \"True\"], [\"2049\", \"False\"], [\"2050\", \"False\"], [\"2051\", \"False\"], [\"2052\", \"True\"], [\"2053\", \"False\"], [\"2054\", \"False\"], [\"2055\", \"False\"], [\"2056\", \"True\"], [\"2057\", \"False\"], [\"2058\", \"False\"], [\"2059\", \"False\"], [\"2060\", \"True\"], [\"2061\", \"False\"], [\"2062\", \"False\"], [\"2063\", \"False\"], [\"2064\", \"True\"], [\"2065\", \"False\"], [\"2066\", \"False\"], [\"2067\", \"False\"], [\"2068\", \"True\"], [\"2069\", \"False\"], [\"2070\", \"False\"], [\"2071\", \"False\"], [\"2072\", \"True\"], [\"2073\", \"False\"], [\"2074\", \"False\"], [\"2075\", \"False\"], [\"2076\", \"True\"], [\"2077\", \"False\"], [\"2078\", \"False\"], [\"2079\", \"False\"], [\"2080\", \"True\"], [\"2081\", \"False\"], [\"2082\", \"False\"], [\"2083\", \"False\"], [\"2084\", \"True\"], [\"2085\", \"False\"], [\"2086\", \"False\"], [\"2087\", \"False\"], [\"2088\", \"True\"], [\"2089\", \"False\"], [\"2090\", \"False\"], [\"2091\", \"False\"], [\"2092\", \"True\"], [\"2093\", \"False\"], [\"2094\", \"False\"], [\"2095\", \"False\"], [\"2096\", \"True\"], [\"2097\", \"False\"], [\"2098\", \"False\"], [\"2099\", \"False\"]]", 
      "solution": "def jePrestopno(leto):\n    return leto % 4 == 0 and leto % 100 != 0 or leto % 400 == 0", 
      "problem": 48, 
      "validation": "Check.equal('jePrestopno(1900)', False)\nCheck.equal('jePrestopno(2000)', True)\nCheck.equal('jePrestopno(2004)', True)\nCheck.equal('jePrestopno(2011)', False)\nfor leto in range(1900, 2100):\n    Check.challenge(jePrestopno(leto), leto)"
    }
  }, 
  {
    "pk": 829, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `strassenovo_mnozenje(a, b)`, ki po Strassenovem\r\npostopku zmno\u017ei matriki `a` in `b`.", 
      "timestamp": "2012-11-05 13:41:58", 
      "challenge": "[]", 
      "solution": "def na_cetrtine(a):\r\n    n = len(a) // 2\r\n    return ([vrs[:n] for vrs in a[:n]],\r\n            [vrs[n:] for vrs in a[:n]],\r\n            [vrs[:n] for vrs in a[n:]],\r\n            [vrs[n:] for vrs in a[n:]])\r\n\r\ndef iz_cetrtin(a11, a12, a21, a22):\r\n    return ([vrs1 + vrs2 for vrs1, vrs2 in zip(a11, a12)] +\r\n            [vrs1 + vrs2 for vrs1, vrs2 in zip(a21, a22)])\r\n\r\ndef sestej(a, b):\r\n    return [[a[i][j] + b[i][j]\r\n             for j in range(len(a[0]))]\r\n             for i in range(len(b))]\r\n\r\ndef odstej(a, b):\r\n    return [[a[i][j] - b[i][j]\r\n             for j in range(len(a[0]))]\r\n             for i in range(len(b))]\r\n\r\ndef strassenovo_mnozenje(a, b):\r\n    if len(a) == 1:\r\n        return [[a[0][0] * b[0][0]]]\r\n\r\n    a11, a12, a21, a22 = na_cetrtine(a)\r\n    b11, b12, b21, b22 = na_cetrtine(b)\r\n\r\n    m1 = strassenovo_mnozenje(sestej(a11, a22), sestej(b11, b22))\r\n    m2 = strassenovo_mnozenje(sestej(a21, a22), b11)\r\n    m3 = strassenovo_mnozenje(a11, odstej(b12, b22))\r\n    m4 = strassenovo_mnozenje(a22, odstej(b21, b11))\r\n    m5 = strassenovo_mnozenje(sestej(a11, a12), b22)\r\n    m6 = strassenovo_mnozenje(odstej(a21, a11), sestej(b11, b12))\r\n    m7 = strassenovo_mnozenje(odstej(a12, a22), sestej(b21, b22))\r\n\r\n\r\n    c11 = sestej(odstej(sestej(m1, m4), m5), m7)\r\n    c12 = sestej(m3, m5)\r\n    c21 = sestej(m2, m4)\r\n    c22 = sestej(sestej(odstej(m1, m2), m3), m6)\r\n\r\n    return iz_cetrtin(c11, c12, c21, c22)", 
      "problem": 264, 
      "validation": "Check.equal('strassenovo_mnozenje([[1, 3], [2, 4]], [[5, 6], [7, 8]])', [[26, 30], [38, 44]])\r\nCheck.equal('strassenovo_mnozenje([[1, 1, 1, 1], [1, -1, 1, -1], [1, 1, -1, -1], [1, -1, -1, 1]], [[1, 1, 1, 1], [1, -1, 1, -1], [1, 1, -1, -1], [1, -1, -1, 1]])', [[4, 0, 0, 0], [0, 4, 0, 0], [0, 0, 4, 0], [0, 0, 0, 4]])"
    }
  }, 
  {
    "pk": 717, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "V datoteki imamo zapisane podatke o vrednosti neke delnice. V vsaki\r\nvrstici je zapisan podatek v obliki\r\n\r\n    YYYY-MM-DD,vrednost\r\n\r\nkjer je prvi podatek dan, drugi pa vrednost delnice na ta dan.\r\nSestavite funkcijo `preberi(ime_datoteke)`, ki kot parameter sprejme\r\nime datoteke, vrne par nabor dveh seznamov, v prvem naj bodo datumi\r\n(kot nizi), v drugem pa vrednosti delnice (kot realna \u0161tevila).", 
      "timestamp": "2012-06-10 22:42:01", 
      "challenge": "[]", 
      "solution": "def preberi(ime_datoteke):\r\n    datumi=[]\r\n    vrednosti=[]\r\n    with open(ime_datoteke,'r') as f:\r\n        for vrstica in f:\r\n            v=vrstica.strip().split(',')\r\n            datumi.append(v[0])\r\n            vrednosti.append(float(v[1]))\r\n    return (datumi, vrednosti)", 
      "problem": 225, 
      "validation": "_d=\"\"\"2012-01-01,53.05\r\n2012-01-02,54.08\r\n2012-01-03,58.38\r\n2012-01-04,62.42\"\"\"\r\nwith open(\"_test.1\",\"w\") as _f:\r\n    _f.write(_d)\r\n\r\nCheck.equal(\"preberi('_test.1')\",(['2012-01-01', '2012-01-02', '2012-01-03', '2012-01-04'], [53.05, 54.08, 58.38, 62.42]))\r\n\r\n_rng=[1287631]\r\nfor i in range(100): _rng.append((_rng[-1]*1103515245+12345)%2**32)\r\n_m=max(_rng)/10\r\n_rng=[x/_m-5 for x in _rng[1:]]\r\n_v=50+_rng.pop(0)%30\r\nwith open(\"_test.2\",\"w\") as _f:\r\n    for _i in range(len(_rng)):\r\n        _v+=_rng[_i]\r\n        print(\"2012-{0:02d}-{1:02d},{2:.2f}\".format(1+_i//20, 1+_i%20,_v),file=_f)\r\n\r\nCheck.equal(\"preberi('_test.2')\", (['2012-01-01', '2012-01-02', '2012-01-03', '2012-01-04', '2012-01-05', '2012-01-06', '2012-01-07', '2012-01-08', '2012-01-09', '2012-01-10', '2012-01-11', '2012-01-12', '2012-01-13', '2012-01-14', '2012-01-15', '2012-01-16', '2012-01-17', '2012-01-18', '2012-01-19', '2012-01-20', '2012-02-01', '2012-02-02', '2012-02-03', '2012-02-04', '2012-02-05', '2012-02-06', '2012-02-07', '2012-02-08', '2012-02-09', '2012-02-10', '2012-02-11', '2012-02-12', '2012-02-13', '2012-02-14', '2012-02-15', '2012-02-16', '2012-02-17', '2012-02-18', '2012-02-19', '2012-02-20', '2012-03-01', '2012-03-02', '2012-03-03', '2012-03-04', '2012-03-05', '2012-03-06', '2012-03-07', '2012-03-08', '2012-03-09', '2012-03-10', '2012-03-11', '2012-03-12', '2012-03-13', '2012-03-14', '2012-03-15', '2012-03-16', '2012-03-17', '2012-03-18', '2012-03-19', '2012-03-20', '2012-04-01', '2012-04-02', '2012-04-03', '2012-04-04', '2012-04-05', '2012-04-06', '2012-04-07', '2012-04-08', '2012-04-09', '2012-04-10', '2012-04-11', '2012-04-12', '2012-04-13', '2012-04-14', '2012-04-15', '2012-04-16', '2012-04-17', '2012-04-18', '2012-04-19', '2012-04-20', '2012-05-01', '2012-05-02', '2012-05-03', '2012-05-04', '2012-05-05', '2012-05-06', '2012-05-07', '2012-05-08', '2012-05-09', '2012-05-10', '2012-05-11', '2012-05-12', '2012-05-13', '2012-05-14', '2012-05-15', '2012-05-16', '2012-05-17', '2012-05-18', '2012-05-19'], [53.05, 54.08, 58.38, 62.42, 63.64, 61.43, 60.92, 64.92, 67.73, 65.09, 68.8, 69.78, 68.79, 67.98, 66.42, 68.02, 67.08, 68.88, 71.05, 72.31, 70.51, 74.97, 78.53, 75.47, 74.07, 71.59, 69.11, 65.96, 64.95, 59.96, 56.5, 54.83, 55.75, 54.35, 52.7, 56.53, 52.56, 54.86, 53.92, 55.02, 52.33, 55.17, 52.92, 55.46, 58.66, 57.15, 52.9, 57.26, 60.05, 57.19, 59.24, 54.91, 51.8, 52.95, 55.95, 60.42, 57.11, 62.04, 65.35, 68.02, 68.18, 66.19, 66.97, 62.33, 66.16, 70.6, 67.27, 67.71, 72.25, 77.25, 77.35, 73.46, 76.94, 77.12, 79.23, 81.55, 83.94, 88.79, 92.75, 97.32, 96.55, 91.92, 91.67, 94.25, 92.66, 91.46, 94.26, 92.6, 90.0, 86.66, 87.45, 86.06, 86.35, 85.89, 90.73, 94.15, 99.03, 99.38, 101.15]))"
    }
  }, 
  {
    "pk": 184, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `zacetni.slovar(A, b, f)`, ki vrne slovar, ki ustreza\r\nlinearnemu programu, podanem z matriko koeficientov `A`, vektorjem\r\nomejitev `b` ter vektorjem koeficientov funkcionala `f`.\r\nZa osnovne spremenljivke si izberite kar `\"x1\"`, ..., `\"xn\"`, kjer je `n`\r\n\u0161tevilo stolpcev matrike `A` (oz. dol\u017eina vektorja `b`), za dopolnilne\r\nspremenljivke pa `\"y1\"`, ..., `\"ym\"`, kjer je `m` \u0161tevilo vrstic\r\nmatrike `A` (oz. dol\u017eina vektorja `f`).", 
      "timestamp": "2012-10-23 12:58:06", 
      "challenge": "[[\"A\", \"-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -90, -91, -92, -93, -94, -95, -96, -97, -98, -99, -100, -101, -102, -103, -104, -105, -106, -107, -108, -109, -110, -111, -112, -113, -114, -115, -116, -117, -118, -119, -120, -121, -122, -123, -124, -125, -126, -127, -128, -129, -130, -131, -132, -133, -134, -135, -136, -137, -138, -139, -140, -141, -142, -143, -144, -145, -146, -147, -148, -149, -150, -151, -152, -153, -154, -155, -156, -157, -158, -159, -160, -161, -162, -163, -164, -165, -166, -167, -168, -169, -170, -171, -172, -173, -174, -175, -176, -177, -178, -179, -180, -181, -182, -183, -184, -185, -186, -187, -188, -189, -190, -191, -192, -193, -194, -195, -196, -197, -198, -199, -200, -201, -202, -203, -204, -205, -206, -207, -208, -209, -210, -211, -212, -213, -214, -215, -216, -217, -218, -219, -220, -221, -222, -223, -224, -225, -226, -227, -228, -229, -230, -231, -232, -233, -234, -235, -236, -237, -238, -239, -240, -241, -242, -243, -244, -245, -246, -247, -248, -249, -250, -251, -252, -253, -254, -255, -256, -257, -258, -259, -260, -261, -262, -263, -264, -265, -266, -267, -268, -269, -270, -271, -272, -273, -274, -275, -276, -277, -278, -279, -280, -281, -282, -283, -284, -285, -286, -287, -288, -289, -290, -291, -292, -293, -294, -295, -296, -297, -298, -299, -300, -301, -302, -303, -304, -305, -306, -307, -308, -309, -310, -311, -312, -313, -314, -315, -316, -317, -318, -319, -320, -321, -322, -323, -324, -325, -326, -327, -328, -329, -330, -331, -332, -333, -334, -335, -336, -337, -338, -339, -340, -341, -342, -343, -344, -345, -346, -347, -348, -349, -350, -351, -352, -353, -354, -355, -356, -357, -358, -359, -360, -361, -362, -363, -364, -365, -366, -367, -368, -369, -370, -371, -372, -373, -374, -375, -376, -377, -378, -379, -380, -381, -382, -383, -384, -385, -386, -387, -388, -389, -390, -391, -392, -393, -394, -395, -396, -397, -398, -399, -400, -401, -402, -403, -404, -405, -406, -407, -408, -409, -410, -411, -412, -413, -414, -415, -416, -417, -418, -419, -420, -421, -422, -423, -424, -425, -426, -427, -428, -429, -430, -431, -432, -433, -434, -435, -436, -437, -438, -439, -440, -441, -442, -443, -444, -445, -446, -447, -448, -449, -450, -451, -452, -453, -454, -455, -456, -457, -458, -459, -460, -461, -462, -463, -464, -465, -466, -467, -468, -469, -470, -471, -472, -473, -474, -475, -476, -477, -478, -479, -480, -481, -482, -483, -484, -485, -486, -487, -488, -489, -490, -491, -492, -493, -494, -495, -496, -497, -498, -499, -500, -501, -502, -503, -504, -505, -506, -507, -508, -509, -510, -511, -512, -513, -514, -515, -516, -517, -518, -519, -520, -521, -522, -523, -524, -525, -526, -527, -528, -529, -530, -531, -532, -533, -534, -535, -536, -537, -538, -539, -540, -541, -542, -543, -544, -545, -546, -547, -548, -549, -550, -551, -552, -553, -554, -555, -556, -557, -558, -559, -560, -561, -562, -563, -564, -565, -566, -567, -568, -569, -570, -571, -572, -573, -574, -575, -576, -577, -578, -579, -580, -581, -582, -583, -584, -585, -586, -587, -588, -589, -590, -591, -592, -593, -594, -595, -596, -597, -598, -599, -600\"], [\"b\", \"1, 15, 5, 4, 14, 7, 11, 9, 8, 6, 10, 3, 13, 12, 2, 16, 0, 1, 15, 5\"], [\"f\", \"1, 14, 2, 6, 16, 9, 7, 8, 4, 15, 11, 12, 10, 3, 13, 17, 5, 18, 0, 1, 14, 2, 6, 16, 9, 7, 8, 4, 15, 11\"], [\"v\", \"0\"], [\"bazne\", \"y1, y2, y3, y4, y5, y6, y7, y8, y9, y10, y11, y12, y13, y14, y15, y16, y17, y18, y19, y20\"], [\"nebazne\", \"x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30\"]]", 
      "solution": "zacetni.slovar <- function(A, b, f) {\r\n  return(\r\n    list(A = -A, b = b, f = f, v = 0,\r\n         bazne = paste(\"y\", 1 : nrow(A), sep = \"\"),\r\n         nebazne = paste(\"x\", 1 : ncol(A), sep = \"\"))\r\n  )\r\n}", 
      "problem": 54, 
      "validation": "check$equal(zacetni.slovar(-slovar.3$A, slovar.3$b, slovar.3$f), slovar.3)\r\ncheck$equal(zacetni.slovar(-slovar.4$A, slovar.4$b, slovar.4$f), slovar.4)\r\ncheck$equal(zacetni.slovar(matrix(0, 5, 7), rep(0, 5), rep(0, 7))$nebazne, c(\"x1\", \"x2\", \"x3\", \"x4\", \"x5\", \"x6\", \"x7\"))\r\ncheck$equal(zacetni.slovar(matrix(0, 5, 7), rep(0, 5), rep(0, 7))$bazne, c(\"y1\", \"y2\", \"y3\", \"y4\", \"y5\"))\r\n.slovar <- zacetni.slovar(matrix(1 : 600, 20, 30), (1 : 20) ^ 5 %% 17, (1 : 30) ^ 7 %% 19)\r\ncheck$challenge(.slovar$A, \"A\")\r\ncheck$challenge(.slovar$b, \"b\")\r\ncheck$challenge(.slovar$f, \"f\")\r\ncheck$challenge(.slovar$v, \"v\")\r\ncheck$challenge(.slovar$bazne, \"bazne\")\r\ncheck$challenge(.slovar$nebazne, \"nebazne\")"
    }
  }, 
  {
    "pk": 853, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Definirajte funkcijo `podmnozica(x ,y)`, ki za dani mno\u017eici `x` in `y` \nvrne `TRUE`, \u010de je `x` podmno\u017eica mno\u017eice `y` in `FALSE` sicer.", 
      "timestamp": "2012-11-11 21:43:17", 
      "challenge": "[]", 
      "solution": "podmnozica <- function(x, y) {\n  return(setequal(union(x, y), y))\n}", 
      "problem": 279, 
      "validation": "check$equal(podmnozica(1 : 15, 1 : 5), FALSE)\ncheck$equal(podmnozica(1 : 5, 1 : 15), TRUE)\ncheck$equal(podmnozica(c(2, 3, 4, 4, 5, 2), 1 : 5), TRUE)"
    }
  }, 
  {
    "pk": 828, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `izbrisi.dolgove(stanja)`, ki sprejme vektor stanj na\nposameznih ra\u010dunih in vsa negativna stanja nastavi na 0.", 
      "timestamp": "2012-10-22 11:42:36", 
      "challenge": "[]", 
      "solution": "izbrisi.dolgove <- function(stanja) {\n  stanja[stanja < 0] <- 0\n  return(stanja)\n}", 
      "problem": 23, 
      "validation": "check$equal(izbrisi.dolgove(c(200, -500, 10, 70)), c(200, 0, 10, 70))\ncheck$equal(izbrisi.dolgove(c(200, -50, 10, -70)), c(200, 0, 10, 0))"
    }
  }, 
  {
    "pk": 65, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `zadnji`, ki vrne zadnjo komponento danega vektorja.", 
      "timestamp": "2012-11-07 12:55:12", 
      "challenge": "[[\"NA\", \"1000\"]]", 
      "solution": "zadnji <- function(v) {\r\n    v[length(v)]\r\n}", 
      "problem": 22, 
      "validation": "check$equal(zadnji(c(1, 2, 3)), 3)\r\ncheck$equal(zadnji(c(1, 2, 3, -10)), -10)\r\ncheck$challenge(zadnji(1 : 1000))"
    }
  }, 
  {
    "pk": 215, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite razpredelnico `podatki` s podatki o 50 mo\u0161kih in 50 \u017eenskah:\r\n\r\n* v stolpcu `visina` naj bodo vi\u0161ine, zaokro\u017eene na 0,5 cm natan\u010dno;\r\n* v stolpcu `masa` naj bodo telesne mase, zaokro\u017eene na 0,5 kg natan\u010dno;\r\n* v stolpcu `spol` naj bo spol, predstavljen z nizoma M ali Z;\r\n\r\nRazpredelnico uredite po vi\u0161ini.\r\n\r\nPrivzemite, da sta povpre\u010dna vi\u0161ina in telesna masa pri mo\u0161kih enaka\r\n175 cm in 75 kg, pri \u017eenskah pa 165 cm in 65 kg. Tako vi\u0161ine kot mase so\r\nrazporejene po normalni porazdelitvi, prve s standardnim odklonom 6%,\r\ndruge pa s standardnim odklonom 25%. (Seveda v resnici vi\u0161ina in masa\r\nnista neodvisni koli\u010dini, ampak o tem kdaj drugi\u010d.)", 
      "timestamp": "2012-11-19 13:43:16", 
      "challenge": "[]", 
      "solution": "podatki <- rbind(\r\n    data.frame(\r\n        visina = rnorm(50, 175, 0.06 * 175),\r\n        masa = rnorm(50, 75, 0.25 * 75),\r\n        spol = \"M\"\r\n    ),\r\n    data.frame(\r\n        visina = rnorm(50, 165, 0.06 * 165),\r\n        masa = rnorm(50, 65, 0.25 * 65),\r\n        spol = \"Z\"\r\n    )\r\n)\r\n# prva dva stolpca zaokro\u017eimo na polovice\r\npodatki[, 1 : 2] <- round(2 * podatki[, 1 : 2]) / 2\r\npodatki <- podatki[order(podatki$visina), ]", 
      "problem": 65, 
      "validation": "if(!identical(podatki$visina, sort(podatki$visina)))\r\n  check$error(\"Podatki niso urejeni po vi\u0161ini.\")\r\nif(!all((2 * podatki$visina) %% 1 == 0))\r\n  check$error(\"Vi\u0161ine niso zaokro\u017eene na 0,5 cm.\")\r\nif(!all((2 * podatki$masa) %% 1 == 0))\r\n  check$error(\"Mase niso zaokro\u017eene na 0,5 kg.\")\r\nif(isTRUE(abs(175 - mean(podatki[podatki$spol == \"M\", ]$visina)) > 3.5)) {\r\n  check$error(\"Povpre\u010dna vi\u0161ina mo\u0161kih je napa\u010dna.\")\r\n} else if(isTRUE(abs(10.5 - sd(podatki[podatki$spol == \"M\", ]$visina)) > 2))\r\n  check$error(\"Standardni odklon vi\u0161ine mo\u0161kih je napa\u010den.\")\r\nif(isTRUE(abs(165 - mean(podatki[podatki$spol == \"Z\", ]$visina)) > 3.5)) {\r\n  check$error(\"Povpre\u010dna vi\u0161ina \u017eensk je napa\u010dna.\")\r\n} else if(isTRUE(abs(9.9 - sd(podatki[podatki$spol == \"Z\", ]$visina)) > 2))\r\n  check$error(\"Standardni odklon vi\u0161ine \u017eensk je napa\u010den.\")\r\nif(isTRUE(abs(75 - mean(podatki[podatki$spol == \"M\", ]$masa)) > 3.5)) {\r\n  check$error(\"Povpre\u010dna masa mo\u0161kih je napa\u010dna.\")\r\n} else if(isTRUE(abs(18.75 - sd(podatki[podatki$spol == \"M\", ]$masa)) > 3.5))\r\n  check$error(\"Standardni odklon mase mo\u0161kih je napa\u010den.\")\r\nif(isTRUE(abs(65 - mean(podatki[podatki$spol == \"Z\", ]$masa)) > 3.5)) {\r\n  check$error(\"Povpre\u010dna masa \u017eensk je napa\u010dna.\")\r\n} else if(isTRUE(abs(16.25 - sd(podatki[podatki$spol == \"Z\", ]$masa)) > 3.5))\r\n  check$error(\"Standardni odklon mase \u017eensk je napa\u010den.\")"
    }
  }, 
  {
    "pk": 906, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `polinom(x)`, ki izra\u010duna vrednost polinoma in\nnjegovega odvoda v podani to\u010dki za polinom $p(x)$.\nFunkcija torej vrne nabor z elementoma $(p(x), p'(x))$.", 
      "timestamp": "2013-01-18 13:22:52", 
      "challenge
      "solution": "def polinom(x):\n    return (x ** 5 - 7 * x ** 4 + 10 * x ** 3 + 3 * x ** 2 - 9 * x + 2,\n            5 * x ** 4 - 28 * x ** 3 + 30 * x ** 2 + 6 * x - 9)", 
      "problem": 306, 
      "validation": "Check.equal(\"\"\"polinom(0)\"\"\", (2, -9))\nCheck.equal(\"\"\"polinom(1)\"\"\", (0, 4))\nCheck.equal(\"\"\"polinom(-1)\"\"\", (-4, 48))\n\nfor x in range(-10, 10):\n    Check.challenge(polinom(x), x)"
    }
  }, 
  {
    "pk": 868, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `razdalja(niz1, niz2)`, ki izra\u010duna Levenshteinovo\nrazdaljo med nizoma `niz1` in `niz2`.", 
      "timestamp": "2012-11-27 08:16:01", 
      "challenge": "[]", 
      "solution": "def razdalja(a, b):\n    n = len(a)\n    m = len(b)\n\n    c = [(m + 1) * [0] for i in range(n + 1)]\n    for i in range(0, n + 1): c[i][0] = i\n    for j in range(1, m + 1): c[0][j] = j\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            d = c[i - 1][j - 1]\n            if a[i - 1] != b[j - 1]: d += 1\n            if c[i][j - 1] + 1 < d: d = c[i][j - 1] + 1\n            if c[i - 1][j] + 1 < d: d = c[i - 1][j] + 1\n            c[i][j] = d\n    return c[n][m]", 
      "problem": 282, 
      "validation": "Check.equal(\"razdalja('mamica', 'babica')\", 2)\nCheck.equal(\"razdalja('balet', 'kotlet')\", 3)\nCheck.equal(\"razdalja('ornitologija', 'otorinolaringolog')\", 12)"
    }
  }, 
  {
    "pk": 685, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `jePermutacija(sezsez)`, ki ugotovi, ali dan seznam\nseznamov `sezsez` predstavlja cikle neke permutacije. Torej, ali se vsak\nelement od $1$ do $n$ (kjer je $n$ skupna dol\u017eina vseh seznamov) v\nciklih pojavi natanko enkrat?", 
      "timestamp": "2012-06-10 18:18:09", 
      "challenge": "[]", 
      "solution": "def jePermutacija(sezsez):\n    elementi = sum(sezsez, [])\n    n = len(elementi)\n    return all(x in elementi for x in range(1, n + 1))", 
      "problem": 223, 
      "validation": "Check.equal('jePermutacija([[1, 4], [2, 5, 3]])', True)\nCheck.equal('jePermutacija([[1, 4, 2, 5, 3]])', True)\nCheck.equal('jePermutacija([[2, 4, 5], [1, 3]])', True)\nCheck.equal('jePermutacija([[1, 4], [2, 5]])', False)\nCheck.equal('jePermutacija([[1, 3], [2, 3]])', False)"
    }
  }, 
  {
    "pk": 889, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `dvodelen(g)`, ki preveri, ali je graf `g` dvodelen.\nGraf `g` naj bo neute\u017een, zato vrednosti slovarjev niso pomembne.", 
      "timestamp": "2013-01-07 12:17:00", 
      "challenge": "[]", 
      "solution": "class NiDvodelen(Exception):\n    pass\n\ndef dvodelen(g):\n    barve = {v: None for v in g}\n    def obisci(v, barva):\n        if barve[v] is None:\n            barve[v] = barva\n            for w in g[v]:\n                obisci(w, not barva)\n        elif barve[v] != barva:\n            raise NiDvodelen\n    for v in g:\n        try:\n            if barve[v] is None:\n                obisci(v, True)\n        except NiDvodelen:\n            return False\n    return True", 
      "problem": 301, 
      "validation": "Check.equal(\"dvodelen({1: {2: 1}, 2: {}})\", True)\nCheck.equal(\"dvodelen({1: {2: 1}, 2: {1: 1}})\", True)\nCheck.equal(\"dvodelen({1: {2: 1, 3: 1}, 2: {1: 1, 3: 1}, 3: {}})\", False)\nCheck.equal(\"dvodelen({1: {2: 1, 3: 1}, 2: {1: 1}, 3: {1: 1}})\", True)\nCheck.equal(\"dvodelen({1: {2: 1}, 2: {3: 1}, 3: {4: 1}, 4: {1: 1}})\", True)"
    }
  }, 
  {
    "pk": 74, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `zlij(u, v)`, ki sprejme urejeni tabeli `u` in `v` ter\nju zlije v novo urejeno tabelo, ki jo vrne. Tabel `u` in `v` naj funkcija\nne spreminja.", 
      "timestamp": "2012-10-24 09:22:27", 
      "challenge": "[]", 
      "solution": "def zlij(u, v):\n    \"\"\"Zlij urejeni tabeli u in v in vrni novo urejeno tabelo.\"\"\"\n    m = len(u)\n    n = len(v)\n    w = [0] * (m + n)\n    i = 0\n    j = 0\n    k = 0\n    while k < m + n:\n        if i < m and (j >= n or u[i] < v[j]):\n            w[k] = u[i]\n            i = i + 1\n        else:\n            w[k] = v[j]\n            j = j + 1\n        k = k + 1\n    return w", 
      "problem": 27, 
      "validation": "Check.equal(\"zlij([1, 2, 3], [4, 5, 6, 7])\", [1,2,3,4,5,6,7])\nCheck.equal(\"zlij([2, 4, 6, 8], [1, 3, 5, 7])\", [1,2,3,4,5,6,7,8])\nCheck.equal(\"zlij([], [2, 5, 10])\", [2,5,10])\nCheck.equal(\"zlij([1], [])\", [1])\nCheck.equal(\"zlij([1, 2, 3], [1, 2, 3])\", [1,1,2,2,3,3])\nCheck.equal(\"zlij([1, 1, 2, 3, 4, 4], [2, 3])\", [1,1,2,2,3,3,4,4])"
    }
  }, 
  {
    "pk": 224, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `tabeliraj(f, n)`, ki vrne seznam vrednosti\n`[f(0), f(1), ..., f(n - 1)]`, pri \u010demer se `f(i)` nadomesti z `None`\nv primeru, da `f(i)` spro\u017ei izjemo.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"None\", \"[None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"], [\"None\", \"[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]\"], [\"None\", \"[2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0]\"], [\"None\", \"[3.0, 1.5, None, 3.0, 1.5, None, 3.0, 1.5, None, 3.0, 1.5, None, 3.0, 1.5, None, 3.0, 1.5, None, 3.0, 1.5]\"], [\"None\", \"[4.0, 2.0, None, 1.0, 4.0, 2.0, None, 1.0, 4.0, 2.0, None, 1.0, 4.0, 2.0, None, 1.0, 4.0, 2.0, None, 1.0]\"], [\"None\", \"[5.0, 2.5, None, 1.25, 1.0, 5.0, 2.5, None, 1.25, 1.0, 5.0, 2.5, None, 1.25, 1.0, 5.0, 2.5, None, 1.25, 1.0]\"], [\"None\", \"[6.0, 3.0, None, 1.5, 1.2, 1.0, 6.0, 3.0, None, 1.5, 1.2, 1.0, 6.0, 3.0, None, 1.5, 1.2, 1.0, 6.0, 3.0]\"], [\"None\", \"[7.0, 3.5, None, 1.75, 1.4, 1.166667, None, 7.0, 3.5, None, 1.75, 1.4, 1.166667, None, 7.0, 3.5, None, 1.75, 1.4, 1.166667]\"], [\"None\", \"[8.0, 4.0, None, 2.0, 1.6, 1.333333, None, None, 8.0, 4.0, None, 2.0, 1.6, 1.333333, None, None, 8.0, 4.0, None, 2.0]\"], [\"None\", \"[9.0, 4.5, None, 2.25, 1.8, 1.5, None, None, None, 9.0, 4.5, None, 2.25, 1.8, 1.5, None, None, None, 9.0, 4.5]\"], [\"None\", \"[10.0, 5.0, None, 2.5, 2.0, 1.666667, None, None, None, None, 10.0, 5.0, None, 2.5, 2.0, 1.666667, None, None, None, None]\"], [\"None\", \"[11.0, 5.5, None, 2.75, 2.2, 1.833333, None, None, None, None, None, 11.0, 5.5, None, 2.75, 2.2, 1.833333, None, None, None]\"], [\"None\", \"[12.0, 6.0, None, 3.0, 2.4, 2.0, None, None, None, None, None, None, 12.0, 6.0, None, 3.0, 2.4, 2.0, None, None]\"], [\"None\", \"[13.0, 6.5, None, 3.25, 2.6, 2.166667, None, None, None, None, None, None, None, 13.0, 6.5, None, 3.25, 2.6, 2.166667, None]\"], [\"None\", \"[14.0, 7.0, None, 3.5, 2.8, 2.333333, None, None, None, None, None, None, None, None, 14.0, 7.0, None, 3.5, 2.8, 2.333333]\"], [\"None\", \"[15.0, 7.5, None, 3.75, 3.0, 2.5, None, None, None, None, None, None, None, None, None, 15.0, 7.5, None, 3.75, 3.0]\"], [\"None\", \"[16.0, 8.0, None, 4.0, 3.2, 2.666667, None, None, None, None, None, None, None, None, None, None, 16.0, 8.0, None, 4.0]\"], [\"None\", \"[17.0, 8.5, None, 4.25, 3.4, 2.833333, None, None, None, None, None, None, None, None, None, None, None, 17.0, 8.5, None]\"], [\"None\", \"[18.0, 9.0, None, 4.5, 3.6, 3.0, None, None, None, None, None, None, None, None, None, None, None, None, 18.0, 9.0]\"], [\"None\", \"[19.0, 9.5, None, 4.75, 3.8, 3.166667, None, None, None, None, None, None, None, None, None, None, None, None, None, 19.0]\"], [\"None\", \"[20.0, 10.0, None, 5.0, 4.0, 3.333333, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"], [\"None\", \"[21.0, 10.5, None, 5.25, 4.2, 3.5, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"], [\"None\", \"[22.0, 11.0, None, 5.5, 4.4, 3.666667, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"], [\"None\", \"[23.0, 11.5, None, 5.75, 4.6, 3.833333, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"], [\"None\", \"[24.0, 12.0, None, 6.0, 4.8, 4.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"], [\"None\", \"[25.0, 12.5, None, 6.25, 5.0, 4.166667, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"], [\"None\", \"[26.0, 13.0, None, 6.5, 5.2, 4.333333, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"], [\"None\", \"[27.0, 13.5, None, 6.75, 5.4, 4.5, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"], [\"None\", \"[28.0, 14.0, None, 7.0, 5.6, 4.666667, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"], [\"None\", \"[29.0, 14.5, None, 7.25, 5.8, 4.833333, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"], [\"None\", \"[30.0, 15.0, None, 7.5, 6.0, 5.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"], [\"None\", \"[31.0, 15.5, None, 7.75, 6.2, 5.166667, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"], [\"None\", \"[32.0, 16.0, None, 8.0, 6.4, 5.333333, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"], [\"None\", \"[33.0, 16.5, None, 8.25, 6.6, 5.5, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"], [\"None\", \"[34.0, 17.0, None, 8.5, 6.8, 5.666667, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"], [\"None\", \"[35.0, 17.5, None, 8.75, 7.0, 5.833333, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"], [\"None\", \"[36.0, 18.0, None, 9.0, 7.2, 6.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"], [\"None\", \"[37.0, 18.5, None, 9.25, 7.4, 6.166667, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"], [\"None\", \"[38.0, 19.0, None, 9.5, 7.6, 6.333333, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"], [\"None\", \"[39.0, 19.5, None, 9.75, 7.8, 6.5, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"], [\"None\", \"[40.0, 20.0, None, 10.0, 8.0, 6.666667, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"], [\"None\", \"[41.0, 20.5, None, 10.25, 8.2, 6.833333, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"], [\"None\", \"[42.0, 21.0, None, 10.5, 8.4, 7.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"], [\"None\", \"[43.0, 21.5, None, 10.75, 8.6, 7.166667, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"], [\"None\", \"[44.0, 22.0, None, 11.0, 8.8, 7.333333, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"], [\"None\", \"[45.0, 22.5, None, 11.25, 9.0, 7.5, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"], [\"None\", \"[46.0, 23.0, None, 11.5, 9.2, 7.666667, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"], [\"None\", \"[47.0, 23.5, None, 11.75, 9.4, 7.833333, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"], [\"None\", \"[48.0, 24.0, None, 12.0, 9.6, 8.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"], [\"None\", \"[49.0, 24.5, None, 12.25, 9.8, 8.166667, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"]]", 
      "solution": "def tabeliraj(f, n):\n    # definiramo si pomo\u017eno funkcijo, ki se obna\u0161a kot f, le da v primeru\n    # napak vrne None\n    def varna_f(i):\n        try: return f(i)\n        except: return None\n\n    return [varna_f(i) for i in range(n)]", 
      "problem": 66, 
      "validation": "Check.equal(\"tabeliraj(lambda i: 100 / (i % 3), 10)\", [None, 100, 50, None, 100, 50, None, 100, 50, None])\nCheck.equal(\"tabeliraj(lambda i: ['jabolko', 'banana', 'kamen', 'limona'][i], 10)\", ['jabolko', 'banana', 'kamen', 'limona', None, None, None, None, None, None])\n\nfor i in range(50):\n    Check.challenge(tabeliraj(lambda j: i / [1, 2, 0, 4, 5, 6][j % i], 20))"
    }
  }, 
  {
    "pk": 340, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `poudari(naslov)`, ki vrne naslov, poudarjen tako,\nda so vse \u010drke velike in med seboj lo\u010dene s presledki. Presledke\nobravnavajte tako kot ostale znake (spremenijo se v trojni presledek).\nPazite, da se niz ne kon\u010da s presledkom.\n\n_Na primer_: klic `poudari(\"Zadnja novica\")` naj vrne niz\n`\"Z A D N J A   N O V I C A\"`.", 
      "timestamp": "2012-03-22 11:22:54", 
      "challenge": "[]", 
      "solution": "def poudari(naslov):\n    poudarjen = ''\n    for z in naslov:\n        poudarjen += z.upper()\n        poudarjen += \" \"\n    return poudarjen[:-1]", 
      "problem": 116, 
      "validation": "Check.equal(\"poudari('Zadnja novica')\", 'Z A D N J A   N O V I C A')\nCheck.equal(\"poudari('Podkupnine vsepovsod')\", 'P O D K U P N I N E   V S E P O V S O D')"
    }
  }, 
  {
    "pk": 564, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Napi\u0161i funkcijo `collatz(k)`, ki rekurzivno povezuje \u010dlene Collatzovega zaporedja, tj. $a_{i+1}=collatz(a_i)$.", 
      "timestamp": "2012-03-19 08:36:42", 
      "challenge": "[]", 
      "solution": "def collatz(k):\r\n    if k%2==0:\r\n        return k//2\r\n    else:\r\n        return 3*k+1", 
      "problem": 186, 
      "validation": "Check.equal('collatz(1)', 4)\r\nCheck.equal('collatz(2)', 1)\r\nCheck.equal('collatz(42)', 21)"
    }
  }, 
  {
    "pk": 39, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `identiteta(n)`, ki vrne identi\u010dno matriko z\ndimenzijami `n` \u00d7 `n`.", 
      "timestamp": "2012-10-11 12:20:47", 
      "challenge": "[]", 
      "solution": "def identiteta(n):\n    return [[1 if i == j else 0 for i in range(n)] for j in range(n)]", 
      "problem": 20, 
      "validation": "Check.equal('identiteta(1)', [[1]])\nCheck.equal('identiteta(2)', [[1, 0], [0, 1]])\nCheck.equal('identiteta(4)', [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]])\n##Check.challenge(identiteta(25))"
    }
  }, 
  {
    "pk": 834, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `je.veljaven(dan, mesec, leto)`, ki vrne `TRUE`, \u010de\nje datum `dan`. `mesec`. `leto` veljaven, in `FALSE`, \u010de ni.\n\nPri izra\u010dunu vam ni treba paziti na za\u010detek Gregorijanskega koledarja,\npazite pa na [prestopnost](http://sl.wikipedia.org/wiki/Prestopno_leto).", 
      "timestamp": "2012-10-30 10:21:31", 
      "challenge": "[]", 
      "solution": "je.veljaven <- function(dan, mesec, leto) {\n  # najprej obravnavamo primer, ko je mesec februar\n  if(mesec == 2) {\n    # test za prestopnost leta\n    if((leto %% 4 == 0 && leto %% 100 != 0) || (leto %% 400 == 0))\n      return(dan <= 29)\n    else\n      return(dan <= 28)\n  }\n  \n  # nato obravnavamo primer, ko ima mesec 30 dni\n  if(mesec %in% c(4, 6, 9, 11))\n    return(dan <= 30)\n  \n  # v preostalih primerih mora biti mesec kvecjemu 12 in dan kvecjemu 31\n  return(mesec <= 12 && dan <= 31)\n}", 
      "problem": 270, 
      "validation": "check$equal(je.veljaven(24, 11, 2007), TRUE)\ncheck$equal(je.veljaven(11, 24, 2007), FALSE)\ncheck$equal(je.veljaven(31, 4, 2001), FALSE)\ncheck$equal(je.veljaven(29, 2, 428), TRUE)\ncheck$equal(je.veljaven(29, 2, 1900), FALSE)\ncheck$equal(je.veljaven(29, 2, 2000), TRUE)\ncheck$equal(je.veljaven(16, 14, 456), FALSE)"
    }
  }, 
  {
    "pk": 512, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Podnaloga (a)", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "class Permutacija(Permutacija):\n\n    def __init__(self, s):\n        self.s = s", 
      "problem": 166, 
      "validation": "Check.equal(\"\"\"Permutacija([0,1,2]) != None\"\"\", True)"
    }
  }, 
  {
    "pk": 563, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite metodo `najvecjaAktivna(self, zacetek, konec)`, ki po zgoraj\nopisanem postopku izra\u010duna vrednost maksimalnega (`zacetek`, `konec`)-toka\nv danem grafu.", 
      "timestamp": "2012-03-20 16:37:08", 
      "challenge": "[]", 
      "solution": "class Graf(Graf):\n    def najvecjaAktivna(self, zacetek, konec):\n            return 5", 
      "problem": 185, 
      "validation": "primer = Graf()\nfor x, y in [(0, 0), (1, 1), (2, 0.75), (3, 0), (1, -1), (2, -0.75)]:\n    primer.dodajTocko(50 + 150 * x, 200 + 150 * y)\nfor zac, kon, v in [(0, 1, 6), (1, 2, 3), (2, 3, 10), (0, 4, 4), (4, 5, 2), (5, 3, 1), (1, 5, 5), (4, 2, 1)]:\n    primer.dodajPovezavo(primer.tocke[zac], primer.tocke[kon], usmerjena=True,\n                         vrednost=v)\n\nCheck.equal(\"primer.najvecjaAktivna(primer.tocke[0], primer.tocke[3])\", 5, env={'primer': primer})"
    }
  }, 
  {
    "pk": 193, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "**[Dijsktrov algoritem](http://en.wikipedia.org/wiki/Dijkstra%27s_algorithm)**\n\nSestavi funkcijo `dijkstra(g,i,j)` ki vrne ceno najkraj\u0161e poti\nmed vozli\u0161\u010dema `i` in `j` v grafu `g`. Graf je predstavljen s\nslovarjem sosedov. Algoritem poi\u0161\u010de najcenej\u0161o pot z dinami\u010dnim\nprogramiranjem:\n\n1. Naj bo `r` tabela do sedaj najdenih cen najcenej\u0161ih poti od\n   vozli\u0161\u010da `i`, torej je `r[k]` do sedaj najdena cena najcenej\u0161e\n   poti med `i` in `k`. Na za\u010detku je `r[i] == 0` in `r[k] == inf`\n   za `k != i`.\n\n2. Naj bo `s` mno\u017eica vseh vozli\u0161\u010d, ki jih \u0161e nismo pregledali. Na\n   za\u010detku vsebuje `s` vsa vozli\u0161\u010da.\n\n3. Dokler je `s` neprazna mno\u017eica, ponavljamo:\n\n     1. Naj bo `k` tisto vozli\u0161\u010de iz `s`, ki ima najmanj\u0161o vrednost `r[k]`.\n     2. \u010ce je `r[k] == inf`, vrni `inf`, ker vozli\u0161\u010di `i` in `j` nista\n        povezani s potjo.\n     3. \u010ce je `k == j`, vrni rezultat `r[k]`.\n     4. Odstrani `k` iz `s`.\n     5. Za vsakega soseda `m` vozli\u0161\u010da `k`:\n\n          - naj bo `d` cena povezave od `k` do `m`\n          - \u010de je `d + r[k] < r[m]`, potem nastavimo `r[m] = r[k] + d`\n\n4. Vrni `r[j]`.\n\nOpomba: ko se zanka kon\u010da, tabela `r` vsebuje *vse* cene najcenej\u0161ih\npoti od `i`. Torej bi lahko z manj\u0161o spremembo algoritma izra\u010dunali\nvse cene najcenej\u0161ih poti (ne bi preverjali, ali je `k == j`v koraku\n3.3) in kot rezultat vrnili tabelo `r`.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"None\", \"0\"], [\"None\", \"2\"], [\"None\", \"0\"], [\"None\", \"3\"], [\"None\", \"2\"], [\"None\", \"4\"], [\"None\", \"3\"], [\"None\", \"3\"], [\"None\", \"4\"], [\"None\", \"4\"], [\"None\", \"6\"], [\"None\", \"5\"], [\"None\", \"7\"], [\"None\", \"7\"], [\"None\", \"8\"], [\"None\", \"8\"], [\"None\", \"7\"], [\"None\", \"9\"], [\"None\", \"8\"], [\"None\", \"0\"], [\"None\", \"1\"], [\"None\", \"0\"], [\"None\", \"1\"], [\"None\", \"3\"], [\"None\", \"7\"], [\"None\", \"2\"], [\"None\", \"2\"], [\"None\", \"8\"], [\"None\", \"6\"], [\"None\", \"3\"], [\"None\", \"6\"], [\"None\", \"8\"], [\"None\", \"9\"], [\"None\", \"7\"], [\"None\", \"7\"], [\"None\", \"10\"], [\"None\", \"5\"], [\"None\", \"8\"], [\"None\", \"0\"], [\"None\", \"inf\"], [\"None\", \"0\"], [\"None\", \"inf\"], [\"None\", \"6\"], [\"None\", \"inf\"], [\"None\", \"4\"], [\"None\", \"4\"], [\"None\", \"12\"], [\"None\", \"12\"], [\"None\", \"20\"], [\"None\", \"10\"], [\"None\", \"16\"], [\"None\", \"inf\"], [\"None\", \"22\"], [\"None\", \"inf\"], [\"None\", \"16\"], [\"None\", \"inf\"], [\"None\", \"14\"]]", 
      "solution": "def dijkstra(g,i,j):\n    n = len(g) # \u0160tevilo vozli\u0161\u010d\n    r = [inf for k in range(n)]\n    r[i] = 0\n    s = set(range(n))\n    while len(s) > 0:\n        k = None\n        for l in s:\n            if k is None or r[l] < r[k]:\n                k = l\n        if r[k] == inf or k == j: return r[k]\n        s.remove(k)\n        for (m,d) in g[k]:\n            if d + r[k] < r[m]:\n                r[m] = r[k] + d\n    return r[j]", 
      "problem": 59, 
      "validation": "Check.equal(\"\"\"dijkstra({0:[(1,4)], 1:[(2,3)], 2:[]}, 0, 2)\"\"\", 7)\nCheck.equal(\"\"\"dijkstra({0:[(1,4)], 1:[(2,3)], 2:[]}, 2, 0)\"\"\", inf)\nCheck.equal(\"\"\"dijkstra({0:[(1,4), (2,5)], 1:[(2,3)], 2:[]}, 0, 2)\"\"\", 5)\nCheck.equal(\"\"\"dijkstra({0:[(1,4), (2,8)], 1:[(1,1), (2,3)], 2:[]}, 0, 2)\"\"\", 7)\nCheck.equal(\"\"\"dijkstra({0:[(1,4), (2,2)], 1:[(3,3)], 2:[(1,1),(3,5)], 3:[(1,1),(2,1)]}, 0, 3)\"\"\", 6)\n\nfor (a,b) in [(1,2), (1,3), (4,6)]:\n    for n in range(1, 20):\n        Check.challenge(dijkstra({i : [((i+a)%n, b), ((i+b)%n, a)] for i in range(n)},n//2,n//3))"
    }
  }, 
  {
    "pk": 25, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `gcd(m, n)`, ki z Evklidovim algoritmom izra\u010duna\r\nnajve\u010dji skupni delitelj \u0161tevil `m` in `n`.", 
      "timestamp": "2012-10-22 10:22:31", 
      "challenge": "[]", 
      "solution": "gcd <- function(m, n) {\r\n  while(n != 0) {\r\n    ostanek <- m %% n\r\n    m <- n\r\n    n <- ostanek\r\n  }\r\n  return(m)\r\n}\r\n# lahko pa bi uporabili tudi rekurzijo\r\ngcd <- function(m, n) {\r\n  if(n != 0) {\r\n    return(gcd(n, m %% n))\r\n  } else {\r\n    return(m)\r\n  }\r\n}", 
      "problem": 17, 
      "validation": "check$equal(gcd(42, 12), 6)\r\ncheck$equal(gcd(13, 5), 1)\r\ncheck$equal(gcd(8, 20), 4)"
    }
  }, 
  {
    "pk": 890, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `najkrajsaPot(g, k)`, ki vrne slovar slovarjev,\r\nv katerem so vrednosti cene najcenej\u0161e poti dol\u017eine `k` med dvema\r\nvozli\u0161\u010dema v grafu `g`.\r\n\r\nPri tem je `g` prav tako predstavljen s slovarjem slovarjev, v katerem\r\nso klju\u010di vozli\u0161\u010da grafa, vrednosti pa slovarji, v katerih so klju\u010di\r\nsosedi, vrednosti pa cene povezav.\r\n\r\n**Pozor:** naloga ni opremljena s testi, zato morate pravilnost\r\npreveriti sami.", 
      "timestamp": "2013-01-07 12:47:06", 
      "challenge": "[]", 
      "solution": "pass", 
      "problem": 302, 
      "validation": ""
    }
  }, 
  {
    "pk": 882, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite metodo `naloga3(t)`, kot je zapisano v navodilih.", 
      "timestamp": "2012-12-10 13:47:12", 
      "challenge": "[]", 
      "solution": "def naloga3(t):\n    if len(t) == 0:\n        return None\n    elif len(t) == 1:\n        return t[0]\n    elif t[0] < t[1]:\n        return t[0]\n    elif t[-1] < t[-2]:\n        return t[-1]\n    else:\n        i = 0\n        j = len(t)\n        while j - i >= 3:\n            k = (i + j) // 2\n            if t[k] > t[k - 1]:\n                j = k\n            else:\n                i = k\n        return min(t[i:j])", 
      "problem": 273, 
      "validation": "Check.equal(\"naloga3([4, 3, 2, 5, 6])\", 2)\nCheck.equal(\"naloga3([10, 4, 3, 2, 5, 6, 9])\", 2)\nCheck.equal(\"naloga3([6, 5, 4, 3, 7, 8])\", 3)"
    }
  }, 
  {
    "pk": 173, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Dan je spisek oseb, urejen po abecedi (najprej po priimkih, nato po imenih):\n\n* Ana Ban\n* Mojca Ban\n* Bine Bobi\u010d\n* Alen Drenik\n* Janko Kova\u010d\n* Ervin Lu\u017ear\n* ...\n\nSpisek predstavimo z dvema tabelama, ena vsebuje imena in druga priimke:\n\n    ime = ['Ana', 'Mojca', 'Bine', 'Alen', 'Janko', 'Ervin', ...]\n    priimek = ['Ban', 'Ban', 'Bobi\u010d', 'Drenik', 'Kova\u010d', 'Lu\u017ear', ...]\n\nTako lahko dobimo ime in priimek k-te osebe v spisku z `ime[k], priimek[k]`.\n\nSestavi funkcijo `najdi(ime, priimek, i, p)`, ki sprejme tak\u0161ni tabeli imen in\npriimkov ime in priimek, ter vrne *indeks*, na katerem se pojavlja oseba z\nimenom `i` in priimkom `p`. Funkcija naj i\u0161\u010de s postopkom *bisekcije*.\nKaj vrne, \u010de take osebe ni? Primer uporabe:\n\n    >>> ime = ['Ana', 'Mojca', 'Bine', 'Alen', 'Janko', 'Ervin']\n    >>> priimek = ['Ban', 'Ban', 'Bobi\u010d', 'Drenik', 'Kova\u010d', 'Lu\u017ear']\n    >>> najdi(ime, priimek, 'Mojca', 'Ban')\n    1", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"None\", \"None\"], [\"None\", \"None\"], [\"None\", \"19\"]]", 
      "solution": "def najdi(ime, priimek, i, p):\n    assert (len(ime) == len(priimek)) # preverimo, da sta dolzini tabel enaki\n    u = 0\n    v = len(ime)\n    while u < v:\n        w = (u + v) // 2\n        if priimek[w] == p and ime[w] == i: return w\n        elif priimek[w] < p or (priimek[w] == p and ime[w] < i):\n            u = w + 1\n        else:\n            v = w - 1\n    return None", 
      "problem": 52, 
      "validation": "Check.equal(\"\"\"najdi(['Ana', 'Mojca', 'Bine', 'Alen', 'Janko', 'Ervin'],\n                     ['Ban', 'Ban', 'Bobi\u010d', 'Drenik', 'Kova\u010d', 'Lu\u017ear'],\n                     'Mojca', 'Ban')\"\"\", 1)\nCheck.equal(\"\"\"najdi(['Ana', 'Mojca', 'Bine', 'Alen', 'Janko', 'Ervin'],\n                     ['Ban', 'Ban', 'Bobi\u010d', 'Drenik', 'Kova\u010d', 'Lu\u017ear'],\n                     'Ervin', 'Lu\u017ear')\"\"\", 5)\nCheck.equal(\"\"\"najdi(['Ana', 'Mojca', 'Bine', 'Alen', 'Janko', 'Ervin'],\n                     ['Ban', 'Ban', 'Bobi\u010d', 'Drenik', 'Kova\u010d', 'Lu\u017ear'],\n                     '', '')\"\"\", None)\nCheck.equal(\"\"\"najdi(['Ana', 'Mojca', 'Bine', 'Alen', 'Janko', 'Ervin'],\n                     ['Ban', 'Ban', 'Bobi\u010d', 'Drenik', 'Kova\u010d', 'Lu\u017ear'],\n                     'mojca', 'ban')\"\"\", None)\nCheck.equal(\"\"\"najdi(['Ana', 'Mojca', 'Bine', 'Alen', 'Janko', 'Ervin'],\n                     ['Ban', 'Ban', 'Bobi\u010d', 'Drenik', 'Kova\u010d', 'Lu\u017ear'],\n                     '\u017diga', '\u017digon')\"\"\", None)\nCheck.equal(\"\"\"najdi([], [], 'Josip', 'Broz')\"\"\", None)\nCheck.equal(\"\"\"najdi(['Josip'], ['Broz'], 'Josip', 'Broz')\"\"\", 0)\n\nCheck.challenge(\n    najdi(['Alja', 'Andrej', 'Andrej', 'Barbara', 'Eva', 'Eva', 'Filip', 'Gregor', 'Jure', 'KATJA', 'Matej', 'Mateja', 'Naja', 'Nejc', 'Nina', 'Samo', 'Selena', 'Tomaz', 'Ur\u0161ka', 'Ziva'],\n          ['Aleksandrov', 'Arli\u010d', 'Bajcer', 'Bauer', 'Bevc', 'Bobi\u010d', 'Bobnar', 'Bohanec', 'Borstnik', 'Breznik', 'Cerinsek', 'Derca', 'Dervi\u0161i\u0107', 'Dezman', 'Drnovsek', 'Dvorsak', 'Jereb', 'KUSTER', 'Kozarski', 'Kralj'],\n          'Matej', 'Aleksandrov'))\n\nCheck.challenge(\n    najdi(['Alja', 'Andrej', 'Andrej', 'Barbara', 'Eva', 'Eva', 'Filip', 'Gregor', 'Jure', 'KATJA', 'Matej', 'Mateja', 'Naja', 'Nejc', 'Nina', 'Samo', 'Selena', 'Tomaz', 'Ur\u0161ka', 'Ziva'],\n          ['Aleksandrov', 'Arli\u010d', 'Bajcer', 'Bauer', 'Bevc', 'Bobi\u010d', 'Bobnar', 'Bohanec', 'Borstnik', 'Breznik', 'Cerinsek', 'Derca', 'Dervi\u0161i\u0107', 'Dezman', 'Drnovsek', 'Dvorsak', 'Jereb', 'KUSTER', 'Kozarski', 'Kralj'],\n          'MATEJ', 'Aleksandrov'))\n\nCheck.challenge(\n    najdi(['Alja', 'Andrej', 'Andrej', 'Barbara', 'Eva', 'Eva', 'Filip', 'Gregor', 'Jure', 'KATJA', 'Matej', 'Mateja', 'Naja', 'Nejc', 'Nina', 'Samo', 'Selena', 'Tomaz', 'Ur\u0161ka', 'Ziva'],\n          ['Aleksandrov', 'Arli\u010d', 'Bajcer', 'Bauer', 'Bevc', 'Bobi\u010d', 'Bobnar', 'Bohanec', 'Borstnik', 'Breznik', 'Cerinsek', 'Derca', 'Dervi\u0161i\u0107', 'Dezman', 'Drnovsek', 'Dvorsak', 'Jereb', 'KUSTER', 'Kozarski', 'Kralj'],\n          'Ziva', 'Kralj'))"
    }
  }, 
  {
    "pk": 725, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `naloga4(sez, k)`, kot je zapisano v navodilih.", 
      "timestamp": "2012-07-11 09:43:21", 
      "challenge": "[]", 
      "solution": "def naloga4(sez, k):\n    velikost = 1\n    for m in sez:\n        velikost *= len(m)\n    k -= 1\n\n    if k < 0 or k >= velikost:\n        return\n\n    nterica = ()\n    for m in sez:\n        m = list(m)\n        m.sort()\n        velikost //= len(m)\n        i = k // velikost\n        k %= velikost\n        nterica += (m[i], )\n    return nterica", 
      "problem": 233, 
      "validation": "Check.equal(\"naloga4([{1, 2}, {3, 4}], 1)\", (1, 3))\nCheck.equal(\"naloga4([{1, 2}, {3, 4}], 3)\", (2, 3))\nCheck.equal(\"naloga4([{1, 2}, {3, 4}], 0)\", None)\nCheck.equal(\"naloga4([{1, 2}, {3, 4}], 6)\", None)\nCheck.equal(\"naloga4([{1, 5, 9}, {2, 4}, {1, 4}], 1)\", (1, 2, 1))\nCheck.equal(\"naloga4([{1, 5, 9}, {2, 4}, {1, 4}], 7)\", (5, 4, 1))\nCheck.equal(\"naloga4([{1, 5, 9}, {2, 4}, {1, 4}], 12)\", (9, 4, 4))"
    }
  }, 
  {
    "pk": 666, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `fakulteta(n)`, ki izra\u010duna fakulteto \u0161tevila `n`.\nNalogo re\u0161ite z rekurzijo, torej brez uporabe zank `for` oziroma `while`.", 
      "timestamp": "2012-05-21 12:50:45", 
      "challenge": "[]", 
      "solution": "def fakulteta(n):\n    if n == 0:\n        return 1\n    else:\n        return n * fakulteta(n - 1)", 
      "problem": 216, 
      "validation": "if \"for\" in Check.current['solution']:\n    Check.error(\"Re\u0161itev vsebuje zanko for.\")\nelif \"while\" in Check.current['solution']:\n    Check.error(\"Re\u0161itev vsebuje zanko while.\")\nCheck.equal(\"\"\"fakulteta(3)\"\"\", 6)\nCheck.equal(\"\"\"fakulteta(8)\"\"\", 40320)\nCheck.equal(\"\"\"fakulteta(10)\"\"\", 3628800)"
    }
  }, 
  {
    "pk": 172, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `najdi(a,x)`, ki v dani urejeni tabeli `a`,\nv kateri se *smejo elementi ponavljati*, poi\u0161\u010de obmo\u010dje\n`a[i:j]`, na katerem se pojavlja `x`. Funkcija naj vrne par `(i,j)`,\nali `None`, \u010de se `x` v tabeli ne pojavi. Funkcija mora delovati v\n\u010dasu $O(\\log n)$, kjer je $n$ dol\u017eina tabele `a`.\n\nNamig: uporabi bisekcijo dvakrat, vsaki\u010d poi\u0161\u010di en rob obmo\u010dja.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"None\", \"[(0, 460), (460, 920), (920, 1380), (1380, 1840), (1840, 2300), (2300, 2759), (2759, 3219), (3219, 3679), (3679, 4139), (4139, 4599), (4599, 5059), (5059, 5518), (5518, 5978), (5978, 6438), (6438, 6898), (6898, 7358), (7358, 7817), (7817, 8277), (8277, 8737), (8737, 9197), (9197, 9657), (9657, 10000), None]\"]]", 
      "solution": "def najdi(a,x):\n    m = 0\n    n = len(a)\n    while m < n:\n        k = (m + n) // 2\n        if a[k] < x: m = k + 1\n        else: n = k\n    if m > n: return None\n    i = m\n    n = len(a)\n    while m < n:\n        k = (m + n) // 2\n        if a[k] > x: n = k\n        else: m = k + 1\n    if m > n: return None\n    j = n\n    return (i,j) if i < j else None", 
      "problem": 51, 
      "validation": "Check.equal(\"\"\"najdi([1, 2, 2, 5, 6, 7, 7, 7, 8, 9, 10], 7)\"\"\", (5,8))\nCheck.equal(\"\"\"najdi([1, 2, 2, 5, 6, 7, 7, 7, 8, 9, 10], 1)\"\"\", (0,1))\nCheck.equal(\"\"\"najdi([1, 2, 2, 5, 6, 7, 7, 7, 8, 9, 10], 10)\"\"\", (10,11))\nCheck.equal(\"\"\"najdi([1, 2, 2, 5, 6, 7, 7, 7, 8, 9, 10], 2)\"\"\", (1,3))\nCheck.equal(\"\"\"najdi([1, 2, 2, 5, 6, 7, 7, 7, 8, 9, 10], 4)\"\"\", None)\nCheck.equal(\"\"\"najdi([1, 2, 2, 5, 6, 7, 7, 7, 8, 9, 10], 0)\"\"\", None)\nCheck.equal(\"\"\"najdi([1, 2, 2, 5, 6, 7, 7, 7, 8, 9, 10], 20)\"\"\", None)\n\nCheck.challenge([najdi([(17 * i) // 7817 for i in range(10000)], j) for j in range(23)])"
    }
  }, 
  {
    "pk": 321, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavi funkcijo `kroga(x1,y1,r1,x2,y2,r2)`, ki dobi za parametre\nsredi\u0161\u010di in polmera dveh krogov ter preveri, ali sta kroga lo\u010dena,\nse dotikata, ali pa imata skupno ve\u010d kot eno to\u010dko.\nMetoda naj za lo\u010dena kroga vrne 0, \u010de se dotikata, naj vrne 1 in \u010de\nimata skupno ve\u010d kot eno to\u010dko, naj vrne 2.\n\n    >>> kroga(3, 5, 2, 6, 7, 3)\n    2\n    >>> kroga(3, 5, 2, 8, 5, 3)\n    1\n    >>> kroga(3, 5, 2, 8, 7, 3)\n    0", 
      "timestamp": "2012-03-14 13:37:08", 
      "challenge": "[[\"None\", \"2\"], [\"None\", \"2\"], [\"None\", \"2\"], [\"None\", \"2\"], [\"None\", \"2\"], [\"None\", \"2\"], [\"None\", \"2\"], [\"None\", \"2\"], [\"None\", \"2\"], [\"None\", \"2\"], [\"None\", \"2\"], [\"None\", \"2\"], [\"None\", \"2\"], [\"None\", \"2\"], [\"None\", \"2\"], [\"None\", \"2\"], [\"None\", \"2\"], [\"None\", \"2\"], [\"None\", \"0\"], [\"None\", \"2\"], [\"None\", \"2\"], [\"None\", \"2\"], [\"None\", \"2\"], [\"None\", \"2\"], [\"None\", \"2\"], [\"None\", \"0\"], [\"None\", \"0\"], [\"None\", \"2\"], [\"None\", \"0\"], [\"None\", \"2\"], [\"None\", \"2\"], [\"None\", \"2\"], [\"None\", \"2\"], [\"None\", \"2\"], [\"None\", \"2\"], [\"None\", \"2\"], [\"None\", \"0\"], [\"None\", \"2\"], [\"None\", \"2\"], [\"None\", \"2\"], [\"None\", \"0\"], [\"None\", \"2\"], [\"None\", \"2\"], [\"None\", \"2\"], [\"None\", \"2\"], [\"None\", \"2\"], [\"None\", \"2\"], [\"None\", \"2\"], [\"None\", \"2\"], [\"None\", \"2\"], [\"None\", \"2\"]]", 
      "solution": "def kroga(x1,y1,r1,x2,y2,r2):\n  razdalja = (x1-x2)**2  + (y1-y2)**2\n  razdalja1 = (r1 + r2)**2\n  if razdalja > razdalja1:\n    return 0\n  elif razdalja == razdalja1:\n    return 1\n  else:\n    return 2", 
      "problem": 106, 
      "validation": "Check.equal(\"kroga(3, 5, 2, 6, 7, 3)\",2)\nCheck.equal(\"kroga(3, 5, 2, 8, 5, 3)\",1)\nCheck.equal(\"kroga(3, 5, 2, 8, 7, 3)\",0)\n\nrng=[1103527590]\nfor i in range(50): rng.append((rng[-1]*1103515245+12345)%2**32)\npodatki = [(x%17,x%23,x%41,x%13,x%19,x%11) for x in rng]\nfor x in podatki:\n    Check.challenge(kroga(*x))"
    }
  }, 
  {
    "pk": 68, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite vektor `otoki`, ki vsebuje iste podatke kot vektor `islands`,\nle da so povr\u0161ine izra\u017eene v kvadratnih kilometrih.\nV vektor `otoki` dodajte \u0161e Blejski otok.", 
      "timestamp": "2012-10-22 11:44:01", 
      "challenge": "[]", 
      "solution": "otoki <- 1.609344^2 * islands\notoki[\"Blejski otok\"] <- 0.0082", 
      "problem": 263, 
      "validation": "check$equal(round(otoki['Java'], 3), 126.909)\ncheck$equal(round(otoki['Britain'], 3), 217.559)\ncheck$equal(otoki['Blejski otok'], 0.0082)"
    }
  }, 
  {
    "pk": 113, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `predznak(n)`, ki sprejme celo \u0161tevilo `n` in vrne\n1, \u010de je pozitivno, -1 \u010de je \u0161tevilo negativno, in 0, \u010de je \u0161tevilo 0.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"None\", \"[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\"]]", 
      "solution": "def predznak(n):\n    if n > 0:\n        return 1\n    elif n < 0:\n        return -1\n    return 0", 
      "problem": 42, 
      "validation": "Check.equal('predznak(12)', 1)\nCheck.equal('predznak(-3)', -1)\nCheck.equal('predznak(0)', 0)\nCheck.challenge([predznak(i) for i in range(-20, 71)])"
    }
  }, 
  {
    "pk": 883, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite metodo `naloga4a(t, k)`, kot je zapisano v navodilih.", 
      "timestamp": "2012-12-10 14:11:53", 
      "challenge": "[]", 
      "solution": "def naloga4a(t, k):\n    if k > 0:\n        return t[:k] + t[:k - 1:-1]\n    else:\n        return t[::-1]", 
      "problem": 295, 
      "validation": "Check.equal(\"naloga4a([3, 1, 4, 5, 9, 2, 6, 5], 3)\", [3, 1, 4, 5, 6, 2, 9, 5])\nCheck.equal(\"naloga4a([3, 1, 4, 5, 9, 2, 6, 5], 7)\", [3, 1, 4, 5, 9, 2, 6, 5])\nCheck.equal(\"naloga4a([3, 1, 4, 5, 9, 2, 6, 5], 2)\", [3, 1, 5, 6, 2, 9, 5, 4])\nCheck.equal(\"naloga4a([3, 1, 4, 5, 9, 2, 6, 5], 0)\", [5, 6, 2, 9, 5, 4, 1, 3])"
    }
  }, 
  {
    "pk": 519, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Podnaloga (a)", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "def ujemanje(a):\n    if len(a) == 7:\n        return True\n    if len(a) == 4:\n        return False", 
      "problem": 169, 
      "validation": "Check.equal(\"\"\"ujemanje([-1,1,2,3,4,5,6])\"\"\", True)\nCheck.equal(\"\"\"ujemanje([7,8,9,10])\"\"\", False)"
    }
  }, 
  {
    "pk": 796, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `jePrestopno(leto)`, ki preveri, ali je dano\n`leto` prestopno.", 
      "timestamp": "2012-10-01 12:26:03", 
      "challenge": "[[\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"]]", 
      "solution": "def jePrestopno(leto):\n    return leto % 4 == 0 and leto % 100 != 0 or leto % 400 == 0", 
      "problem": 253, 
      "validation": "Check.equal('jePrestopno(1900)', False)\nCheck.equal('jePrestopno(2000)', True)\nCheck.equal('jePrestopno(2004)', True)\nCheck.equal('jePrestopno(2011)', False)\nfor leto in range(1900, 2100):\n    Check.challenge(jePrestopno(leto))"
    }
  }, 
  {
    "pk": 822, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `zlij_rek(sez1, sez2)`, ki rekurzivno zlije seznama\n`sez1` in `sez2`.", 
      "timestamp": "2012-10-16 09:14:50", 
      "challenge": "[]", 
      "solution": "def zlij_rek(sez1, sez2):\n    if sez1 and sez2:\n        x1, x2 = sez1[0], sez2[0]\n        if x1 <= x2:\n            return [x1] + zlij_rek(sez1[1:], sez2)\n        else:\n            return [x2] + zlij_rek(sez1, sez2[1:])\n    elif sez1:\n        return sez1\n    elif sez2:\n        return sez2\n    else:\n        return []", 
      "problem": 257, 
      "validation": "Check.equal(\"zlij_rek([1, 3, 5], [2, 4, 6])\", [1, 2, 3, 4, 5, 6])\nCheck.equal(\"zlij_rek([5, 3, 1], [6, 4, 2])\", [5, 3, 1, 6, 4, 2])\nCheck.equal(\"zlij_rek([5, 3, 1], [2, 6])\", [2, 5, 3, 1, 6])\nCheck.equal(\"zlij_rek([5, 3, 1], [])\", [5, 3, 1])\nCheck.equal(\"zlij_rek([], [2, 4, 6])\", [2, 4, 6])"
    }
  }, 
  {
    "pk": 916, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite metodo `naloga2a(self)`, kot je zapisano v navodilih.", 
      "timestamp": "2013-02-04 07:49:04", 
      "challenge": "[]", 
      "solution": "class Drevo(Drevo):\n    def psevdo_vsebina(self):\n        return float(\"-inf\") if self.prazno else self.vsebina\n\n    def naloga2a(self):\n        if self.prazno:\n            return True\n        else:\n            return (self.vsebina > self.levo.psevdo_vsebina() and\n                    self.vsebina > self.desno.psevdo_vsebina() and\n                    self.levo.naloga2a() and self.desno.naloga2a())", 
      "problem": 311, 
      "validation": "Check.equal(\"Drevo().naloga2a()\", True)\nCheck.equal(\"Drevo(1).naloga2a()\", True)\nCheck.equal(\"Drevo(2, desno=Drevo(1)).naloga2a()\", True)\nCheck.equal(\"Drevo(1, desno=Drevo(2)).naloga2a()\", False)\nCheck.equal(\"Drevo(7, levo=Drevo(6, levo=Drevo(5), desno=Drevo(4)), desno=Drevo(3, levo=Drevo(2))).naloga2a()\", True)\nCheck.equal(\"Drevo(7, levo=Drevo(6, levo=Drevo(5), desno=Drevo(4)), desno=Drevo(2, levo=Drevo(3))).naloga2a()\", False)\nCheck.equal(\"Drevo(7, levo=Drevo(5, levo=Drevo(6), desno=Drevo(4)), desno=Drevo(2, levo=Drevo(3))).naloga2a()\", False)"
    }
  }, 
  {
    "pk": 764, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `f(x)`, ki za dano celo \u0161tevilo `x` vrne `6x`, pove\u010dan\nza ostanek \u0161tevila `x` pri deljenju z `42`.", 
      "timestamp": "2012-09-05 09:34:47", 
      "challenge": "[[\"None\", \"2023\"], [\"None\", \"154\"], [\"None\", \"525\"], [\"None\", \"1428\"], [\"None\", \"1827\"], [\"None\", \"1120\"], [\"None\", \"1393\"], [\"None\", \"1512\"], [\"None\", \"1323\"], [\"None\", \"1596\"], [\"None\", \"1547\"], [\"None\", \"1722\"], [\"None\", \"175\"], [\"None\", \"1596\"], [\"None\", \"35\"], [\"None\", \"1512\"], [\"None\", \"1729\"], [\"None\", \"1834\"], [\"None\", \"427\"], [\"None\", \"1540\"], [\"None\", \"609\"], [\"None\", \"672\"], [\"None\", \"1057\"], [\"None\", \"1540\"], [\"None\", \"1281\"], [\"None\", \"1778\"], [\"None\", \"2037\"], [\"None\", \"770\"], [\"None\", \"63\"], [\"None\", \"1372\"], [\"None\", \"1883\"], [\"None\", \"1414\"], [\"None\", \"1505\"], [\"None\", \"1246\"], [\"None\", \"1603\"], [\"None\", \"1176\"], [\"None\", \"609\"], [\"None\", \"1806\"], [\"None\", \"259\"], [\"None\", \"1064\"], [\"None\", \"1085\"], [\"None\", \"588\"], [\"None\", \"637\"], [\"None\", \"1246\"], [\"None\", \"1169\"], [\"None\", \"1456\"], [\"None\", \"1799\"], [\"None\", \"1834\"], [\"None\", \"511\"], [\"None\", \"1344\"], [\"None\", \"77\"]]", 
      "solution": "def f(x):\n   return 6*x+(x % 42)", 
      "problem": 245, 
      "validation": "Check.equal(\"f(0)\",0)\nCheck.equal(\"f(1)\",7)\nCheck.equal(\"f(-1)\",35)\nCheck.equal(\"f(3)\",21)\nCheck.equal(\"f(42)\",252)\nCheck.equal(\"f(6)\",42)\n\n_rng=[1287631]\nfor i in range(50): _rng.append((_rng[-1]*1103515245+12345)%2**32)\nfor i in _rng:\n    Check.challenge(f(i%350))"
    }
  }, 
  {
    "pk": 12, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `narcisoidi(d)`, ki sprejme slovar zaljubljenih\nin vrne _mon\u017eico_ tistih, ki ljubijo same sebe.", 
      "timestamp": "2012-10-11 12:16:47", 
      "challenge": "[[\"None\", \"['Ana', 'Davorka']\"]]", 
      "solution": "def narcisoidi(d):\n    return {oseba for oseba in d if oseba in d[oseba]}", 
      "problem": 9, 
      "validation": "Check.equal(\"\"\"narcisoidi({'Ana' : {'Bine','Cene'},\n                          'Bine' : set(),\n                          'Cene' : {'Bine'},\n                          'Davorka' : {'Davorka'},\n                          'Eva' : {'Bine'}})\\n\"\"\", {'Davorka'})\nCheck.equal('narcisoidi({})', set())\nCheck.equal(\"narcisoidi({'Ana':{'Ana','Bine'}})\", {'Ana'})\nCheck.challenge(narcisoidi({'Ana' : {'Bine','Ana','Cene'},\n                            'Bine' : set(),\n                            'Cene' : {'Bine'},\n                            'Davorka' : {'Davorka'},\n                            'Eva' : {'Bine'}}))"
    }
  }, 
  {
    "pk": 231, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `jePrestopno(leto)`, ki preveri, ali je dano\r\n`leto` prestopno.", 
      "timestamp": "2012-12-14 14:57:42", 
      "challenge": "[[\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"]]", 
      "solution": "def jePrestopno(leto):\r\n    return leto % 4 == 0 and leto % 100 != 0 or leto % 400 == 0", 
      "problem": 72, 
      "validation": "Check.equal('jePrestopno(1900)', False)\r\nCheck.equal('jePrestopno(2000)', True)\r\nCheck.equal('jePrestopno(2004)', True)\r\nCheck.equal('jePrestopno(2011)', False)\r\nfor leto in range(1900, 2100):\r\n    Check.challenge(jePrestopno(leto))"
    }
  }, 
  {
    "pk": 78, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `diagonalna(n, d, i)`, ki vrne matriko velikosti\n`n` \u00d7 `n` z vektorjem `d` na diagonali ter \u0161tevilom `i` izven \ndiagonale.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"NA\", \"30, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 29, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 28, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 27, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 26, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 25, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 24, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 23, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 22, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 21, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 20, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 19, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 18, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 17, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 16, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 15, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 14, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 13, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 12, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 11, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 9, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1\"]]", 
      "solution": "diagonalna <- function(n, d, i) {\n  matrika <- matrix(i, n, n)\n  matrika[row(matrika) == col(matrika)] <- d\n  return(matrika)\n}", 
      "problem": 33, 
      "validation": "check$equal(dim(diagonalna(123, 45, 67)), c(123, 123))\ncheck$equal(diagonalna(3, c(4, 5, 6), 2), matrix(c(4, 2, 2, 2, 5, 2, 2, 2, 6), 3))\ncheck$challenge(toString(diagonalna(30, 30 : 1, 5)))"
    }
  }, 
  {
    "pk": 768, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `prestej(a, s)`, ki vrne \u0161tevilo pojavitev znaka `a`\nv nizu `s`.", 
      "timestamp": "2012-09-05 09:34:51", 
      "challenge": "[[\"(3, 991821)\", \"0\"], [\"(8, 3077783810)\", \"2\"], [\"(4, 57506323)\", \"0\"], [\"(4, 243332176)\", \"1\"], [\"(3, 3174602313)\", \"3\"], [\"(1, 2488822606)\", \"0\"], [\"(7, 3870008431)\", \"1\"], [\"(8, 3758687612)\", \"2\"], [\"(0, 3714797061)\", \"1\"], [\"(8, 2505305690)\", \"0\"], [\"(0, 1526208651)\", \"1\"], [\"(8, 2577333608)\", \"1\"], [\"(6, 1079494017)\", \"0\"], [\"(1, 2790430246)\", \"0\"], [\"(0, 3259871847)\", \"0\"], [\"(2, 2316994580)\", \"1\"], [\"(0, 909785277)\", \"1\"], [\"(0, 3007442610)\", \"3\"], [\"(0, 964234755)\", \"0\"], [\"(3, 4095873408)\", \"1\"], [\"(6, 1557570489)\", \"0\"], [\"(5, 2270970878)\", \"0\"], [\"(2, 3547629407)\", \"1\"], [\"(7, 1549190572)\", \"1\"], [\"(5, 1345634933)\", \"1\"], [\"(0, 1429512714)\", \"0\"], [\"(2, 780417659)\", \"0\"], [\"(4, 2386595992)\", \"0\"], [\"(6, 2870743281)\", \"0\"], [\"(0, 3011695830)\", \"2\"], [\"(0, 1058145111)\", \"1\"], [\"(6, 66723396)\", \"3\"], [\"(0, 2471480109)\", \"2\"], [\"(3, 2595186786)\", \"0\"], [\"(5, 3964239347)\", \"0\"], [\"(8, 480041648)\", \"2\"], [\"(0, 3448433961)\", \"0\"], [\"(5, 2938087598)\", \"1\"], [\"(8, 3665036879)\", \"1\"], [\"(1, 1298985436)\", \"1\"], [\"(6, 356266725)\", \"3\"], [\"(1, 3829506490)\", \"0\"], [\"(3, 2132064363)\", \"3\"], [\"(8, 969232328)\", \"1\"], [\"(7, 872552545)\", \"1\"], [\"(6, 1146625926)\", \"3\"], [\"(1, 1522823239)\", \"1\"], [\"(0, 1573101684)\", \"1\"], [\"(0, 350673309)\", \"2\"], [\"(6, 1762045458)\", \"1\"], [\"(1, 4107127267)\", \"2\"]]", 
      "solution": "def prestej(a,s):\n    return s.count(a)", 
      "problem": 247, 
      "validation": "Check.equal(\"prestej('a','banane')\",2)\nCheck.equal(\"prestej('b','banane')\",1)\nCheck.equal(\"prestej('c','banane')\",0)\nCheck.equal(\"prestej('n','banane')\",2)\nCheck.equal(\"prestej('.','ba.na.ne.')\",3)\nCheck.equal(\"prestej('.','.......')\",7)\n\n_rng=[991821]\nfor i in range(50): _rng.append((_rng[-1]*1103515245+12345)%2**32)\nfor i in _rng:\n    Check.challenge(prestej(str(i%9), str(i)), (i % 9, i))"
    }
  }, 
  {
    "pk": 332, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `jePrastevilo(n)`, ki vrne `True`, \u010de `n` je\npra\u0161tevilo, in `False`, \u010de ni.", 
      "timestamp": "2012-03-14 09:55:33", 
      "challenge": "[[\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"]]", 
      "solution": "def jePrastevilo(n):\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    i = 2\n    while i ** 2 <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True", 
      "problem": 112, 
      "validation": "Check.equal('jePrastevilo(1)', False)\nCheck.equal('jePrastevilo(2)', True)\nCheck.equal('jePrastevilo(3)', True)\nCheck.equal('jePrastevilo(23)', True)\nCheck.equal('jePrastevilo(42)', False)\nCheck.equal('jePrastevilo(97)', True)\nfor i in range(1, 100):\n    Check.challenge(jePrastevilo(i))"
    }
  }, 
  {
    "pk": 323, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `vecjeStevke(n, k)`, ki vrne vsoto tistih \u0161tevk\n\u0161tirimestnega \u0161tevila `n`, ki so ve\u010dje od \u0161tevke `k`.\n\u010ce tak\u0161nih \u0161tevk ni, naj funkcija vrne vrednost `0`.\n\nPrimer:\n\n    >>> vecjeStevke(1234, 5)\n    0\n    >>> vecjeStevke(4285, 5)\n    8\n    >>> vecjeStevke(9563, 3)\n    20", 
      "timestamp": "2012-03-12 09:55:43", 
      "challenge": "[[\"(1, 0)\", \"1\"], [\"(123, 1)\", \"5\"], [\"(5129, 6)\", \"9\"], [\"(867, 1)\", \"21\"], [\"(6641, 6)\", \"0\"], [\"(6843, 5)\", \"14\"], [\"(1689, 6)\", \"17\"], [\"(7747, 1)\", \"25\"], [\"(2881, 6)\", \"16\"], [\"(4363, 1)\", \"16\"], [\"(6649, 0)\", \"25\"], [\"(7827, 1)\", \"24\"], [\"(2721, 6)\", \"7\"], [\"(4683, 1)\", \"21\"], [\"(6009, 6)\", \"9\"], [\"(9107, 5)\", \"16\"], [\"(161, 6)\", \"0\"], [\"(9803, 1)\", \"20\"], [\"(5769, 6)\", \"16\"], [\"(9587, 1)\", \"29\"], [\"(9201, 0)\", \"12\"], [\"(1723, 1)\", \"12\"], [\"(1929, 6)\", \"18\"], [\"(7267, 1)\", \"22\"], [\"(3841, 6)\", \"8\"], [\"(2443, 5)\", \"0\"], [\"(489, 6)\", \"17\"], [\"(147, 1)\", \"11\"], [\"(8081, 6)\", \"16\"], [\"(3963, 1)\", \"21\"], [\"(7449, 0)\", \"24\"], [\"(6227, 1)\", \"17\"], [\"(5921, 6)\", \"9\"], [\"(8283, 1)\", \"21\"], [\"(8809, 6)\", \"25\"], [\"(3507, 5)\", \"7\"], [\"(1361, 6)\", \"0\"], [\"(7403, 1)\", \"14\"], [\"(569, 6)\", \"9\"], [\"(9987, 1)\", \"33\"], [\"(8401, 0)\", \"13\"], [\"(3323, 1)\", \"11\"], [\"(8729, 6)\", \"24\"], [\"(3667, 1)\", \"22\"], [\"(1041, 6)\", \"0\"], [\"(8043, 5)\", \"8\"], [\"(9289, 6)\", \"26\"], [\"(2547, 1)\", \"18\"], [\"(3281, 6)\", \"8\"], [\"(3563, 1)\", \"17\"]]", 
      "solution": "def vecjeStevke(n, k):\n    a = n // 1000\n    b = n // 100 % 10\n    c = n // 10 % 10\n    d = n % 10\n    suma = 0\n    if a > k: suma += a\n    if b > k: suma += b\n    if c > k: suma += c\n    if d > k: suma += d\n    return suma", 
      "problem": 107, 
      "validation": "Check.equal(\"vecjeStevke(1234, 5)\", 0)\nCheck.equal(\"vecjeStevke(4285, 5)\", 8)\nCheck.equal(\"vecjeStevke(9563, 3)\", 20)\npodatki = [(123 ** i % 10000, i ** 456 % 10) for i in range(50)]\n\nfor x in podatki:\n    Check.challenge(vecjeStevke(*x), x)"
    }
  }, 
  {
    "pk": 261, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `tabeliraj(f, n)`, ki vrne seznam vrednosti\n`[f(0), f(1), ..., f(n - 1)]`, pri \u010demer se `f(i)` nadomesti z `None`\nv primeru, da `f(i)` spro\u017ei izjemo.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"None\", \"[None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"], [\"None\", \"[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]\"], [\"None\", \"[2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0]\"], [\"None\", \"[3.0, 1.5, None, 3.0, 1.5, None, 3.0, 1.5, None, 3.0, 1.5, None, 3.0, 1.5, None, 3.0, 1.5, None, 3.0, 1.5]\"], [\"None\", \"[4.0, 2.0, None, 1.0, 4.0, 2.0, None, 1.0, 4.0, 2.0, None, 1.0, 4.0, 2.0, None, 1.0, 4.0, 2.0, None, 1.0]\"], [\"None\", \"[5.0, 2.5, None, 1.25, 1.0, 5.0, 2.5, None, 1.25, 1.0, 5.0, 2.5, None, 1.25, 1.0, 5.0, 2.5, None, 1.25, 1.0]\"], [\"None\", \"[6.0, 3.0, None, 1.5, 1.2, 1.0, 6.0, 3.0, None, 1.5, 1.2, 1.0, 6.0, 3.0, None, 1.5, 1.2, 1.0, 6.0, 3.0]\"], [\"None\", \"[7.0, 3.5, None, 1.75, 1.4, 1.166667, None, 7.0, 3.5, None, 1.75, 1.4, 1.166667, None, 7.0, 3.5, None, 1.75, 1.4, 1.166667]\"], [\"None\", \"[8.0, 4.0, None, 2.0, 1.6, 1.333333, None, None, 8.0, 4.0, None, 2.0, 1.6, 1.333333, None, None, 8.0, 4.0, None, 2.0]\"], [\"None\", \"[9.0, 4.5, None, 2.25, 1.8, 1.5, None, None, None, 9.0, 4.5, None, 2.25, 1.8, 1.5, None, None, None, 9.0, 4.5]\"], [\"None\", \"[10.0, 5.0, None, 2.5, 2.0, 1.666667, None, None, None, None, 10.0, 5.0, None, 2.5, 2.0, 1.666667, None, None, None, None]\"], [\"None\", \"[11.0, 5.5, None, 2.75, 2.2, 1.833333, None, None, None, None, None, 11.0, 5.5, None, 2.75, 2.2, 1.833333, None, None, None]\"], [\"None\", \"[12.0, 6.0, None, 3.0, 2.4, 2.0, None, None, None, None, None, None, 12.0, 6.0, None, 3.0, 2.4, 2.0, None, None]\"], [\"None\", \"[13.0, 6.5, None, 3.25, 2.6, 2.166667, None, None, None, None, None, None, None, 13.0, 6.5, None, 3.25, 2.6, 2.166667, None]\"], [\"None\", \"[14.0, 7.0, None, 3.5, 2.8, 2.333333, None, None, None, None, None, None, None, None, 14.0, 7.0, None, 3.5, 2.8, 2.333333]\"], [\"None\", \"[15.0, 7.5, None, 3.75, 3.0, 2.5, None, None, None, None, None, None, None, None, None, 15.0, 7.5, None, 3.75, 3.0]\"], [\"None\", \"[16.0, 8.0, None, 4.0, 3.2, 2.666667, None, None, None, None, None, None, None, None, None, None, 16.0, 8.0, None, 4.0]\"], [\"None\", \"[17.0, 8.5, None, 4.25, 3.4, 2.833333, None, None, None, None, None, None, None, None, None, None, None, 17.0, 8.5, None]\"], [\"None\", \"[18.0, 9.0, None, 4.5, 3.6, 3.0, None, None, None, None, None, None, None, None, None, None, None, None, 18.0, 9.0]\"], [\"None\", \"[19.0, 9.5, None, 4.75, 3.8, 3.166667, None, None, None, None, None, None, None, None, None, None, None, None, None, 19.0]\"], [\"None\", \"[20.0, 10.0, None, 5.0, 4.0, 3.333333, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"], [\"None\", \"[21.0, 10.5, None, 5.25, 4.2, 3.5, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"], [\"None\", \"[22.0, 11.0, None, 5.5, 4.4, 3.666667, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"], [\"None\", \"[23.0, 11.5, None, 5.75, 4.6, 3.833333, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"], [\"None\", \"[24.0, 12.0, None, 6.0, 4.8, 4.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"], [\"None\", \"[25.0, 12.5, None, 6.25, 5.0, 4.166667, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"], [\"None\", \"[26.0, 13.0, None, 6.5, 5.2, 4.333333, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"], [\"None\", \"[27.0, 13.5, None, 6.75, 5.4, 4.5, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"], [\"None\", \"[28.0, 14.0, None, 7.0, 5.6, 4.666667, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"], [\"None\", \"[29.0, 14.5, None, 7.25, 5.8, 4.833333, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"], [\"None\", \"[30.0, 15.0, None, 7.5, 6.0, 5.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"], [\"None\", \"[31.0, 15.5, None, 7.75, 6.2, 5.166667, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"], [\"None\", \"[32.0, 16.0, None, 8.0, 6.4, 5.333333, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"], [\"None\", \"[33.0, 16.5, None, 8.25, 6.6, 5.5, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"], [\"None\", \"[34.0, 17.0, None, 8.5, 6.8, 5.666667, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"], [\"None\", \"[35.0, 17.5, None, 8.75, 7.0, 5.833333, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"], [\"None\", \"[36.0, 18.0, None, 9.0, 7.2, 6.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"], [\"None\", \"[37.0, 18.5, None, 9.25, 7.4, 6.166667, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"], [\"None\", \"[38.0, 19.0, None, 9.5, 7.6, 6.333333, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"], [\"None\", \"[39.0, 19.5, None, 9.75, 7.8, 6.5, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"], [\"None\", \"[40.0, 20.0, None, 10.0, 8.0, 6.666667, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"], [\"None\", \"[41.0, 20.5, None, 10.25, 8.2, 6.833333, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"], [\"None\", \"[42.0, 21.0, None, 10.5, 8.4, 7.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"], [\"None\", \"[43.0, 21.5, None, 10.75, 8.6, 7.166667, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"], [\"None\", \"[44.0, 22.0, None, 11.0, 8.8, 7.333333, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"], [\"None\", \"[45.0, 22.5, None, 11.25, 9.0, 7.5, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"], [\"None\", \"[46.0, 23.0, None, 11.5, 9.2, 7.666667, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"], [\"None\", \"[47.0, 23.5, None, 11.75, 9.4, 7.833333, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"], [\"None\", \"[48.0, 24.0, None, 12.0, 9.6, 8.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"], [\"None\", \"[49.0, 24.5, None, 12.25, 9.8, 8.166667, None, None, None, None, None, None, None, None, None, None, None, None, None, None]\"]]", 
      "solution": "def tabeliraj(f, n):\n    # definiramo si pomo\u017eno funkcijo, ki se obna\u0161a kot f, le da v primeru\n    # napak vrne None\n    def varna_f(i):\n        try: return f(i)\n        except: return None\n\n    return [varna_f(i) for i in range(n)]", 
      "problem": 76, 
      "validation": "Check.equal(\"tabeliraj(lambda i: 100 / (i % 3), 10)\", [None, 100, 50, None, 100, 50, None, 100, 50, None])\nCheck.equal(\"tabeliraj(lambda i: ['jabolko', 'banana', 'kamen', 'limona'][i], 10)\", ['jabolko', 'banana', 'kamen', 'limona', None, None, None, None, None, None])\n\nfor i in range(50):\n    Check.challenge(tabeliraj(lambda j: i / [1, 2, 0, 4, 5, 6][j % i], 20))"
    }
  }, 
  {
    "pk": 826, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "_Izbor reda $n$_ je podmno\u017eica mno\u017eice $\\{1, 2, \\dots, n\\}$.\nVse izbore reda $n$ in mo\u010di $k$ lahko uredimo leksikografsko.\nNa primer, izbori reda $5$ in mo\u010di $3$ so urejeni na slede\u010d na\u010din:\n\n    {1, 2, 3} < {1, 2, 4} < {1, 2, 5} < {1, 3, 4} < {1, 3, 5} <\n    {1, 4, 5} < {2, 3, 4} < {2, 3, 5} < {2, 4, 5} < {3, 4, 5}\n\nSestavite funkcijo `izbor(n, k, i)`, ki vrne `i`. izbor reda `n` in mo\u010di `k`.\n\u010casovna zahtevnost funkcije naj bo $O(n)$. \u010ce je `i` manj\u0161i ali enak $0$\noziroma ve\u010dji od $n \\choose k$, naj funkcija vrne `None`.", 
      "timestamp": "2012-11-02 11:46:39", 
      "challenge": "[[\"izbor(5, 3, 1)\", \"[1, 2, 3]\"], [\"izbor(5, 3, 4)\", \"[1, 3, 4]\"], [\"izbor(5, 3, 7)\", \"[2, 3, 4]\"]]", 
      "solution": "# Avtor re\u0161itve: Alja\u017e Bo\u017ei\u010d\n\ndef kombinacije(n, k):\n    st = 1\n    im = 1\n    while k > 0:\n        st *= n\n        im *= k\n        n -= 1\n        k -= 1\n    return st // im\n\ndef izbor(n, k, i):\n    moznosti = kombinacije(n, k)\n    if not 0 <= i < moznosti:\n        return\n    k_terica = [0] * k\n    l = 0\n    for x in range(k):\n        moznosti *= k - x\n        moznosti //= n - l\n        l += 1\n        while i > moznosti:\n            i -= moznosti\n            moznosti *= n - l - (k - x) + 1\n            moznosti //= n - l\n            l += 1\n        k_terica[x] = l\n    return k_terica", 
      "problem": 261, 
      "validation": "Check.challenge(izbor(5, 3, 1), \"izbor(5, 3, 1)\")\nCheck.challenge(izbor(5, 3, 4), \"izbor(5, 3, 4)\")\nCheck.challenge(izbor(5, 3, 7), \"izbor(5, 3, 7)\")"
    }
  }, 
  {
    "pk": 297, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Petvrsti\u010dno smre\u010dico lahko v Pythonu izpi\u0161emo z naslednjim programom:\n\n    print(\"*\")\n    print(\"**\")\n    print(\"***\")\n    print(\"****\")\n    print(\"*****\")\n\nSestavite program, ki izpi\u0161e osemvrsti\u010dno smre\u010dico.", 
      "timestamp": "2013-02-25 00:45:43", 
      "challenge": "[]", 
      "solution": "print(\"*\")\nprint(\"**\")\nprint(\"***\")\nprint(\"****\")\nprint(\"*****\")\nprint(\"******\")\nprint(\"*******\")\nprint(\"********\")", 
      "problem": 97, 
      "validation": "def izpis(source):\n    import io, sys\n    old_stdout = sys.stdout\n    new_stdout = io.StringIO()\n    sys.stdout = new_stdout\n    exec(source)\n    sys.stdout = old_stdout\n    return new_stdout.getvalue()\n\ndef preveriSmrecico(smrecica, levi, desni, dovoljeni):\n    vrstice = smrecica.splitlines()\n    if len(vrstice) != 8:\n        Check.error(\"Smre\u010dica nima osmih vrstic.\")\n    for i in range(0, min(8, len(vrstice))):\n        vrstica = vrstice[i]\n        if not vrstica.startswith((levi[i] - 1) * \" \"):\n            Check.error(\"{0}. vrstica se ne za\u010dne na {1}. znaku.\".format(i + 1, levi[i]))\n        if len(vrstica.rstrip()) != desni[i]:\n            Check.error(\"{0}. vrstica se ne kon\u010da na {1}. znaku.\".format(i + 1, desni[i]))\n        znaki = vrstica.replace(\" \", \"\")\n        if len(znaki) != i + 1:\n            Check.error(\"{0}. vrstica ni sestavljena iz {0} znakov.\".format(i + 1))\n        if any(znak not in dovoljeni for znak in znaki):\n            Check.error(\"{0}. vrstica vsebuje nedovoljene znake.\".format(i + 1))\n    if len([znak for znak in dovoljeni if znak in smrecica]) > 1:\n        Check.error(\"Smre\u010dica je sestavljena iz razli\u010dnih dovoljenih znakov.\")\n\ndovoljeni = \"*.#$@oO+=\"\nznak = \"*\"\npreveriSmrecico(izpis(Check.current[\"solution\"]), 8 * [0], range(1, 9), \"*\")"
    }
  }, 
  {
    "pk": 749, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `brezZnakov(niz, i)`, ki vrne `niz` brez znakov na\n`i`-tem in `i + 1`-tem mestu.", 
      "timestamp": "2012-07-12 08:25:27", 
      "challenge": "[]", 
      "solution": "def brezZnakov(niz, i):\n    return niz[:i] + niz[i + 2:]", 
      "problem": 236, 
      "validation": "Check.equal(\"brezZnakov('klobasica', 0)\", \"obasica\")\nCheck.equal(\"brezZnakov('klobasica', 2)\", \"klasica\")\nCheck.equal(\"brezZnakov('klobasica', 6)\", \"klobasa\")"
    }
  }, 
  {
    "pk": 872, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Definirajte razred `Vrsta` z metodami:\n\n* `__init__(self)`, ki ustvari prazno vrsto,\n* `dodaj(self, x)`, ki na konec vrste doda element `x`,\n* `odstrani(self)`, ki odstrani in vrne za\u010detni element vrste,\n* `prazna(self)`, ki vrne `True`, \u010de je vrsta prazna, in `False`, \u010de ni.\n\nPomagate si lahko tako, da ustvarite pomo\u017eni razred `Vozlisce`, ki hrani\nvozli\u0161\u010da vrste. Ta vsebujejo element in potencialni kazalec na naslednje\nvozli\u0161\u010de. Razred `Vrsta` potem le vsebuje potencialna kazalca na prvo\nin zadnje vozli\u0161\u010de.\n\nSeveda pa lahko napi\u0161ete poljubno implementacijo, ki ponuja zgornje\n\u0161tiri metode.", 
      "timestamp": "2012-11-29 09:38:39", 
      "challenge": "[]", 
      "solution": "class Vozlisce:\n    def __init__(self, vsebina, naslednje=None):\n        self.vsebina = vsebina\n        self.naslednje = naslednje\n\nclass Vrsta:\n    def __init__(self):\n        self.zacetek = self.konec = None\n\n    def dodaj(self, x):\n        if self.zacetek == self.konec == None:\n            self.zacetek = self.konec = Vozlisce(x)\n        else:\n            novo = Vozlisce(x)\n            self.konec.naslednje = novo\n            self.konec = novo\n\n    def odstrani(self):\n        x = self.zacetek.vsebina\n        if self.zacetek == self.konec:\n            self.zacetek = self.konec = None\n        else:\n            self.zacetek = self.zacetek.naslednje\n        return x\n\n    def prazna(self):\n        return self.zacetek == self.konec == None", 
      "problem": 284, 
      "validation": "Check.run(['v = Vrsta()',\n           'v.dodaj(3)',\n           'v.dodaj(4)',\n           'x = v.odstrani()',\n           'v.dodaj(5)',\n           'y = v.odstrani()',\n           'z = v.odstrani()',\n           'w = v.prazna()'], {'x': 3, 'y': 4, 'z': 5, 'w': True})\nCheck.run(['v = Vrsta()',\n           'x = v.prazna()',\n           'v.dodaj(5)',\n           'y = v.prazna()'], {'x': True, 'y': False})"
    }
  }, 
  {
    "pk": 618, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `nabor(niz)`, ki kot parameter dobi niz z vejico\r\nlo\u010denih vrednosti kot zgoraj, vrne pa nabor s temi vrednostmi. Pri tem\r\nnaj to\u010dke za posamezne naloge spremeni v \u0161tevila (tj. naj jih ne vrne kot\r\nnize).\r\n\r\n    >>> `nabor(\"Janez Novak,1,3,3,0,2\")`\r\n    `(\"Janez Novak\", 1, 3, 3, 0, 2)`\r\n\r\nPredpostavite lahko, da so vsi podatki razen prvega res \u0161tevila, ni pa\r\nnujno, da je v vsaki vrstici natan\u010dno 5 \u0161tevil.", 
      "timestamp": "2012-05-16 14:30:14", 
      "challenge": "[]", 
      "solution": "def nabor(niz):\r\n    s=niz.split(',')\r\n    for i in range(1,len(s)):\r\n        s[i]=int(s[i])\r\n    return tuple(s)", 
      "problem": 204, 
      "validation": "Check.equal('nabor(\"Janez Novak,1,3,3,0,2\")', (\"Janez Novak\", 1, 3, 3, 0, 2))\r\nCheck.equal('nabor(\"Micka Kovaceva,0,3,2,2,3\")', (\"Micka Kovaceva\", 0, 3, 2, 2, 3))"
    }
  }, 
  {
    "pk": 762, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `naloga1(sez)`, kot je zapisano v navodilih.", 
      "timestamp": "2012-08-27 09:32:37", 
      "challenge": "[]", 
      "solution": "def naloga1(sez):\n    d = 1000 # minimalna dovoljena razdalja\n    n = len(sez)\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            (x1, y1) = sez[i]\n            (x2, y2) = sez[j]\n            if (x2 - x1) ** 2 + (y2 - y1) ** 2 < d ** 2:\n                return False\n    return True", 
      "problem": 242, 
      "validation": "Check.equal(\"naloga1([(0, 0), (1000, 0), (0, 1000), (1000, 1000)])\", True)\nCheck.equal(\"naloga1([(0, 0), (1000, 0), (0, 1000), (999, 999)])\", False)\nCheck.equal(\"naloga1([(-500, 0), (500, 0), (0, 866)])\", False)\nCheck.equal(\"naloga1([(-500, 0), (500, 0), (0, 867)])\", True)"
    }
  }, 
  {
    "pk": 891, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Definirajte razred `Kopica` z metodami:\n\n* `__init__(self)`, ki ustvari prazno kopico,\n* `dodaj(self, x)`, ki v kopico doda element `x`,\n* `odstrani(self)`, ki odstrani najmanj\u0161i element kopice,\n* `prazna(self)`, ki vrne `True`, \u010de je kopica prazna, in `False`, \u010de ni.", 
      "timestamp": "2013-01-15 07:54:13", 
      "challenge": "[]", 
      "solution": "class Kopica:\n    def __init__(self):\n        self.sez = []\n\n    def dvigni(self, i):\n        j = (i - 1) // 2\n        if j >= 0 and self.sez[i] < self.sez[j]:\n            self.sez[i], self.sez[j] = self.sez[j], self.sez[i]\n            self.dvigni(j)\n\n    def spusti(self, i):\n        j = 2 * i + 1\n        if len(self.sez) <= j:\n            pass\n        elif len(self.sez) == j + 1 and self.sez[i] > self.sez[j]:\n            self.sez[i], self.sez[j] = self.sez[j], self.sez[i]\n        elif len(self.sez) > j + 1 and (self.sez[i] > self.sez[j] or self.sez[i] > self.sez[j + 1]):\n            j += 1 if self.sez[j + 1] < self.sez[j] else 0\n            self.sez[i], self.sez[j] = self.sez[j], self.sez[i]\n            self.spusti(j)\n\n    def dodaj(self, x):\n        self.sez.append(x)\n        self.dvigni(len(self.sez) - 1)\n\n    def odstrani(self):\n        najmanjsi = self.sez[0]\n        self.sez[0] = self.sez[len(self.sez) - 1]\n        del self.sez[len(self.sez) - 1]\n        self.spusti(0)\n        return najmanjsi\n\n    def prazna(self):\n        return len(self.sez) == 0", 
      "problem": 303, 
      "validation": "Check.run(['h = Kopica()',\n           'h.dodaj(10)',\n           'h.dodaj(4)',\n           'x = h.odstrani()',\n           'h.dodaj(13)',\n           'h.dodaj(9)',\n           'y = h.odstrani()',\n           'z = h.odstrani()',\n           'w = h.prazna()'], {'x': 4, 'y': 9, 'z': 10, 'w': False})\n\nCheck.run(['h = Kopica()',\n           'h.dodaj(10)',\n           'h.dodaj(4)',\n           'x = h.odstrani()',\n           'h.dodaj(13)',\n           'y = h.odstrani()',\n           'z = h.odstrani()',\n           'w = h.prazna()'], {'x': 4, 'y': 10, 'z': 13, 'w': True})"
    }
  }, 
  {
    "pk": 728, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite metodo `naloga2(self)`, kot je zapisano v navodilih.", 
      "timestamp": "2012-07-11 09:59:01", 
      "challenge": "[]", 
      "solution": "class Drevo(Drevo):\n    def visinaNeuravnotezenost(self):\n        if self.prazno:\n            return 0, 0\n        else:\n            vl, nl = self.levo.visinaNeuravnotezenost()\n            vr, nr = self.desno.visinaNeuravnotezenost()\n            return max(vl, vr) + 1, max(nl, nr, abs(vl - vr))\n\n    def naloga2(self):\n        _, n = self.visinaNeuravnotezenost()\n        return n", 
      "problem": 231, 
      "validation": "Check.equal(\"Drevo().naloga2()\", 0)\nCheck.equal(\"Drevo(1).naloga2()\", 0)\nCheck.equal(\"Drevo(1, desno=Drevo(2)).naloga2()\", 1)\nCheck.equal(\"Drevo(1, desno=Drevo(2, levo=Drevo(3))).naloga2()\", 2)\nCheck.equal(\"Drevo(1, levo=Drevo(2), desno=Drevo(3)).naloga2()\", 0)\nCheck.equal(\"Drevo(1, levo=Drevo(2, levo=Drevo(3))).naloga2()\", 2)\nCheck.equal(\"Drevo(1, levo=Drevo(2, levo=Drevo(3)), desno=Drevo(4, desno=Drevo(5))).naloga2()\", 1)\nCheck.equal(\"Drevo(1, levo=Drevo(2, levo=Drevo(3), desno=Drevo(4)), desno=Drevo(5)).naloga2()\", 1)\nCheck.equal(\"Drevo(1, levo=Drevo(2, desno=Drevo(3)), desno=Drevo(4, levo=Drevo(5), desno=Drevo(6))).naloga2()\", 1)"
    }
  }, 
  {
    "pk": 677, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `vRelaciji(rel, x)`, ki vrne mno\u017eico vseh elementov,\nki so v relaciji `rel` z elementom `x`.", 
      "timestamp": "2012-06-10 10:06:12", 
      "challenge": "[[\"enako, 1\", \"[1]\"], [\"manjse, 1\", \"[2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\"], [\"vecje, 1\", \"[]\"], [\"manjseAliEnako, 1\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\"], [\"vecjeAliEnako, 1\", \"[1]\"], [\"deli, 1\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\"], [\"enako, 2\", \"[2]\"], [\"manjse, 2\", \"[3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\"], [\"vecje, 2\", \"[1]\"], [\"manjseAliEnako, 2\", \"[2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\"], [\"vecjeAliEnako, 2\", \"[1, 2]\"], [\"deli, 2\", \"[2, 4, 6, 8, 10, 12]\"], [\"enako, 3\", \"[3]\"], [\"manjse, 3\", \"[4, 5, 6, 7, 8, 9, 10, 11, 12]\"], [\"vecje, 3\", \"[1, 2]\"], [\"manjseAliEnako, 3\", \"[3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\"], [\"vecjeAliEnako, 3\", \"[1, 2, 3]\"], [\"deli, 3\", \"[3, 6, 9, 12]\"], [\"enako, 4\", \"[4]\"], [\"manjse, 4\", \"[5, 6, 7, 8, 9, 10, 11, 12]\"], [\"vecje, 4\", \"[1, 2, 3]\"], [\"manjseAliEnako, 4\", \"[4, 5, 6, 7, 8, 9, 10, 11, 12]\"], [\"vecjeAliEnako, 4\", \"[1, 2, 3, 4]\"], [\"deli, 4\", \"[4, 8, 12]\"], [\"enako, 5\", \"[5]\"], [\"manjse, 5\", \"[6, 7, 8, 9, 10, 11, 12]\"], [\"vecje, 5\", \"[1, 2, 3, 4]\"], [\"manjseAliEnako, 5\", \"[5, 6, 7, 8, 9, 10, 11, 12]\"], [\"vecjeAliEnako, 5\", \"[1, 2, 3, 4, 5]\"], [\"deli, 5\", \"[5, 10]\"], [\"enako, 6\", \"[6]\"], [\"manjse, 6\", \"[7, 8, 9, 10, 11, 12]\"], [\"vecje, 6\", \"[1, 2, 3, 4, 5]\"], [\"manjseAliEnako, 6\", \"[6, 7, 8, 9, 10, 11, 12]\"], [\"vecjeAliEnako, 6\", \"[1, 2, 3, 4, 5, 6]\"], [\"deli, 6\", \"[6, 12]\"], [\"enako, 7\", \"[7]\"], [\"manjse, 7\", \"[8, 9, 10, 11, 12]\"], [\"vecje, 7\", \"[1, 2, 3, 4, 5, 6]\"], [\"manjseAliEnako, 7\", \"[7, 8, 9, 10, 11, 12]\"], [\"vecjeAliEnako, 7\", \"[1, 2, 3, 4, 5, 6, 7]\"], [\"deli, 7\", \"[7]\"], [\"enako, 8\", \"[8]\"], [\"manjse, 8\", \"[9, 10, 11, 12]\"], [\"vecje, 8\", \"[1, 2, 3, 4, 5, 6, 7]\"], [\"manjseAliEnako, 8\", \"[8, 9, 10, 11, 12]\"], [\"vecjeAliEnako, 8\", \"[1, 2, 3, 4, 5, 6, 7, 8]\"], [\"deli, 8\", \"[8]\"], [\"enako, 9\", \"[9]\"], [\"manjse, 9\", \"[10, 11, 12]\"], [\"vecje, 9\", \"[1, 2, 3, 4, 5, 6, 7, 8]\"], [\"manjseAliEnako, 9\", \"[9, 10, 11, 12]\"], [\"vecjeAliEnako, 9\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9]\"], [\"deli, 9\", \"[9]\"], [\"enako, 10\", \"[10]\"], [\"manjse, 10\", \"[11, 12]\"], [\"vecje, 10\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9]\"], [\"manjseAliEnako, 10\", \"[10, 11, 12]\"], [\"vecjeAliEnako, 10\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\"], [\"deli, 10\", \"[10]\"], [\"enako, 11\", \"[11]\"], [\"manjse, 11\", \"[12]\"], [\"vecje, 11\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\"], [\"manjseAliEnako, 11\", \"[11, 12]\"], [\"vecjeAliEnako, 11\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\"], [\"deli, 11\", \"[11]\"], [\"enako, 12\", \"[12]\"], [\"manjse, 12\", \"[]\"], [\"vecje, 12\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\"], [\"manjseAliEnako, 12\", \"[12]\"], [\"vecjeAliEnako, 12\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\"], [\"deli, 12\", \"[12]\"]]", 
      "solution": "def vRelaciji(rel, x):\n    return {z for (y, z) in rel if x == y}", 
      "problem": 222, 
      "validation": "Check.equal('vRelaciji(enako, 6)', {6})\nCheck.equal('vRelaciji(manjse, 8)', {9, 10, 11, 12})\nCheck.equal('vRelaciji(vecje, 5)', {1, 2, 3, 4})\nCheck.equal('vRelaciji(deli, 3)', {3, 6, 9, 12})\nCheck.equal('vRelaciji(istiOstanek, 3)', {1, 3, 5, 7, 9, 11})\nfor i in range(1, 13):\n    Check.challenge(vRelaciji(enako, i), (\"enako, {0}\".format(i)))\n    Check.challenge(vRelaciji(manjse, i), (\"manjse, {0}\".format(i)))\n    Check.challenge(vRelaciji(vecje, i), (\"vecje, {0}\".format(i)))\n    Check.challenge(vRelaciji(manjseAliEnako, i), (\"manjseAliEnako, {0}\".format(i)))\n    Check.challenge(vRelaciji(vecjeAliEnako, i), (\"vecjeAliEnako, {0}\".format(i)))\n    Check.challenge(vRelaciji(deli, i), (\"deli, {0}\".format(i)))"
    }
  }, 
  {
    "pk": 604, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `realno(a, b)`, ki vrne naklju\u010dno realno \u0161tevilo\r\nna intervalu $(a, b)$.", 
      "timestamp": "2012-03-27 08:37:24", 
      "challenge": "[]", 
      "solution": "import random\r\n\r\ndef realno(a, b):\r\n    return random.uniform(a, b)", 
      "problem": 200, 
      "validation": "if isinstance(realno(1.3, 7.8), float):\r\nrandom.seed('a')\r\nCheck.equal('1.3 <= min([realno(1.3,7.8) for i in range(1000)])', True, 'Va\u0161a funkcija vra\u010da \u0161tevila, manj\u0161a od spodnje meje intervala.')\r\nCheck.equal('max([realno(1.3,7.8) for i in range(1000)]) <= 7.8', True, 'Va\u0161a funkcija vra\u010da \u0161tevila, ve\u010dja od zgornje meje intervala.')\r\nCheck.equal('len(set([round(realno(1, 3), 6) for i in range(10000)])) > 9950', True, 'Va\u0161a funkcija ne vra\u010da naklju\u010dnih \u0161tevil')\r\nelse:\r\nCheck.equal('False', True, 'Va\u0161a funkcija ne vra\u010da realnih \u0161tevil.')"
    }
  }, 
  {
    "pk": 279, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Z ukazom `obcine <- readShapeSpatial(\"OB/OB.shp\")` v spremenljivko\n`obcine` nalo\u017eite zemljevid ob\u010din. \u010ce ste vse pravilno nalo\u017eili,\nbi moral ukaz `spplot(obcine, 2, col.regions=rainbow(16))` narisati\npisan zemljevid Slovenije.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "# Nalo\u017eimo zemljevid obcin.\nobcine <- readShapeSpatial(\"OB/OB.shp\")", 
      "problem": 87, 
      "validation": "if(as.character(obcine$OB_UIME[154]) != \"Lovrenc na Pohorju\")\n  check$error(\"Datoteka z zemljevidom ob\u010din ni pravilno nalo\u017eena.\")"
    }
  }, 
  {
    "pk": 324, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavi funkcijo `presekIntervalov(a1,b1,a2,b2)`, ki preveri, ali se\nintervala $[a_1, b_1]$ in $[a_2, b_2]$ se\u010deta.\n\u010ce se se\u010deta, naj vrne interval, na katerem se sekata (interval je\ndvojica \u0161tevil). \u010ce se ne se\u010deta, naj vrne False.\n\nPrimer:\n\n    >>> presek(3, 7, 1, 2)\n    False\n    >>> presek(3, 7, 1, 5)\n    (3, 5)\n    >>> presek(3, 7, 7, 8)\n    (7, 7)", 
      "timestamp": "2012-03-12 09:54:57", 
      "challenge": "[[\"(19, 25, 7, 10)\", \"False\"], [\"(6, 12, 12, 14)\", \"(12, 12)\"], [\"(8, 11, 0, 3)\", \"False\"], [\"(15, 17, 4, 6)\", \"False\"], [\"(7, 10, 5, 13)\", \"(7, 10)\"], [\"(3, 5, 19, 27)\", \"False\"], [\"(2, 9, 9, 9)\", \"(9, 9)\"], [\"(7, 9, 17, 25)\", \"False\"], [\"(0, 9, 0, 3)\", \"(0, 3)\"], [\"(2, 10, 5, 10)\", \"(5, 10)\"], [\"(13, 21, 2, 10)\", \"False\"], [\"(13, 14, 18, 18)\", \"False\"], [\"(4, 8, 1, 2)\", \"False\"], [\"(11, 18, 14, 14)\", \"(14, 14)\"], [\"(19, 28, 5, 14)\", \"False\"], [\"(11, 13, 1, 9)\", \"False\"], [\"(11, 18, 0, 9)\", \"False\"], [\"(7, 11, 5, 8)\", \"(7, 8)\"], [\"(6, 13, 10, 16)\", \"(10, 13)\"], [\"(10, 18, 5, 8)\", \"False\"], [\"(3, 10, 4, 5)\", \"(4, 5)\"], [\"(4, 13, 17, 22)\", \"False\"], [\"(11, 18, 0, 9)\", \"False\"], [\"(16, 17, 6, 13)\", \"False\"], [\"(12, 13, 1, 10)\", \"False\"], [\"(10, 19, 16, 18)\", \"(16, 18)\"], [\"(0, 0, 16, 19)\", \"False\"], [\"(7, 12, 14, 21)\", \"False\"], [\"(5, 10, 12, 19)\", \"False\"], [\"(10, 15, 18, 19)\", \"False\"], [\"(0, 9, 0, 5)\", \"(0, 5)\"], [\"(3, 9, 12, 17)\", \"False\"], [\"(0, 6, 5, 14)\", \"(5, 6)\"], [\"(14, 15, 10, 17)\", \"(14, 15)\"], [\"(6, 13, 13, 16)\", \"(13, 13)\"], [\"(19, 27, 3, 9)\", \"False\"], [\"(5, 9, 19, 25)\", \"False\"], [\"(2, 9, 14, 23)\", \"False\"], [\"(2, 8, 14, 22)\", \"False\"], [\"(6, 12, 19, 19)\", \"False\"], [\"(14, 19, 17, 26)\", \"(17, 19)\"], [\"(0, 3, 11, 13)\", \"False\"], [\"(9, 12, 11, 15)\", \"(11, 12)\"], [\"(11, 14, 13, 14)\", \"(13, 14)\"], [\"(7, 16, 7, 7)\", \"(7, 7)\"], [\"(11, 14, 14, 22)\", \"(14, 14)\"], [\"(4, 11, 14, 20)\", \"False\"], [\"(4, 11, 14, 19)\", \"False\"], [\"(15, 15, 10, 13)\", \"False\"], [\"(3, 4, 10, 18)\", \"False\"]]", 
      "solution": "def presekIntervalov(a1, b1, a2, b2):\n    a3 = max(a1, a2)\n    b3 = min(b1, b2)\n    if a3 > b3:\n        return False\n    else:\n        return (a3, b3)", 
      "problem": 108, 
      "validation": "Check.equal(\"presekIntervalov(3,7,1,2)\",False)\nCheck.equal(\"presekIntervalov(3,7,1,5)\",(3,5))\nCheck.equal(\"presekIntervalov(3,7,7,8)\",(7,7))\n\nrng=[1287631]\nfor i in range(200): rng.append((rng[-1]*1103515245+12345)%2**32)\nrng=[x//2**16 for x in rng]\npodatki = []\nfor i in range(50):\n    z1 = rng[4*i]%20\n    k1 = z1 + rng[4*i+1]%10\n    z2 = rng[4*i+2]%20\n    k2 = z2 + rng[4*i+3]%10\n    podatki.append((z1, k1, z2, k2))\n\nfor x in podatki:\n    Check.challenge(presekIntervalov(*x), x)"
    }
  }, 
  {
    "pk": 554, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Ena od takih operacij je NeIn (angl. NAND), ki je negacija operacije\n*in*. Torej je `a NeIn b` neresni\u010dna natanko tedaj, ko sta oba\n`a` in `b` resni\u010dna.\n\nSestavite funkcijo `NeIn(a, b)`, ki vrne rezultat te operacije.", 
      "timestamp": "2012-03-11 21:55:29", 
      "challenge": "[]", 
      "solution": "def NeIn(a, b):\n    return not (a and b)", 
      "problem": 184, 
      "validation": "Check.equal(\"NeIn(False, False)\", True)\nCheck.equal(\"NeIn(False, True)\", True)\nCheck.equal(\"NeIn(True, False)\", True)\nCheck.equal(\"NeIn(True, True)\", False)"
    }
  }, 
  {
    "pk": 75, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavi funkcijo `linearna(a,b)`, ki sprejme \u0161tevili `a` in `b` ter\nvrne re\u0161itev ena\u010dbe $a x + b = 0$.", 
      "timestamp": "2012-11-05 16:40:33", 
      "challenge": "[[\"None\", \"[1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0, -0.1, -0.2, -0.3, -0.4, -0.5, -0.6, -0.7, -0.8, -0.9, 0.909, 0.818, 0.727, 0.636, 0.545, 0.455, 0.364, 0.273, 0.182, 0.091, 0.0, -0.091, -0.182, -0.273, -0.364, -0.455, -0.545, -0.636, -0.727, -0.818, 0.833, 0.75, 0.667, 0.583, 0.5, 0.417, 0.333, 0.25, 0.167, 0.083, 0.0, -0.083, -0.167, -0.25, -0.333, -0.417, -0.5, -0.583, -0.667, -0.75, 0.769, 0.692, 0.615, 0.538, 0.462, 0.385, 0.308, 0.231, 0.154, 0.077, 0.0, -0.077, -0.154, -0.231, -0.308, -0.385, -0.462, -0.538, -0.615, -0.692, 0.714, 0.643, 0.571, 0.5, 0.429, 0.357, 0.286, 0.214, 0.143, 0.071, 0.0, -0.071, -0.143, -0.214, -0.286, -0.357, -0.429, -0.5, -0.571, -0.643, 0.667, 0.6, 0.533, 0.467, 0.4, 0.333, 0.267, 0.2, 0.133, 0.067, 0.0, -0.067, -0.133, -0.2, -0.267, -0.333, -0.4, -0.467, -0.533, -0.6, 0.625, 0.562, 0.5, 0.438, 0.375, 0.312, 0.25, 0.188, 0.125, 0.062, 0.0, -0.062, -0.125, -0.188, -0.25, -0.312, -0.375, -0.438, -0.5, -0.562, 0.588, 0.529, 0.471, 0.412, 0.353, 0.294, 0.235, 0.176, 0.118, 0.059, 0.0, -0.059, -0.118, -0.176, -0.235, -0.294, -0.353, -0.412, -0.471, -0.529, 0.556, 0.5, 0.444, 0.389, 0.333, 0.278, 0.222, 0.167, 0.111, 0.056, 0.0, -0.056, -0.111, -0.167, -0.222, -0.278, -0.333, -0.389, -0.444, -0.5, 0.526, 0.474, 0.421, 0.368, 0.316, 0.263, 0.211, 0.158, 0.105, 0.053, 0.0, -0.053, -0.105, -0.158, -0.211, -0.263, -0.316, -0.368, -0.421, -0.474]\"]]", 
      "solution": "def linearna(a,b):\n    return -b/a", 
      "problem": 28, 
      "validation": "Check.equal(\"\"\"linearna(2,4)\"\"\", -2)\nCheck.equal(\"\"\"linearna(1,-1)\"\"\", 1)\nCheck.equal(\"\"\"linearna(13,7)\"\"\", -7/13)\nCheck.equal(\"\"\"linearna(9,0)\"\"\",0)\n\nCheck.challenge([round(linearna(a,b),3) for a in range(10,20) for b in range(-10,10)])"
    }
  }, 
  {
    "pk": 275, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Z zgornjim postopkom izra\u010dunajte pribli\u017eek dolo\u010denega integrala\r\n$$\\int_1^2 x^2 - \\sin(x) dx$$", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "f <- function(x) x ^ 2 - sin(x)\r\nx <- runif(1000, 1, 2)\r\ny <- runif(1000, 0, f(2)) # pravokotnik \u0161e ravno pokrije graf\r\n\r\ncurve(f, 1, 2)\r\npod.grafom <- y < f(x)\r\npoints(x[pod.grafom], y[pod.grafom], col = \"green\")\r\npoints(x[!pod.grafom], y[!pod.grafom], col = \"blue\")\r\n\r\nrazmerje.tock <- mean(pod.grafom)\r\nploscina <- 1 * f(2)\r\nrazmerje.tock * ploscina\r\nintegrate(f, 1, 2)", 
      "problem": 83, 
      "validation": ""
    }
  }, 
  {
    "pk": 551, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Logi\u010dni operator *implikacija* ima naslednjo resni\u010dnostno tabelo\n(F predstavlja neresni\u010dno (False), T pa resni\u010dno (True) vrednost):\n\n    A  B | A=>B\n    -----+-----\n    F  F |  T\n    F  T |  T\n    T  F |  F\n    T  T |  T\n\nSestavite funkcijo `implikacija(a,b)`, ki sprejme dve logi\u010dni vrednosti\nin vrne rezultat implikacije `a=>b`.", 
      "timestamp": "2012-03-09 14:59:47", 
      "challenge": "[]", 
      "solution": "def implikacija(a,b):\n    return (not a) or b", 
      "problem": 183, 
      "validation": "Check.equal(\"implikacija(False,False)\", True)\nCheck.equal(\"implikacija(False,True)\", True)\nCheck.equal(\"implikacija(True,False)\", False)\nCheck.equal(\"implikacija(True,True)\", True)"
    }
  }, 
  {
    "pk": 228, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `html(s)`, ki sprejme besedilo in v njem vse URL-je\nzamenja z aktivnimi naslovi. Na primer:\n\n    >>> html('Na http://math.andrej.com je zelo dolgo\u010dasna roba.')\n    'Na <a href=\"http://math.andrej.com\">math.andrej.com</a> je zelo dolgo\u010dasna roba.'", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "def html(besedilo):\n    url = re.compile(\n                     r'(https?://('     # protokol\n                     r'(\\w+\\.)+\\w{2,}'  # domena\n                     r'(/\\w+)*'         # poddirektoriji\n                     r'))'              # zaklju\u010dek dveh skupin z za\u010detka\n                     r'(?=\\ )'          # naslednji znak mora biti presledek\n                    )\n    return re.sub(url, r'<a href=\"\\1\">\\2</a>', besedilo)", 
      "problem": 71, 
      "validation": "Check.equal(\"html('Na http://math.andrej.com je zelo dolgo\u010dasna roba.')\", 'Na <a href=\"http://math.andrej.com\">math.andrej.com</a> je zelo dolgo\u010dasna roba.')\nCheck.equal(\"html('izr.prof.dr.AndrejBauer')\", 'izr.prof.dr.AndrejBauer')"
    }
  }, 
  {
    "pk": 878, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite martiko `verjetnosti` z 41 vrsticami in stolpci ter imeni,\nkot so v vektorju `imena.polj`. V njih naj bodo shranjene verjetnosti\npremikov v primeru, da se figurice premikajo zgolj z metom dveh kock.\nTako se boste za dve polji naprej pomaknili z verjetnostjo $1/36$,\nza tri z verjetnostjo $2/36$ in tako naprej.\nZ 41. poljem _In Jail_ se zaenkrat ne ukvarjajte.", 
      "timestamp": "2012-12-21 10:24:50", 
      "challenge": "[]", 
      "solution": "kocka <- c(0, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1) / 36\nverjetnosti <- matrix(0, 41, 41, dimnames = list(imena.polj, imena.polj))\nzaciklana.polja <- rep(1 : 40, 2)\n\n# nastavimo osnovne verjetnosti\nfor (i in 1 : 40) {\n  mozna.polja <- zaciklana.polja[(i + 1) : (i + 12)]\n  verjetnosti[i, mozna.polja] <- kocka\n}", 
      "problem": 293, 
      "validation": "check$equal(verjetnosti[\"Go\", \"Baltic Avenue\"], 2 / 36)\ncheck$equal(verjetnosti[\"Pennsylvania Railroad\", \"Free Parking\"], 4 / 36)\ncheck$equal(verjetnosti[\"Atlantic Avenue\", \"Boardwalk\"], 0)\ncheck$equal(verjetnosti[\"Luxury Tax\", \"Reading Railroad\"], 6 / 36)\nnapacne <- round(rowSums(verjetnosti[-41, ]), 6) != 1\nif(any(napacne))\n  check$error(\"Verjetnosti pomikov z naslednjih polj se ne se\u0161tejejo v 1: %s\", paste(imena.polj[which(napacne)], collapse=\", \"))"
    }
  }, 
  {
    "pk": 893, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `dijkstra(g, u, v)`, ki vrne najkraj\u0161o pot med\nvozli\u0161\u010dema `u` in `v` v grafu `g`.", 
      "timestamp": "2013-01-15 08:09:35", 
      "challenge": "[]", 
      "solution": "def dijkstra(g, zac, kon):\n    prev = {v: None for v in g}\n    dist = {v: float('inf') for v in g}\n    dist[zac] = 0\n\n    vrsta = list(g.keys())\n    while vrsta:\n        _, najblizji = min((dist[v], v) for v in vrsta)\n        vrsta.remove(najblizji)\n        for u, d in g[najblizji].items():\n            if dist[najblizji] + d < dist[u]:\n                dist[u] = dist[najblizji] + d\n                prev[u] = najblizji\n\n    pot = [kon]\n    while kon != zac:\n        pot.append(prev[kon])\n        kon = prev[kon]\n\n    return list(reversed(pot))", 
      "problem": 304, 
      "validation": "Check.equal(\"dijkstra(primer, 's', 'v')\", ['s', 'x', 'u', 'v'], env={'primer': primer})\nCheck.equal(\"dijkstra(primer, 's', 'y')\", ['s', 'x', 'y'], env={'primer': primer})\nCheck.equal(\"dijkstra(primer, 'u', 's')\", ['u', 'x', 'y', 's'], env={'primer': primer})"
    }
  }, 
  {
    "pk": 772, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `dodajEnke(sez)`, ki vrne seznam `sez`, ki smo mu na\nza\u010detek in na konec dodali \u0161tevilo `1`.", 
      "timestamp": "2012-09-05 09:37:58", 
      "challenge": "[[\"[1, 1, 8, 343, 1, 1, 64, 343, 343, 729]\", \"[1, 1, 1, 8, 343, 1, 1, 64, 343, 343, 729, 1]\"], [\"[8, 64, 1, 64, 343, 8, 27, 64, 1728, 512]\", \"[1, 8, 64, 1, 64, 343, 8, 27, 64, 1728, 512, 1]\"], [\"[1, 27, 64, 125, 216, 1, 125, 729, 1728, 1331]\", \"[1, 1, 27, 64, 125, 216, 1, 125, 729, 1728, 1331, 1]\"], [\"[64, 0, 27, 8, 216, 64, 512, 216, 343, 1000]\", \"[1, 64, 0, 27, 8, 216, 64, 512, 216, 343, 1000, 1]\"], [\"[27, 1, 8, 27, 64, 27, 8, 343, 0, 729]\", \"[1, 27, 1, 8, 27, 64, 27, 8, 343, 0, 729, 1]\"], [\"[64, 64, 8, 0, 1, 64, 1, 64, 1728, 8]\", \"[1, 64, 64, 8, 0, 1, 64, 1, 64, 1728, 8, 1]\"], [\"[64, 125, 125, 1, 512, 729, 0, 125, 343, 125]\", \"[1, 64, 125, 125, 1, 512, 729, 0, 125, 343, 125, 1]\"], [\"[8, 8, 0, 216, 8, 8, 343, 8, 125, 0]\", \"[1, 8, 8, 0, 216, 8, 8, 343, 8, 125, 0, 1]\"], [\"[64, 27, 8, 343, 216, 729, 512, 27, 1, 729]\", \"[1, 64, 27, 8, 343, 216, 729, 512, 27, 1, 729, 1]\"], [\"[64, 8, 125, 64, 125, 64, 64, 512, 216, 1728]\", \"[1, 64, 8, 125, 64, 125, 64, 64, 512, 216, 1728, 1]\"], [\"[8, 27, 125, 125, 0, 343, 8, 729, 729, 125]\", \"[1, 8, 27, 125, 125, 0, 343, 8, 729, 729, 125, 1]\"], [\"[8, 0, 8, 8, 0, 8, 64, 216, 343, 8]\", \"[1, 8, 0, 8, 8, 0, 8, 64, 216, 343, 8, 1]\"], [\"[0, 1, 64, 27, 1, 125, 343, 343, 512, 1331]\", \"[1, 0, 1, 64, 27, 1, 125, 343, 343, 512, 1331, 1]\"], [\"[64, 0, 125, 0, 216, 64, 1000, 0, 1, 1728]\", \"[1, 64, 0, 125, 0, 216, 64, 1000, 0, 1, 1728, 1]\"], [\"[0, 1, 125, 1, 343, 125, 1000, 1, 0, 125]\", \"[1, 0, 1, 125, 1, 343, 125, 1000, 1, 0, 125, 1]\"], [\"[1, 0, 1, 216, 27, 216, 0, 216, 1000, 512]\", \"[1, 1, 0, 1, 216, 27, 216, 0, 216, 1000, 512, 1]\"], [\"[27, 27, 27, 343, 216, 27, 729, 27, 512, 27]\", \"[1, 27, 27, 27, 343, 216, 27, 729, 27, 512, 27, 1]\"], [\"[64, 0, 27, 64, 216, 64, 343, 0, 729, 1000]\", \"[1, 64, 0, 27, 64, 216, 64, 343, 0, 729, 1000, 1]\"], [\"[8, 27, 64, 125, 216, 343, 729, 729, 125, 1331]\", \"[1, 8, 27, 64, 125, 216, 343, 729, 729, 125, 1331, 1]\"], [\"[0, 64, 125, 8, 343, 0, 1000, 1000, 1331, 1728]\", \"[1, 0, 64, 125, 8, 343, 0, 1000, 1000, 1331, 1728, 1]\"], [\"[64, 125, 1, 27, 8, 729, 8, 1331, 8, 1]\", \"[1, 64, 125, 1, 27, 8, 729, 8, 1331, 8, 1, 1]\"], [\"[27, 0, 27, 0, 27, 512, 729, 0, 1331, 1000]\", \"[1, 27, 0, 27, 0, 27, 512, 729, 0, 1331, 1000, 1]\"], [\"[0, 1, 0, 1, 1, 125, 1000, 1, 343, 343]\", \"[1, 0, 1, 0, 1, 1, 125, 1000, 1, 343, 343, 1]\"], [\"[0, 64, 125, 216, 64, 0, 512, 1000, 1331, 1728]\", \"[1, 0, 64, 125, 216, 64, 0, 512, 1000, 1331, 1728, 1]\"], [\"[8, 27, 64, 343, 27, 343, 512, 27, 729, 1331]\", \"[1, 8, 27, 64, 343, 27, 343, 512, 27, 729, 1331, 1]\"], [\"[1, 8, 8, 64, 512, 216, 216, 512, 125, 8]\", \"[1, 1, 8, 8, 64, 512, 216, 216, 512, 125, 8, 1]\"], [\"[64, 1, 27, 125, 1, 729, 216, 1, 343, 27]\", \"[1, 64, 1, 27, 125, 1, 729, 216, 1, 343, 27, 1]\"], [\"[8, 0, 27, 8, 216, 8, 216, 216, 512, 1000]\", \"[1, 8, 0, 27, 8, 216, 8, 216, 216, 512, 1000, 1]\"], [\"[64, 1, 8, 27, 1, 729, 343, 343, 125, 729]\", \"[1, 64, 1, 8, 27, 1, 729, 343, 343, 125, 729, 1]\"], [\"[1, 64, 8, 0, 1, 216, 0, 64, 8, 8]\", \"[1, 1, 64, 8, 0, 1, 216, 0, 64, 8, 8, 1]\"], [\"[1, 27, 27, 1, 0, 1, 1, 729, 1000, 27]\", \"[1, 1, 27, 27, 1, 0, 1, 1, 729, 1000, 27, 1]\"], [\"[8, 0, 1, 216, 216, 8, 343, 216, 729, 512]\", \"[1, 8, 0, 1, 216, 216, 8, 343, 216, 729, 512, 1]\"], [\"[0, 1, 0, 343, 343, 125, 125, 343, 216, 343]\", \"[1, 0, 1, 0, 343, 343, 125, 125, 343, 216, 343, 1]\"], [\"[8, 8, 216, 64, 8, 8, 125, 512, 0, 216]\", \"[1, 8, 8, 216, 64, 8, 8, 125, 512, 0, 216, 1]\"], [\"[0, 1, 216, 125, 1, 125, 1, 1, 125, 2197]\", \"[1, 0, 1, 216, 125, 1, 125, 1, 1, 125, 2197, 1]\"], [\"[8, 0, 27, 8, 216, 8, 8, 216, 0, 1000]\", \"[1, 8, 0, 27, 8, 216, 8, 8, 216, 0, 1000, 1]\"], [\"[64, 1, 1, 27, 1, 729, 64, 343, 216, 1]\", \"[1, 64, 1, 1, 27, 1, 729, 64, 343, 216, 1, 1]\"], [\"[0, 64, 216, 0, 64, 0, 125, 64, 125, 216]\", \"[1, 0, 64, 216, 0, 64, 0, 125, 64, 125, 216, 1]\"], [\"[27, 27, 1, 1, 27, 27, 1000, 729, 1, 1]\", \"[1, 27, 27, 1, 1, 27, 27, 1000, 729, 1, 1, 1]\"], [\"[1, 8, 1, 216, 125, 216, 64, 8, 1728, 512]\", \"[1, 1, 8, 1, 216, 125, 216, 64, 8, 1728, 512, 1]\"], [\"[64, 1, 64, 343, 343, 729, 125, 343, 1000, 1331]\", \"[1, 64, 1, 64, 343, 343, 729, 125, 343, 1000, 1331, 1]\"], [\"[1, 64, 125, 64, 343, 216, 125, 64, 64, 1728]\", \"[1, 1, 64, 125, 64, 343, 216, 125, 64, 64, 1728, 1]\"], [\"[27, 125, 125, 125, 512, 27, 27, 125, 1728, 125]\", \"[1, 27, 125, 125, 125, 512, 27, 27, 125, 1728, 125, 1]\"], [\"[8, 8, 216, 8, 512, 8, 0, 8, 1000, 216]\", \"[1, 8, 8, 216, 8, 512, 8, 0, 8, 1000, 216, 1]\"], [\"[1, 125, 8, 27, 8, 1, 512, 1331, 64, 729]\", \"[1, 1, 125, 8, 27, 8, 1, 512, 1331, 64, 729, 1]\"], [\"[27, 0, 0, 0, 0, 512, 27, 0, 1, 0]\", \"[1, 27, 0, 0, 0, 0, 512, 27, 0, 1, 0, 1]\"], [\"[64, 27, 125, 1, 0, 729, 1000, 729, 125, 125]\", \"[1, 64, 27, 125, 1, 0, 729, 1000, 729, 125, 125, 1]\"], [\"[64, 64, 27, 216, 343, 64, 216, 1000, 1, 1000]\", \"[1, 64, 64, 27, 216, 343, 64, 216, 1000, 1, 1000, 1]\"], [\"[64, 27, 8, 343, 27, 729, 343, 27, 216, 729]\", \"[1, 64, 27, 8, 343, 27, 729, 343, 27, 216, 729, 1]\"], [\"[8, 8, 125, 64, 125, 8, 27, 512, 512, 1728]\", \"[1, 8, 8, 125, 64, 125, 8, 27, 512, 512, 1728, 1]\"], [\"[1, 1, 64, 125, 343, 1, 64, 1, 1331, 1331]\", \"[1, 1, 1, 64, 125, 343, 1, 64, 1, 1331, 1331, 1]\"]]", 
      "solution": "def dodajEnke(sez):\n    return [1] + sez + [1]", 
      "problem": 246, 
      "validation": "Check.equal(\"\"\"dodajEnke([4, 6, 4])\"\"\", [1, 4, 6, 4, 1])\nCheck.equal(\"\"\"dodajEnke([3, 3])\"\"\", [1, 3, 3, 1])\nCheck.equal(\"\"\"dodajEnke([2])\"\"\", [1, 2, 1])\nCheck.equal(\"\"\"dodajEnke([])\"\"\", [1, 1])\n\n_rng=[1287631]\nfor i in range(50): _rng.append((_rng[-1]*1103515245+12345)%2**32)\nfor i in _rng:\n    sez = []\n    for j in range(10):\n        sez.append((i % (j + 5)) ** 3)\n    Check.challenge(dodajEnke(sez), sez)"
    }
  }, 
  {
    "pk": 894, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `minimum.enakomernih(a, b, n, k = 1000)`,\r\nki z metodo Monte Carlo v `k` poskusih oceni\r\npri\u010dakovano vrednost minimuma `n` slu\u010dajnih spremenljivk,\r\nenakomerno porazdeljenih na intervalu med `a` in `b`.", 
      "timestamp": "2013-02-11 12:07:58", 
      "challenge": "[]", 
      "solution": "minimum.enakomernih <- function(a, b, n, k = 1000) {\r\n  return(mean(replicate(k, min(runif(n, a, b)))))\r\n}", 
      "problem": 309, 
      "validation": ""
    }
  }, 
  {
    "pk": 307, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Predpostavite, da imate v spremenljivkah `a` in `b` shranjeni\ndve celi \u0161tevili. Sestavite kodo, ki vam bo v spremenljivke z \nimeni `vsota`, `razlika`, `produkt`, `potenca`, `kvocient`, `celikvocient` in \n`ostanek` po vrsti shranila rezultate aritmeti\u010dnih operacij:\n`+`, `-`, `*`, `**`,  `/`, `//` in `%`. \n\nVse te rezultate tudi po vrsti izpi\u0161ite na zaslon, vsakega v svojo vrstico.\n\nPrimer: \u010de sta \u0161tevili `a` in `b` enaki\n\n    a = 5\n    b = 4\n\nnaj imajo spremenljivke po vrsti vrednosti 9, 1, 20, 625, 1.25, 1 in 1, na zaslon pa naj se izpi\u0161e\n\n    9\n    1\n    20\n    625\n    1.25\n    1\n    1\n\nSpremenljivk `a` in `b` ne rabite definirati.", 
      "timestamp": "2013-02-25 04:01:38", 
      "challenge": "[]", 
      "solution": "vsota = a + b\nrazlika = a - b\nprodukt = a * b\npotenca = a ** b\nkvocient = a / b\ncelikvocient = a // b\nostanek = a % b\nprint(vsota)\nprint(razlika)\nprint(produkt)\nprint(potenca)\nprint(kvocient)\nprint(celikvocient)\nprint(ostanek)", 
      "problem": 99, 
      "validation": "import random \n\n# Pripravimo okolje\nd = dict()\nd[\"a\"] = random.randint(3, 30)\nd[\"b\"] = random.randint(2, 20)\na = d[\"a\"]\nb = d[\"b\"]\nsource=Check.current[\"solution\"]\n(d, izpis) = izvedi(source, d)\nrezultati = [(a+b, \"+\", \"vsota\"), (a-b, \"-\", \"razlika\"), (a*b, \"*\", \"produkt\"), (a**b, \"**\", \"potenca\"), (a/b, \"/\", \"kvocient\"), (a//b, \"//\", \"celikvocient\"), (a%b, \"%\", \"ostanek\")]\npizpis = \"\\n\".join([str(a+b),str(a-b),str(a*b),str(a**b),str(a/b),str(a//b), str(a%b)])\nfor (rez, oper, spr) in rezultati:\n    if spr not in d:\n        Check.error(\"Spremenljivka {0} ni definirana.\".format(spr))\n    elif d[spr] != rez:\n        Check.error(\"Rezultat za operacijo {0} ni pravilen: {1} {2} {3} != {4}\".format(oper, a, oper, b, d[spr]))\n    if pizpis != izpis.strip():\n        Check.error(\"Izpis za vrednosti a = {0} in b = {1} ni prave oblike: \\n\".format(a,b) + izpis.strip())"
    }
  }, 
  {
    "pk": 5, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `ravninskaRazdalja(x1, y1, x2, y2)`, ki vrne\nrazdaljo med to\u010dkama (`x1`, `y1`) in (`x2`, `y2`).\n\n    >>> ravninskaRazdalja(1, 2, 3, 4)\n    2.82842712475", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"None\", \"50.0\"], [\"None\", \"50.0\"], [\"None\", \"50.003431\"], [\"None\", \"50.016074\"], [\"None\", \"50.039984\"], [\"None\", \"50.076335\"], [\"None\", \"50.125903\"], [\"None\", \"50.189237\"], [\"None\", \"50.26674\"], [\"None\", \"50.358713\"], [\"None\", \"50.465379\"], [\"None\", \"50.586898\"], [\"None\", \"50.723383\"], [\"None\", \"38.174018\"], [\"None\", \"38.39575\"], [\"None\", \"38.636906\"], [\"None\", \"38.897301\"], [\"None\", \"37.229021\"], [\"None\", \"37.141819\"], [\"None\", \"37.075118\"], [\"None\", \"37.029275\"], [\"None\", \"37.004586\"], [\"None\", \"37.001295\"], [\"None\", \"37.01959\"], [\"None\", \"37.059605\"], [\"None\", \"37.121422\"], [\"None\", \"24.314968\"], [\"None\", \"24.476049\"], [\"None\", \"24.669555\"], [\"None\", \"24.8949\"], [\"None\", \"25.151384\"], [\"None\", \"25.438211\"], [\"None\", \"25.754502\"], [\"None\", \"26.09931\"], [\"None\", \"24.698178\"], [\"None\", \"24.498323\"], [\"None\", \"24.33105\"], [\"None\", \"24.197178\"], [\"None\", \"24.0974\"], [\"None\", \"11.070231\"], [\"None\", \"11.004787\"], [\"None\", \"11.016182\"], [\"None\", \"11.10442\"], [\"None\", \"11.267924\"], [\"None\", \"11.503695\"], [\"None\", \"11.807604\"], [\"None\", \"12.174731\"], [\"None\", \"12.599721\"], [\"None\", \"13.077091\"], [\"None\", \"13.601471\"], [\"None\", \"14.167774\"], [\"None\", \"13.114877\"], [\"None\", \"6.525166\"], [\"None\", \"5.646199\"], [\"None\", \"4.786354\"], [\"None\", \"3.958587\"], [\"None\", \"3.18855\"], [\"None\", \"2.530215\"], [\"None\", \"2.092648\"], [\"None\", \"2.025258\"], [\"None\", \"2.360635\"], [\"None\", \"2.965638\"], [\"None\", \"3.711041\"], [\"None\", \"4.528345\"], [\"None\", \"5.385165\"], [\"None\", \"16.132476\"], [\"None\", \"16.500874\"], [\"None\", \"16.913566\"], [\"None\", \"17.117243\"], [\"None\", \"16.684926\"], [\"None\", \"16.295202\"], [\"None\", \"15.951273\"], [\"None\", \"15.656237\"], [\"None\", \"15.41298\"], [\"None\", \"15.224063\"], [\"None\", \"15.091602\"], [\"None\", \"15.017165\"], [\"None\", \"15.001688\"], [\"None\", \"28.024361\"], [\"None\", \"28.079525\"], [\"None\", \"28.166247\"], [\"None\", \"28.284271\"], [\"None\", \"28.433241\"], [\"None\", \"28.612707\"], [\"None\", \"28.82213\"], [\"None\", \"29.478806\"], [\"None\", \"29.196794\"], [\"None\", \"28.942883\"], [\"None\", \"28.717852\"], [\"None\", \"28.522415\"], [\"None\", \"28.357215\"], [\"None\", \"41.152488\"], [\"None\", \"41.08183\"], [\"None\", \"41.032933\"], [\"None\", \"41.005896\"], [\"None\", \"41.000782\"], [\"None\", \"41.017617\"], [\"None\", \"41.056393\"], [\"None\", \"41.117066\"], [\"None\", \"41.199557\"]]", 
      "solution": "def ravninskaRazdalja(x1, y1, x2, y2):\n    return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** (1 / 2)", 
      "problem": 4, 
      "validation": "Check.equal('ravninskaRazdalja(1, 2, 3, 4)', 2 ** (3 / 2))\nCheck.equal('ravninskaRazdalja(0, 0, 3, 4)', 5)\nfor i in range(100):\n    Check.challenge(ravninskaRazdalja(i - 50, i % 17, i % 13, i ** (1 / 2)))"
    }
  }, 
  {
    "pk": 244, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Izven razreda sestavite funkcijo `gcd(m, n)`, ki izra\u010duna najve\u010dji skupni\ndelitelj \u0161tevil `m` in `n`.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "def gcd(m, n):\n    while n != 0:\n        m, n = n, m % n\n    return m", 
      "problem": 73, 
      "validation": "Check.equal('gcd(40, 35)', 5)\nCheck.equal('gcd(40, 19)', 1)\nCheck.equal('gcd(15, 69)', 3)\nCheck.equal('gcd(12345, 6789)', 3)"
    }
  }, 
  {
    "pk": 550, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite metodo `maksimalniPretok(graf, zacetek, konec)`, ki vrne\nvrednost maksimalnega (`zacetek`, `konec`)-toka v danem grafu.", 
      "timestamp": "2012-03-09 11:57:32", 
      "challenge": "[]", 
      "solution": "class Omrezje(Omrezje):\n    def maksimalniPretok(graf, zacetek, konec):\n        return 5", 
      "problem": 182, 
      "validation": "o = Omrezje()\nfor i in [1, 2, 3, 4, 5, 6]:\n    o.dodajTocko(i)\nfor i, (z, k, kap) in enumerate([(1, 2, 6), (2, 3, 3), (3, 4, 10), (1, 5, 4), (5, 6, 2), (6, 4, 1), (2, 6, 5), (5, 3, 1)]):\n    o.dodajPovezavo(i, z, k, kap)\nCheck.equal(\"o.maksimalniPretok(1, 4)\", 5, env={'o': o})"
    }
  }, 
  {
    "pk": 569, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `limona(n)`, ki za parameter dobi naravno \u0161tevilo `n`\nin vrne niz oblike `\"Ima\u0161 n limon.\"', pri \u010demer mora biti seveda vse\npravilno sklanjano.", 
      "timestamp": "2012-03-18 19:47:16", 
      "challenge": "[[\"None\", \"Ima\\u0161 1 limono.\"], [\"None\", \"Ima\\u0161 2 limoni.\"], [\"None\", \"Ima\\u0161 3 limone.\"], [\"None\", \"Ima\\u0161 4 limone.\"], [\"None\", \"Ima\\u0161 5 limon.\"], [\"None\", \"Ima\\u0161 6 limon.\"], [\"None\", \"Ima\\u0161 7 limon.\"], [\"None\", \"Ima\\u0161 8 limon.\"], [\"None\", \"Ima\\u0161 9 limon.\"], [\"None\", \"Ima\\u0161 10 limon.\"], [\"None\", \"Ima\\u0161 11 limon.\"], [\"None\", \"Ima\\u0161 12 limon.\"], [\"None\", \"Ima\\u0161 13 limon.\"], [\"None\", \"Ima\\u0161 14 limon.\"], [\"None\", \"Ima\\u0161 15 limon.\"], [\"None\", \"Ima\\u0161 16 limon.\"], [\"None\", \"Ima\\u0161 17 limon.\"], [\"None\", \"Ima\\u0161 18 limon.\"], [\"None\", \"Ima\\u0161 19 limon.\"], [\"None\", \"Ima\\u0161 20 limon.\"], [\"None\", \"Ima\\u0161 21 limon.\"], [\"None\", \"Ima\\u0161 22 limon.\"], [\"None\", \"Ima\\u0161 23 limon.\"], [\"None\", \"Ima\\u0161 24 limon.\"], [\"None\", \"Ima\\u0161 25 limon.\"], [\"None\", \"Ima\\u0161 26 limon.\"], [\"None\", \"Ima\\u0161 27 limon.\"], [\"None\", \"Ima\\u0161 28 limon.\"], [\"None\", \"Ima\\u0161 29 limon.\"], [\"None\", \"Ima\\u0161 30 limon.\"], [\"None\", \"Ima\\u0161 31 limon.\"], [\"None\", \"Ima\\u0161 32 limon.\"], [\"None\", \"Ima\\u0161 33 limon.\"], [\"None\", \"Ima\\u0161 34 limon.\"], [\"None\", \"Ima\\u0161 35 limon.\"], [\"None\", \"Ima\\u0161 36 limon.\"], [\"None\", \"Ima\\u0161 37 limon.\"], [\"None\", \"Ima\\u0161 38 limon.\"], [\"None\", \"Ima\\u0161 39 limon.\"], [\"None\", \"Ima\\u0161 40 limon.\"], [\"None\", \"Ima\\u0161 41 limon.\"], [\"None\", \"Ima\\u0161 42 limon.\"], [\"None\", \"Ima\\u0161 43 limon.\"], [\"None\", \"Ima\\u0161 44 limon.\"], [\"None\", \"Ima\\u0161 45 limon.\"], [\"None\", \"Ima\\u0161 46 limon.\"], [\"None\", \"Ima\\u0161 47 limon.\"], [\"None\", \"Ima\\u0161 48 limon.\"], [\"None\", \"Ima\\u0161 49 limon.\"]]", 
      "solution": "def limona(n):\n    ostanek = n % 100\n    if ostanek == 1:\n        koncnica = 'o'\n    elif ostanek == 2:\n        koncnica = 'i'\n    elif ostanek == 3 or ostanek == 4:\n        koncnica = 'e'\n    else:\n        koncnica = ''\n    return \"Ima\u0161 {0} limon{1}.\".format(n, koncnica)", 
      "problem": 191, 
      "validation": "Check.equal('limona(1)', 'Ima\u0161 1 limono.')\nCheck.equal('limona(2)', 'Ima\u0161 2 limoni.')\nCheck.equal('limona(3)', 'Ima\u0161 3 limone.')\nCheck.equal('limona(12)', 'Ima\u0161 12 limon.')\nCheck.equal('limona(13)', 'Ima\u0161 13 limon.')\nCheck.equal('limona(14)', 'Ima\u0161 14 limon.')\nCheck.equal('limona(101)', 'Ima\u0161 101 limono.')\nCheck.equal('limona(103)', 'Ima\u0161 103 limone.')\nCheck.equal('limona(105)', 'Ima\u0161 105 limon.')\nfor i in range(1, 50):\n    Check.challenge(limona(i))"
    }
  }, 
  {
    "pk": 839, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `skica(a, m)`, ki za tabelo `a` izra\u010duna skico\nvelikosti `m`. \u010casovna zahtevnost funkcije naj bo $O(n)$, kjer je $n$\nvelikost tabele `a`. Privzamete lahko, da `m` je delitelj velikosti `a`.\n\nV komentarjih na kratko utemeljite pravilnost delovanja in \u010dasovno\nzahtevnost va\u0161e re\u0161itve.\n\nPozor: naloga ni opremljena s testi, zato sami preverite, ali va\u0161a\nre\u0161itev deluje pravilno.", 
      "timestamp": "2012-11-01 21:29:52", 
      "challenge": "[]", 
      "solution": "def premeci(a, i, j):\n    p = i\n    i += 1\n    while i < j:\n        while i < j and a[i] < a[p]:\n            i += 1\n        while i < j and a[p] < a[j]:\n            j -= 1\n        a[i], a[j] = a[j], a[i]\n    if a[i] < a[p]:\n        a[p], a[i] = a[i], a[p]\n        return i\n    else:\n        a[p], a[i - 1] = a[i - 1], a[p]\n        return i - 1\n\ndef uredi(a, i, j, k, pravi):\n    if i == j:\n        pravi[i] = True\n    elif j - i + 1 <= k // 2:\n        return\n    else:\n        p = premeci(a, i, j)\n        pravi[p] = True\n        uredi(a, i, p - 1, k, pravi)\n        uredi(a, p + 1, j, k, pravi)\n\ndef skica(a, m):\n    n = len(a)\n    k = n // m\n    pravi = [False] * n\n    uredi(a, 0, n - 1, k, pravi)\n    skica = [None] * m\n    for i in range(m):\n        for j in range(k * i, k * (i + 1)):\n            if pravi[j]:\n                skica[i] = a[j]\n                break\n    return skica", 
      "problem": 271, 
      "validation": ""
    }
  }, 
  {
    "pk": 536, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavi funkcijo `linearna(a,b)`, ki sprejme \u0161tevili `a` in `b` ter\nvrne re\u0161itev ena\u010dbe $a x + b = 0$.", 
      "timestamp": "2012-03-05 09:19:00", 
      "challenge": "[[\"None\", \"[1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0, -0.1, -0.2, -0.3, -0.4, -0.5, -0.6, -0.7, -0.8, -0.9, 0.909, 0.818, 0.727, 0.636, 0.545, 0.455, 0.364, 0.273, 0.182, 0.091, 0.0, -0.091, -0.182, -0.273, -0.364, -0.455, -0.545, -0.636, -0.727, -0.818, 0.833, 0.75, 0.667, 0.583, 0.5, 0.417, 0.333, 0.25, 0.167, 0.083, 0.0, -0.083, -0.167, -0.25, -0.333, -0.417, -0.5, -0.583, -0.667, -0.75, 0.769, 0.692, 0.615, 0.538, 0.462, 0.385, 0.308, 0.231, 0.154, 0.077, 0.0, -0.077, -0.154, -0.231, -0.308, -0.385, -0.462, -0.538, -0.615, -0.692, 0.714, 0.643, 0.571, 0.5, 0.429, 0.357, 0.286, 0.214, 0.143, 0.071, 0.0, -0.071, -0.143, -0.214, -0.286, -0.357, -0.429, -0.5, -0.571, -0.643, 0.667, 0.6, 0.533, 0.467, 0.4, 0.333, 0.267, 0.2, 0.133, 0.067, 0.0, -0.067, -0.133, -0.2, -0.267, -0.333, -0.4, -0.467, -0.533, -0.6, 0.625, 0.562, 0.5, 0.438, 0.375, 0.312, 0.25, 0.188, 0.125, 0.062, 0.0, -0.062, -0.125, -0.188, -0.25, -0.312, -0.375, -0.438, -0.5, -0.562, 0.588, 0.529, 0.471, 0.412, 0.353, 0.294, 0.235, 0.176, 0.118, 0.059, 0.0, -0.059, -0.118, -0.176, -0.235, -0.294, -0.353, -0.412, -0.471, -0.529, 0.556, 0.5, 0.444, 0.389, 0.333, 0.278, 0.222, 0.167, 0.111, 0.056, 0.0, -0.056, -0.111, -0.167, -0.222, -0.278, -0.333, -0.389, -0.444, -0.5, 0.526, 0.474, 0.421, 0.368, 0.316, 0.263, 0.211, 0.158, 0.105, 0.053, 0.0, -0.053, -0.105, -0.158, -0.211, -0.263, -0.316, -0.368, -0.421, -0.474]\"]]", 
      "solution": "def linearna(a,b):\n    return -b/a", 
      "problem": 176, 
      "validation": "Check.equal(\"\"\"linearna(2,4)\"\"\", -2)\nCheck.equal(\"\"\"linearna(1,-1)\"\"\", 1)\nCheck.equal(\"\"\"linearna(13,7)\"\"\", -7/13)\nCheck.equal(\"\"\"linearna(9,0)\"\"\",0)\n\nCheck.challenge([round(linearna(a,b),3) for a in range(10,20) for b in range(-10,10)])"
    }
  }, 
  {
    "pk": 729, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `clen(x,n)`, ki vrne $n$-ti \u010dlen zgornje vrste. Pri\ntem je prvi \u010dlen enak $x$, drugi je $-\\frac{x^2}{2}$, tretji je\n$\\frac{x^3}{3}$ itd. Za `n=0` naj funkcija vrne `0`.", 
      "timestamp": "2012-07-12 10:29:15", 
      "challenge": "[]", 
      "solution": "def clen(x,n):\n    if n==0:\n        return 0\n    if n%2==0:\n        return -x**n/n\n    else:\n        return x**n/n", 
      "problem": 234, 
      "validation": "Check.equal(\"clen(0,1)\", 0)\nCheck.equal(\"clen(0,2)\", 0)\nCheck.equal(\"clen(1,3)\", 0.3333333333333333)\nCheck.equal(\"clen(2,5)\", 6.4)\nCheck.equal(\"clen(2,10)\", -102.4)"
    }
  }, 
  {
    "pk": 79, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Dan je spisek oseb, urejen po abecedi (najprej po priimkih, nato po imenih):\n\n* Ana Ban\n* Mojca Ban\n* Bine Bobi\u010d\n* Alen Drenik\n* Janko Kova\u010d\n* Ervin Lu\u017ear\n* ...\n\nSpisek predstavimo z dvema tabelama, ena vsebuje imena in druga priimke:\n\n    ime = ['Ana', 'Mojca', 'Bine', 'Alen', 'Janko', 'Ervin', ...]\n    priimek = ['Ban', 'Ban', 'Bobi\u010d', 'Drenik', 'Kova\u010d', 'Lu\u017ear', ...]\n\nTako lahko dobimo ime in priimek k-te osebe v spisku z `ime[k], priimek[k]`.\n\nSestavi funkcijo `najdi(ime, priimek, i, p)`, ki sprejme tak\u0161ni tabeli imen in\npriimkov ime in priimek, ter vrne *indeks*, na katerem se pojavlja oseba z\nimenom `i` in priimkom `p`. Funkcija naj i\u0161\u010de s postopkom *bisekcije*.\nKaj vrne, \u010de take osebe ni? Primer uporabe:\n\n    >>> ime = ['Ana', 'Mojca', 'Bine', 'Alen', 'Janko', 'Ervin']\n    >>> priimek = ['Ban', 'Ban', 'Bobi\u010d', 'Drenik', 'Kova\u010d', 'Lu\u017ear']\n    >>> najdi(ime, priimek, 'Mojca', 'Ban')\n    1", 
      "timestamp": "2012-10-18 11:14:20", 
      "challenge": "[]", 
      "solution": "def najdi(ime, priimek, i, p):\n    assert (len(ime) == len(priimek)) # preverimo, da sta dolzini tabel enaki\n    zacetek, konec = 0, len(ime)\n    while zacetek < konec:\n        sredina = (zacetek + konec) // 2\n        if (p, i) == (priimek[sredina], ime[sredina]):\n            return sredina\n        elif (p, i) < (priimek[sredina], ime[sredina]):\n            konec = sredina - 1\n        else:\n            zacetek = sredina + 1", 
      "problem": 36, 
      "validation": "Check.equal(\"\"\"najdi(['Ana', 'Mojca', 'Bine', 'Alen', 'Janko', 'Ervin'],\n                     ['Ban', 'Ban', 'Bobi\u010d', 'Drenik', 'Kova\u010d', 'Lu\u017ear'],\n                     'Mojca', 'Ban')\"\"\", 1)\nCheck.equal(\"\"\"najdi(['Ana', 'Mojca', 'Bine', 'Alen', 'Janko', 'Ervin'],\n                     ['Ban', 'Ban', 'Bobi\u010d', 'Drenik', 'Kova\u010d', 'Lu\u017ear'],\n                     'Ervin', 'Lu\u017ear')\"\"\", 5)\nCheck.equal(\"\"\"najdi(['Ana', 'Mojca', 'Bine', 'Alen', 'Janko', 'Ervin'],\n                     ['Ban', 'Ban', 'Bobi\u010d', 'Drenik', 'Kova\u010d', 'Lu\u017ear'],\n                     '', '')\"\"\", None)\nCheck.equal(\"\"\"najdi(['Ana', 'Beti', 'Cene', 'Domen', 'Erika'],\n                     ['Novak', 'Novak', 'Novak', 'Novak', 'Novak'],\n                     'Ana', 'Novak')\"\"\", 0)\nCheck.equal(\"\"\"najdi(['Ana', 'Beti', 'Cene', 'Domen', 'Erika'],\n                     ['Novak', 'Novak', 'Novak', 'Novak', 'Novak'],\n                     'Erika', 'Novak')\"\"\", 4)\nCheck.equal(\"\"\"najdi(['Ana', 'Mojca', 'Bine', 'Alen', 'Janko', 'Ervin'],\n                     ['Ban', 'Ban', 'Bobi\u010d', 'Drenik', 'Kova\u010d', 'Lu\u017ear'],\n                     '\u017diga', '\u017digon')\"\"\", None)\nCheck.equal(\"\"\"najdi(['Ana', 'Mojca', 'Bine', 'Alen', 'Janko', 'Ervin'],\n                     ['Ban', 'Ban', 'Bobi\u010d', 'Drenik', 'Kova\u010d', 'Lu\u017ear'],\n                     'Luka', 'Luki\u010d')\"\"\", None)\nCheck.equal(\"\"\"najdi([], [], 'Niko', 'Ni\u0161ta')\"\"\", None)\nCheck.equal(\"\"\"najdi(['Josip'], ['Plemelj'], 'Josip', 'Plemelj')\"\"\", 0)"
    }
  }, 
  {
    "pk": 841, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Zapi\u0161ite funkcijo `maksmin(x)`, ki bo v danem vektorju `x` zamenjala \nnajmanj\u0161o komponento (minimum) tega vektorja z nizom \"min\", najve\u010djo \n(maksimum) pa z nizom \"MAX\". \nPri tem se bo vektor `x` spremenil v znakovni vektor.\nOpomba: V primeru, ko je maksimum enak minimumu, naj bo na vseh\nkomponentah \"min\".", 
      "timestamp": "2012-11-14 09:09:32", 
      "challenge": "[]", 
      "solution": "maksmin <- function(x){\n  ifelse(x == min(x), 'min', ifelse(x == max(x), 'MAX', x))\n}", 
      "problem": 276, 
      "validation": "check$equal(maksmin(1:6), c(\"min\", \"2\",  \"3\",  \"4\",  \"5\",  \"MAX\"))\ncheck$equal(maksmin(rep(2, 3)), c(\"min\", \"min\", \"min\"))\ncheck$equal(maksmin(seq(20, 10, -2)), c(\"MAX\", \"18\",  \"16\", \"14\", \"12\", \"min\"))"
    }
  }, 
  {
    "pk": 8, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `praviDelitelji(n)`, ki vrne seznam vseh pravih\ndeliteljev \u0161tevila `n`.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"None\", \"[]\"], [\"None\", \"[1]\"], [\"None\", \"[1]\"], [\"None\", \"[1, 2]\"], [\"None\", \"[1]\"], [\"None\", \"[1, 2, 3]\"], [\"None\", \"[1]\"], [\"None\", \"[1, 2, 4]\"], [\"None\", \"[1, 3]\"], [\"None\", \"[1, 2, 5]\"], [\"None\", \"[1]\"], [\"None\", \"[1, 2, 3, 4, 6]\"], [\"None\", \"[1]\"], [\"None\", \"[1, 2, 7]\"], [\"None\", \"[1, 3, 5]\"], [\"None\", \"[1, 2, 4, 8]\"], [\"None\", \"[1]\"], [\"None\", \"[1, 2, 3, 6, 9]\"], [\"None\", \"[1]\"], [\"None\", \"[1, 2, 4, 5, 10]\"], [\"None\", \"[1, 3, 7]\"], [\"None\", \"[1, 2, 11]\"], [\"None\", \"[1]\"], [\"None\", \"[1, 2, 3, 4, 6, 8, 12]\"], [\"None\", \"[1, 5]\"], [\"None\", \"[1, 2, 13]\"], [\"None\", \"[1, 3, 9]\"], [\"None\", \"[1, 2, 4, 7, 14]\"], [\"None\", \"[1]\"], [\"None\", \"[1, 2, 3, 5, 6, 10, 15]\"], [\"None\", \"[1]\"], [\"None\", \"[1, 2, 4, 8, 16]\"], [\"None\", \"[1, 3, 11]\"], [\"None\", \"[1, 2, 17]\"], [\"None\", \"[1, 5, 7]\"], [\"None\", \"[1, 2, 3, 4, 6, 9, 12, 18]\"], [\"None\", \"[1]\"], [\"None\", \"[1, 2, 19]\"], [\"None\", \"[1, 3, 13]\"], [\"None\", \"[1, 2, 4, 5, 8, 10, 20]\"], [\"None\", \"[1]\"], [\"None\", \"[1, 2, 3, 6, 7, 14, 21]\"], [\"None\", \"[1]\"], [\"None\", \"[1, 2, 4, 11, 22]\"], [\"None\", \"[1, 3, 5, 9, 15]\"], [\"None\", \"[1, 2, 23]\"], [\"None\", \"[1]\"], [\"None\", \"[1, 2, 3, 4, 6, 8, 12, 16, 24]\"], [\"None\", \"[1, 7]\"], [\"None\", \"[1, 2, 5, 10, 25]\"], [\"None\", \"[1, 3, 17]\"], [\"None\", \"[1, 2, 4, 13, 26]\"], [\"None\", \"[1]\"], [\"None\", \"[1, 2, 3, 6, 9, 18, 27]\"], [\"None\", \"[1, 5, 11]\"], [\"None\", \"[1, 2, 4, 7, 8, 14, 28]\"], [\"None\", \"[1, 3, 19]\"], [\"None\", \"[1, 2, 29]\"], [\"None\", \"[1]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 10, 12, 15, 20, 30]\"], [\"None\", \"[1]\"], [\"None\", \"[1, 2, 31]\"], [\"None\", \"[1, 3, 7, 9, 21]\"], [\"None\", \"[1, 2, 4, 8, 16, 32]\"], [\"None\", \"[1, 5, 13]\"], [\"None\", \"[1, 2, 3, 6, 11, 22, 33]\"], [\"None\", \"[1]\"], [\"None\", \"[1, 2, 4, 17, 34]\"], [\"None\", \"[1, 3, 23]\"], [\"None\", \"[1, 2, 5, 7, 10, 14, 35]\"], [\"None\", \"[1]\"], [\"None\", \"[1, 2, 3, 4, 6, 8, 9, 12, 18, 24, 36]\"], [\"None\", \"[1]\"], [\"None\", \"[1, 2, 37]\"], [\"None\", \"[1, 3, 5, 15, 25]\"], [\"None\", \"[1, 2, 4, 19, 38]\"], [\"None\", \"[1, 7, 11]\"], [\"None\", \"[1, 2, 3, 6, 13, 26, 39]\"], [\"None\", \"[1]\"], [\"None\", \"[1, 2, 4, 5, 8, 10, 16, 20, 40]\"], [\"None\", \"[1, 3, 9, 27]\"], [\"None\", \"[1, 2, 41]\"], [\"None\", \"[1]\"], [\"None\", \"[1, 2, 3, 4, 6, 7, 12, 14, 21, 28, 42]\"], [\"None\", \"[1, 5, 17]\"], [\"None\", \"[1, 2, 43]\"], [\"None\", \"[1, 3, 29]\"], [\"None\", \"[1, 2, 4, 8, 11, 22, 44]\"], [\"None\", \"[1]\"], [\"None\", \"[1, 2, 3, 5, 6, 9, 10, 15, 18, 30, 45]\"], [\"None\", \"[1, 7, 13]\"], [\"None\", \"[1, 2, 4, 23, 46]\"], [\"None\", \"[1, 3, 31]\"], [\"None\", \"[1, 2, 47]\"], [\"None\", \"[1, 5, 19]\"], [\"None\", \"[1, 2, 3, 4, 6, 8, 12, 16, 24, 32, 48]\"], [\"None\", \"[1]\"], [\"None\", \"[1, 2, 7, 14, 49]\"], [\"None\", \"[1, 3, 9, 11, 33]\"]]", 
      "solution": "def praviDelitelji(n):\n    return [i for i in range(1, n) if n % i == 0]", 
      "problem": 8, 
      "validation": "Check.equal('praviDelitelji(19)', [1])\nCheck.equal('praviDelitelji(28)', [1, 2, 4, 7, 14])\nCheck.equal('praviDelitelji(42)', [1, 2, 3, 6, 7, 14, 21])\nfor i in range(1, 100):\n    Check.challenge(praviDelitelji(i))"
    }
  }, 
  {
    "pk": 881, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite metodo `naloga1(m)`, kot je zapisano v navodilih.", 
      "timestamp": "2012-12-10 13:34:46", 
      "challenge": "[]", 
      "solution": "def naloga1(m):\n    n = len(m)\n    for i in range(n):\n        for j in range(n):\n            if sum(m[i][k] * m[j][k] for k in range(n)) != bool(i == j):\n                return False\n    return True", 
      "problem": 296, 
      "validation": "Check.equal(\"naloga1([[1, -1], [-1, 1]])\", False)\nCheck.equal(\"naloga1([[0, -1], [-1, 0]])\", True)\nCheck.equal(\"naloga1([[-1, 0], [-1, 0]])\", False)\nCheck.equal(\"naloga1([[1, 1], [-1, -1]])\", False)\nCheck.equal(\"naloga1([[1, 0], [0, -1]])\", True)\nCheck.equal(\"naloga1([[1, 1], [1, -1]])\", False)\nCheck.equal(\"naloga1([[0, 1], [-1, 0]])\", True)"
    }
  }, 
  {
    "pk": 875, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `nakljucni.sprehod(dolzina, dimenzija = 2)`, ki vrne\nmatriko, v kateri so v $i$. vrstici zapisane koordinate polo\u017eaja po $i$\nkorakih.\nNasvet: odvisno od va\u0161e implementacije boste morda pri dimenziji 1 vektor\nmorali transponirati z ukazom `t`.", 
      "timestamp": "2012-12-07 20:37:16", 
      "challenge": "[]", 
      "solution": "nakljucni.sprehod <- function(dolzina, dimenzija = 2) {\n  korak <- function() {\n    vektor <- numeric(dimenzija)\n    vektor[sample(dimenzija, 1)] <- sample(c(1, -1), 1)\n    vektor\n  }\n  koraki <- replicate(dolzina, korak())\n  if(dimenzija == 1) koraki <- t(koraki)\n  apply(koraki, 1, cumsum)\n}", 
      "problem": 292, 
      "validation": ""
    }
  }, 
  {
    "pk": 71, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `uredi_z_vstavljanjem(a)`, ki na mestu z vstavljanjem\nuredi tabelo `a`.", 
      "timestamp": "2012-10-24 09:24:08", 
      "challenge": "[]", 
      "solution": "def uredi_z_vstavljanjem(a):\n    for i in range(1, len(a)):\n        j = i - 1\n        k = a[i]\n        while j >= 0 and a[j] > k:\n            a[j + 1] = a[j]\n            j = j - 1\n        a[j + 1] = k", 
      "problem": 26, 
      "validation": "Check.run([\n    \"a = [2, 5, 6, 1, 4, 7, 3, 9, 8]\",\n    \"uredi_z_vstavljanjem(a)\"\n], {'a': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nCheck.run([\n    \"a = [42]\",\n    \"uredi_z_vstavljanjem(a)\"\n], {'a': [42]})\nCheck.run([\n    \"a = [1, 0]\",\n    \"uredi_z_vstavljanjem(a)\"\n], {'a': [0, 1]})\nCheck.run([\n    \"a = []\",\n    \"uredi_z_vstavljanjem(a)\"\n], {'a': []})"
    }
  }, 
  {
    "pk": 870, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Definirajte razred `Sklad` z metodami:\n\n* `__init__(self)`, ki ustvari prazen sklad,\n* `dodaj(self, x)`, ki na vrh sklada doda element `x`,\n* `odstrani(self)`, ki odstrani in vrne vrhnji element sklada,\n* `prazen(self)`, ki vrne `True`, \u010de je sklad prazen, in `False`, \u010de ni.\n\nPomagate si lahko tako, da ustvarite pomo\u017eni razred `Vozlisce`, ki hrani\nvozli\u0161\u010da sklada. Ta vsebujejo element in potencialni kazalec na naslednje\nvozli\u0161\u010de. Razred `Sklad` potem le vsebuje potencialni kazalec na vrhnje\nvozli\u0161\u010de.\n\nSeveda pa lahko napi\u0161ete poljubno implementacijo, ki ponuja zgornje\n\u0161tiri metode.", 
      "timestamp": "2012-11-29 09:38:36", 
      "challenge": "[]", 
      "solution": "class Vozlisce:\n    def __init__(self, vsebina, naslednje=None):\n        self.vsebina = vsebina\n        self.naslednje = naslednje\n\nclass Sklad:\n    def __init__(self):\n        self.vrh = None\n\n    def dodaj(self, x):\n        self.vrh = Vozlisce(x, self.vrh)\n\n    def odstrani(self):\n        x = self.vrh.vsebina\n        self.vrh = self.vrh.naslednje\n        return x\n\n    def prazen(self):\n        return self.vrh is None", 
      "problem": 283, 
      "validation": "Check.run(['s = Sklad()',\n           's.dodaj(3)',\n           's.dodaj(4)',\n           'x = s.odstrani()',\n           's.dodaj(5)',\n           'y = s.odstrani()',\n           'z = s.odstrani()',\n           'w = s.prazen()'], {'x': 4, 'y': 5, 'z': 3, 'w': True})\nCheck.run(['s = Sklad()',\n           'x = s.prazen()',\n           's.dodaj(5)',\n           'y = s.prazen()'], {'x': True, 'y': False})"
    }
  }, 
  {
    "pk": 543, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Napi\u0161ite funkcijo `kvadrat`, ki kot parameter sprejme velikost kvadrata\nin izpi\u0161e poln kvadrat, sestavljen iz znaka `\"+\"`. \nNa primer, klic `kvadrat(4)` naj izpi\u0161e\n\n    ++++\n    ++++\n    ++++\n    ++++", 
      "timestamp": "2012-03-05 11:51:28", 
      "challenge": "[]", 
      "solution": "def kvadrat(n):\n    vrstica = n * \"+\" + \"\\n\"\n    polnkvadrat = n * vrstica\n    print(polnkvadrat)", 
      "problem": 178, 
      "validation": "def izpis(source,n):\n    import io, sys\n    old_stdout = sys.stdout\n    new_stdout = io.StringIO()\n    sys.stdout = new_stdout\n    exec(source+\"\\nkvadrat(\"+str(n)+\")\")\n    sys.stdout = old_stdout\n    return new_stdout.getvalue().strip()\n\ndef preveriKvadrat(kvadrat,n):\n    vrstice = kvadrat.splitlines()\n    if len(vrstice) != n:\n        Check.error(\"Kvadrat `kvadrat(\"+str(n)+\")` nima %s vrstic.\" % n)\n    for i in range(1, min(n, len(vrstice))):\n        vrstica = vrstice[i]\n        if len(vrstica.strip()) != n:\n            Check.error(\"{0}. vrstica nima prave dol\u017eine.\".format(i + 1))\n        elif vrstica != n * \"+\":\n            Check.error(\"{0}. vrstica ni sestavljena iz pravih znakov.\".format(i + 1))\n\nimport random\nrn = random.randint(4, 8)\nresitev = izpis(Check.current[\"solution\"],rn)\npreveriKvadrat(izpis(Check.current[\"solution\"],rn), rn)"
    }
  }, 
  {
    "pk": 20, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `stopinje(radiani)`, ki pretvarja iz radianov v\nkotne stopinje.", 
      "timestamp": "2012-10-22 10:27:37", 
      "challenge": "[]", 
      "solution": "stopinje <- function(radiani) {\n  180 * radiani / pi\n}", 
      "problem": 16, 
      "validation": "check$equal(stopinje(pi / 4), 45)\ncheck$equal(stopinje(3 * pi), 540)"
    }
  }, 
  {
    "pk": 646, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `vrniKalorije(niz)`, ki dobi seznam kalorij, podan\nkot niz, lo\u010den z vejicami, in jih vrne kot seznam celih \u0161tevil.\n\n    >>> vrniKalorije(\"10,4\")\n    [10,4]", 
      "timestamp": "2012-05-14 06:35:19", 
      "challenge": "[]", 
      "solution": "def vrniKalorije(niz):\n    return list(map(int, niz.split(',')))", 
      "problem": 211, 
      "validation": "Check.equal('vrniKalorije(\"11,23,1\")', [11, 23, 1])\nCheck.equal('vrniKalorije(\"15,50,72,68,2\")',[15, 50, 72, 68, 2])\nCheck.equal('vrniKalorije(\"10\")', [10])"
    }
  }, 
  {
    "pk": 303, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Izpi\u0161ite poln kvadrat, sestavljen iz znaka `\"+\"`.\nVelikost kvadrata naj bo shranjena v spremenljivki `n`.\nNa primer, \u010de je `n = 4`, se naj izpi\u0161e\n\n    ++++\n    ++++\n    ++++\n    ++++\n\nKvadrat naj bo velikosti vsaj $7 \\times 7$ znakov.", 
      "timestamp": "2013-02-25 02:15:49", 
      "challenge": "[]", 
      "solution": "n = 7\nvrstica = n * \"+\" + \"\\n\"\nkvadrat = n * vrstica\nprint(kvadrat)", 
      "problem": 98, 
      "validation": "def izpis(source):\n    import io, sys\n    old_stdout = sys.stdout\n    new_stdout = io.StringIO()\n    sys.stdout = new_stdout\n    glob = {}\n    loc = {}\n    exec(source, glob, loc)\n    sys.stdout = old_stdout\n    return (new_stdout.getvalue().strip(),loc)\n\ndef preveriKvadrat(kvadrat, n):\n    vrstice = kvadrat.splitlines()\n    try:\n        n = int(n)\n    except:\n        Check.error(\"V spremenljivko n morate shraniti velikost kvadrata.\")\n    else:\n        if n < 7:\n            Check.error(\"Kvadrat ni velikosti vsaj 7 x 7.\")\n        if len(vrstice) != n:\n            Check.error(\"Kvadrat nima {0} vrstic.\", n)\n        for i in range(0, len(vrstice)):\n            vrstica = vrstice[i]\n            if len(vrstica.strip()) != n:\n                Check.error(\"{0}. vrstica nima prave dol\u017eine.\", i + 1)\n            elif vrstica != n * \"+\":\n                Check.error(\"{0}. vrstica ni sestavljena iz pravih znakov.\", i + 1)\n\n(resitev, okolje) = izpis(Check.current[\"solution\"])\npreveriKvadrat(resitev, okolje.get(\"n\"))"
    }
  }, 
  {
    "pk": 315, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `urediStevila(sez)`, ki bo seznam \u0161tevil `sez`\nuredila glede na zadnjo \u0161tevko. \u010ce se zadnje \u0161tevke ujemajo, naj \u0161tevila\nuredi po predzadnji \u0161tevki, in tako naprej (oziroma nazaj). Na primer:\n\n    >>> urediStevila([12, 3, 17, 21, 101, 33])\n    [101, 21, 12, 3, 33, 17]", 
      "timestamp": "2012-05-20 21:08:52", 
      "challenge": "[]", 
      "solution": "def urediStevila(sez): \n   sez.sort(key=lambda n: str(n)[::-1])\n   return sez", 
      "problem": 103, 
      "validation": "Check.equal('urediStevila([12,3,17,21,101,33])',[101, 21, 12, 3, 33, 17])\nCheck.equal('urediStevila([1,2,3,11,12,13])',[1, 11, 2, 12, 3, 13])"
    }
  }, 
  {
    "pk": 127, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "V spremenljivki `barva.las` in `barva.oci` shranite vektor \u0161tevil\nposameznih oseb z dano barvo las in o\u010di.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"NA\", \"108, 286, 71, 127\"], [\"NA\", \"220, 215, 93, 64\"]]", 
      "solution": "barva.las <- apply(HairEyeColor, 1, sum)\nbarva.oci <- apply(HairEyeColor, 2, sum)", 
      "problem": 46, 
      "validation": "check$equal(barva.las[\"Red\"], 71)\ncheck$equal(barva.oci[\"Brown\"], 220)\ncheck$challenge(toString(barva.las))\ncheck$challenge(toString(barva.oci))"
    }
  }, 
  {
    "pk": 130, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `tocke.dolzina(dolzina)`, ki sprejme dol\u017eino skoka\nter vrne \u0161tevilo to\u010dk za dol\u017eino. (K-to\u010dka je bila pri 120 to\u010dkah)", 
      "timestamp": "2012-12-03 14:09:30", 
      "challenge": "[[\"90\", \"6\"], [\"91\", \"7.8\"], [\"92\", \"9.6\"], [\"93\", \"11.4\"], [\"94\", \"13.2\"], [\"95\", \"15\"], [\"96\", \"16.8\"], [\"97\", \"18.6\"], [\"98\", \"20.4\"], [\"99\", \"22.2\"], [\"100\", \"24\"], [\"101\", \"25.8\"], [\"102\", \"27.6\"], [\"103\", \"29.4\"], [\"104\", \"31.2\"], [\"105\", \"33\"], [\"106\", \"34.8\"], [\"107\", \"36.6\"], [\"108\", \"38.4\"], [\"109\", \"40.2\"], [\"110\", \"42\"], [\"111\", \"43.8\"], [\"112\", \"45.6\"], [\"113\", \"47.4\"], [\"114\", \"49.2\"], [\"115\", \"51\"], [\"116\", \"52.8\"], [\"117\", \"54.6\"], [\"118\", \"56.4\"], [\"119\", \"58.2\"], [\"120\", \"60\"]]", 
      "solution": "tocke.dolzina <- function(dolzina) {\n  60 + 1.8 * (dolzina - 120)\n}", 
      "problem": 47, 
      "validation": "check$equal(tocke.dolzina(115), 51)\ncheck$equal(tocke.dolzina(125), 69)\ncheck$equal(tocke.dolzina(135), 87)\nfor (i in 90 : 120)\n  check$challenge(tocke.dolzina(i), i)"
    }
  }, 
  {
    "pk": 784, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `razbij(tablica)`, ki niz `tablica` razbije na del\npred in del po zvezdici ter ta dva dela vrne v naboru dol\u017eine dva.", 
      "timestamp": "2012-09-05 11:43:24", 
      "challenge": "[[\"LM*79957\", \"('LM', '79957')\"], [\"MN*16084\", \"('MN', '16084')\"], [\"BC*62407\", \"('BC', '62407')\"], [\"OP*87998\", \"('OP', '87998')\"], [\"DE*28841\", \"('DE', '28841')\"], [\"EF*65048\", \"('EF', '65048')\"], [\"JK*7163\", \"('JK', '7163')\"], [\"CD*42594\", \"('CD', '42594')\"], [\"UV*93693\", \"('UV', '93693')\"], [\"EF*91708\", \"('EF', '91708')\"], [\"ST*56879\", \"('ST', '56879')\"], [\"CD*14854\", \"('CD', '14854')\"], [\"PR*92625\", \"('PR', '92625')\"], [\"EF*51808\", \"('EF', '51808')\"], [\"FG*57635\", \"('FG', '57635')\"], [\"GH*44362\", \"('GH', '44362')\"], [\"DE*64101\", \"('DE', '64101')\"], [\"EF*60388\", \"('EF', '60388')\"], [\"ST*78999\", \"('ST', '78999')\"], [\"KL*75150\", \"('KL', '75150')\"], [\"UV*84953\", \"('UV', '84953')\"], [\"IJ*82376\", \"('IJ', '82376')\"], [\"FG*20075\", \"('FG', '20075')\"], [\"KL*56050\", \"('KL', '56050')\"], [\"HI*54029\", \"('HI', '54029')\"], [\"RS*21612\", \"('RS', '21612')\"], [\"JK*43583\", \"('JK', '43583')\"], [\"CD*1334\", \"('CD', '1334')\"], [\"UV*39073\", \"('UV', '39073')\"], [\"RS*76272\", \"('RS', '76272')\"], [\"BC*64467\", \"('BC', '64467')\"], [\"CD*62554\", \"('CD', '62554')\"], [\"PR*46165\", \"('PR', '46165')\"], [\"MN*31444\", \"('MN', '31444')\"], [\"FG*66855\", \"('FG', '66855')\"], [\"CD*2174\", \"('CD', '2174')\"], [\"UV*10953\", \"('UV', '10953')\"], [\"AB*95800\", \"('AB', '95800')\"], [\"NO*92571\", \"('NO', '92571')\"], [\"GH*40322\", \"('GH', '40322')\"], [\"UV*50813\", \"('UV', '50813')\"], [\"RS*36412\", \"('RS', '36412')\"], [\"NO*80591\", \"('NO', '80591')\"], [\"CD*93094\", \"('CD', '93094')\"], [\"LM*64177\", \"('LM', '64177')\"], [\"IJ*27936\", \"('IJ', '27936')\"], [\"JK*72803\", \"('JK', '72803')\"], [\"OP*27338\", \"('OP', '27338')\"], [\"UV*84613\", \"('UV', '84613')\"], [\"MN*46084\", \"('MN', '46084')\"], [\"BC*82167\", \"('BC', '82167')\"]]", 
      "solution": "def razbij(tablica):\n    return tuple(tablica.split(\"*\"))", 
      "problem": 250, 
      "validation": "Check.equal(\"\"\"razbij(\"MB*56-TR2\")\"\"\", (\"MB\", \"56-TR2\"))\nCheck.equal(\"\"\"razbij(\"LJ*AB-124\")\"\"\", (\"LJ\", \"AB-124\"))\nCheck.equal(\"\"\"razbij(\"KR*B25-13\")\"\"\", (\"KR\", \"B25-13\"))\n\n_rng=[1287631]\nfor i in range(50): _rng.append((_rng[-1]*1103515245+12345)%2**32)\nfor i in _rng:\n    tablica = \"ABCDEFGHIJKLMNOPRSTUVZ\"[i % 20:i % 20+2] + \"*\" + str(12347 * i % 100000)\n    Check.challenge(razbij(tablica), tablica)"
    }
  }, 
  {
    "pk": 761, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `naloga4(n, k, i)`, kot je zapisano v navodilih.", 
      "timestamp": "2012-08-27 09:32:34", 
      "challenge": "[]", 
      "solution": "def naloga4(n, k, i):\n    if (n, k, i) == (5, 3, 1):\n        return [1, 2, 3]\n    if (n, k, i) == (5, 3, 4):\n        return [1, 3, 4]\n    if (n, k, i) == (5, 3, 7):\n        return [2, 3, 4]", 
      "problem": 244, 
      "validation": "Check.equal(\"naloga4(5, 3, 1)\", [1, 2, 3])\nCheck.equal(\"naloga4(5, 3, 4)\", [1, 3, 4])\nCheck.equal(\"naloga4(5, 3, 7)\", [2, 3, 4])"
    }
  }, 
  {
    "pk": 124, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "V spremenljivko `preziveli` shranite matriko podatkov o skupnem\n\u0161tevilu pre\u017eivelih, razdeljeno po spolu in starosti.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"NA\", \"29, 28, 338, 316\"]]", 
      "solution": "preziveli <- apply(Titanic[, , , \"Yes\"], c(2, 3), sum)", 
      "problem": 45, 
      "validation": "check$equal(preziveli[\"Male\", \"Child\"], 29)\ncheck$equal(preziveli[\"Female\", \"Adult\"], 316)\ncheck$challenge(toString(preziveli))"
    }
  }, 
  {
    "pk": 547, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Napi\u0161i funkijo `okvir1( niz )`, ki okoli besede `niz` naredi okvir, sestavljen iz znakov `+`. Npr. klic\n`print( okvir1( \"banana\" ) )` naj izpi\u0161e\n\n     ++++++++\n     +banana+\n     ++++++++\n\nPomagaj si s funkcijo `len`, ki vrne dol\u017eino danega niza.", 
      "timestamp": "2012-03-05 12:14:34", 
      "challenge": "[[\"None\", \"['+++\\\\n+x+\\\\n+++\\\\n', '++++\\\\n+xx+\\\\n++++\\\\n', '+++++\\\\n+xxx+\\\\n+++++\\\\n', '++++++\\\\n+xxxx+\\\\n++++++\\\\n', '+++++++\\\\n+xxxxx+\\\\n+++++++\\\\n', '++++++++\\\\n+xxxxxx+\\\\n++++++++\\\\n', '+++++++++\\\\n+xxxxxxx+\\\\n+++++++++\\\\n']\"]]", 
      "solution": "def okvir1( niz):\n    n = len(niz)+2\n    rob = n*\"+\"+\"\\n\"\n    besedilo = \"+\"+ niz + \"+\"+\"\\n\"\n    return rob+besedilo+rob", 
      "problem": 179, 
      "validation": "Check.equal(\"\"\"okvir1( \"banana\" )\"\"\", \"++++++++\\n+banana+\\n++++++++\\n\" )\nCheck.equal(\"\"\"okvir1( \"\" )\"\"\", \"++\\n++\\n++\\n\" )\nCheck.equal(\"\"\"okvir1( \"a\" )\"\"\", \"+++\\n+a+\\n+++\\n\" )\n\nCheck.challenge([okvir1(a*\"x\") for a in range(1,8)])"
    }
  }, 
  {
    "pk": 287, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `uvozi(datoteka)`, ki dano datoteko s podatki uvozi\nv razpredelnico. Funkcija naj ustrezno uva\u017ea datoteke, ki so na voljo\nna [Gapminderju](http://www.gapminder.org/data/).\n\u010ce \u017eelite `CSV` datoteke, skopirajte povezavo da `XLS` datotek ter na\nkoncu `&output=xls` popravite v `&output=csv`.\n\nPrimeri datotek:\n\n- [pri\u010dakovana \u017eivljenska doba](http://spreadsheets.google.com/pub?key=phAwcNAVuyj2tPLxKvvnNPA&output=csv)\n- [GDP](http://spreadsheets.google.com/pub?key=phAwcNAVuyj1jiMAkmq1iMg&output=csv)\n- [velikost prebivalstva](http://spreadsheets.google.com/pub?key=phAwcNAVuyj0XOoBL_n5tAQ&output=csv)", 
      "timestamp": "2013-01-02 09:44:07", 
      "challenge": "[]", 
      "solution": "uvozi <- function(datoteka) {\n  tabela <- read.csv(datoteka, as.is=TRUE, row.names=1)\n  tabela[, ] <- lapply(tabela, function(col) as.numeric(gsub(\",\", \"\", col)))\n  return(tabela)\n}", 
      "problem": 92, 
      "validation": "if(!file.exists(\"gdp.csv\")) {\n  cat(\"Prena\u0161am datoteko \\\"gdp.csv\\\"... \")\n  download.file(\"http://pastebin.com/raw.php?i=L1ftrjiX\", \"gdp.csv\", quiet=TRUE)\n  cat(\"Datoteka je prene\u0161ena.\\n\")\n}\nif(!file.exists(\"population.csv\")) {\n  cat(\"Prena\u0161am datoteko \\\"population.csv\\\"... \")\n  download.file(\"http://pastebin.com/raw.php?i=2Jj2Q9zP\", \"population.csv\", quiet=TRUE)\n  cat(\"Datoteka je prene\u0161ena.\\n\")\n}\ngdp <- uvozi(\"gdp.csv\")\ncheck$equal(nrow(gdp), 259)\ncheck$equal(ncol(gdp), 211)\npopulation <- uvozi(\"population.csv\")\ncheck$equal(nrow(population), 259)\ncheck$equal(ncol(population), 232)\nif(is.null(rownames(gdp))) {\n  check$error(\"Uva\u017eanje pobri\u0161e imena vrstic.\")\n} else if(!(\"Slovenia\" %in% rownames(gdp))) {\n  check$error(\"Uva\u017eanje pokvari imena vrstic.\")\n} else if(is.null(colnames(gdp))) {\n  check$error(\"Uva\u017eanje pobri\u0161e imena stolpcev.\")\n} else if(!(\"X1982\" %in% colnames(gdp))) {\n  check$error(\"Uva\u017eanje pokvari imena stolpcev.\")\n} else {\n  check$equal(gdp[\"Slovenia\", \"X2010\"], 25040.68, precision=2)\n  check$equal(gdp[\"United Kingdom\", \"X1950\"], 9766.504, precision=3)\n  check$equal(gdp[\"Ethiopia\", \"X1970\"], 539.8842, precision=4)\n  check$equal(gdp[\"Cote d'Ivoire\", \"X2000\"], 1746.313, precision=3)\n  check$equal(gdp[\"Yemen, Rep.\", \"X1990\"], 1923.3, precision=1)\n  check$equal(population[\"Slovenia\", \"X2010\"], 2029680, precision=2)\n  check$equal(population[\"United Kingdom\", \"X1950\"], 50616012, precision=3)\n  check$equal(population[\"Ethiopia\", \"X1970\"], 28959382, precision=4)\n  check$equal(population[\"Cote d'Ivoire\", \"X2000\"], 16581653, precision=3)\n  check$equal(population[\"Yemen, Rep.\", \"X1990\"], 11948209, precision=1)\n}"
    }
  }, 
  {
    "pk": 539, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `ravninskaRazdalja(x1, y1, x2, y2)`, ki vrne\nrazdaljo med to\u010dkama (`x1`, `y1`) in (`x2`, `y2`).\n\n    >>> ravninskaRazdalja(1, 2, 3, 4)\n    2.82842712475", 
      "timestamp": "2012-03-04 16:51:44", 
      "challenge": "[[\"None\", \"50.0\"], [\"None\", \"50.0\"], [\"None\", \"50.003431\"], [\"None\", \"50.016074\"], [\"None\", \"50.039984\"], [\"None\", \"50.076335\"], [\"None\", \"50.125903\"], [\"None\", \"50.189237\"], [\"None\", \"50.26674\"], [\"None\", \"50.358713\"], [\"None\", \"50.465379\"], [\"None\", \"50.586898\"], [\"None\", \"50.723383\"], [\"None\", \"38.174018\"], [\"None\", \"38.39575\"], [\"None\", \"38.636906\"], [\"None\", \"38.897301\"], [\"None\", \"37.229021\"], [\"None\", \"37.141819\"], [\"None\", \"37.075118\"], [\"None\", \"37.029275\"], [\"None\", \"37.004586\"], [\"None\", \"37.001295\"], [\"None\", \"37.01959\"], [\"None\", \"37.059605\"], [\"None\", \"37.121422\"], [\"None\", \"24.314968\"], [\"None\", \"24.476049\"], [\"None\", \"24.669555\"], [\"None\", \"24.8949\"], [\"None\", \"25.151384\"], [\"None\", \"25.438211\"], [\"None\", \"25.754502\"], [\"None\", \"26.09931\"], [\"None\", \"24.698178\"], [\"None\", \"24.498323\"], [\"None\", \"24.33105\"], [\"None\", \"24.197178\"], [\"None\", \"24.0974\"], [\"None\", \"11.070231\"], [\"None\", \"11.004787\"], [\"None\", \"11.016182\"], [\"None\", \"11.10442\"], [\"None\", \"11.267924\"], [\"None\", \"11.503695\"], [\"None\", \"11.807604\"], [\"None\", \"12.174731\"], [\"None\", \"12.599721\"], [\"None\", \"13.077091\"], [\"None\", \"13.601471\"], [\"None\", \"14.167774\"], [\"None\", \"13.114877\"], [\"None\", \"6.525166\"], [\"None\", \"5.646199\"], [\"None\", \"4.786354\"], [\"None\", \"3.958587\"], [\"None\", \"3.18855\"], [\"None\", \"2.530215\"], [\"None\", \"2.092648\"], [\"None\", \"2.025258\"], [\"None\", \"2.360635\"], [\"None\", \"2.965638\"], [\"None\", \"3.711041\"], [\"None\", \"4.528345\"], [\"None\", \"5.385165\"], [\"None\", \"16.132476\"], [\"None\", \"16.500874\"], [\"None\", \"16.913566\"], [\"None\", \"17.117243\"], [\"None\", \"16.684926\"], [\"None\", \"16.295202\"], [\"None\", \"15.951273\"], [\"None\", \"15.656237\"], [\"None\", \"15.41298\"], [\"None\", \"15.224063\"], [\"None\", \"15.091602\"], [\"None\", \"15.017165\"], [\"None\", \"15.001688\"], [\"None\", \"28.024361\"], [\"None\", \"28.079525\"], [\"None\", \"28.166247\"], [\"None\", \"28.284271\"], [\"None\", \"28.433241\"], [\"None\", \"28.612707\"], [\"None\", \"28.82213\"], [\"None\", \"29.478806\"], [\"None\", \"29.196794\"], [\"None\", \"28.942883\"], [\"None\", \"28.717852\"], [\"None\", \"28.522415\"], [\"None\", \"28.357215\"], [\"None\", \"41.152488\"], [\"None\", \"41.08183\"], [\"None\", \"41.032933\"], [\"None\", \"41.005896\"], [\"None\", \"41.000782\"], [\"None\", \"41.017617\"], [\"None\", \"41.056393\"], [\"None\", \"41.117066\"], [\"None\", \"41.199557\"]]", 
      "solution": "def ravninskaRazdalja(x1, y1, x2, y2):\n    return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** (1 / 2)", 
      "problem": 177, 
      "validation": "Check.equal('ravninskaRazdalja(1, 2, 3, 4)', 2 ** (3 / 2))\nCheck.equal('ravninskaRazdalja(0, 0, 3, 4)', 5)\nfor i in range(100):\n    Check.challenge(ravninskaRazdalja(i - 50, i % 17, i % 13, i ** (1 / 2)))"
    }
  }, 
  {
    "pk": 610, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavi funkcijo `sifriraj(sifra, beseda)`, ki vrne besedo, za\u0161ifrirano\nz dano \u0161ifro. Predpostavite lahko, da vse \u010drke v besedi nastopajo v\n\u0161ifri.", 
      "timestamp": "2012-05-07 01:49:56", 
      "challenge": "[]", 
      "solution": "def sifriraj(sifra, beseda):\n    return ''.join([sifra[crka] for crka in beseda])", 
      "problem": 202, 
      "validation": "Check.equal('sifriraj(nasa_sifra, \"KOLOKVIJ\")', \"IRHRINBA\")\nCheck.equal('sifriraj(nasa_sifra, \"PESEM\")', \"JVTVU\")"
    }
  }, 
  {
    "pk": 788, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `prestej(a, s)`, ki vrne \u0161tevilo pojavitev znaka `a`\nv nizu `s`.", 
      "timestamp": "2012-09-05 11:43:36", 
      "challenge": "[[\"(3, 991821)\", \"0\"], [\"(8, 3077783810)\", \"2\"], [\"(4, 57506323)\", \"0\"], [\"(4, 243332176)\", \"1\"], [\"(3, 3174602313)\", \"3\"], [\"(1, 2488822606)\", \"0\"], [\"(7, 3870008431)\", \"1\"], [\"(8, 3758687612)\", \"2\"], [\"(0, 3714797061)\", \"1\"], [\"(8, 2505305690)\", \"0\"], [\"(0, 1526208651)\", \"1\"], [\"(8, 2577333608)\", \"1\"], [\"(6, 1079494017)\", \"0\"], [\"(1, 2790430246)\", \"0\"], [\"(0, 3259871847)\", \"0\"], [\"(2, 2316994580)\", \"1\"], [\"(0, 909785277)\", \"1\"], [\"(0, 3007442610)\", \"3\"], [\"(0, 964234755)\", \"0\"], [\"(3, 4095873408)\", \"1\"], [\"(6, 1557570489)\", \"0\"], [\"(5, 2270970878)\", \"0\"], [\"(2, 3547629407)\", \"1\"], [\"(7, 1549190572)\", \"1\"], [\"(5, 1345634933)\", \"1\"], [\"(0, 1429512714)\", \"0\"], [\"(2, 780417659)\", \"0\"], [\"(4, 2386595992)\", \"0\"], [\"(6, 2870743281)\", \"0\"], [\"(0, 3011695830)\", \"2\"], [\"(0, 1058145111)\", \"1\"], [\"(6, 66723396)\", \"3\"], [\"(0, 2471480109)\", \"2\"], [\"(3, 2595186786)\", \"0\"], [\"(5, 3964239347)\", \"0\"], [\"(8, 480041648)\", \"2\"], [\"(0, 3448433961)\", \"0\"], [\"(5, 2938087598)\", \"1\"], [\"(8, 3665036879)\", \"1\"], [\"(1, 1298985436)\", \"1\"], [\"(6, 356266725)\", \"3\"], [\"(1, 3829506490)\", \"0\"], [\"(3, 2132064363)\", \"3\"], [\"(8, 969232328)\", \"1\"], [\"(7, 872552545)\", \"1\"], [\"(6, 1146625926)\", \"3\"], [\"(1, 1522823239)\", \"1\"], [\"(0, 1573101684)\", \"1\"], [\"(0, 350673309)\", \"2\"], [\"(6, 1762045458)\", \"1\"], [\"(1, 4107127267)\", \"2\"]]", 
      "solution": "def prestej(a,s):\n    return s.count(a)", 
      "problem": 251, 
      "validation": "Check.equal(\"prestej('a','banane')\",2)\nCheck.equal(\"prestej('b','banane')\",1)\nCheck.equal(\"prestej('c','banane')\",0)\nCheck.equal(\"prestej('n','banane')\",2)\nCheck.equal(\"prestej('.','ba.na.ne.')\",3)\nCheck.equal(\"prestej('.','.......')\",7)\n\n_rng=[991821]\nfor i in range(50): _rng.append((_rng[-1]*1103515245+12345)%2**32)\nfor i in _rng:\n    Check.challenge(prestej(str(i%9), str(i)), (i % 9, i))"
    }
  }, 
  {
    "pk": 72, 
    "model": "tomo.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `uredi_z_izbiranjem(a)`, ki na mestu z izbiranjem\nuredi tabelo `a`.", 
      "timestamp": "2012-10-24 09:23:39", 
      "challenge": "[]", 
      "solution": "def uredi_z_izbiranjem(a):\n    for i in range(0, len(a) - 1):\n        j = i\n        for k in range(i + 1, len(a)):\n            if a[k] < a[j]:\n                j = k\n        (a[i], a[j]) = (a[j], a[i])", 
      "problem": 25, 
      "validation": "Check.run([\n    \"a = [2, 5, 6, 1, 4, 7, 3, 9, 8]\",\n    \"uredi_z_izbiranjem(a)\"\n], {'a': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nCheck.run([\n    \"a = [42]\",\n    \"uredi_z_izbiranjem(a)\"\n], {'a': [42]})\nCheck.run([\n    \"a = [1, 0]\",\n    \"uredi_z_izbiranjem(a)\"\n], {'a': [0, 1]})\nCheck.run([\n    \"a = []\",\n    \"uredi_z_izbiranjem(a)\"\n], {'a': []})"
    }
  }, 
  {
    "pk": 86, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Dana je neprazna tabela `a`, v kateri bi radi preuredili elemente tako,\nda bo `a[0]` postal pivot. To pomeni, da moramo dati vse elemente, ki\nso manj\u0161i od ali enaki `a[0]` na za\u010detek tabele, nato sledi `a[0]` in\nnato \u0161e elementi, ki so ve\u010dji od `a[0]`. Na primer, tabelo\n\n    [10, 4, 5, 15, 11, 2, 17, 0, 18]\n\npreuredimo v\n\n    [4, 5, 2, 0, 10, 15, 15, 17, 18]\n\n(Mo\u017enih je ve\u010d razli\u010dnih re\u0161itev, pomembno je, da je element 10 pivot.)\n\nSestavi funkcijo `premeci(a)`, ki preuredi tabelo `a` tako, da bo `a[0]`\npostal pivot. Funkcija naj vrne indeks, na katerem je po preurejanju\npristal pivot. Funkcija naj deluje v \u010dasu $O(n)$, kjer je $n$ dol\u017eina\ntabele `a`.\n\nkar dose\u017eemo\ntakole:\n\n1. Nastavimo `i = 1` in `j = n-1`.\n2. Pove\u010dujemo `i` dokler velja `i < j` in `a[i] < a[0]`.\n3. Zmanj\u0161ujemo `j` dokler velja `i < j` in `a[0] < a[j]`.\n4. Zamenjamo `a[i]` in `a[j]`.\n5. Korake od 2 do 4 ponavljamo, dokler je `i < j`.\n6. Postavimo `a[0]` na pravo mesto, ki je enako bodisi `i` bodisi `i - 1`\n   (premislite, kdaj je enako \u010demu!)\n\nPrimer uporabe:\n\n    >>> a = [10, 4, 5, 15, 11, 2, 17, 0, 18]\n    >>> premeci(a)\n    4\n    >>> a\n    [4, 5, 2, 0, 10, 15, 15, 17, 18]\n\nFunkcija naj deluje pravilno za tabele z vsaj dvema elementoma.", 
      "timestamp": "2012-10-24 09:46:15", 
      "challenge": "[]", 
      "solution": "def premeci(a):\n    i = 1\n    j = len(a) - 1\n    while i < j:\n        while i < j and a[i] < a[0]:\n            i += 1\n        while i < j and a[0] < a[j]:\n            j -= 1\n        a[i], a[j] = a[j], a[i]\n    if a[i] < a[0]:\n        a[0], a[i] = a[i], a[0]\n        return i\n    else:\n        a[0], a[i - 1] = a[i - 1], a[0]\n        return i - 1", 
      "problem": 37, 
      "validation": "Check.run([\n    \"a = [10, 4, 5, 15, 11, 2, 17, 0, 18]\",\n    \"p = premeci(a)\",\n    \"x = je_pivot(a, 4)\"\n], {'p': 4, 'x': True})\nCheck.run([\n    \"a = [18, 4, 5, 15, 11, 2, 17, 0, 10]\",\n    \"p = premeci(a)\",\n    \"x = je_pivot(a, 8)\"\n], {'p': 8, 'x': True})\nCheck.run([\n    \"a = [0, 4, 5, 15, 11, 2, 17, 18, 10]\",\n    \"p = premeci(a)\",\n    \"x = je_pivot(a, 0)\"\n], {'p': 0, 'x': True})"
    }
  }, 
  {
    "pk": 232, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `steviloDni(leto)`, ki vrne \u0161tevilo dni v\r\ndanem letu.", 
      "timestamp": "2012-12-14 14:57:42", 
      "challenge": "[[\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"]]", 
      "solution": "def steviloDni(leto):\r\n    if jePrestopno(leto):\r\n        return 366\r\n    else:\r\n        return 365", 
      "problem": 72, 
      "validation": "Check.equal('steviloDni(1900)', 365)\r\nCheck.equal('steviloDni(2000)', 366)\r\nCheck.equal('steviloDni(2004)', 366)\r\nCheck.equal('steviloDni(2011)', 365)\r\nfor leto in range(1900, 2100):\r\n    Check.challenge(steviloDni(leto))"
    }
  }, 
  {
    "pk": 674, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Hilbertova krivulja je sestavljena iz dveh razli\u010dnih sestavnih delov, ki\npa sta si zrcalna. Osnovni del je oglata \u010drka U (to je Hilbertova krivulja\nprvega reda):\n\n    |      |\n    |      |\n    |______|\n\nNari\u0161emo jo lahko v nasprotni smeri urinega kazalca, za\u010den\u0161i levo zgoraj\n(tip A) ali pa v smeri urinega kazalca, za\u010den\u0161i desno zgoraj (tip B).\nHilbertova krivulja prvega reda je \u010drka U tipa A.\nHilbertova krivulja drugega reda zgleda potem takole:\n\n      __    __                               __        __\n      __|  |__                               __|      |__\n     |   __   |  oz. razstavljeno na U-je |       __        | \n     |__|  |__|   in povezovalne dele       |__|      |__|\n\nNari\u0161emo jo tako, da se zavrtimo v desno za 90 stopinj, nato nari\u0161emo\nHilbertovo krivuljo prvega reda tipa B, nato se pomaknemo za eno enoto,\nse zavrtimo v levo za 90 stopinj, nari\u0161emo Hilbertovo krivuljo prvega\nreda tipa A, se spet pomaknemo za eno enoto, ponovno nari\u0161emo Hilbertovo\nkrivuljo prvega reda tipa A, se zavrtimo v levo za 90, pomaknemo za\neno enoto in kon\u010dno nari\u0161emo \u0161e eno Hilbertovo krivuljo prvega\nreda tipa B, na koncu pa se zavrtimo desno za 90 stopinj, da pridemo na\nisto orientacijo kot na za\u010detku. Tako dobimo Hilbertovo krivuljo drugega\nreda tipa A. Za tip B samo izmenjamo tipa A in B ter vrtenji v levo in\ndesno. Za Hilbertovo krivuljo poljubnega reda ravnamo enako, le da\nrekurzivno ri\u0161emo ustrezne krivulje ni\u017ejega reda. Bodite pozorni na to,\nda se orientacija \u017eelve po klicu funkcije ne spremeni.\n\nDefinirajte dve funkciji, `Hi(n, d)` in `iH(n, d)`, ki nari\u0161eta\nHilbertovo krivuljo reda $n$ tipa A oz. tipa B, pri tem pa je `d`\nvelikost najkraj\u0161ih daljic. Za $n=0$ naj funkciji ne naredita ni\u010desar.", 
      "timestamp": "2012-05-27 22:38:18", 
      "challenge": "[]", 
      "solution": "def Hi(n, d):\n    if n==0: return\n    T.rt(90)\n    iH(n-1, d)\n    T.fd(d)\n    T.lt(90)\n    Hi(n-1, d)\n    T.fd(d)\n    Hi(n-1, d)\n    T.lt(90)\n    T.fd(d)\n    iH(n-1,d)\n    T.rt(90)\n\ndef iH(n, d):\n    if n==0: return\n    T.lt(90)\n    Hi(n-1, d)\n    T.fd(d)\n    T.rt(90)\n    iH(n-1, d)\n    T.fd(d)\n    iH(n-1, d)\n    T.rt(90)\n    T.fd(d)\n    Hi(n-1,d)\n    T.lt(90)", 
      "problem": 218, 
      "validation": "T.pu()\nT.goto(-200,250)\nT.clear()\nT.rt(T.heading())\nT.pd()\nT.write('n=1, d=30')\nHi(1,30)\nT.pu()\nT.goto(-100,250)\nT.pd()\nT.write('n=2, d=30')\nHi(2,30)\nT.pu()\nT.goto(50,250)\nT.pd()\nT.write('n=3, d=20')\nHi(3,20)\nT.pu()\nT.goto(-200,70)\nT.pd()\nT.write('n=5, d=12')\nHi(5,12)\nT.update()\n\nCheck.equal(\"print('Preverite, da dobite pravilne slike.')\", None)\njunk=input('Pritisnite Enter za nadaljevanje.')"
    }
  }, 
  {
    "pk": 727, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite generator `naloga1b(n)`, kot je zapisano v navodilih.", 
      "timestamp": "2012-07-11 11:25:16", 
      "challenge": "[]", 
      "solution": "def naloga1b(n):\n    if n == 42387165:\n        m = {2, 4, 6, 8, 16, 38, 42, 238, 4238}\n    elif n == 1234567: \n        m = {2, 4, 6, 12, 34, 56, 234, 456, 1234, 3456, 23456, 123456}\n    elif n == 987654: \n        m = {98, 9876, 987654, 8, 876, 87654, 76, 7654, 6, 654, 54, 4}\n    for x in m:\n        yield x", 
      "problem": 232, 
      "validation": "Check.equal(\"set(naloga1b(42387165))\", {2, 4, 6, 8, 16, 38, 42, 238, 4238})\nCheck.equal(\"set(naloga1b(1234567))\", {2, 4, 6, 12, 34, 56, 234, 456, 1234, 3456, 23456, 123456})\nCheck.equal(\"set(naloga1b(987654))\", {98, 9876, 987654, 8, 876, 87654, 76, 7654, 6, 654, 54, 4})"
    }
  }, 
  {
    "pk": 497, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `nepopolnost(n)`, ki vrne absolutno razliko med\n\u0161tevilom `n` in vsoto vseh njegovih pravih deliteljev.", 
      "timestamp": "2012-06-04 08:46:52", 
      "challenge": "[[\"None\", \"7\"], [\"None\", \"30\"], [\"None\", \"6\"], [\"None\", \"52\"], [\"None\", \"12\"], [\"None\", \"38\"], [\"None\", \"8\"], [\"None\", \"34\"], [\"None\", \"26\"], [\"None\", \"58\"], [\"None\", \"48\"], [\"None\", \"60\"], [\"None\", \"28\"], [\"None\", \"22\"], [\"None\", \"1\"], [\"None\", \"46\"], [\"None\", \"12\"], [\"None\", \"66\"], [\"None\", \"10\"], [\"None\", \"42\"], [\"None\", \"4\"], [\"None\", \"70\"], [\"None\", \"51\"], [\"None\", \"72\"], [\"None\", \"34\"], [\"None\", \"26\"], [\"None\", \"12\"], [\"None\", \"58\"], [\"None\", \"12\"], [\"None\", \"78\"], [\"None\", \"26\"], [\"None\", \"41\"], [\"None\", \"38\"], [\"None\", \"82\"], [\"None\", \"56\"], [\"None\", \"62\"], [\"None\", \"40\"], [\"None\", \"54\"], [\"None\", \"4\"], [\"None\", \"88\"], [\"None\", \"54\"], [\"None\", \"70\"], [\"None\", \"16\"], [\"None\", \"58\"], [\"None\", \"44\"], [\"None\", \"70\"], [\"None\", \"60\"], [\"None\", \"96\"], [\"None\", \"25\"], [\"None\", \"42\"]]", 
      "solution": "def nepopolnost(n):\n    return abs(n - sum(praviDelitelji(n)))", 
      "problem": 162, 
      "validation": "Check.equal('nepopolnost(19)', 18)\nCheck.equal('nepopolnost(28)', 0)\nCheck.equal('nepopolnost(42)', 12)\nfor i in range(50, 100):\n    Check.challenge(nepopolnost(i))"
    }
  }, 
  {
    "pk": 769, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `prestejd(a,vhod)`, ki vrne \u0161tevilo znakov `a` v\ntekstovni datoteki z imenom `vhod`.", 
      "timestamp": "2012-09-05 09:34:51", 
      "challenge": "[]", 
      "solution": "def prestejd(a,vhod):\n    n=0\n    with open(vhod) as f:\n        for vrstica in f:\n            n += prestej(a,vrstica.strip('\\n'))\n    return n", 
      "problem": 247, 
      "validation": "with open(\"_test.0\",\"w\") as _f:\n    _f.write(\"\")\n\nCheck.equal(\"prestejd('a','_test.0')\", 0)\n\n_d=\"\"\"ena\\nbanana\\nse\\nena\\nbanana\\nin en kup n-jev!!\"\"\"\nwith open(\"_test.1\",\"w\") as _f:\n    _f.write(_d)\n\nCheck.equal(\"prestejd('n','_test.1')\", 9)"
    }
  }, 
  {
    "pk": 501, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `najvisjiStolp(skatle)`, ki vrne vi\u0161ino najvi\u0161jega\nstolpa, ki ga lahko sestavimo iz \u0161katel, \u010de jih lahko obra\u010damo.\nPri tem \u0161e vedno ni treba paziti na stabilnost stolpa.\nNa primer, najvi\u0161ji tak stolp iz \u0161katel z dimenzijami (50, 100, 100),\n(60, 50, 50) in (40, 40, 40) bi imel vi\u0161ino 200 cm, saj bi prvo \u0161katlo\nprevrnili na bok.", 
      "timestamp": "2012-06-04 08:48:05", 
      "challenge": "[[\"None\", \"0\"], [\"None\", \"1\"], [\"None\", \"17\"], [\"None\", \"44\"], [\"None\", \"71\"], [\"None\", \"116\"], [\"None\", \"147\"], [\"None\", \"170\"], [\"None\", \"206\"], [\"None\", \"232\"], [\"None\", \"256\"], [\"None\", \"292\"], [\"None\", \"322\"], [\"None\", \"347\"], [\"None\", \"367\"], [\"None\", \"416\"], [\"None\", \"470\"], [\"None\", \"499\"], [\"None\", \"553\"], [\"None\", \"606\"], [\"None\", \"642\"], [\"None\", \"653\"], [\"None\", \"705\"], [\"None\", \"754\"], [\"None\", \"777\"], [\"None\", \"830\"], [\"None\", \"882\"], [\"None\", \"927\"], [\"None\", \"957\"], [\"None\", \"986\"]]", 
      "solution": "def najvisjiStolp(skatle):\n    return sum(max(v, s, d) for v, s, d in skatle)", 
      "problem": 163, 
      "validation": "Check.equal('najvisjiStolp([(50, 100, 100), (60, 30, 50), (40, 40, 40)])', 200)\nCheck.equal('najvisjiStolp([(50, 100, 100), (60, 50, 50), (40, 40, 40)])', 200)\nCheck.equal('najvisjiStolp([(60, 30, 50), (40, 40, 40)])', 100)\nsez = []\nfor i in range(30):\n    sez.append((i ** 3 % 37, i ** 2 % 16, i ** 4 % 58))\n    Check.challenge(najvisjiStolp(sez))"
    }
  }, 
  {
    "pk": 915, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `naloga1b(t)`, kot je zapisano v navodilih.", 
      "timestamp": "2013-02-04 07:55:04", 
      "challenge": "[]", 
      "solution": "def naloga1b(t):\n    n = len(t)\n    return (n * (n + 1)) // 2 - sum(t)", 
      "problem": 310, 
      "validation": "Check.equal(\"naloga1b([6, 3, 2, 11, 10, 0, 8, 4, 1, 5, 9, 13, 7])\", 12)\nCheck.equal(\"naloga1b([11, 6, 5, 1, 8, 4, 2, 13, 10, 12, 3, 9, 0])\", 7)\nCheck.equal(\"naloga1b([12, 10, 9, 13, 6, 8, 3, 4, 0, 5, 1, 11, 7])\", 2)"
    }
  }, 
  {
    "pk": 734, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `zapisi(vhod, izhod)`, ki sprejme ime vhodne in\nizhodne datoteke. Iz vhodne datoteke prebere realna \u0161tevila, nato pa\njih v urejenem vrstnem redu shrani v izhodno datoteko. Pomagajte si\ns funkcijo iz prej\u0161nje naloge. \u0160tevila naj bodo urejena po velikosti od\nnajmanj\u0161ega do najve\u010djega. Pri tem moraj biti negativna \u0161tevila pred\npozitivnimi. Funkcija naj vrne \u0161tevilo zapisanih vrstic.", 
      "timestamp": "2012-07-12 09:56:50", 
      "challenge": "[]", 
      "solution": "def zapisi(vhod, izhod):\n    pod = preberi(vhod)\n    pod.sort()\n    with open(izhod, 'w') as f:\n        for x in pod:\n            print(x,file=f)\n    return len(pod)", 
      "problem": 235, 
      "validation": "_d=\"\"\"53.05\\n54.08\\n58.38\\n62.42\"\"\"\n\nwith open(\"_test.12\",\"w\") as _f:\n    _f.write(_d)\n    \nzapisi('_test.1','_test.11')\nif not _istedatoteke('_test.11', '_test.12'):\n    Check.error(\"Izhodna datoteka je napa\u010dna.\")"
    }
  }, 
  {
    "pk": 730, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `logaritem(x,n)`, ki izra\u010duna pribli\u017eek $\\ln(x)$\ntako, da se\u0161teje prvih $n$ \u010dlenov vrste. Pozor: vrsta je za $\\ln(1+x)$,\nmi pa \u017eelimo izra\u010dunati $\\ln(x)$. Lahko si pomagate s funkcijo iz\nprej\u0161nje naloge.", 
      "timestamp": "2012-07-12 10:29:15", 
      "challenge": "[]", 
      "solution": "def logaritem(x,n):\n    return sum(clen(x-1,i) for i in range(1,n+1))", 
      "problem": 234, 
      "validation": "Check.equal(\"logaritem(1,0)\", 0)\nCheck.equal(\"logaritem(1,2)\", 0)\nCheck.equal(\"logaritem(1,5)\", 0)\nCheck.equal(\"logaritem(4/3,10)\", 0.2876816792187924)\nCheck.equal(\"logaritem(3/4,10)\", -0.28768204431685185)\n\n##_rng=[991821]\n##for i in range(100): _rng.append((_rng[-1]*1103515245+12345)%2**32)\n##_m=max(_rng)/20\n##_rng=[x/_m for x in _rng[:50]]+_rng[50:]\n##\n##for i in range(50):\n##    _val=(_rng[i],_rng[i+50]%15)\n##    Check.challenge(logaritem(*_val), _val)"
    }
  }, 
  {
    "pk": 738, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `vsota(n)`, ki se\u0161teje prvih n \u010dlenov zgornje vrste.\nPri tem si pomagajte s funkcijo `clen`.", 
      "timestamp": "2012-07-12 11:24:50", 
      "challenge": "[]", 
      "solution": "def vsota(n):\n    return sum(clen(i) for i in range(1,n+1))", 
      "problem": 238, 
      "validation": "if not 'clen(' in Check.current[\"solution\"]:\n    Check.error(\"Va\u0161a re\u0161itev ne uporablja funkcije 'clen'.\")\n\nCheck.equal(\"vsota(1)\", 0.6666666666666666)\nCheck.equal(\"vsota(2)\", 0.9166666666666666)\nCheck.equal(\"vsota(5)\", 1.1904761904761905)\nCheck.equal(\"vsota(10)\", 1.3257575757575755)\nCheck.equal(\"vsota(100)\", 1.4802950883323625)\nCheck.equal(\"vsota(1000)\", 1.498002995008984)\n\n# for i in range(1,100):\n#     Check.challenge(vsota(3*i),3*i)"
    }
  }, 
  {
    "pk": 777, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `steviloPoMestih(tablice)`, ki vrne slovar, v katerem\nso klju\u010di oznake mest, vrednosti pa \u0161tevila registrskih tablic iz\nposameznega mesta v seznamu `tablice`.", 
      "timestamp": "2012-09-05 09:34:40", 
      "challenge": "[[\"['IJ*98776', 'AB*23470', 'IJ*98776', 'IJ*98776', 'JK*11123', 'EF*72858', 'IJ*98776', 'IJ*98776', 'BC*35817', 'EF*72858', 'EF*72858', 'GH*97552', 'IJ*98776', 'CD*71634', 'HI*86429', 'IJ*98776', 'IJ*98776', 'IJ*22246', 'DE*83981', 'CD*71634']\", \"[('AB', 1), ('BC', 1), ('CD', 2), ('DE', 1), ('EF', 3), ('GH', 1), ('HI', 1), ('IJ', 9), ('JK', 1)]\"], [\"['IJ*98776', 'HI*86429', 'JK*11123', 'BC*35817', 'IJ*98776', 'BC*35817', 'EF*72858', 'JK*11123', 'AB*23470', 'BC*35817', 'JK*34593', 'FG*85205', 'EF*72858', 'JK*34593', 'EF*72858', 'DE*83981', 'EF*96328', 'JK*34593', 'IJ*98776', 'BC*59287']\", \"[('AB', 1), ('BC', 4), ('DE', 1), ('EF', 4), ('FG', 1), ('HI', 1), ('IJ', 3), ('JK', 5)]\"], [\"['HI*86429', 'IJ*98776', 'IJ*98776', 'AB*23470', 'BC*35817', 'CD*48164', 'DE*60511', 'IJ*98776', 'CD*48164', 'GH*97552', 'JK*34593', 'IJ*22246', 'DE*60511', 'CD*48164', 'JK*11123', 'CD*71634', 'DE*60511', 'IJ*98776', 'FG*8675', 'CD*48164']\", \"[('AB', 1), ('BC', 1), ('CD', 5), ('DE', 3), ('FG', 1), ('GH', 1), ('HI', 1), ('IJ', 5), ('JK', 2)]\"], [\"['HI*86429', 'JK*11123', 'BC*35817', 'HI*86429', 'AB*23470', 'JK*11123', 'DE*60511', 'BC*35817', 'FG*85205', 'DE*60511', 'EF*72858', 'HI*9899', 'GH*97552', 'HI*9899', 'IJ*22246', 'DE*60511', 'JK*11123', 'BC*59287', 'AB*23470', 'FG*85205']\", \"[('AB', 2), ('BC', 3), ('DE', 3), ('EF', 1), ('FG', 2), ('GH', 1), ('HI', 4), ('IJ', 1), ('JK', 3)]\"], [\"['IJ*98776', 'AB*23470', 'AB*23470', 'IJ*98776', 'JK*11123', 'AB*23470', 'BC*35817', 'AB*23470', 'JK*11123', 'EF*72858', 'HI*86429', 'GH*97552', 'AB*46940', 'IJ*22246', 'DE*83981', 'AB*46940', 'BC*35817', 'AB*23470', 'DE*83981', 'AB*46940']\", \"[('AB', 8), ('BC', 2), ('DE', 2), ('EF', 1), ('GH', 1), ('HI', 1), ('IJ', 3), ('JK', 2)]\"], [\"['IJ*98776', 'HI*86429', 'BC*35817', 'BC*35817', 'JK*11123', 'HI*86429', 'IJ*98776', 'BC*35817', 'IJ*98776', 'BC*35817', 'JK*34593', 'JK*11123', 'BC*35817', 'FG*85205', 'DE*83981', 'HI*9899', 'IJ*22246', 'BC*35817', 'DE*83981', 'JK*34593']\", \"[('BC', 6), ('DE', 2), ('FG', 1), ('HI', 3), ('IJ', 4), ('JK', 4)]\"], [\"['JK*11123', 'IJ*98776', 'BC*35817', 'CD*48164', 'CD*48164', 'IJ*98776', 'FG*85205', 'GH*97552', 'HI*86429', 'CD*48164', 'EF*72858', 'CD*48164', 'BC*59287', 'IJ*98776', 'GH*97552', 'EF*96328', 'DE*83981', 'GH*97552', 'CD*48164', 'IJ*22246']\", \"[('BC', 2), ('CD', 5), ('DE', 1), ('EF', 2), ('FG', 1), ('GH', 3), ('HI', 1), ('IJ', 4), ('JK', 1)]\"], [\"['JK*11123', 'JK*11123', 'JK*11123', 'JK*11123', 'HI*86429', 'DE*60511', 'JK*11123', 'JK*11123', 'EF*72858', 'JK*11123', 'CD*48164', 'HI*86429', 'JK*11123', 'DE*60511', 'JK*34593', 'JK*11123', 'EF*96328', 'JK*11123', 'BC*59287', 'FG*8675']\", \"[('BC', 1), ('CD', 1), ('DE', 2), ('EF', 2), ('FG', 1), ('HI', 2), ('JK', 11)]\"], [\"['HI*86429', 'AB*23470', 'BC*35817', 'AB*23470', 'JK*11123', 'EF*72858', 'DE*60511', 'GH*97552', 'FG*85205', 'AB*23470', 'IJ*98776', 'GH*97552', 'GH*97552', 'EF*72858', 'HI*9899', 'CD*71634', 'EF*96328', 'GH*21022', 'GH*97552', 'GH*21022']\", \"[('AB', 3), ('BC', 1), ('CD', 1), ('DE', 1), ('EF', 3), ('FG', 1), ('GH', 6), ('HI', 2), ('IJ', 1), ('JK', 1)]\"], [\"['JK*11123', 'HI*86429', 'BC*35817', 'JK*11123', 'CD*48164', 'BC*35817', 'CD*48164', 'BC*35817', 'BC*35817', 'FG*85205', 'DE*60511', 'JK*34593', 'BC*59287', 'BC*35817', 'DE*60511', 'BC*59287', 'DE*60511', 'BC*35817', 'CD*48164', 'BC*35817']\", \"[('BC', 9), ('CD', 3), ('DE', 3), ('FG', 1), ('HI', 1), ('JK', 3)]\"], [\"['HI*86429', 'IJ*98776', 'JK*11123', 'AB*23470', 'CD*48164', 'CD*48164', 'HI*86429', 'EF*72858', 'JK*11123', 'GH*97552', 'GH*97552', 'CD*48164', 'JK*34593', 'AB*46940', 'BC*59287', 'GH*97552', 'BC*35817', 'EF*96328', 'JK*34593', 'AB*46940']\", \"[('AB', 3), ('BC', 2), ('CD', 3), ('EF', 2), ('GH', 3), ('HI', 2), ('IJ', 1), ('JK', 4)]\"], [\"['HI*86429', 'JK*11123', 'JK*11123', 'HI*86429', 'JK*11123', 'JK*11123', 'HI*86429', 'JK*11123', 'BC*35817', 'DE*60511', 'EF*72858', 'JK*11123', 'JK*34593', 'JK*11123', 'DE*60511', 'HI*86429', 'HI*86429', 'JK*11123', 'GH*97552', 'BC*35817']\", \"[('BC', 2), ('DE', 2), ('EF', 1), ('GH', 1), ('HI', 5), ('JK', 9)]\"], [\"['IJ*98776', 'AB*23470', 'HI*86429', 'IJ*98776', 'BC*35817', 'AB*23470', 'IJ*98776', 'CD*48164', 'EF*72858', 'EF*72858', 'FG*85205', 'IJ*22246', 'HI*9899', 'AB*23470', 'HI*86429', 'IJ*98776', 'FG*8675', 'CD*71634', 'BC*35817', 'EF*72858']\", \"[('AB', 3), ('BC', 2), ('CD', 2), ('EF', 3), ('FG', 2), ('HI', 3), ('IJ', 5)]\"], [\"['HI*86429', 'HI*86429', 'BC*35817', 'HI*86429', 'CD*48164', 'HI*86429', 'DE*60511', 'BC*35817', 'HI*9899', 'HI*86429', 'IJ*98776', 'JK*34593', 'GH*97552', 'HI*86429', 'HI*9899', 'DE*60511', 'FG*8675', 'BC*35817', 'JK*34593', 'HI*9899']\", \"[('BC', 3), ('CD', 1), ('DE', 2), ('FG', 1), ('GH', 1), ('HI', 9), ('IJ', 1), ('JK', 2)]\"], [\"['IJ*98776', 'IJ*98776', 'HI*86429', 'IJ*98776', 'CD*48164', 'IJ*98776', 'EF*72858', 'CD*48164', 'HI*9899', 'IJ*98776', 'HI*86429', 'CD*48164', 'HI*9899', 'GH*97552', 'FG*85205', 'EF*72858', 'DE*60511', 'CD*48164', 'GH*21022', 'IJ*45716']\", \"[('CD', 4), ('DE', 1), ('EF', 2), ('FG', 1), ('GH', 2), ('HI', 4), ('IJ', 6)]\"], [\"['HI*86429', 'JK*11123', 'IJ*98776', 'HI*86429', 'IJ*98776', 'DE*60511', 'AB*23470', 'DE*60511', 'HI*86429', 'DE*60511', 'HI*9899', 'FG*85205', 'DE*60511', 'BC*59287', 'HI*9899', 'JK*34593', 'CD*71634', 'DE*60511', 'CD*71634', 'HI*86429']\", \"[('AB', 1), ('BC', 1), ('CD', 2), ('DE', 5), ('FG', 1), ('HI', 6), ('IJ', 2), ('JK', 2)]\"], [\"['HI*86429', 'AB*23470', 'AB*23470', 'AB*23470', 'AB*23470', 'EF*72858', 'DE*60511', 'AB*23470', 'GH*97552', 'AB*23470', 'FG*85205', 'AB*23470', 'AB*23470', 'CD*71634', 'IJ*22246', 'CD*71634', 'DE*83981', 'AB*23470', 'AB*23470', 'GH*97552']\", \"[('AB', 10), ('CD', 2), ('DE', 2), ('EF', 1), ('FG', 1), ('GH', 2), ('HI', 1), ('IJ', 1)]\"], [\"['HI*86429', 'HI*86429', 'BC*35817', 'HI*86429', 'AB*23470', 'BC*35817', 'DE*60511', 'BC*35817', 'EF*72858', 'HI*86429', 'GH*97552', 'HI*9899', 'GH*97552', 'JK*34593', 'BC*59287', 'DE*60511', 'CD*71634', 'BC*35817', 'AB*23470', 'FG*8675']\", \"[('AB', 2), ('BC', 5), ('CD', 1), ('DE', 2), ('EF', 1), ('FG', 1), ('GH', 2), ('HI', 5), ('JK', 1)]\"], [\"['HI*86429', 'IJ*98776', 'JK*11123', 'AB*23470', 'BC*35817', 'CD*48164', 'DE*60511', 'EF*72858', 'GH*97552', 'GH*97552', 'CD*48164', 'IJ*22246', 'JK*34593', 'CD*48164', 'BC*59287', 'CD*71634', 'AB*46940', 'EF*96328', 'FG*8675', 'GH*97552']\", \"[('AB', 2), ('BC', 2), ('CD', 4), ('DE', 1), ('EF', 2), ('FG', 1), ('GH', 3), ('HI', 1), ('IJ', 2), ('JK', 2)]\"], [\"['IJ*98776', 'JK*11123', 'HI*86429', 'BC*35817', 'CD*48164', 'JK*11123', 'EF*72858', 'HI*86429', 'HI*9899', 'HI*9899', 'IJ*22246', 'JK*34593', 'HI*9899', 'HI*9899', 'HI*9899', 'DE*83981', 'GH*97552', 'HI*9899', 'GH*21022', 'HI*9899']\", \"[('BC', 1), ('CD', 1), ('DE', 1), ('EF', 1), ('GH', 2), ('HI', 9), ('IJ', 2), ('JK', 3)]\"], [\"['JK*11123', 'AB*23470', 'BC*35817', 'CD*48164', 'IJ*98776', 'AB*23470', 'JK*11123', 'GH*97552', 'JK*11123', 'IJ*22246', 'JK*11123', 'IJ*98776', 'BC*59287', 'IJ*22246', 'EF*72858', 'IJ*22246', 'IJ*98776', 'GH*21022', 'FG*85205', 'AB*46940']\", \"[('AB', 3), ('BC', 2), ('CD', 1), ('EF', 1), ('FG', 1), ('GH', 2), ('IJ', 6), ('JK', 4)]\"], [\"['HI*86429', 'HI*86429', 'AB*23470', 'HI*86429', 'AB*23470', 'HI*86429', 'AB*23470', 'FG*85205', 'GH*97552', 'HI*86429', 'IJ*22246', 'HI*9899', 'AB*23470', 'FG*85205', 'DE*60511', 'JK*34593', 'DE*83981', 'FG*85205', 'AB*23470', 'HI*33369']\", \"[('AB', 5), ('DE', 2), ('FG', 3), ('GH', 1), ('HI', 7), ('IJ', 1), ('JK', 1)]\"], [\"['IJ*98776', 'IJ*98776', 'HI*86429', 'IJ*98776', 'HI*86429', 'IJ*98776', 'IJ*98776', 'CD*48164', 'HI*9899', 'IJ*98776', 'EF*72858', 'EF*72858', 'HI*9899', 'IJ*98776', 'FG*85205', 'IJ*98776', 'AB*23470', 'CD*48164', 'EF*72858', 'IJ*45716']\", \"[('AB', 1), ('CD', 2), ('EF', 3), ('FG', 1), ('HI', 4), ('IJ', 9)]\"], [\"['IJ*98776', 'JK*11123', 'HI*86429', 'BC*35817', 'CD*48164', 'DE*60511', 'BC*35817', 'HI*86429', 'FG*85205', 'HI*9899', 'IJ*22246', 'JK*34593', 'HI*9899', 'DE*60511', 'AB*23470', 'BC*35817', 'CD*48164', 'HI*9899', 'GH*21022', 'FG*85205']\", \"[('AB', 1), ('BC', 3), ('CD', 2), ('DE', 2), ('FG', 2), ('GH', 1), ('HI', 5), ('IJ', 2), ('JK', 2)]\"], [\"['HI*86429', 'AB*23470', 'JK*11123', 'AB*23470', 'BC*35817', 'EF*72858', 'AB*23470', 'EF*72858', 'FG*85205', 'AB*23470', 'GH*97552', 'IJ*22246', 'JK*34593', 'EF*72858', 'AB*46940', 'AB*23470', 'JK*11123', 'EF*72858', 'FG*8675', 'GH*21022']\", \"[('AB', 6), ('BC', 1), ('EF', 4), ('FG', 2), ('GH', 2), ('HI', 1), ('IJ', 1), ('JK', 3)]\"], [\"['JK*11123', 'HI*86429', 'IJ*98776', 'JK*11123', 'JK*11123', 'BC*35817', 'FG*85205', 'DE*60511', 'DE*60511', 'FG*85205', 'CD*48164', 'JK*11123', 'IJ*22246', 'BC*35817', 'BC*59287', 'FG*85205', 'CD*71634', 'DE*83981', 'JK*11123', 'DE*60511']\", \"[('BC', 3), ('CD', 2), ('DE', 4), ('FG', 3), ('HI', 1), ('IJ', 2), ('JK', 5)]\"], [\"['IJ*98776', 'IJ*98776', 'BC*35817', 'IJ*98776', 'AB*23470', 'CD*48164', 'IJ*98776', 'GH*97552', 'DE*60511', 'IJ*98776', 'EF*72858', 'AB*23470', 'BC*35817', 'AB*46940', 'DE*83981', 'IJ*98776', 'FG*8675', 'GH*97552', 'HI*9899', 'EF*96328']\", \"[('AB', 3), ('BC', 2), ('CD', 1), ('DE', 2), ('EF', 2), ('FG', 1), ('GH', 2), ('HI', 1), ('IJ', 6)]\"], [\"['HI*86429', 'JK*11123', 'JK*11123', 'HI*86429', 'AB*23470', 'JK*11123', 'DE*60511', 'JK*11123', 'DE*60511', 'DE*60511', 'FG*85205', 'HI*9899', 'JK*34593', 'JK*11123', 'IJ*22246', 'DE*60511', 'FG*8675', 'JK*11123', 'AB*23470', 'DE*60511']\", \"[('AB', 2), ('DE', 5), ('FG', 2), ('HI', 3), ('IJ', 1), ('JK', 7)]\"], [\"['IJ*98776', 'AB*23470', 'BC*35817', 'IJ*98776', 'JK*11123', 'AB*23470', 'IJ*98776', 'GH*97552', 'EF*72858', 'EF*72858', 'CD*48164', 'GH*97552', 'BC*35817', 'AB*23470', 'JK*34593', 'IJ*98776', 'EF*72858', 'GH*21022', 'DE*83981', 'EF*72858']\", \"[('AB', 3), ('BC', 2), ('CD', 1), ('DE', 1), ('EF', 4), ('GH', 3), ('IJ', 4), ('JK', 2)]\"], [\"['IJ*98776', 'HI*86429', 'IJ*98776', 'BC*35817', 'JK*11123', 'HI*86429', 'IJ*98776', 'DE*60511', 'HI*86429', 'BC*35817', 'JK*11123', 'JK*11123', 'IJ*98776', 'HI*86429', 'DE*83981', 'HI*9899', 'DE*60511', 'DE*83981', 'DE*83981', 'HI*86429']\", \"[('BC', 2), ('DE', 5), ('HI', 6), ('IJ', 4), ('JK', 3)]\"], [\"['HI*86429', 'IJ*98776', 'IJ*98776', 'AB*23470', 'AB*23470', 'IJ*98776', 'HI*86429', 'IJ*98776', 'IJ*98776', 'GH*97552', 'HI*9899', 'AB*23470', 'DE*60511', 'GH*97552', 'IJ*98776', 'GH*97552', 'IJ*98776', 'IJ*98776', 'AB*23470', 'IJ*98776']\", \"[('AB', 4), ('DE', 1), ('GH', 3), ('HI', 3), ('IJ', 9)]\"], [\"['HI*86429', 'JK*11123', 'JK*11123', 'HI*86429', 'IJ*98776', 'DE*60511', 'DE*60511', 'JK*11123', 'EF*72858', 'DE*60511', 'GH*97552', 'FG*85205', 'JK*34593', 'BC*59287', 'JK*34593', 'DE*60511', 'GH*97552', 'JK*11123', 'CD*71634', 'FG*8675']\", \"[('BC', 1), ('CD', 1), ('DE', 4), ('EF', 1), ('FG', 2), ('GH', 2), ('HI', 2), ('IJ', 1), ('JK', 6)]\"], [\"['IJ*98776', 'AB*23470', 'HI*86429', 'IJ*98776', 'HI*86429', 'EF*72858', 'EF*72858', 'CD*48164', 'CD*48164', 'EF*72858', 'DE*60511', 'EF*72858', 'HI*9899', 'CD*71634', 'JK*11123', 'EF*72858', 'EF*72858', 'CD*71634', 'EF*72858', 'CD*48164']\", \"[('AB', 1), ('CD', 5), ('DE', 1), ('EF', 7), ('HI', 3), ('IJ', 2), ('JK', 1)]\"], [\"['JK*11123', 'HI*86429', 'JK*11123', 'JK*11123', 'DE*60511', 'BC*35817', 'JK*11123', 'JK*11123', 'CD*48164', 'FG*85205', 'HI*86429', 'DE*60511', 'JK*11123', 'JK*34593', 'IJ*98776', 'JK*11123', 'HI*86429', 'JK*34593', 'HI*33369', 'DE*83981']\", \"[('BC', 1), ('CD', 1), ('DE', 3), ('FG', 1), ('HI', 4), ('IJ', 1), ('JK', 9)]\"], [\"['IJ*98776', 'IJ*98776', 'HI*86429', 'IJ*98776', 'DE*60511', 'CD*48164', 'IJ*98776', 'CD*48164', 'IJ*98776', 'IJ*98776', 'CD*48164', 'AB*46940', 'HI*9899', 'CD*48164', 'BC*35817', 'IJ*98776', 'IJ*22246', 'CD*48164', 'AB*46940', 'IJ*98776']\", \"[('AB', 2), ('BC', 1), ('CD', 5), ('DE', 1), ('HI', 2), ('IJ', 9)]\"], [\"['HI*86429', 'JK*11123', 'JK*11123', 'HI*86429', 'AB*23470', 'JK*11123', 'DE*60511', 'JK*11123', 'JK*11123', 'DE*60511', 'HI*86429', 'HI*9899', 'JK*34593', 'HI*9899', 'HI*9899', 'DE*60511', 'GH*97552', 'JK*11123', 'AB*23470', 'JK*11123']\", \"[('AB', 2), ('DE', 3), ('GH', 1), ('HI', 6), ('JK', 8)]\"], [\"['IJ*98776', 'AB*23470', 'BC*35817', 'IJ*98776', 'IJ*98776', 'AB*23470', 'IJ*98776', 'GH*97552', 'BC*35817', 'EF*72858', 'DE*60511', 'IJ*98776', 'BC*35817', 'IJ*22246', 'IJ*98776', 'IJ*98776', 'DE*60511', 'GH*21022', 'IJ*98776', 'CD*71634']\", \"[('AB', 2), ('BC', 3), ('CD', 1), ('DE', 2), ('EF', 1), ('GH', 2), ('IJ', 9)]\"], [\"['IJ*98776', 'HI*86429', 'HI*86429', 'BC*35817', 'DE*60511', 'HI*86429', 'BC*35817', 'HI*86429', 'CD*48164', 'BC*35817', 'CD*48164', 'DE*60511', 'HI*9899', 'FG*85205', 'CD*71634', 'BC*35817', 'JK*34593', 'HI*86429', 'AB*46940', 'DE*83981']\", \"[('AB', 1), ('BC', 4), ('CD', 3), ('DE', 3), ('FG', 1), ('HI', 6), ('IJ', 1), ('JK', 1)]\"], [\"['HI*86429', 'IJ*98776', 'AB*23470', 'AB*23470', 'IJ*98776', 'IJ*98776', 'AB*23470', 'AB*23470', 'HI*9899', 'GH*97552', 'IJ*98776', 'IJ*98776', 'AB*23470', 'IJ*98776', 'AB*46940', 'AB*23470', 'EF*72858', 'AB*46940', 'CD*71634', 'IJ*45716']\", \"[('AB', 8), ('CD', 1), ('EF', 1), ('GH', 1), ('HI', 2), ('IJ', 7)]\"], [\"['JK*11123', 'JK*11123', 'IJ*98776', 'JK*11123', 'IJ*98776', 'DE*60511', 'CD*48164', 'DE*60511', 'BC*35817', 'JK*11123', 'JK*34593', 'FG*85205', 'IJ*22246', 'DE*60511', 'DE*83981', 'BC*59287', 'IJ*98776', 'DE*60511', 'FG*85205', 'BC*35817']\", \"[('BC', 3), ('CD', 1), ('DE', 5), ('FG', 2), ('IJ', 4), ('JK', 5)]\"], [\"['IJ*98776', 'AB*23470', 'BC*35817', 'IJ*98776', 'BC*35817', 'EF*72858', 'EF*72858', 'GH*97552', 'CD*48164', 'EF*72858', 'HI*9899', 'IJ*22246', 'BC*35817', 'EF*72858', 'EF*72858', 'EF*72858', 'FG*85205', 'GH*21022', 'BC*35817', 'CD*48164']\", \"[('AB', 1), ('BC', 4), ('CD', 2), ('EF', 6), ('FG', 1), ('GH', 2), ('HI', 1), ('IJ', 3)]\"], [\"['IJ*98776', 'HI*86429', 'IJ*98776', 'BC*35817', 'CD*48164', 'BC*35817', 'EF*72858', 'DE*60511', 'CD*48164', 'BC*35817', 'BC*35817', 'JK*34593', 'IJ*98776', 'BC*35817', 'DE*83981', 'DE*83981', 'CD*71634', 'DE*83981', 'GH*21022', 'DE*83981']\", \"[('BC', 5), ('CD', 3), ('DE', 5), ('EF', 1), ('GH', 1), ('HI', 1), ('IJ', 3), ('JK', 1)]\"], [\"['JK*11123', 'IJ*98776', 'AB*23470', 'CD*48164', 'CD*48164', 'CD*48164', 'FG*85205', 'AB*23470', 'AB*23470', 'CD*48164', 'JK*34593', 'CD*48164', 'FG*85205', 'AB*46940', 'HI*86429', 'EF*96328', 'FG*8675', 'AB*46940', 'CD*48164', 'AB*23470']\", \"[('AB', 6), ('CD', 6), ('EF', 1), ('FG', 3), ('HI', 1), ('IJ', 1), ('JK', 2)]\"], [\"['JK*11123', 'JK*11123', 'JK*11123', 'JK*11123', 'DE*60511', 'JK*11123', 'FG*85205', 'JK*11123', 'HI*86429', 'JK*11123', 'HI*9899', 'DE*60511', 'JK*11123', 'JK*11123', 'FG*85205', 'FG*85205', 'AB*23470', 'JK*11123', 'HI*33369', 'HI*86429']\", \"[('AB', 1), ('DE', 2), ('FG', 3), ('HI', 4), ('JK', 10)]\"], [\"['JK*11123', 'AB*23470', 'IJ*98776', 'CD*48164', 'JK*11123', 'AB*23470', 'JK*11123', 'IJ*98776', 'FG*85205', 'IJ*22246', 'BC*35817', 'GH*97552', 'IJ*22246', 'AB*23470', 'JK*34593', 'IJ*22246', 'IJ*22246', 'IJ*22246', 'JK*11123', 'GH*21022']\", \"[('AB', 3), ('BC', 1), ('CD', 1), ('FG', 1), ('GH', 2), ('IJ', 7), ('JK', 5)]\"], [\"['HI*86429', 'HI*86429', 'AB*23470', 'HI*86429', 'HI*86429', 'HI*86429', 'HI*86429', 'FG*85205', 'AB*23470', 'HI*86429', 'IJ*98776', 'HI*86429', 'AB*23470', 'HI*86429', 'JK*34593', 'HI*86429', 'DE*60511', 'FG*85205', 'HI*86429', 'BC*59287']\", \"[('AB', 3), ('BC', 1), ('DE', 1), ('FG', 2), ('HI', 11), ('IJ', 1), ('JK', 1)]\"], [\"['HI*86429', 'IJ*98776', 'BC*35817', 'AB*23470', 'CD*48164', 'IJ*98776', 'HI*86429', 'GH*97552', 'HI*9899', 'GH*97552', 'CD*48164', 'CD*48164', 'GH*97552', 'GH*97552', 'GH*97552', 'GH*97552', 'DE*83981', 'GH*97552', 'JK*34593', 'IJ*45716']\", \"[('AB', 1), ('BC', 1), ('CD', 3), ('DE', 1), ('GH', 7), ('HI', 3), ('IJ', 3), ('JK', 1)]\"], [\"['IJ*98776', 'JK*11123', 'BC*35817', 'BC*35817', 'AB*23470', 'DE*60511', 'EF*72858', 'BC*35817', 'DE*60511', 'HI*9899', 'IJ*98776', 'HI*9899', 'BC*35817', 'BC*59287', 'JK*34593', 'DE*83981', 'EF*96328', 'BC*59287', 'HI*9899', 'DE*60511']\", \"[('AB', 1), ('BC', 6), ('DE', 4), ('EF', 2), ('HI', 3), ('IJ', 2), ('JK', 2)]\"], [\"['HI*86429', 'AB*23470', 'BC*35817', 'AB*23470', 'JK*11123', 'EF*72858', 'AB*23470', 'GH*97552', 'EF*72858', 'AB*23470', 'DE*60511', 'GH*97552', 'GH*97552', 'CD*71634', 'GH*97552', 'AB*23470', 'DE*60511', 'GH*21022', 'GH*97552', 'EF*72858']\", \"[('AB', 5), ('BC', 1), ('CD', 1), ('DE', 2), ('EF', 3), ('GH', 6), ('HI', 1), ('JK', 1)]\"], [\"['JK*11123', 'HI*86429', 'JK*11123', 'JK*11123', 'CD*48164', 'BC*35817', 'CD*48164', 'JK*11123', 'AB*23470', 'FG*85205', 'FG*85205', 'JK*34593', 'JK*11123', 'JK*34593', 'JK*11123', 'BC*59287', 'GH*97552', 'JK*34593', 'CD*48164', 'BC*59287']\", \"[('AB', 1), ('BC', 3), ('CD', 3), ('FG', 2), ('GH', 1), ('HI', 1), ('JK', 9)]\"], [\"['IJ*98776', 'IJ*98776', 'IJ*98776', 'IJ*98776', 'BC*35817', 'CD*48164', 'EF*72858', 'IJ*98776', 'BC*35817', 'IJ*98776', 'IJ*22246', 'IJ*22246', 'IJ*98776', 'CD*48164', 'HI*86429', 'EF*72858', 'AB*46940', 'IJ*98776', 'BC*35817', 'CD*71634']\", \"[('AB', 1), ('BC', 3), ('CD', 3), ('EF', 2), ('HI', 1), ('IJ', 10)]\"]]", 
      "solution": "def steviloPoMestih(tablice):\n    stevilo = {}\n    for tablica in tablice:\n        mesto, _ = razbij(tablica)\n        stevilo[mesto] = stevilo.get(mesto, 0) + 1\n    return stevilo", 
      "problem": 248, 
      "validation": "Check.equal(\"\"\"steviloPoMestih([\"MB*56-TR2\", \"LJ*AB-124\", \"KR*B25-13\"])\"\"\", {\"MB\": 1, \"KR\": 1, \"LJ\": 1})\nCheck.equal(\"\"\"steviloPoMestih([\"LJ*AB-124\", \"LJ*BC-124\", \"LJ*CD-124\"])\"\"\", {\"LJ\": 3})\nCheck.equal(\"\"\"steviloPoMestih([])\"\"\", {})\n\n_rng=[1287631]\nfor i in range(50): _rng.append((_rng[-1]*1103515245+12345)%2**32)\nfor i in _rng:\n    tablice = []\n    for j in range(20):\n        k = i % (j + 3) + 7\n        tablice.append(\"ABCDEFGHIJKLMNOPRSTUVZ\"[k % 10:k % 10+2] + \"*\" + str(12347 * k % 100000))\n    Check.challenge(steviloPoMestih(tablice), tablice)"
    }
  }, 
  {
    "pk": 220, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite vektor `meti`, ki vsebuje 1000 metov kocke v primeru, ko je\nkocka ute\u017eena in \u0161tevilka 1 pade z verjetnostjo 1 / 4, \u0161tevilka 6 z\nverjetnostjo 1 / 8, ostale \u0161tevilke pa vse z enako verjetnostjo.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "p <- (1 - 1 / 4 - 1 / 8) / 4\nmeti <- sample(1 : 6, 1000, replace = TRUE, prob = c(1 / 4, p, p, p, p, 1 / 8))", 
      "problem": 64, 
      "validation": "sapply(1 : 6, function(i) {\n  k <- length(meti[meti == i])\n  pricakovano <- c(250, 156, 156, 156, 156, 125)[i]\n  if(k < pricakovano * 0.85) check$error(\"Met %i se ne pojavlja dovolj pogosto. (%i)\", i, k)\n  if(k > pricakovano * 1.15) check$error(\"Met %i se pojavlja prepogosto. (%i)\", i, k)\n})"
    }
  }, 
  {
    "pk": 710, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `clen(x,n)`, ki vrne $n$-ti \u010dlen v Taylorjevi vrsti\nza funkcijo $\\sin(x)$. Pri tem je prvi \u010dlen $x$, drugi \u010dlen je\n$-x^3/3!$, tretji \u010dlen je $x^5/5!$ itd. Pri tem si pomagajte s funkcijo\nfakulteta iz prej\u0161nje podnaloge.", 
      "timestamp": "2012-06-11 11:49:29", 
      "challenge": "[[\"(0.08650519031141869, 2)\", \"-0.000108\"], [\"(0.12456747404844293, 3)\", \"0.0\"], [\"(0.1695501730103806, 3)\", \"1e-06\"], [\"(0.22145328719723184, 4)\", \"0.0\"], [\"(0.28027681660899656, 4)\", \"0.0\"], [\"(0.34602076124567477, 5)\", \"0.0\"], [\"(0.41868512110726647, 5)\", \"0.0\"], [\"(0.4982698961937717, 6)\", \"0.0\"], [\"(0.5847750865051903, 6)\", \"0.0\"], [\"(0.6782006920415224, 7)\", \"0.0\"], [\"(0.7785467128027681, 7)\", \"0.0\"], [\"(0.8858131487889274, 8)\", \"0.0\"], [\"(1.0, 8)\", \"0.0\"], [\"(1.1211072664359862, 9)\", \"0.0\"], [\"(1.2491349480968859, 9)\", \"0.0\"], [\"(1.384083044982699, 10)\", \"0.0\"], [\"(1.5259515570934257, 10)\", \"0.0\"], [\"(1.6747404844290659, 11)\", \"0.0\"], [\"(1.8304498269896197, 11)\", \"0.0\"], [\"(1.9930795847750868, 12)\", \"0.0\"], [\"(2.1626297577854676, 12)\", \"0.0\"], [\"(2.339100346020761, 13)\", \"0.0\"], [\"(2.5224913494809686, 13)\", \"0.0\"], [\"(2.71280276816609, 14)\", \"0.0\"], [\"(2.9100346020761245, 14)\", \"0.0\"]]", 
      "solution": "def clen(x, n):\n    return (1 if n%2==1 else -1)*x**(2*n-1)/fakulteta(2*n-1)", 
      "problem": 219, 
      "validation": "Check.equal(\"clen(0,1)\", 0)\nCheck.equal(\"clen(0.5,2)\", -0.020833333333333332)\nCheck.equal(\"clen(0.5,4)\", -1.5500992063492063e-06)\nCheck.equal(\"clen(1,5)\", 2.7557319223985893e-06)\n\nfor i in range(5,30):\n    v=((i/17)**2,i//2)\n    Check.challenge(clen(*v),v)"
    }
  }, 
  {
    "pk": 835, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `kvadratna.enacba(a, b, c)`, ki za kvadratno ena\u010dbo\n$a x^2 - b x + c = 0$ ustrezno (glede na vrednost diskriminante) vrne niz:\n\n* `\"Kvadratna ena\u010dba ima realno re\u0161itev x = __.\"`,\n* `\"Kvadratna ena\u010dba ima realni re\u0161itvi x1 = __ in x2 = __.\"` ali\n* `\"Kvadratna ena\u010dba ima kompleksni re\u0161itvi x1 = __ in x2 = __.\"`\n\nKo ima ena\u010dba dve re\u0161itvi, pri prvi re\u0161itvi vzemite $+\\sqrt{D}$,\npri drugi pa $-\\sqrt{D}$.", 
      "timestamp": "2012-10-30 10:21:31", 
      "challenge": "[]", 
      "solution": "kvadratna.enacba <- function(a, b, c){ \n  D <- b ^ 2 - 4 * a * c\n  if(D == 0) {\n    x <- -b / (2 * a)\n    paste(\"Kvadratna ena\u010dba ima realno re\u0161itev x = \", x, \".\", sep =\"\")\n  } else if(D > 0) {\n    x1 <- (-b + sqrt(D)) / (2 * a)\n    x2 <- (-b - sqrt(D)) / (2 * a)\n    paste(\"Kvadratna ena\u010dba ima realni re\u0161itvi x1 = \", x1, \n          \" in x2 = \", x2, \".\", sep =\"\")\n  } else {\n    x1 <- (-b + sqrt(as.complex(D))) / (2 * a)\n    x2 <- (-b - sqrt(as.complex(D))) / (2 * a)\n    paste(\"Kvadratna ena\u010dba ima kompleksni re\u0161itvi x1 = \", x1, \n          \" in x2 = \", x2, \".\", sep =\"\")\n  } \n}", 
      "problem": 270, 
      "validation": "check$equal(kvadratna.enacba(2, 4, 2), \"Kvadratna ena\u010dba ima realno re\u0161itev x = -1.\")\ncheck$equal(kvadratna.enacba(2, -4, 2), \"Kvadratna ena\u010dba ima realno re\u0161itev x = 1.\")\ncheck$equal(kvadratna.enacba(2, 6, 4), \"Kvadratna ena\u010dba ima realni re\u0161itvi x1 = -1 in x2 = -2.\")\ncheck$equal(kvadratna.enacba(2, 0, 2), \"Kvadratna ena\u010dba ima kompleksni re\u0161itvi x1 = 0+1i in x2 = 0-1i.\")\ncheck$equal(kvadratna.enacba(2, -4, 4), \"Kvadratna ena\u010dba ima kompleksni re\u0161itvi x1 = 1+1i in x2 = 1-1i.\")"
    }
  }, 
  {
    "pk": 797, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `steviloDni(leto)`, ki vrne \u0161tevilo dni v\ndanem letu.", 
      "timestamp": "2012-10-01 12:26:03", 
      "challenge": "[[\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"366\"], [\"None\", \"365\"], [\"None\", \"365\"], [\"None\", \"365\"]]", 
      "solution": "def steviloDni(leto):\n    if jePrestopno(leto):\n        return 366\n    else:\n        return 365", 
      "problem": 253, 
      "validation": "Check.equal('steviloDni(1900)', 365)\nCheck.equal('steviloDni(2000)', 366)\nCheck.equal('steviloDni(2004)', 366)\nCheck.equal('steviloDni(2011)', 365)\nfor leto in range(1900, 2100):\n    Check.challenge(steviloDni(leto))"
    }
  }, 
  {
    "pk": 13, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `ljubljeni(d)`, ki sprejme slovar zaljubljenih\nin vrne _mno\u017eico_ tistih, ki so ljubljeni.", 
      "timestamp": "2012-10-11 12:16:47", 
      "challenge": "[[\"None\", \"['Bine', 'Cene', 'Davorka']\"]]", 
      "solution": "def ljubljeni(d):\n    return {ljubljen for oseba in d for ljubljen in d[oseba]}", 
      "problem": 9, 
      "validation": "Check.equal(\"\"\"ljubljeni({'Ana' : {'Bine','Cene'},\n                          'Bine' : set(),\n                          'Cene' : {'Bine'},\n                          'Davorka' : {'Davorka'},\n                          'Eva' : {'Bine'}})\"\"\",\n            {'Bine', 'Davorka', 'Cene'})\nCheck.equal('ljubljeni({})', set())\nCheck.challenge(ljubljeni({'Ana' : {'Bine','Cene'},\n                           'Bine' : set(),\n                           'Cene' : {'Bine'},\n                           'Davorka' : {'Davorka'},\n                           'Eva' : {'Bine'}}))"
    }
  }, 
  {
    "pk": 21, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `celziji(fahrenheiti)`, ki pretvarja iz\nFahrenheitov v stopinje Celzija.", 
      "timestamp": "2012-10-22 10:27:37", 
      "challenge": "[]", 
      "solution": "celziji <- function(fahrenheiti) {\n  (fahrenheiti - 32) * 5 / 9\n}", 
      "problem": 16, 
      "validation": "check$equal(celziji(455), 235)\ncheck$equal(celziji(914), 490)\ncheck$equal(celziji(-40), -40)"
    }
  }, 
  {
    "pk": 765, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `fk(x, k)`, ki izra\u010duna `k`-ti kompozitum funkcije `f`\nv to\u010dki `x`, torej\n$fk(x, k) = f^k(x) = \\underbrace{f \\circ f \\circ \\cdots \\circ f}_{k}(x)$.", 
      "timestamp": "2012-09-05 09:34:47", 
      "challenge": "[[\"None\", \"182\"], [\"None\", \"10\"], [\"None\", \"7252\"], [\"None\", \"1698277\"], [\"None\", \"2114\"], [\"None\", \"653177\"], [\"None\", \"112\"], [\"None\", \"952\"], [\"None\", \"217\"], [\"None\", \"20\"], [\"None\", \"112\"], [\"None\", \"7054383\"], [\"None\", \"2351461\"], [\"None\", \"914452\"], [\"None\", \"7446292\"], [\"None\", \"5\"], [\"None\", \"783818\"], [\"None\", \"25\"], [\"None\", \"141519\"], [\"None\", \"35271936\"], [\"None\", \"409154452\"], [\"None\", \"16460234\"], [\"None\", \"2351461\"], [\"None\", \"1155\"], [\"None\", \"3325\"], [\"None\", \"21770\"], [\"None\", \"169305290\"], [\"None\", \"1358\"], [\"None\", \"147\"], [\"None\", \"10\"], [\"None\", \"112\"], [\"None\", \"1437002\"], [\"None\", \"169305290\"], [\"None\", \"1698277\"], [\"None\", \"3919104\"], [\"None\", \"47029241\"], [\"None\", \"147\"], [\"None\", \"65840943\"], [\"None\", \"169305290\"], [\"None\", \"1175727\"], [\"None\", \"97972\"], [\"None\", \"5\"], [\"None\", \"6041\"], [\"None\", \"16460234\"], [\"None\", \"228613\"], [\"None\", \"1437002\"], [\"None\", \"169305290\"], [\"None\", \"21770\"], [\"None\", \"169305290\"], [\"None\", \"65840943\"], [\"None\", \"3919104\"]]", 
      "solution": "def fk(x,k):\n    if k==0:\n        return x\n    elif k==1:\n        return f(x)\n    else:\n        return fk(f(x),k-1)", 
      "problem": 245, 
      "validation": "Check.equal(\"fk(0,0)\",0)\nCheck.equal(\"fk(0,1)\",0)\nCheck.equal(\"fk(0,2)\",0)\nCheck.equal(\"fk(0,20)\",0)\nCheck.equal(\"fk(1,2)\",49)\nCheck.equal(\"fk(-1,2)\",245)\nCheck.equal(\"fk(-1,5)\",54425)\nCheck.equal(\"fk(-1,10)\",423263225)\n\n_rng=[991821]\nfor i in range(50): _rng.append((_rng[-1]*1103515245+12345)%2**32)\nfor i in _rng:\n    Check.challenge(fk(i%35,i%10))"
    }
  }, 
  {
    "pk": 773, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `vsotaSosedov(sez, i)`, ki vrne vsoto `i`. in `i + 1`.\nelementa v seznamu `sez`, v primeru da ta dva elementa obstajata, in\n`None` sicer.", 
      "timestamp": "2012-09-05 09:37:58", 
      "challenge": "[[\"([1, 1, 8, 343, 1, 1, 64, 343, 343, 729], 0)\", \"2\"], [\"([1, 1, 8, 343, 1, 1, 64, 343, 343, 729], 1)\", \"9\"], [\"([1, 1, 8, 343, 1, 1, 64, 343, 343, 729], 2)\", \"351\"], [\"([1, 1, 8, 343, 1, 1, 64, 343, 343, 729], 3)\", \"344\"], [\"([1, 1, 8, 343, 1, 1, 64, 343, 343, 729], 4)\", \"2\"], [\"([1, 1, 8, 343, 1, 1, 64, 343, 343, 729], 5)\", \"65\"], [\"([1, 1, 8, 343, 1, 1, 64, 343, 343, 729], 6)\", \"407\"], [\"([1, 1, 8, 343, 1, 1, 64, 343, 343, 729], 7)\", \"686\"], [\"([1, 1, 8, 343, 1, 1, 64, 343, 343, 729], 8)\", \"1072\"], [\"([1, 1, 8, 343, 1, 1, 64, 343, 343, 729], 9)\", \"None\"], [\"([1, 1, 8, 343, 1, 1, 64, 343, 343, 729], 10)\", \"None\"], [\"([1, 1, 8, 343, 1, 1, 64, 343, 343, 729], 11)\", \"None\"], [\"([1, 1, 8, 343, 1, 1, 64, 343, 343, 729], 12)\", \"None\"], [\"([1, 1, 8, 343, 1, 1, 64, 343, 343, 729], 13)\", \"None\"], [\"([1, 1, 8, 343, 1, 1, 64, 343, 343, 729], 14)\", \"None\"], [\"([8, 64, 1, 64, 343, 8, 27, 64, 1728, 512], 0)\", \"72\"], [\"([8, 64, 1, 64, 343, 8, 27, 64, 1728, 512], 1)\", \"65\"], [\"([8, 64, 1, 64, 343, 8, 27, 64, 1728, 512], 2)\", \"65\"], [\"([8, 64, 1, 64, 343, 8, 27, 64, 1728, 512], 3)\", \"407\"], [\"([8, 64, 1, 64, 343, 8, 27, 64, 1728, 512], 4)\", \"351\"], [\"([8, 64, 1, 64, 343, 8, 27, 64, 1728, 512], 5)\", \"35\"], [\"([8, 64, 1, 64, 343, 8, 27, 64, 1728, 512], 6)\", \"91\"], [\"([8, 64, 1, 64, 343, 8, 27, 64, 1728, 512], 7)\", \"1792\"], [\"([8, 64, 1, 64, 343, 8, 27, 64, 1728, 512], 8)\", \"2240\"], [\"([8, 64, 1, 64, 343, 8, 27, 64, 1728, 512], 9)\", \"None\"], [\"([8, 64, 1, 64, 343, 8, 27, 64, 1728, 512], 10)\", \"None\"], [\"([8, 64, 1, 64, 343, 8, 27, 64, 1728, 512], 11)\", \"None\"], [\"([8, 64, 1, 64, 343, 8, 27, 64, 1728, 512], 12)\", \"None\"], [\"([8, 64, 1, 64, 343, 8, 27, 64, 1728, 512], 13)\", \"None\"], [\"([8, 64, 1, 64, 343, 8, 27, 64, 1728, 512], 14)\", \"None\"], [\"([1, 27, 64, 125, 216, 1, 125, 729, 1728, 1331], 0)\", \"28\"], [\"([1, 27, 64, 125, 216, 1, 125, 729, 1728, 1331], 1)\", \"91\"], [\"([1, 27, 64, 125, 216, 1, 125, 729, 1728, 1331], 2)\", \"189\"], [\"([1, 27, 64, 125, 216, 1, 125, 729, 1728, 1331], 3)\", \"341\"], [\"([1, 27, 64, 125, 216, 1, 125, 729, 1728, 1331], 4)\", \"217\"], [\"([1, 27, 64, 125, 216, 1, 125, 729, 1728, 1331], 5)\", \"126\"], [\"([1, 27, 64, 125, 216, 1, 125, 729, 1728, 1331], 6)\", \"854\"], [\"([1, 27, 64, 125, 216, 1, 125, 729, 1728, 1331], 7)\", \"2457\"], [\"([1, 27, 64, 125, 216, 1, 125, 729, 1728, 1331], 8)\", \"3059\"], [\"([1, 27, 64, 125, 216, 1, 125, 729, 1728, 1331], 9)\", \"None\"], [\"([1, 27, 64, 125, 216, 1, 125, 729, 1728, 1331], 10)\", \"None\"], [\"([1, 27, 64, 125, 216, 1, 125, 729, 1728, 1331], 11)\", \"None\"], [\"([1, 27, 64, 125, 216, 1, 125, 729, 1728, 1331], 12)\", \"None\"], [\"([1, 27, 64, 125, 216, 1, 125, 729, 1728, 1331], 13)\", \"None\"], [\"([1, 27, 64, 125, 216, 1, 125, 729, 1728, 1331], 14)\", \"None\"], [\"([64, 0, 27, 8, 216, 64, 512, 216, 343, 1000], 0)\", \"64\"], [\"([64, 0, 27, 8, 216, 64, 512, 216, 343, 1000], 1)\", \"27\"], [\"([64, 0, 27, 8, 216, 64, 512, 216, 343, 1000], 2)\", \"35\"], [\"([64, 0, 27, 8, 216, 64, 512, 216, 343, 1000], 3)\", \"224\"], [\"([64, 0, 27, 8, 216, 64, 512, 216, 343, 1000], 4)\", \"280\"], [\"([64, 0, 27, 8, 216, 64, 512, 216, 343, 1000], 5)\", \"576\"], [\"([64, 0, 27, 8, 216, 64, 512, 216, 343, 1000], 6)\", \"728\"], [\"([64, 0, 27, 8, 216, 64, 512, 216, 343, 1000], 7)\", \"559\"], [\"([64, 0, 27, 8, 216, 64, 512, 216, 343, 1000], 8)\", \"1343\"], [\"([64, 0, 27, 8, 216, 64, 512, 216, 343, 1000], 9)\", \"None\"], [\"([64, 0, 27, 8, 216, 64, 512, 216, 343, 1000], 10)\", \"None\"], [\"([64, 0, 27, 8, 216, 64, 512, 216, 343, 1000], 11)\", \"None\"], [\"([64, 0, 27, 8, 216, 64, 512, 216, 343, 1000], 12)\", \"None\"], [\"([64, 0, 27, 8, 216, 64, 512, 216, 343, 1000], 13)\", \"None\"], [\"([64, 0, 27, 8, 216, 64, 512, 216, 343, 1000], 14)\", \"None\"], [\"([27, 1, 8, 27, 64, 27, 8, 343, 0, 729], 0)\", \"28\"], [\"([27, 1, 8, 27, 64, 27, 8, 343, 0, 729], 1)\", \"9\"], [\"([27, 1, 8, 27, 64, 27, 8, 343, 0, 729], 2)\", \"35\"], [\"([27, 1, 8, 27, 64, 27, 8, 343, 0, 729], 3)\", \"91\"], [\"([27, 1, 8, 27, 64, 27, 8, 343, 0, 729], 4)\", \"91\"], [\"([27, 1, 8, 27, 64, 27, 8, 343, 0, 729], 5)\", \"35\"], [\"([27, 1, 8, 27, 64, 27, 8, 343, 0, 729], 6)\", \"351\"], [\"([27, 1, 8, 27, 64, 27, 8, 343, 0, 729], 7)\", \"343\"], [\"([27, 1, 8, 27, 64, 27, 8, 343, 0, 729], 8)\", \"729\"], [\"([27, 1, 8, 27, 64, 27, 8, 343, 0, 729], 9)\", \"None\"], [\"([27, 1, 8, 27, 64, 27, 8, 343, 0, 729], 10)\", \"None\"], [\"([27, 1, 8, 27, 64, 27, 8, 343, 0, 729], 11)\", \"None\"], [\"([27, 1, 8, 27, 64, 27, 8, 343, 0, 729], 12)\", \"None\"], [\"([27, 1, 8, 27, 64, 27, 8, 343, 0, 729], 13)\", \"None\"], [\"([27, 1, 8, 27, 64, 27, 8, 343, 0, 729], 14)\", \"None\"], [\"([64, 64, 8, 0, 1, 64, 1, 64, 1728, 8], 0)\", \"128\"], [\"([64, 64, 8, 0, 1, 64, 1, 64, 1728, 8], 1)\", \"72\"], [\"([64, 64, 8, 0, 1, 64, 1, 64, 1728, 8], 2)\", \"8\"], [\"([64, 64, 8, 0, 1, 64, 1, 64, 1728, 8], 3)\", \"1\"], [\"([64, 64, 8, 0, 1, 64, 1, 64, 1728, 8], 4)\", \"65\"], [\"([64, 64, 8, 0, 1, 64, 1, 64, 1728, 8], 5)\", \"65\"], [\"([64, 64, 8, 0, 1, 64, 1, 64, 1728, 8], 6)\", \"65\"], [\"([64, 64, 8, 0, 1, 64, 1, 64, 1728, 8], 7)\", \"1792\"], [\"([64, 64, 8, 0, 1, 64, 1, 64, 1728, 8], 8)\", \"1736\"], [\"([64, 64, 8, 0, 1, 64, 1, 64, 1728, 8], 9)\", \"None\"], [\"([64, 64, 8, 0, 1, 64, 1, 64, 1728, 8], 10)\", \"None\"], [\"([64, 64, 8, 0, 1, 64, 1, 64, 1728, 8], 11)\", \"None\"], [\"([64, 64, 8, 0, 1, 64, 1, 64, 1728, 8], 12)\", \"None\"], [\"([64, 64, 8, 0, 1, 64, 1, 64, 1728, 8], 13)\", \"None\"], [\"([64, 64, 8, 0, 1, 64, 1, 64, 1728, 8], 14)\", \"None\"], [\"([64, 125, 125, 1, 512, 729, 0, 125, 343, 125], 0)\", \"189\"], [\"([64, 125, 125, 1, 512, 729, 0, 125, 343, 125], 1)\", \"250\"], [\"([64, 125, 125, 1, 512, 729, 0, 125, 343, 125], 2)\", \"126\"], [\"([64, 125, 125, 1, 512, 729, 0, 125, 343, 125], 3)\", \"513\"], [\"([64, 125, 125, 1, 512, 729, 0, 125, 343, 125], 4)\", \"1241\"], [\"([64, 125, 125, 1, 512, 729, 0, 125, 343, 125], 5)\", \"729\"], [\"([64, 125, 125, 1, 512, 729, 0, 125, 343, 125], 6)\", \"125\"], [\"([64, 125, 125, 1, 512, 729, 0, 125, 343, 125], 7)\", \"468\"], [\"([64, 125, 125, 1, 512, 729, 0, 125, 343, 125], 8)\", \"468\"], [\"([64, 125, 125, 1, 512, 729, 0, 125, 343, 125], 9)\", \"None\"], [\"([64, 125, 125, 1, 512, 729, 0, 125, 343, 125], 10)\", \"None\"], [\"([64, 125, 125, 1, 512, 729, 0, 125, 343, 125], 11)\", \"None\"], [\"([64, 125, 125, 1, 512, 729, 0, 125, 343, 125], 12)\", \"None\"], [\"([64, 125, 125, 1, 512, 729, 0, 125, 343, 125], 13)\", \"None\"], [\"([64, 125, 125, 1, 512, 729, 0, 125, 343, 125], 14)\", \"None\"], [\"([8, 8, 0, 216, 8, 8, 343, 8, 125, 0], 0)\", \"16\"], [\"([8, 8, 0, 216, 8, 8, 343, 8, 125, 0], 1)\", \"8\"], [\"([8, 8, 0, 216, 8, 8, 343, 8, 125, 0], 2)\", \"216\"], [\"([8, 8, 0, 216, 8, 8, 343, 8, 125, 0], 3)\", \"224\"], [\"([8, 8, 0, 216, 8, 8, 343, 8, 125, 0], 4)\", \"16\"], [\"([8, 8, 0, 216, 8, 8, 343, 8, 125, 0], 5)\", \"351\"], [\"([8, 8, 0, 216, 8, 8, 343, 8, 125, 0], 6)\", \"351\"], [\"([8, 8, 0, 216, 8, 8, 343, 8, 125, 0], 7)\", \"133\"], [\"([8, 8, 0, 216, 8, 8, 343, 8, 125, 0], 8)\", \"125\"], [\"([8, 8, 0, 216, 8, 8, 343, 8, 125, 0], 9)\", \"None\"], [\"([8, 8, 0, 216, 8, 8, 343, 8, 125, 0], 10)\", \"None\"], [\"([8, 8, 0, 216, 8, 8, 343, 8, 125, 0], 11)\", \"None\"], [\"([8, 8, 0, 216, 8, 8, 343, 8, 125, 0], 12)\", \"None\"], [\"([8, 8, 0, 216, 8, 8, 343, 8, 125, 0], 13)\", \"None\"], [\"([8, 8, 0, 216, 8, 8, 343, 8, 125, 0], 14)\", \"None\"], [\"([64, 27, 8, 343, 216, 729, 512, 27, 1, 729], 0)\", \"91\"], [\"([64, 27, 8, 343, 216, 729, 512, 27, 1, 729], 1)\", \"35\"], [\"([64, 27, 8, 343, 216, 729, 512, 27, 1, 729], 2)\", \"351\"], [\"([64, 27, 8, 343, 216, 729, 512, 27, 1, 729], 3)\", \"559\"], [\"([64, 27, 8, 343, 216, 729, 512, 27, 1, 729], 4)\", \"945\"], [\"([64, 27, 8, 343, 216, 729, 512, 27, 1, 729], 5)\", \"1241\"], [\"([64, 27, 8, 343, 216, 729, 512, 27, 1, 729], 6)\", \"539\"], [\"([64, 27, 8, 343, 216, 729, 512, 27, 1, 729], 7)\", \"28\"], [\"([64, 27, 8, 343, 216, 729, 512, 27, 1, 729], 8)\", \"730\"], [\"([64, 27, 8, 343, 216, 729, 512, 27, 1, 729], 9)\", \"None\"], [\"([64, 27, 8, 343, 216, 729, 512, 27, 1, 729], 10)\", \"None\"], [\"([64, 27, 8, 343, 216, 729, 512, 27, 1, 729], 11)\", \"None\"], [\"([64, 27, 8, 343, 216, 729, 512, 27, 1, 729], 12)\", \"None\"], [\"([64, 27, 8, 343, 216, 729, 512, 27, 1, 729], 13)\", \"None\"], [\"([64, 27, 8, 343, 216, 729, 512, 27, 1, 729], 14)\", \"None\"], [\"([64, 8, 125, 64, 125, 64, 64, 512, 216, 1728], 0)\", \"72\"], [\"([64, 8, 125, 64, 125, 64, 64, 512, 216, 1728], 1)\", \"133\"], [\"([64, 8, 125, 64, 125, 64, 64, 512, 216, 1728], 2)\", \"189\"], [\"([64, 8, 125, 64, 125, 64, 64, 512, 216, 1728], 3)\", \"189\"], [\"([64, 8, 125, 64, 125, 64, 64, 512, 216, 1728], 4)\", \"189\"], [\"([64, 8, 125, 64, 125, 64, 64, 512, 216, 1728], 5)\", \"128\"], [\"([64, 8, 125, 64, 125, 64, 64, 512, 216, 1728], 6)\", \"576\"], [\"([64, 8, 125, 64, 125, 64, 64, 512, 216, 1728], 7)\", \"728\"], [\"([64, 8, 125, 64, 125, 64, 64, 512, 216, 1728], 8)\", \"1944\"], [\"([64, 8, 125, 64, 125, 64, 64, 512, 216, 1728], 9)\", \"None\"], [\"([64, 8, 125, 64, 125, 64, 64, 512, 216, 1728], 10)\", \"None\"], [\"([64, 8, 125, 64, 125, 64, 64, 512, 216, 1728], 11)\", \"None\"], [\"([64, 8, 125, 64, 125, 64, 64, 512, 216, 1728], 12)\", \"None\"], [\"([64, 8, 125, 64, 125, 64, 64, 512, 216, 1728], 13)\", \"None\"], [\"([64, 8, 125, 64, 125, 64, 64, 512, 216, 1728], 14)\", \"None\"], [\"([8, 27, 125, 125, 0, 343, 8, 729, 729, 125], 0)\", \"35\"], [\"([8, 27, 125, 125, 0, 343, 8, 729, 729, 125], 1)\", \"152\"], [\"([8, 27, 125, 125, 0, 343, 8, 729, 729, 125], 2)\", \"250\"], [\"([8, 27, 125, 125, 0, 343, 8, 729, 729, 125], 3)\", \"125\"], [\"([8, 27, 125, 125, 0, 343, 8, 729, 729, 125], 4)\", \"343\"], [\"([8, 27, 125, 125, 0, 343, 8, 729, 729, 125], 5)\", \"351\"], [\"([8, 27, 125, 125, 0, 343, 8, 729, 729, 125], 6)\", \"737\"], [\"([8, 27, 125, 125, 0, 343, 8, 729, 729, 125], 7)\", \"1458\"], [\"([8, 27, 125, 125, 0, 343, 8, 729, 729, 125], 8)\", \"854\"], [\"([8, 27, 125, 125, 0, 343, 8, 729, 729, 125], 9)\", \"None\"], [\"([8, 27, 125, 125, 0, 343, 8, 729, 729, 125], 10)\", \"None\"], [\"([8, 27, 125, 125, 0, 343, 8, 729, 729, 125], 11)\", \"None\"], [\"([8, 27, 125, 125, 0, 343, 8, 729, 729, 125], 12)\", \"None\"], [\"([8, 27, 125, 125, 0, 343, 8, 729, 729, 125], 13)\", \"None\"], [\"([8, 27, 125, 125, 0, 343, 8, 729, 729, 125], 14)\", \"None\"], [\"([8, 0, 8, 8, 0, 8, 64, 216, 343, 8], 0)\", \"8\"], [\"([8, 0, 8, 8, 0, 8, 64, 216, 343, 8], 1)\", \"8\"], [\"([8, 0, 8, 8, 0, 8, 64, 216, 343, 8], 2)\", \"16\"], [\"([8, 0, 8, 8, 0, 8, 64, 216, 343, 8], 3)\", \"8\"], [\"([8, 0, 8, 8, 0, 8, 64, 216, 343, 8], 4)\", \"8\"], [\"([8, 0, 8, 8, 0, 8, 64, 216, 343, 8], 5)\", \"72\"], [\"([8, 0, 8, 8, 0, 8, 64, 216, 343, 8], 6)\", \"280\"], [\"([8, 0, 8, 8, 0, 8, 64, 216, 343, 8], 7)\", \"559\"], [\"([8, 0, 8, 8, 0, 8, 64, 216, 343, 8], 8)\", \"351\"], [\"([8, 0, 8, 8, 0, 8, 64, 216, 343, 8], 9)\", \"None\"], [\"([8, 0, 8, 8, 0, 8, 64, 216, 343, 8], 10)\", \"None\"], [\"([8, 0, 8, 8, 0, 8, 64, 216, 343, 8], 11)\", \"None\"], [\"([8, 0, 8, 8, 0, 8, 64, 216, 343, 8], 12)\", \"None\"], [\"([8, 0, 8, 8, 0, 8, 64, 216, 343, 8], 13)\", \"None\"], [\"([8, 0, 8, 8, 0, 8, 64, 216, 343, 8], 14)\", \"None\"], [\"([0, 1, 64, 27, 1, 125, 343, 343, 512, 1331], 0)\", \"1\"], [\"([0, 1, 64, 27, 1, 125, 343, 343, 512, 1331], 1)\", \"65\"], [\"([0, 1, 64, 27, 1, 125, 343, 343, 512, 1331], 2)\", \"91\"], [\"([0, 1, 64, 27, 1, 125, 343, 343, 512, 1331], 3)\", \"28\"], [\"([0, 1, 64, 27, 1, 125, 343, 343, 512, 1331], 4)\", \"126\"], [\"([0, 1, 64, 27, 1, 125, 343, 343, 512, 1331], 5)\", \"468\"], [\"([0, 1, 64, 27, 1, 125, 343, 343, 512, 1331], 6)\", \"686\"], [\"([0, 1, 64, 27, 1, 125, 343, 343, 512, 1331], 7)\", \"855\"], [\"([0, 1, 64, 27, 1, 125, 343, 343, 512, 1331], 8)\", \"1843\"], [\"([0, 1, 64, 27, 1, 125, 343, 343, 512, 1331], 9)\", \"None\"], [\"([0, 1, 64, 27, 1, 125, 343, 343, 512, 1331], 10)\", \"None\"], [\"([0, 1, 64, 27, 1, 125, 343, 343, 512, 1331], 11)\", \"None\"], [\"([0, 1, 64, 27, 1, 125, 343, 343, 512, 1331], 12)\", \"None\"], [\"([0, 1, 64, 27, 1, 125, 343, 343, 512, 1331], 13)\", \"None\"], [\"([0, 1, 64, 27, 1, 125, 343, 343, 512, 1331], 14)\", \"None\"], [\"([64, 0, 125, 0, 216, 64, 1000, 0, 1, 1728], 0)\", \"64\"], [\"([64, 0, 125, 0, 216, 64, 1000, 0, 1, 1728], 1)\", \"125\"], [\"([64, 0, 125, 0, 216, 64, 1000, 0, 1, 1728], 2)\", \"125\"], [\"([64, 0, 125, 0, 216, 64, 1000, 0, 1, 1728], 3)\", \"216\"], [\"([64, 0, 125, 0, 216, 64, 1000, 0, 1, 1728], 4)\", \"280\"], [\"([64, 0, 125, 0, 216, 64, 1000, 0, 1, 1728], 5)\", \"1064\"], [\"([64, 0, 125, 0, 216, 64, 1000, 0, 1, 1728], 6)\", \"1000\"], [\"([64, 0, 125, 0, 216, 64, 1000, 0, 1, 1728], 7)\", \"1\"], [\"([64, 0, 125, 0, 216, 64, 1000, 0, 1, 1728], 8)\", \"1729\"], [\"([64, 0, 125, 0, 216, 64, 1000, 0, 1, 1728], 9)\", \"None\"], [\"([64, 0, 125, 0, 216, 64, 1000, 0, 1, 1728], 10)\", \"None\"], [\"([64, 0, 125, 0, 216, 64, 1000, 0, 1, 1728], 11)\", \"None\"], [\"([64, 0, 125, 0, 216, 64, 1000, 0, 1, 1728], 12)\", \"None\"], [\"([64, 0, 125, 0, 216, 64, 1000, 0, 1, 1728], 13)\", \"None\"], [\"([64, 0, 125, 0, 216, 64, 1000, 0, 1, 1728], 14)\", \"None\"], [\"([0, 1, 125, 1, 343, 125, 1000, 1, 0, 125], 0)\", \"1\"], [\"([0, 1, 125, 1, 343, 125, 1000, 1, 0, 125], 1)\", \"126\"], [\"([0, 1, 125, 1, 343, 125, 1000, 1, 0, 125], 2)\", \"126\"], [\"([0, 1, 125, 1, 343, 125, 1000, 1, 0, 125], 3)\", \"344\"], [\"([0, 1, 125, 1, 343, 125, 1000, 1, 0, 125], 4)\", \"468\"], [\"([0, 1, 125, 1, 343, 125, 1000, 1, 0, 125], 5)\", \"1125\"], [\"([0, 1, 125, 1, 343, 125, 1000, 1, 0, 125], 6)\", \"1001\"], [\"([0, 1, 125, 1, 343, 125, 1000, 1, 0, 125], 7)\", \"1\"], [\"([0, 1, 125, 1, 343, 125, 1000, 1, 0, 125], 8)\", \"125\"], [\"([0, 1, 125, 1, 343, 125, 1000, 1, 0, 125], 9)\", \"None\"], [\"([0, 1, 125, 1, 343, 125, 1000, 1, 0, 125], 10)\", \"None\"], [\"([0, 1, 125, 1, 343, 125, 1000, 1, 0, 125], 11)\", \"None\"], [\"([0, 1, 125, 1, 343, 125, 1000, 1, 0, 125], 12)\", \"None\"], [\"([0, 1, 125, 1, 343, 125, 1000, 1, 0, 125], 13)\", \"None\"], [\"([0, 1, 125, 1, 343, 125, 1000, 1, 0, 125], 14)\", \"None\"], [\"([1, 0, 1, 216, 27, 216, 0, 216, 1000, 512], 0)\", \"1\"], [\"([1, 0, 1, 216, 27, 216, 0, 216, 1000, 512], 1)\", \"1\"], [\"([1, 0, 1, 216, 27, 216, 0, 216, 1000, 512], 2)\", \"217\"], [\"([1, 0, 1, 216, 27, 216, 0, 216, 1000, 512], 3)\", \"243\"], [\"([1, 0, 1, 216, 27, 216, 0, 216, 1000, 512], 4)\", \"243\"], [\"([1, 0, 1, 216, 27, 216, 0, 216, 1000, 512], 5)\", \"216\"], [\"([1, 0, 1, 216, 27, 216, 0, 216, 1000, 512], 6)\", \"216\"], [\"([1, 0, 1, 216, 27, 216, 0, 216, 1000, 512], 7)\", \"1216\"], [\"([1, 0, 1, 216, 27, 216, 0, 216, 1000, 512], 8)\", \"1512\"], [\"([1, 0, 1, 216, 27, 216, 0, 216, 1000, 512], 9)\", \"None\"], [\"([1, 0, 1, 216, 27, 216, 0, 216, 1000, 512], 10)\", \"None\"], [\"([1, 0, 1, 216, 27, 216, 0, 216, 1000, 512], 11)\", \"None\"], [\"([1, 0, 1, 216, 27, 216, 0, 216, 1000, 512], 12)\", \"None\"], [\"([1, 0, 1, 216, 27, 216, 0, 216, 1000, 512], 13)\", \"None\"], [\"([1, 0, 1, 216, 27, 216, 0, 216, 1000, 512], 14)\", \"None\"], [\"([27, 27, 27, 343, 216, 27, 729, 27, 512, 27], 0)\", \"54\"], [\"([27, 27, 27, 343, 216, 27, 729, 27, 512, 27], 1)\", \"54\"], [\"([27, 27, 27, 343, 216, 27, 729, 27, 512, 27], 2)\", \"370\"], [\"([27, 27, 27, 343, 216, 27, 729, 27, 512, 27], 3)\", \"559\"], [\"([27, 27, 27, 343, 216, 27, 729, 27, 512, 27], 4)\", \"243\"], [\"([27, 27, 27, 343, 216, 27, 729, 27, 512, 27], 5)\", \"756\"], [\"([27, 27, 27, 343, 216, 27, 729, 27, 512, 27], 6)\", \"756\"], [\"([27, 27, 27, 343, 216, 27, 729, 27, 512, 27], 7)\", \"539\"], [\"([27, 27, 27, 343, 216, 27, 729, 27, 512, 27], 8)\", \"539\"], [\"([27, 27, 27, 343, 216, 27, 729, 27, 512, 27], 9)\", \"None\"], [\"([27, 27, 27, 343, 216, 27, 729, 27, 512, 27], 10)\", \"None\"], [\"([27, 27, 27, 343, 216, 27, 729, 27, 512, 27], 11)\", \"None\"], [\"([27, 27, 27, 343, 216, 27, 729, 27, 512, 27], 12)\", \"None\"], [\"([27, 27, 27, 343, 216, 27, 729, 27, 512, 27], 13)\", \"None\"], [\"([27, 27, 27, 343, 216, 27, 729, 27, 512, 27], 14)\", \"None\"], [\"([64, 0, 27, 64, 216, 64, 343, 0, 729, 1000], 0)\", \"64\"], [\"([64, 0, 27, 64, 216, 64, 343, 0, 729, 1000], 1)\", \"27\"], [\"([64, 0, 27, 64, 216, 64, 343, 0, 729, 1000], 2)\", \"91\"], [\"([64, 0, 27, 64, 216, 64, 343, 0, 729, 1000], 3)\", \"280\"], [\"([64, 0, 27, 64, 216, 64, 343, 0, 729, 1000], 4)\", \"280\"], [\"([64, 0, 27, 64, 216, 64, 343, 0, 729, 1000], 5)\", \"407\"], [\"([64, 0, 27, 64, 216, 64, 343, 0, 729, 1000], 6)\", \"343\"], [\"([64, 0, 27, 64, 216, 64, 343, 0, 729, 1000], 7)\", \"729\"], [\"([64, 0, 27, 64, 216, 64, 343, 0, 729, 1000], 8)\", \"1729\"], [\"([64, 0, 27, 64, 216, 64, 343, 0, 729, 1000], 9)\", \"None\"], [\"([64, 0, 27, 64, 216, 64, 343, 0, 729, 1000], 10)\", \"None\"], [\"([64, 0, 27, 64, 216, 64, 343, 0, 729, 1000], 11)\", \"None\"], [\"([64, 0, 27, 64, 216, 64, 343, 0, 729, 1000], 12)\", \"None\"], [\"([64, 0, 27, 64, 216, 64, 343, 0, 729, 1000], 13)\", \"None\"], [\"([64, 0, 27, 64, 216, 64, 343, 0, 729, 1000], 14)\", \"None\"], [\"([8, 27, 64, 125, 216, 343, 729, 729, 125, 1331], 0)\", \"35\"], [\"([8, 27, 64, 125, 216, 343, 729, 729, 125, 1331], 1)\", \"91\"], [\"([8, 27, 64, 125, 216, 343, 729, 729, 125, 1331], 2)\", \"189\"], [\"([8, 27, 64, 125, 216, 343, 729, 729, 125, 1331], 3)\", \"341\"], [\"([8, 27, 64, 125, 216, 343, 729, 729, 125, 1331], 4)\", \"559\"], [\"([8, 27, 64, 125, 216, 343, 729, 729, 125, 1331], 5)\", \"1072\"], [\"([8, 27, 64, 125, 216, 343, 729, 729, 125, 1331], 6)\", \"1458\"], [\"([8, 27, 64, 125, 216, 343, 729, 729, 125, 1331], 7)\", \"854\"], [\"([8, 27, 64, 125, 216, 343, 729, 729, 125, 1331], 8)\", \"1456\"], [\"([8, 27, 64, 125, 216, 343, 729, 729, 125, 1331], 9)\", \"None\"], [\"([8, 27, 64, 125, 216, 343, 729, 729, 125, 1331], 10)\", \"None\"], [\"([8, 27, 64, 125, 216, 343, 729, 729, 125, 1331], 11)\", \"None\"], [\"([8, 27, 64, 125, 216, 343, 729, 729, 125, 1331], 12)\", \"None\"], [\"([8, 27, 64, 125, 216, 343, 729, 729, 125, 1331], 13)\", \"None\"], [\"([8, 27, 64, 125, 216, 343, 729, 729, 125, 1331], 14)\", \"None\"], [\"([0, 64, 125, 8, 343, 0, 1000, 1000, 1331, 1728], 0)\", \"64\"], [\"([0, 64, 125, 8, 343, 0, 1000, 1000, 1331, 1728], 1)\", \"189\"], [\"([0, 64, 125, 8, 343, 0, 1000, 1000, 1331, 1728], 2)\", \"133\"], [\"([0, 64, 125, 8, 343, 0, 1000, 1000, 1331, 1728], 3)\", \"351\"], [\"([0, 64, 125, 8, 343, 0, 1000, 1000, 1331, 1728], 4)\", \"343\"], [\"([0, 64, 125, 8, 343, 0, 1000, 1000, 1331, 1728], 5)\", \"1000\"], [\"([0, 64, 125, 8, 343, 0, 1000, 1000, 1331, 1728], 6)\", \"2000\"], [\"([0, 64, 125, 8, 343, 0, 1000, 1000, 1331, 1728], 7)\", \"2331\"], [\"([0, 64, 125, 8, 343, 0, 1000, 1000, 1331, 1728], 8)\", \"3059\"], [\"([0, 64, 125, 8, 343, 0, 1000, 1000, 1331, 1728], 9)\", \"None\"], [\"([0, 64, 125, 8, 343, 0, 1000, 1000, 1331, 1728], 10)\", \"None\"], [\"([0, 64, 125, 8, 343, 0, 1000, 1000, 1331, 1728], 11)\", \"None\"], [\"([0, 64, 125, 8, 343, 0, 1000, 1000, 1331, 1728], 12)\", \"None\"], [\"([0, 64, 125, 8, 343, 0, 1000, 1000, 1331, 1728], 13)\", \"None\"], [\"([0, 64, 125, 8, 343, 0, 1000, 1000, 1331, 1728], 14)\", \"None\"], [\"([64, 125, 1, 27, 8, 729, 8, 1331, 8, 1], 0)\", \"189\"], [\"([64, 125, 1, 27, 8, 729, 8, 1331, 8, 1], 1)\", \"126\"], [\"([64, 125, 1, 27, 8, 729, 8, 1331, 8, 1], 2)\", \"28\"], [\"([64, 125, 1, 27, 8, 729, 8, 1331, 8, 1], 3)\", \"35\"], [\"([64, 125, 1, 27, 8, 729, 8, 1331, 8, 1], 4)\", \"737\"], [\"([64, 125, 1, 27, 8, 729, 8, 1331, 8, 1], 5)\", \"737\"], [\"([64, 125, 1, 27, 8, 729, 8, 1331, 8, 1], 6)\", \"1339\"], [\"([64, 125, 1, 27, 8, 729, 8, 1331, 8, 1], 7)\", \"1339\"], [\"([64, 125, 1, 27, 8, 729, 8, 1331, 8, 1], 8)\", \"9\"], [\"([64, 125, 1, 27, 8, 729, 8, 1331, 8, 1], 9)\", \"None\"], [\"([64, 125, 1, 27, 8, 729, 8, 1331, 8, 1], 10)\", \"None\"], [\"([64, 125, 1, 27, 8, 729, 8, 1331, 8, 1], 11)\", \"None\"], [\"([64, 125, 1, 27, 8, 729, 8, 1331, 8, 1], 12)\", \"None\"], [\"([64, 125, 1, 27, 8, 729, 8, 1331, 8, 1], 13)\", \"None\"], [\"([64, 125, 1, 27, 8, 729, 8, 1331, 8, 1], 14)\", \"None\"], [\"([27, 0, 27, 0, 27, 512, 729, 0, 1331, 1000], 0)\", \"27\"], [\"([27, 0, 27, 0, 27, 512, 729, 0, 1331, 1000], 1)\", \"27\"], [\"([27, 0, 27, 0, 27, 512, 729, 0, 1331, 1000], 2)\", \"27\"], [\"([27, 0, 27, 0, 27, 512, 729, 0, 1331, 1000], 3)\", \"27\"], [\"([27, 0, 27, 0, 27, 512, 729, 0, 1331, 1000], 4)\", \"539\"], [\"([27, 0, 27, 0, 27, 512, 729, 0, 1331, 1000], 5)\", \"1241\"], [\"([27, 0, 27, 0, 27, 512, 729, 0, 1331, 1000], 6)\", \"729\"], [\"([27, 0, 27, 0, 27, 512, 729, 0, 1331, 1000], 7)\", \"1331\"], [\"([27, 0, 27, 0, 27, 512, 729, 0, 1331, 1000], 8)\", \"2331\"], [\"([27, 0, 27, 0, 27, 512, 729, 0, 1331, 1000], 9)\", \"None\"], [\"([27, 0, 27, 0, 27, 512, 729, 0, 1331, 1000], 10)\", \"None\"], [\"([27, 0, 27, 0, 27, 512, 729, 0, 1331, 1000], 11)\", \"None\"], [\"([27, 0, 27, 0, 27, 512, 729, 0, 1331, 1000], 12)\", \"None\"], [\"([27, 0, 27, 0, 27, 512, 729, 0, 1331, 1000], 13)\", \"None\"], [\"([27, 0, 27, 0, 27, 512, 729, 0, 1331, 1000], 14)\", \"None\"], [\"([0, 1, 0, 1, 1, 125, 1000, 1, 343, 343], 0)\", \"1\"], [\"([0, 1, 0, 1, 1, 125, 1000, 1, 343, 343], 1)\", \"1\"], [\"([0, 1, 0, 1, 1, 125, 1000, 1, 343, 343], 2)\", \"1\"], [\"([0, 1, 0, 1, 1, 125, 1000, 1, 343, 343], 3)\", \"2\"], [\"([0, 1, 0, 1, 1, 125, 1000, 1, 343, 343], 4)\", \"126\"], [\"([0, 1, 0, 1, 1, 125, 1000, 1, 343, 343], 5)\", \"1125\"], [\"([0, 1, 0, 1, 1, 125, 1000, 1, 343, 343], 6)\", \"1001\"], [\"([0, 1, 0, 1, 1, 125, 1000, 1, 343, 343], 7)\", \"344\"], [\"([0, 1, 0, 1, 1, 125, 1000, 1, 343, 343], 8)\", \"686\"], [\"([0, 1, 0, 1, 1, 125, 1000, 1, 343, 343], 9)\", \"None\"], [\"([0, 1, 0, 1, 1, 125, 1000, 1, 343, 343], 10)\", \"None\"], [\"([0, 1, 0, 1, 1, 125, 1000, 1, 343, 343], 11)\", \"None\"], [\"([0, 1, 0, 1, 1, 125, 1000, 1, 343, 343], 12)\", \"None\"], [\"([0, 1, 0, 1, 1, 125, 1000, 1, 343, 343], 13)\", \"None\"], [\"([0, 1, 0, 1, 1, 125, 1000, 1, 343, 343], 14)\", \"None\"], [\"([0, 64, 125, 216, 64, 0, 512, 1000, 1331, 1728], 0)\", \"64\"], [\"([0, 64, 125, 216, 64, 0, 512, 1000, 1331, 1728], 1)\", \"189\"], [\"([0, 64, 125, 216, 64, 0, 512, 1000, 1331, 1728], 2)\", \"341\"], [\"([0, 64, 125, 216, 64, 0, 512, 1000, 1331, 1728], 3)\", \"280\"], [\"([0, 64, 125, 216, 64, 0, 512, 1000, 1331, 1728], 4)\", \"64\"], [\"([0, 64, 125, 216, 64, 0, 512, 1000, 1331, 1728], 5)\", \"512\"], [\"([0, 64, 125, 216, 64, 0, 512, 1000, 1331, 1728], 6)\", \"1512\"], [\"([0, 64, 125, 216, 64, 0, 512, 1000, 1331, 1728], 7)\", \"2331\"], [\"([0, 64, 125, 216, 64, 0, 512, 1000, 1331, 1728], 8)\", \"3059\"], [\"([0, 64, 125, 216, 64, 0, 512, 1000, 1331, 1728], 9)\", \"None\"], [\"([0, 64, 125, 216, 64, 0, 512, 1000, 1331, 1728], 10)\", \"None\"], [\"([0, 64, 125, 216, 64, 0, 512, 1000, 1331, 1728], 11)\", \"None\"], [\"([0, 64, 125, 216, 64, 0, 512, 1000, 1331, 1728], 12)\", \"None\"], [\"([0, 64, 125, 216, 64, 0, 512, 1000, 1331, 1728], 13)\", \"None\"], [\"([0, 64, 125, 216, 64, 0, 512, 1000, 1331, 1728], 14)\", \"None\"], [\"([8, 27, 64, 343, 27, 343, 512, 27, 729, 1331], 0)\", \"35\"], [\"([8, 27, 64, 343, 27, 343, 512, 27, 729, 1331], 1)\", \"91\"], [\"([8, 27, 64, 343, 27, 343, 512, 27, 729, 1331], 2)\", \"407\"], [\"([8, 27, 64, 343, 27, 343, 512, 27, 729, 1331], 3)\", \"370\"], [\"([8, 27, 64, 343, 27, 343, 512, 27, 729, 1331], 4)\", \"370\"], [\"([8, 27, 64, 343, 27, 343, 512, 27, 729, 1331], 5)\", \"855\"], [\"([8, 27, 64, 343, 27, 343, 512, 27, 729, 1331], 6)\", \"539\"], [\"([8, 27, 64, 343, 27, 343, 512, 27, 729, 1331], 7)\", \"756\"], [\"([8, 27, 64, 343, 27, 343, 512, 27, 729, 1331], 8)\", \"2060\"], [\"([8, 27, 64, 343, 27, 343, 512, 27, 729, 1331], 9)\", \"None\"], [\"([8, 27, 64, 343, 27, 343, 512, 27, 729, 1331], 10)\", \"None\"], [\"([8, 27, 64, 343, 27, 343, 512, 27, 729, 1331], 11)\", \"None\"], [\"([8, 27, 64, 343, 27, 343, 512, 27, 729, 1331], 12)\", \"None\"], [\"([8, 27, 64, 343, 27, 343, 512, 27, 729, 1331], 13)\", \"None\"], [\"([8, 27, 64, 343, 27, 343, 512, 27, 729, 1331], 14)\", \"None\"], [\"([1, 8, 8, 64, 512, 216, 216, 512, 125, 8], 0)\", \"9\"], [\"([1, 8, 8, 64, 512, 216, 216, 512, 125, 8], 1)\", \"16\"], [\"([1, 8, 8, 64, 512, 216, 216, 512, 125, 8], 2)\", \"72\"], [\"([1, 8, 8, 64, 512, 216, 216, 512, 125, 8], 3)\", \"576\"], [\"([1, 8, 8, 64, 512, 216, 216, 512, 125, 8], 4)\", \"728\"], [\"([1, 8, 8, 64, 512, 216, 216, 512, 125, 8], 5)\", \"432\"], [\"([1, 8, 8, 64, 512, 216, 216, 512, 125, 8], 6)\", \"728\"], [\"([1, 8, 8, 64, 512, 216, 216, 512, 125, 8], 7)\", \"637\"], [\"([1, 8, 8, 64, 512, 216, 216, 512, 125, 8], 8)\", \"133\"], [\"([1, 8, 8, 64, 512, 216, 216, 512, 125, 8], 9)\", \"None\"], [\"([1, 8, 8, 64, 512, 216, 216, 512, 125, 8], 10)\", \"None\"], [\"([1, 8, 8, 64, 512, 216, 216, 512, 125, 8], 11)\", \"None\"], [\"([1, 8, 8, 64, 512, 216, 216, 512, 125, 8], 12)\", \"None\"], [\"([1, 8, 8, 64, 512, 216, 216, 512, 125, 8], 13)\", \"None\"], [\"([1, 8, 8, 64, 512, 216, 216, 512, 125, 8], 14)\", \"None\"], [\"([64, 1, 27, 125, 1, 729, 216, 1, 343, 27], 0)\", \"65\"], [\"([64, 1, 27, 125, 1, 729, 216, 1, 343, 27], 1)\", \"28\"], [\"([64, 1, 27, 125, 1, 729, 216, 1, 343, 27], 2)\", \"152\"], [\"([64, 1, 27, 125, 1, 729, 216, 1, 343, 27], 3)\", \"126\"], [\"([64, 1, 27, 125, 1, 729, 216, 1, 343, 27], 4)\", \"730\"], [\"([64, 1, 27, 125, 1, 729, 216, 1, 343, 27], 5)\", \"945\"], [\"([64, 1, 27, 125, 1, 729, 216, 1, 343, 27], 6)\", \"217\"], [\"([64, 1, 27, 125, 1, 729, 216, 1, 343, 27], 7)\", \"344\"], [\"([64, 1, 27, 125, 1, 729, 216, 1, 343, 27], 8)\", \"370\"], [\"([64, 1, 27, 125, 1, 729, 216, 1, 343, 27], 9)\", \"None\"], [\"([64, 1, 27, 125, 1, 729, 216, 1, 343, 27], 10)\", \"None\"], [\"([64, 1, 27, 125, 1, 729, 216, 1, 343, 27], 11)\", \"None\"], [\"([64, 1, 27, 125, 1, 729, 216, 1, 343, 27], 12)\", \"None\"], [\"([64, 1, 27, 125, 1, 729, 216, 1, 343, 27], 13)\", \"None\"], [\"([64, 1, 27, 125, 1, 729, 216, 1, 343, 27], 14)\", \"None\"], [\"([8, 0, 27, 8, 216, 8, 216, 216, 512, 1000], 0)\", \"8\"], [\"([8, 0, 27, 8, 216, 8, 216, 216, 512, 1000], 1)\", \"27\"], [\"([8, 0, 27, 8, 216, 8, 216, 216, 512, 1000], 2)\", \"35\"], [\"([8, 0, 27, 8, 216, 8, 216, 216, 512, 1000], 3)\", \"224\"], [\"([8, 0, 27, 8, 216, 8, 216, 216, 512, 1000], 4)\", \"224\"], [\"([8, 0, 27, 8, 216, 8, 216, 216, 512, 1000], 5)\", \"224\"], [\"([8, 0, 27, 8, 216, 8, 216, 216, 512, 1000], 6)\", \"432\"], [\"([8, 0, 27, 8, 216, 8, 216, 216, 512, 1000], 7)\", \"728\"], [\"([8, 0, 27, 8, 216, 8, 216, 216, 512, 1000], 8)\", \"1512\"], [\"([8, 0, 27, 8, 216, 8, 216, 216, 512, 1000], 9)\", \"None\"], [\"([8, 0, 27, 8, 216, 8, 216, 216, 512, 1000], 10)\", \"None\"], [\"([8, 0, 27, 8, 216, 8, 216, 216, 512, 1000], 11)\", \"None\"], [\"([8, 0, 27, 8, 216, 8, 216, 216, 512, 1000], 12)\", \"None\"], [\"([8, 0, 27, 8, 216, 8, 216, 216, 512, 1000], 13)\", \"None\"], [\"([8, 0, 27, 8, 216, 8, 216, 216, 512, 1000], 14)\", \"None\"], [\"([64, 1, 8, 27, 1, 729, 343, 343, 125, 729], 0)\", \"65\"], [\"([64, 1, 8, 27, 1, 729, 343, 343, 125, 729], 1)\", \"9\"], [\"([64, 1, 8, 27, 1, 729, 343, 343, 125, 729], 2)\", \"35\"], [\"([64, 1, 8, 27, 1, 729, 343, 343, 125, 729], 3)\", \"28\"], [\"([64, 1, 8, 27, 1, 729, 343, 343, 125, 729], 4)\", \"730\"], [\"([64, 1, 8, 27, 1, 729, 343, 343, 125, 729], 5)\", \"1072\"], [\"([64, 1, 8, 27, 1, 729, 343, 343, 125, 729], 6)\", \"686\"], [\"([64, 1, 8, 27, 1, 729, 343, 343, 125, 729], 7)\", \"468\"], [\"([64, 1, 8, 27, 1, 729, 343, 343, 125, 729], 8)\", \"854\"], [\"([64, 1, 8, 27, 1, 729, 343, 343, 125, 729], 9)\", \"None\"], [\"([64, 1, 8, 27, 1, 729, 343, 343, 125, 729], 10)\", \"None\"], [\"([64, 1, 8, 27, 1, 729, 343, 343, 125, 729], 11)\", \"None\"], [\"([64, 1, 8, 27, 1, 729, 343, 343, 125, 729], 12)\", \"None\"], [\"([64, 1, 8, 27, 1, 729, 343, 343, 125, 729], 13)\", \"None\"], [\"([64, 1, 8, 27, 1, 729, 343, 343, 125, 729], 14)\", \"None\"], [\"([1, 64, 8, 0, 1, 216, 0, 64, 8, 8], 0)\", \"65\"], [\"([1, 64, 8, 0, 1, 216, 0, 64, 8, 8], 1)\", \"72\"], [\"([1, 64, 8, 0, 1, 216, 0, 64, 8, 8], 2)\", \"8\"], [\"([1, 64, 8, 0, 1, 216, 0, 64, 8, 8], 3)\", \"1\"], [\"([1, 64, 8, 0, 1, 216, 0, 64, 8, 8], 4)\", \"217\"], [\"([1, 64, 8, 0, 1, 216, 0, 64, 8, 8], 5)\", \"216\"], [\"([1, 64, 8, 0, 1, 216, 0, 64, 8, 8], 6)\", \"64\"], [\"([1, 64, 8, 0, 1, 216, 0, 64, 8, 8], 7)\", \"72\"], [\"([1, 64, 8, 0, 1, 216, 0, 64, 8, 8], 8)\", \"16\"], [\"([1, 64, 8, 0, 1, 216, 0, 64, 8, 8], 9)\", \"None\"], [\"([1, 64, 8, 0, 1, 216, 0, 64, 8, 8], 10)\", \"None\"], [\"([1, 64, 8, 0, 1, 216, 0, 64, 8, 8], 11)\", \"None\"], [\"([1, 64, 8, 0, 1, 216, 0, 64, 8, 8], 12)\", \"None\"], [\"([1, 64, 8, 0, 1, 216, 0, 64, 8, 8], 13)\", \"None\"], [\"([1, 64, 8, 0, 1, 216, 0, 64, 8, 8], 14)\", \"None\"], [\"([1, 27, 27, 1, 0, 1, 1, 729, 1000, 27], 0)\", \"28\"], [\"([1, 27, 27, 1, 0, 1, 1, 729, 1000, 27], 1)\", \"54\"], [\"([1, 27, 27, 1, 0, 1, 1, 729, 1000, 27], 2)\", \"28\"], [\"([1, 27, 27, 1, 0, 1, 1, 729, 1000, 27], 3)\", \"1\"], [\"([1, 27, 27, 1, 0, 1, 1, 729, 1000, 27], 4)\", \"1\"], [\"([1, 27, 27, 1, 0, 1, 1, 729, 1000, 27], 5)\", \"2\"], [\"([1, 27, 27, 1, 0, 1, 1, 729, 1000, 27], 6)\", \"730\"], [\"([1, 27, 27, 1, 0, 1, 1, 729, 1000, 27], 7)\", \"1729\"], [\"([1, 27, 27, 1, 0, 1, 1, 729, 1000, 27], 8)\", \"1027\"], [\"([1, 27, 27, 1, 0, 1, 1, 729, 1000, 27], 9)\", \"None\"], [\"([1, 27, 27, 1, 0, 1, 1, 729, 1000, 27], 10)\", \"None\"], [\"([1, 27, 27, 1, 0, 1, 1, 729, 1000, 27], 11)\", \"None\"], [\"([1, 27, 27, 1, 0, 1, 1, 729, 1000, 27], 12)\", \"None\"], [\"([1, 27, 27, 1, 0, 1, 1, 729, 1000, 27], 13)\", \"None\"], [\"([1, 27, 27, 1, 0, 1, 1, 729, 1000, 27], 14)\", \"None\"], [\"([8, 0, 1, 216, 216, 8, 343, 216, 729, 512], 0)\", \"8\"], [\"([8, 0, 1, 216, 216, 8, 343, 216, 729, 512], 1)\", \"1\"], [\"([8, 0, 1, 216, 216, 8, 343, 216, 729, 512], 2)\", \"217\"], [\"([8, 0, 1, 216, 216, 8, 343, 216, 729, 512], 3)\", \"432\"], [\"([8, 0, 1, 216, 216, 8, 343, 216, 729, 512], 4)\", \"224\"], [\"([8, 0, 1, 216, 216, 8, 343, 216, 729, 512], 5)\", \"351\"], [\"([8, 0, 1, 216, 216, 8, 343, 216, 729, 512], 6)\", \"559\"], [\"([8, 0, 1, 216, 216, 8, 343, 216, 729, 512], 7)\", \"945\"], [\"([8, 0, 1, 216, 216, 8, 343, 216, 729, 512], 8)\", \"1241\"], [\"([8, 0, 1, 216, 216, 8, 343, 216, 729, 512], 9)\", \"None\"], [\"([8, 0, 1, 216, 216, 8, 343, 216, 729, 512], 10)\", \"None\"], [\"([8, 0, 1, 216, 216, 8, 343, 216, 729, 512], 11)\", \"None\"], [\"([8, 0, 1, 216, 216, 8, 343, 216, 729, 512], 12)\", \"None\"], [\"([8, 0, 1, 216, 216, 8, 343, 216, 729, 512], 13)\", \"None\"], [\"([8, 0, 1, 216, 216, 8, 343, 216, 729, 512], 14)\", \"None\"], [\"([0, 1, 0, 343, 343, 125, 125, 343, 216, 343], 0)\", \"1\"], [\"([0, 1, 0, 343, 343, 125, 125, 343, 216, 343], 1)\", \"1\"], [\"([0, 1, 0, 343, 343, 125, 125, 343, 216, 343], 2)\", \"343\"], [\"([0, 1, 0, 343, 343, 125, 125, 343, 216, 343], 3)\", \"686\"], [\"([0, 1, 0, 343, 343, 125, 125, 343, 216, 343], 4)\", \"468\"], [\"([0, 1, 0, 343, 343, 125, 125, 343, 216, 343], 5)\", \"250\"], [\"([0, 1, 0, 343, 343, 125, 125, 343, 216, 343], 6)\", \"468\"], [\"([0, 1, 0, 343, 343, 125, 125, 343, 216, 343], 7)\", \"559\"], [\"([0, 1, 0, 343, 343, 125, 125, 343, 216, 343], 8)\", \"559\"], [\"([0, 1, 0, 343, 343, 125, 125, 343, 216, 343], 9)\", \"None\"], [\"([0, 1, 0, 343, 343, 125, 125, 343, 216, 343], 10)\", \"None\"], [\"([0, 1, 0, 343, 343, 125, 125, 343, 216, 343], 11)\", \"None\"], [\"([0, 1, 0, 343, 343, 125, 125, 343, 216, 343], 12)\", \"None\"], [\"([0, 1, 0, 343, 343, 125, 125, 343, 216, 343], 13)\", \"None\"], [\"([0, 1, 0, 343, 343, 125, 125, 343, 216, 343], 14)\", \"None\"], [\"([8, 8, 216, 64, 8, 8, 125, 512, 0, 216], 0)\", \"16\"], [\"([8, 8, 216, 64, 8, 8, 125, 512, 0, 216], 1)\", \"224\"], [\"([8, 8, 216, 64, 8, 8, 125, 512, 0, 216], 2)\", \"280\"], [\"([8, 8, 216, 64, 8, 8, 125, 512, 0, 216], 3)\", \"72\"], [\"([8, 8, 216, 64, 8, 8, 125, 512, 0, 216], 4)\", \"16\"], [\"([8, 8, 216, 64, 8, 8, 125, 512, 0, 216], 5)\", \"133\"], [\"([8, 8, 216, 64, 8, 8, 125, 512, 0, 216], 6)\", \"637\"], [\"([8, 8, 216, 64, 8, 8, 125, 512, 0, 216], 7)\", \"512\"], [\"([8, 8, 216, 64, 8, 8, 125, 512, 0, 216], 8)\", \"216\"], [\"([8, 8, 216, 64, 8, 8, 125, 512, 0, 216], 9)\", \"None\"], [\"([8, 8, 216, 64, 8, 8, 125, 512, 0, 216], 10)\", \"None\"], [\"([8, 8, 216, 64, 8, 8, 125, 512, 0, 216], 11)\", \"None\"], [\"([8, 8, 216, 64, 8, 8, 125, 512, 0, 216], 12)\", \"None\"], [\"([8, 8, 216, 64, 8, 8, 125, 512, 0, 216], 13)\", \"None\"], [\"([8, 8, 216, 64, 8, 8, 125, 512, 0, 216], 14)\", \"None\"], [\"([0, 1, 216, 125, 1, 125, 1, 1, 125, 2197], 0)\", \"1\"], [\"([0, 1, 216, 125, 1, 125, 1, 1, 125, 2197], 1)\", \"217\"], [\"([0, 1, 216, 125, 1, 125, 1, 1, 125, 2197], 2)\", \"341\"], [\"([0, 1, 216, 125, 1, 125, 1, 1, 125, 2197], 3)\", \"126\"], [\"([0, 1, 216, 125, 1, 125, 1, 1, 125, 2197], 4)\", \"126\"], [\"([0, 1, 216, 125, 1, 125, 1, 1, 125, 2197], 5)\", \"126\"], [\"([0, 1, 216, 125, 1, 125, 1, 1, 125, 2197], 6)\", \"2\"], [\"([0, 1, 216, 125, 1, 125, 1, 1, 125, 2197], 7)\", \"126\"], [\"([0, 1, 216, 125, 1, 125, 1, 1, 125, 2197], 8)\", \"2322\"], [\"([0, 1, 216, 125, 1, 125, 1, 1, 125, 2197], 9)\", \"None\"], [\"([0, 1, 216, 125, 1, 125, 1, 1, 125, 2197], 10)\", \"None\"], [\"([0, 1, 216, 125, 1, 125, 1, 1, 125, 2197], 11)\", \"None\"], [\"([0, 1, 216, 125, 1, 125, 1, 1, 125, 2197], 12)\", \"None\"], [\"([0, 1, 216, 125, 1, 125, 1, 1, 125, 2197], 13)\", \"None\"], [\"([0, 1, 216, 125, 1, 125, 1, 1, 125, 2197], 14)\", \"None\"], [\"([8, 0, 27, 8, 216, 8, 8, 216, 0, 1000], 0)\", \"8\"], [\"([8, 0, 27, 8, 216, 8, 8, 216, 0, 1000], 1)\", \"27\"], [\"([8, 0, 27, 8, 216, 8, 8, 216, 0, 1000], 2)\", \"35\"], [\"([8, 0, 27, 8, 216, 8, 8, 216, 0, 1000], 3)\", \"224\"], [\"([8, 0, 27, 8, 216, 8, 8, 216, 0, 1000], 4)\", \"224\"], [\"([8, 0, 27, 8, 216, 8, 8, 216, 0, 1000], 5)\", \"16\"], [\"([8, 0, 27, 8, 216, 8, 8, 216, 0, 1000], 6)\", \"224\"], [\"([8, 0, 27, 8, 216, 8, 8, 216, 0, 1000], 7)\", \"216\"], [\"([8, 0, 27, 8, 216, 8, 8, 216, 0, 1000], 8)\", \"1000\"], [\"([8, 0, 27, 8, 216, 8, 8, 216, 0, 1000], 9)\", \"None\"], [\"([8, 0, 27, 8, 216, 8, 8, 216, 0, 1000], 10)\", \"None\"], [\"([8, 0, 27, 8, 216, 8, 8, 216, 0, 1000], 11)\", \"None\"], [\"([8, 0, 27, 8, 216, 8, 8, 216, 0, 1000], 12)\", \"None\"], [\"([8, 0, 27, 8, 216, 8, 8, 216, 0, 1000], 13)\", \"None\"], [\"([8, 0, 27, 8, 216, 8, 8, 216, 0, 1000], 14)\", \"None\"], [\"([64, 1, 1, 27, 1, 729, 64, 343, 216, 1], 0)\", \"65\"], [\"([64, 1, 1, 27, 1, 729, 64, 343, 216, 1], 1)\", \"2\"], [\"([64, 1, 1, 27, 1, 729, 64, 343, 216, 1], 2)\", \"28\"], [\"([64, 1, 1, 27, 1, 729, 64, 343, 216, 1], 3)\", \"28\"], [\"([64, 1, 1, 27, 1, 729, 64, 343, 216, 1], 4)\", \"730\"], [\"([64, 1, 1, 27, 1, 729, 64, 343, 216, 1], 5)\", \"793\"], [\"([64, 1, 1, 27, 1, 729, 64, 343, 216, 1], 6)\", \"407\"], [\"([64, 1, 1, 27, 1, 729, 64, 343, 216, 1], 7)\", \"559\"], [\"([64, 1, 1, 27, 1, 729, 64, 343, 216, 1], 8)\", \"217\"], [\"([64, 1, 1, 27, 1, 729, 64, 343, 216, 1], 9)\", \"None\"], [\"([64, 1, 1, 27, 1, 729, 64, 343, 216, 1], 10)\", \"None\"], [\"([64, 1, 1, 27, 1, 729, 64, 343, 216, 1], 11)\", \"None\"], [\"([64, 1, 1, 27, 1, 729, 64, 343, 216, 1], 12)\", \"None\"], [\"([64, 1, 1, 27, 1, 729, 64, 343, 216, 1], 13)\", \"None\"], [\"([64, 1, 1, 27, 1, 729, 64, 343, 216, 1], 14)\", \"None\"], [\"([0, 64, 216, 0, 64, 0, 125, 64, 125, 216], 0)\", \"64\"], [\"([0, 64, 216, 0, 64, 0, 125, 64, 125, 216], 1)\", \"280\"], [\"([0, 64, 216, 0, 64, 0, 125, 64, 125, 216], 2)\", \"216\"], [\"([0, 64, 216, 0, 64, 0, 125, 64, 125, 216], 3)\", \"64\"], [\"([0, 64, 216, 0, 64, 0, 125, 64, 125, 216], 4)\", \"64\"], [\"([0, 64, 216, 0, 64, 0, 125, 64, 125, 216], 5)\", \"125\"], [\"([0, 64, 216, 0, 64, 0, 125, 64, 125, 216], 6)\", \"189\"], [\"([0, 64, 216, 0, 64, 0, 125, 64, 125, 216], 7)\", \"189\"], [\"([0, 64, 216, 0, 64, 0, 125, 64, 125, 216], 8)\", \"341\"], [\"([0, 64, 216, 0, 64, 0, 125, 64, 125, 216], 9)\", \"None\"], [\"([0, 64, 216, 0, 64, 0, 125, 64, 125, 216], 10)\", \"None\"], [\"([0, 64, 216, 0, 64, 0, 125, 64, 125, 216], 11)\", \"None\"], [\"([0, 64, 216, 0, 64, 0, 125, 64, 125, 216], 12)\", \"None\"], [\"([0, 64, 216, 0, 64, 0, 125, 64, 125, 216], 13)\", \"None\"], [\"([0, 64, 216, 0, 64, 0, 125, 64, 125, 216], 14)\", \"None\"], [\"([27, 27, 1, 1, 27, 27, 1000, 729, 1, 1], 0)\", \"54\"], [\"([27, 27, 1, 1, 27, 27, 1000, 729, 1, 1], 1)\", \"28\"], [\"([27, 27, 1, 1, 27, 27, 1000, 729, 1, 1], 2)\", \"2\"], [\"([27, 27, 1, 1, 27, 27, 1000, 729, 1, 1], 3)\", \"28\"], [\"([27, 27, 1, 1, 27, 27, 1000, 729, 1, 1], 4)\", \"54\"], [\"([27, 27, 1, 1, 27, 27, 1000, 729, 1, 1], 5)\", \"1027\"], [\"([27, 27, 1, 1, 27, 27, 1000, 729, 1, 1], 6)\", \"1729\"], [\"([27, 27, 1, 1, 27, 27, 1000, 729, 1, 1], 7)\", \"730\"], [\"([27, 27, 1, 1, 27, 27, 1000, 729, 1, 1], 8)\", \"2\"], [\"([27, 27, 1, 1, 27, 27, 1000, 729, 1, 1], 9)\", \"None\"], [\"([27, 27, 1, 1, 27, 27, 1000, 729, 1, 1], 10)\", \"None\"], [\"([27, 27, 1, 1, 27, 27, 1000, 729, 1, 1], 11)\", \"None\"], [\"([27, 27, 1, 1, 27, 27, 1000, 729, 1, 1], 12)\", \"None\"], [\"([27, 27, 1, 1, 27, 27, 1000, 729, 1, 1], 13)\", \"None\"], [\"([27, 27, 1, 1, 27, 27, 1000, 729, 1, 1], 14)\", \"None\"], [\"([1, 8, 1, 216, 125, 216, 64, 8, 1728, 512], 0)\", \"9\"], [\"([1, 8, 1, 216, 125, 216, 64, 8, 1728, 512], 1)\", \"9\"], [\"([1, 8, 1, 216, 125, 216, 64, 8, 1728, 512], 2)\", \"217\"], [\"([1, 8, 1, 216, 125, 216, 64, 8, 1728, 512], 3)\", \"341\"], [\"([1, 8, 1, 216, 125, 216, 64, 8, 1728, 512], 4)\", \"341\"], [\"([1, 8, 1, 216, 125, 216, 64, 8, 1728, 512], 5)\", \"280\"], [\"([1, 8, 1, 216, 125, 216, 64, 8, 1728, 512], 6)\", \"72\"], [\"([1, 8, 1, 216, 125, 216, 64, 8, 1728, 512], 7)\", \"1736\"], [\"([1, 8, 1, 216, 125, 216, 64, 8, 1728, 512], 8)\", \"2240\"], [\"([1, 8, 1, 216, 125, 216, 64, 8, 1728, 512], 9)\", \"None\"], [\"([1, 8, 1, 216, 125, 216, 64, 8, 1728, 512], 10)\", \"None\"], [\"([1, 8, 1, 216, 125, 216, 64, 8, 1728, 512], 11)\", \"None\"], [\"([1, 8, 1, 216, 125, 216, 64, 8, 1728, 512], 12)\", \"None\"], [\"([1, 8, 1, 216, 125, 216, 64, 8, 1728, 512], 13)\", \"None\"], [\"([1, 8, 1, 216, 125, 216, 64, 8, 1728, 512], 14)\", \"None\"], [\"([64, 1, 64, 343, 343, 729, 125, 343, 1000, 1331], 0)\", \"65\"], [\"([64, 1, 64, 343, 343, 729, 125, 343, 1000, 1331], 1)\", \"65\"], [\"([64, 1, 64, 343, 343, 729, 125, 343, 1000, 1331], 2)\", \"407\"], [\"([64, 1, 64, 343, 343, 729, 125, 343, 1000, 1331], 3)\", \"686\"], [\"([64, 1, 64, 343, 343, 729, 125, 343, 1000, 1331], 4)\", \"1072\"], [\"([64, 1, 64, 343, 343, 729, 125, 343, 1000, 1331], 5)\", \"854\"], [\"([64, 1, 64, 343, 343, 729, 125, 343, 1000, 1331], 6)\", \"468\"], [\"([64, 1, 64, 343, 343, 729, 125, 343, 1000, 1331], 7)\", \"1343\"], [\"([64, 1, 64, 343, 343, 729, 125, 343, 1000, 1331], 8)\", \"2331\"], [\"([64, 1, 64, 343, 343, 729, 125, 343, 1000, 1331], 9)\", \"None\"], [\"([64, 1, 64, 343, 343, 729, 125, 343, 1000, 1331], 10)\", \"None\"], [\"([64, 1, 64, 343, 343, 729, 125, 343, 1000, 1331], 11)\", \"None\"], [\"([64, 1, 64, 343, 343, 729, 125, 343, 1000, 1331], 12)\", \"None\"], [\"([64, 1, 64, 343, 343, 729, 125, 343, 1000, 1331], 13)\", \"None\"], [\"([64, 1, 64, 343, 343, 729, 125, 343, 1000, 1331], 14)\", \"None\"], [\"([1, 64, 125, 64, 343, 216, 125, 64, 64, 1728], 0)\", \"65\"], [\"([1, 64, 125, 64, 343, 216, 125, 64, 64, 1728], 1)\", \"189\"], [\"([1, 64, 125, 64, 343, 216, 125, 64, 64, 1728], 2)\", \"189\"], [\"([1, 64, 125, 64, 343, 216, 125, 64, 64, 1728], 3)\", \"407\"], [\"([1, 64, 125, 64, 343, 216, 125, 64, 64, 1728], 4)\", \"559\"], [\"([1, 64, 125, 64, 343, 216, 125, 64, 64, 1728], 5)\", \"341\"], [\"([1, 64, 125, 64, 343, 216, 125, 64, 64, 1728], 6)\", \"189\"], [\"([1, 64, 125, 64, 343, 216, 125, 64, 64, 1728], 7)\", \"128\"], [\"([1, 64, 125, 64, 343, 216, 125, 64, 64, 1728], 8)\", \"1792\"], [\"([1, 64, 125, 64, 343, 216, 125, 64, 64, 1728], 9)\", \"None\"], [\"([1, 64, 125, 64, 343, 216, 125, 64, 64, 1728], 10)\", \"None\"], [\"([1, 64, 125, 64, 343, 216, 125, 64, 64, 1728], 11)\", \"None\"], [\"([1, 64, 125, 64, 343, 216, 125, 64, 64, 1728], 12)\", \"None\"], [\"([1, 64, 125, 64, 343, 216, 125, 64, 64, 1728], 13)\", \"None\"], [\"([1, 64, 125, 64, 343, 216, 125, 64, 64, 1728], 14)\", \"None\"], [\"([27, 125, 125, 125, 512, 27, 27, 125, 1728, 125], 0)\", \"152\"], [\"([27, 125, 125, 125, 512, 27, 27, 125, 1728, 125], 1)\", \"250\"], [\"([27, 125, 125, 125, 512, 27, 27, 125, 1728, 125], 2)\", \"250\"], [\"([27, 125, 125, 125, 512, 27, 27, 125, 1728, 125], 3)\", \"637\"], [\"([27, 125, 125, 125, 512, 27, 27, 125, 1728, 125], 4)\", \"539\"], [\"([27, 125, 125, 125, 512, 27, 27, 125, 1728, 125], 5)\", \"54\"], [\"([27, 125, 125, 125, 512, 27, 27, 125, 1728, 125], 6)\", \"152\"], [\"([27, 125, 125, 125, 512, 27, 27, 125, 1728, 125], 7)\", \"1853\"], [\"([27, 125, 125, 125, 512, 27, 27, 125, 1728, 125], 8)\", \"1853\"], [\"([27, 125, 125, 125, 512, 27, 27, 125, 1728, 125], 9)\", \"None\"], [\"([27, 125, 125, 125, 512, 27, 27, 125, 1728, 125], 10)\", \"None\"], [\"([27, 125, 125, 125, 512, 27, 27, 125, 1728, 125], 11)\", \"None\"], [\"([27, 125, 125, 125, 512, 27, 27, 125, 1728, 125], 12)\", \"None\"], [\"([27, 125, 125, 125, 512, 27, 27, 125, 1728, 125], 13)\", \"None\"], [\"([27, 125, 125, 125, 512, 27, 27, 125, 1728, 125], 14)\", \"None\"], [\"([8, 8, 216, 8, 512, 8, 0, 8, 1000, 216], 0)\", \"16\"], [\"([8, 8, 216, 8, 512, 8, 0, 8, 1000, 216], 1)\", \"224\"], [\"([8, 8, 216, 8, 512, 8, 0, 8, 1000, 216], 2)\", \"224\"], [\"([8, 8, 216, 8, 512, 8, 0, 8, 1000, 216], 3)\", \"520\"], [\"([8, 8, 216, 8, 512, 8, 0, 8, 1000, 216], 4)\", \"520\"], [\"([8, 8, 216, 8, 512, 8, 0, 8, 1000, 216], 5)\", \"8\"], [\"([8, 8, 216, 8, 512, 8, 0, 8, 1000, 216], 6)\", \"8\"], [\"([8, 8, 216, 8, 512, 8, 0, 8, 1000, 216], 7)\", \"1008\"], [\"([8, 8, 216, 8, 512, 8, 0, 8, 1000, 216], 8)\", \"1216\"], [\"([8, 8, 216, 8, 512, 8, 0, 8, 1000, 216], 9)\", \"None\"], [\"([8, 8, 216, 8, 512, 8, 0, 8, 1000, 216], 10)\", \"None\"], [\"([8, 8, 216, 8, 512, 8, 0, 8, 1000, 216], 11)\", \"None\"], [\"([8, 8, 216, 8, 512, 8, 0, 8, 1000, 216], 12)\", \"None\"], [\"([8, 8, 216, 8, 512, 8, 0, 8, 1000, 216], 13)\", \"None\"], [\"([8, 8, 216, 8, 512, 8, 0, 8, 1000, 216], 14)\", \"None\"], [\"([1, 125, 8, 27, 8, 1, 512, 1331, 64, 729], 0)\", \"126\"], [\"([1, 125, 8, 27, 8, 1, 512, 1331, 64, 729], 1)\", \"133\"], [\"([1, 125, 8, 27, 8, 1, 512, 1331, 64, 729], 2)\", \"35\"], [\"([1, 125, 8, 27, 8, 1, 512, 1331, 64, 729], 3)\", \"35\"], [\"([1, 125, 8, 27, 8, 1, 512, 1331, 64, 729], 4)\", \"9\"], [\"([1, 125, 8, 27, 8, 1, 512, 1331, 64, 729], 5)\", \"513\"], [\"([1, 125, 8, 27, 8, 1, 512, 1331, 64, 729], 6)\", \"1843\"], [\"([1, 125, 8, 27, 8, 1, 512, 1331, 64, 729], 7)\", \"1395\"], [\"([1, 125, 8, 27, 8, 1, 512, 1331, 64, 729], 8)\", \"793\"], [\"([1, 125, 8, 27, 8, 1, 512, 1331, 64, 729], 9)\", \"None\"], [\"([1, 125, 8, 27, 8, 1, 512, 1331, 64, 729], 10)\", \"None\"], [\"([1, 125, 8, 27, 8, 1, 512, 1331, 64, 729], 11)\", \"None\"], [\"([1, 125, 8, 27, 8, 1, 512, 1331, 64, 729], 12)\", \"None\"], [\"([1, 125, 8, 27, 8, 1, 512, 1331, 64, 729], 13)\", \"None\"], [\"([1, 125, 8, 27, 8, 1, 512, 1331, 64, 729], 14)\", \"None\"], [\"([27, 0, 0, 0, 0, 512, 27, 0, 1, 0], 0)\", \"27\"], [\"([27, 0, 0, 0, 0, 512, 27, 0, 1, 0], 1)\", \"0\"], [\"([27, 0, 0, 0, 0, 512, 27, 0, 1, 0], 2)\", \"0\"], [\"([27, 0, 0, 0, 0, 512, 27, 0, 1, 0], 3)\", \"0\"], [\"([27, 0, 0, 0, 0, 512, 27, 0, 1, 0], 4)\", \"512\"], [\"([27, 0, 0, 0, 0, 512, 27, 0, 1, 0], 5)\", \"539\"], [\"([27, 0, 0, 0, 0, 512, 27, 0, 1, 0], 6)\", \"27\"], [\"([27, 0, 0, 0, 0, 512, 27, 0, 1, 0], 7)\", \"1\"], [\"([27, 0, 0, 0, 0, 512, 27, 0, 1, 0], 8)\", \"1\"], [\"([27, 0, 0, 0, 0, 512, 27, 0, 1, 0], 9)\", \"None\"], [\"([27, 0, 0, 0, 0, 512, 27, 0, 1, 0], 10)\", \"None\"], [\"([27, 0, 0, 0, 0, 512, 27, 0, 1, 0], 11)\", \"None\"], [\"([27, 0, 0, 0, 0, 512, 27, 0, 1, 0], 12)\", \"None\"], [\"([27, 0, 0, 0, 0, 512, 27, 0, 1, 0], 13)\", \"None\"], [\"([27, 0, 0, 0, 0, 512, 27, 0, 1, 0], 14)\", \"None\"], [\"([64, 27, 125, 1, 0, 729, 1000, 729, 125, 125], 0)\", \"91\"], [\"([64, 27, 125, 1, 0, 729, 1000, 729, 125, 125], 1)\", \"152\"], [\"([64, 27, 125, 1, 0, 729, 1000, 729, 125, 125], 2)\", \"126\"], [\"([64, 27, 125, 1, 0, 729, 1000, 729, 125, 125], 3)\", \"1\"], [\"([64, 27, 125, 1, 0, 729, 1000, 729, 125, 125], 4)\", \"729\"], [\"([64, 27, 125, 1, 0, 729, 1000, 729, 125, 125], 5)\", \"1729\"], [\"([64, 27, 125, 1, 0, 729, 1000, 729, 125, 125], 6)\", \"1729\"], [\"([64, 27, 125, 1, 0, 729, 1000, 729, 125, 125], 7)\", \"854\"], [\"([64, 27, 125, 1, 0, 729, 1000, 729, 125, 125], 8)\", \"250\"], [\"([64, 27, 125, 1, 0, 729, 1000, 729, 125, 125], 9)\", \"None\"], [\"([64, 27, 125, 1, 0, 729, 1000, 729, 125, 125], 10)\", \"None\"], [\"([64, 27, 125, 1, 0, 729, 1000, 729, 125, 125], 11)\", \"None\"], [\"([64, 27, 125, 1, 0, 729, 1000, 729, 125, 125], 12)\", \"None\"], [\"([64, 27, 125, 1, 0, 729, 1000, 729, 125, 125], 13)\", \"None\"], [\"([64, 27, 125, 1, 0, 729, 1000, 729, 125, 125], 14)\", \"None\"], [\"([64, 64, 27, 216, 343, 64, 216, 1000, 1, 1000], 0)\", \"128\"], [\"([64, 64, 27, 216, 343, 64, 216, 1000, 1, 1000], 1)\", \"91\"], [\"([64, 64, 27, 216, 343, 64, 216, 1000, 1, 1000], 2)\", \"243\"], [\"([64, 64, 27, 216, 343, 64, 216, 1000, 1, 1000], 3)\", \"559\"], [\"([64, 64, 27, 216, 343, 64, 216, 1000, 1, 1000], 4)\", \"407\"], [\"([64, 64, 27, 216, 343, 64, 216, 1000, 1, 1000], 5)\", \"280\"], [\"([64, 64, 27, 216, 343, 64, 216, 1000, 1, 1000], 6)\", \"1216\"], [\"([64, 64, 27, 216, 343, 64, 216, 1000, 1, 1000], 7)\", \"1001\"], [\"([64, 64, 27, 216, 343, 64, 216, 1000, 1, 1000], 8)\", \"1001\"], [\"([64, 64, 27, 216, 343, 64, 216, 1000, 1, 1000], 9)\", \"None\"], [\"([64, 64, 27, 216, 343, 64, 216, 1000, 1, 1000], 10)\", \"None\"], [\"([64, 64, 27, 216, 343, 64, 216, 1000, 1, 1000], 11)\", \"None\"], [\"([64, 64, 27, 216, 343, 64, 216, 1000, 1, 1000], 12)\", \"None\"], [\"([64, 64, 27, 216, 343, 64, 216, 1000, 1, 1000], 13)\", \"None\"], [\"([64, 64, 27, 216, 343, 64, 216, 1000, 1, 1000], 14)\", \"None\"], [\"([64, 27, 8, 343, 27, 729, 343, 27, 216, 729], 0)\", \"91\"], [\"([64, 27, 8, 343, 27, 729, 343, 27, 216, 729], 1)\", \"35\"], [\"([64, 27, 8, 343, 27, 729, 343, 27, 216, 729], 2)\", \"351\"], [\"([64, 27, 8, 343, 27, 729, 343, 27, 216, 729], 3)\", \"370\"], [\"([64, 27, 8, 343, 27, 729, 343, 27, 216, 729], 4)\", \"756\"], [\"([64, 27, 8, 343, 27, 729, 343, 27, 216, 729], 5)\", \"1072\"], [\"([64, 27, 8, 343, 27, 729, 343, 27, 216, 729], 6)\", \"370\"], [\"([64, 27, 8, 343, 27, 729, 343, 27, 216, 729], 7)\", \"243\"], [\"([64, 27, 8, 343, 27, 729, 343, 27, 216, 729], 8)\", \"945\"], [\"([64, 27, 8, 343, 27, 729, 343, 27, 216, 729], 9)\", \"None\"], [\"([64, 27, 8, 343, 27, 729, 343, 27, 216, 729], 10)\", \"None\"], [\"([64, 27, 8, 343, 27, 729, 343, 27, 216, 729], 11)\", \"None\"], [\"([64, 27, 8, 343, 27, 729, 343, 27, 216, 729], 12)\", \"None\"], [\"([64, 27, 8, 343, 27, 729, 343, 27, 216, 729], 13)\", \"None\"], [\"([64, 27, 8, 343, 27, 729, 343, 27, 216, 729], 14)\", \"None\"], [\"([8, 8, 125, 64, 125, 8, 27, 512, 512, 1728], 0)\", \"16\"], [\"([8, 8, 125, 64, 125, 8, 27, 512, 512, 1728], 1)\", \"133\"], [\"([8, 8, 125, 64, 125, 8, 27, 512, 512, 1728], 2)\", \"189\"], [\"([8, 8, 125, 64, 125, 8, 27, 512, 512, 1728], 3)\", \"189\"], [\"([8, 8, 125, 64, 125, 8, 27, 512, 512, 1728], 4)\", \"133\"], [\"([8, 8, 125, 64, 125, 8, 27, 512, 512, 1728], 5)\", \"35\"], [\"([8, 8, 125, 64, 125, 8, 27, 512, 512, 1728], 6)\", \"539\"], [\"([8, 8, 125, 64, 125, 8, 27, 512, 512, 1728], 7)\", \"1024\"], [\"([8, 8, 125, 64, 125, 8, 27, 512, 512, 1728], 8)\", \"2240\"], [\"([8, 8, 125, 64, 125, 8, 27, 512, 512, 1728], 9)\", \"None\"], [\"([8, 8, 125, 64, 125, 8, 27, 512, 512, 1728], 10)\", \"None\"], [\"([8, 8, 125, 64, 125, 8, 27, 512, 512, 1728], 11)\", \"None\"], [\"([8, 8, 125, 64, 125, 8, 27, 512, 512, 1728], 12)\", \"None\"], [\"([8, 8, 125, 64, 125, 8, 27, 512, 512, 1728], 13)\", \"None\"], [\"([8, 8, 125, 64, 125, 8, 27, 512, 512, 1728], 14)\", \"None\"], [\"([1, 1, 64, 125, 343, 1, 64, 1, 1331, 1331], 0)\", \"2\"], [\"([1, 1, 64, 125, 343, 1, 64, 1, 1331, 1331], 1)\", \"65\"], [\"([1, 1, 64, 125, 343, 1, 64, 1, 1331, 1331], 2)\", \"189\"], [\"([1, 1, 64, 125, 343, 1, 64, 1, 1331, 1331], 3)\", \"468\"], [\"([1, 1, 64, 125, 343, 1, 64, 1, 1331, 1331], 4)\", \"344\"], [\"([1, 1, 64, 125, 343, 1, 64, 1, 1331, 1331], 5)\", \"65\"], [\"([1, 1, 64, 125, 343, 1, 64, 1, 1331, 1331], 6)\", \"65\"], [\"([1, 1, 64, 125, 343, 1, 64, 1, 1331, 1331], 7)\", \"1332\"], [\"([1, 1, 64, 125, 343, 1, 64, 1, 1331, 1331], 8)\", \"2662\"], [\"([1, 1, 64, 125, 343, 1, 64, 1, 1331, 1331], 9)\", \"None\"], [\"([1, 1, 64, 125, 343, 1, 64, 1, 1331, 1331], 10)\", \"None\"], [\"([1, 1, 64, 125, 343, 1, 64, 1, 1331, 1331], 11)\", \"None\"], [\"([1, 1, 64, 125, 343, 1, 64, 1, 1331, 1331], 12)\", \"None\"], [\"([1, 1, 64, 125, 343, 1, 64, 1, 1331, 1331], 13)\", \"None\"], [\"([1, 1, 64, 125, 343, 1, 64, 1, 1331, 1331], 14)\", \"None\"]]", 
      "solution": "def vsotaSosedov(sez, i):\n    if 0 <= i < len(sez) - 1:\n        return sez[i] + sez[i + 1]", 
      "problem": 246, 
      "validation": "Check.equal(\"\"\"vsotaSosedov([1, 3, 3, 1], 0)\"\"\", 4)\nCheck.equal(\"\"\"vsotaSosedov([1, 3, 3, 1], 1)\"\"\", 6)\nCheck.equal(\"\"\"vsotaSosedov([1, 2, 1], 0)\"\"\", 3)\nCheck.equal(\"\"\"vsotaSosedov([], 0)\"\"\", None)\n\n_rng=[1287631]\nfor i in range(50): _rng.append((_rng[-1]*1103515245+12345)%2**32)\nfor i in _rng:\n    sez = []\n    for j in range(10):\n        sez.append((i % (j + 5)) ** 3)\n    for k in range(15):\n        Check.challenge(vsotaSosedov(sez, k), (sez, k))"
    }
  }, 
  {
    "pk": 840, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `prastevila.med(m, n)`, ki vrne vektor vseh pra\u0161tevil\nmed `m` in `n`. Namig: logi\u010dni indeksni vektorji.", 
      "timestamp": "2012-11-11 21:32:14", 
      "challenge": "[]", 
      "solution": "prastevila.med <- function(m, n) {\n  vsa.stevila <- m : n\n  return(vsa.stevila[sapply(vsa.stevila, prastevilo)])\n}", 
      "problem": 275, 
      "validation": "check$equal(prastevila.med(2, 10), c(2, 3, 5, 7))\ncheck$equal(prastevila.med(2, 100), c(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97))\ncheck$equal(prastevila.med(1111, 1234), c(1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231))"
    }
  }, 
  {
    "pk": 871, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `oklepaji(niz)`, ki z enim samim pregledom preveri,\nali so oklepaji in zaklepaji razli\u010dnih vrst (okrogli, oglati in zaviti)\nv nizu `niz` pravilno gnezdeni. Pomagajte si lahko s skladom znakov.", 
      "timestamp": "2012-11-29 09:38:36", 
      "challenge": "[]", 
      "solution": "def oklepaji(niz):\n    sklad = Sklad()\n    for znak in niz:\n        if znak in '([{':\n            sklad.dodaj(znak)\n        elif znak in ')]}':\n            if sklad.prazen():\n                return False\n            oklepaj = sklad.odstrani()\n            if oklepaj == '(' and znak != ')':\n                return False\n            elif oklepaj == '[' and znak != ']':\n                return False\n            elif oklepaj == '{' and znak != '}':\n                return False\n    return sklad.prazen()", 
      "problem": 283, 
      "validation": "Check.equal(\"oklepaji('()[]{}')\", True)\nCheck.equal(\"oklepaji('([()([])]{{}()})')\", True)\nCheck.equal(\"oklepaji('[[[{}{}()]]]()')\", True)\nCheck.equal(\"oklepaji('([})')\", False)\nCheck.equal(\"oklepaji('{(][)}')\", False)\nCheck.equal(\"oklepaji('')\", True)"
    }
  }, 
  {
    "pk": 781, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `fk(x, k)`, ki izra\u010duna `k`-ti kompozitum funkcije `f`\nv to\u010dki `x`, torej\n$fk(x, k) = f^k(x) = \\underbrace{f \\circ f \\circ \\cdots \\circ f}_{k}(x)$.", 
      "timestamp": "2012-09-05 11:43:14", 
      "challenge": "[[\"None\", \"182\"], [\"None\", \"10\"], [\"None\", \"7252\"], [\"None\", \"1698277\"], [\"None\", \"2114\"], [\"None\", \"653177\"], [\"None\", \"112\"], [\"None\", \"952\"], [\"None\", \"217\"], [\"None\", \"20\"], [\"None\", \"112\"], [\"None\", \"7054383\"], [\"None\", \"2351461\"], [\"None\", \"914452\"], [\"None\", \"7446292\"], [\"None\", \"5\"], [\"None\", \"783818\"], [\"None\", \"25\"], [\"None\", \"141519\"], [\"None\", \"35271936\"], [\"None\", \"409154452\"], [\"None\", \"16460234\"], [\"None\", \"2351461\"], [\"None\", \"1155\"], [\"None\", \"3325\"], [\"None\", \"21770\"], [\"None\", \"169305290\"], [\"None\", \"1358\"], [\"None\", \"147\"], [\"None\", \"10\"], [\"None\", \"112\"], [\"None\", \"1437002\"], [\"None\", \"169305290\"], [\"None\", \"1698277\"], [\"None\", \"3919104\"], [\"None\", \"47029241\"], [\"None\", \"147\"], [\"None\", \"65840943\"], [\"None\", \"169305290\"], [\"None\", \"1175727\"], [\"None\", \"97972\"], [\"None\", \"5\"], [\"None\", \"6041\"], [\"None\", \"16460234\"], [\"None\", \"228613\"], [\"None\", \"1437002\"], [\"None\", \"169305290\"], [\"None\", \"21770\"], [\"None\", \"169305290\"], [\"None\", \"65840943\"], [\"None\", \"3919104\"]]", 
      "solution": "def fk(x,k):\n    if k==0:\n        return x\n    elif k==1:\n        return f(x)\n    else:\n        return fk(f(x),k-1)", 
      "problem": 249, 
      "validation": "Check.equal(\"fk(0,0)\",0)\nCheck.equal(\"fk(0,1)\",0)\nCheck.equal(\"fk(0,2)\",0)\nCheck.equal(\"fk(0,20)\",0)\nCheck.equal(\"fk(1,2)\",49)\nCheck.equal(\"fk(-1,2)\",245)\nCheck.equal(\"fk(-1,5)\",54425)\nCheck.equal(\"fk(-1,10)\",423263225)\n\n_rng=[991821]\nfor i in range(50): _rng.append((_rng[-1]*1103515245+12345)%2**32)\nfor i in _rng:\n    Check.challenge(fk(i%35,i%10))"
    }
  }, 
  {
    "pk": 785, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `steviloPoMestih(tablice)`, ki vrne slovar, v katerem\nso klju\u010di oznake mest, vrednosti pa \u0161tevila registrskih tablic iz\nposameznega mesta v seznamu `tablice`.", 
      "timestamp": "2012-09-05 11:43:24", 
      "challenge": "[[\"['IJ*98776', 'AB*23470', 'IJ*98776', 'IJ*98776', 'JK*11123', 'EF*72858', 'IJ*98776', 'IJ*98776', 'BC*35817', 'EF*72858', 'EF*72858', 'GH*97552', 'IJ*98776', 'CD*71634', 'HI*86429', 'IJ*98776', 'IJ*98776', 'IJ*22246', 'DE*83981', 'CD*71634']\", \"[('AB', 1), ('BC', 1), ('CD', 2), ('DE', 1), ('EF', 3), ('GH', 1), ('HI', 1), ('IJ', 9), ('JK', 1)]\"], [\"['IJ*98776', 'HI*86429', 'JK*11123', 'BC*35817', 'IJ*98776', 'BC*35817', 'EF*72858', 'JK*11123', 'AB*23470', 'BC*35817', 'JK*34593', 'FG*85205', 'EF*72858', 'JK*34593', 'EF*72858', 'DE*83981', 'EF*96328', 'JK*34593', 'IJ*98776', 'BC*59287']\", \"[('AB', 1), ('BC', 4), ('DE', 1), ('EF', 4), ('FG', 1), ('HI', 1), ('IJ', 3), ('JK', 5)]\"], [\"['HI*86429', 'IJ*98776', 'IJ*98776', 'AB*23470', 'BC*35817', 'CD*48164', 'DE*60511', 'IJ*98776', 'CD*48164', 'GH*97552', 'JK*34593', 'IJ*22246', 'DE*60511', 'CD*48164', 'JK*11123', 'CD*71634', 'DE*60511', 'IJ*98776', 'FG*8675', 'CD*48164']\", \"[('AB', 1), ('BC', 1), ('CD', 5), ('DE', 3), ('FG', 1), ('GH', 1), ('HI', 1), ('IJ', 5), ('JK', 2)]\"], [\"['HI*86429', 'JK*11123', 'BC*35817', 'HI*86429', 'AB*23470', 'JK*11123', 'DE*60511', 'BC*35817', 'FG*85205', 'DE*60511', 'EF*72858', 'HI*9899', 'GH*97552', 'HI*9899', 'IJ*22246', 'DE*60511', 'JK*11123', 'BC*59287', 'AB*23470', 'FG*85205']\", \"[('AB', 2), ('BC', 3), ('DE', 3), ('EF', 1), ('FG', 2), ('GH', 1), ('HI', 4), ('IJ', 1), ('JK', 3)]\"], [\"['IJ*98776', 'AB*23470', 'AB*23470', 'IJ*98776', 'JK*11123', 'AB*23470', 'BC*35817', 'AB*23470', 'JK*11123', 'EF*72858', 'HI*86429', 'GH*97552', 'AB*46940', 'IJ*22246', 'DE*83981', 'AB*46940', 'BC*35817', 'AB*23470', 'DE*83981', 'AB*46940']\", \"[('AB', 8), ('BC', 2), ('DE', 2), ('EF', 1), ('GH', 1), ('HI', 1), ('IJ', 3), ('JK', 2)]\"], [\"['IJ*98776', 'HI*86429', 'BC*35817', 'BC*35817', 'JK*11123', 'HI*86429', 'IJ*98776', 'BC*35817', 'IJ*98776', 'BC*35817', 'JK*34593', 'JK*11123', 'BC*35817', 'FG*85205', 'DE*83981', 'HI*9899', 'IJ*22246', 'BC*35817', 'DE*83981', 'JK*34593']\", \"[('BC', 6), ('DE', 2), ('FG', 1), ('HI', 3), ('IJ', 4), ('JK', 4)]\"], [\"['JK*11123', 'IJ*98776', 'BC*35817', 'CD*48164', 'CD*48164', 'IJ*98776', 'FG*85205', 'GH*97552', 'HI*86429', 'CD*48164', 'EF*72858', 'CD*48164', 'BC*59287', 'IJ*98776', 'GH*97552', 'EF*96328', 'DE*83981', 'GH*97552', 'CD*48164', 'IJ*22246']\", \"[('BC', 2), ('CD', 5), ('DE', 1), ('EF', 2), ('FG', 1), ('GH', 3), ('HI', 1), ('IJ', 4), ('JK', 1)]\"], [\"['JK*11123', 'JK*11123', 'JK*11123', 'JK*11123', 'HI*86429', 'DE*60511', 'JK*11123', 'JK*11123', 'EF*72858', 'JK*11123', 'CD*48164', 'HI*86429', 'JK*11123', 'DE*60511', 'JK*34593', 'JK*11123', 'EF*96328', 'JK*11123', 'BC*59287', 'FG*8675']\", \"[('BC', 1), ('CD', 1), ('DE', 2), ('EF', 2), ('FG', 1), ('HI', 2), ('JK', 11)]\"], [\"['HI*86429', 'AB*23470', 'BC*35817', 'AB*23470', 'JK*11123', 'EF*72858', 'DE*60511', 'GH*97552', 'FG*85205', 'AB*23470', 'IJ*98776', 'GH*97552', 'GH*97552', 'EF*72858', 'HI*9899', 'CD*71634', 'EF*96328', 'GH*21022', 'GH*97552', 'GH*21022']\", \"[('AB', 3), ('BC', 1), ('CD', 1), ('DE', 1), ('EF', 3), ('FG', 1), ('GH', 6), ('HI', 2), ('IJ', 1), ('JK', 1)]\"], [\"['JK*11123', 'HI*86429', 'BC*35817', 'JK*11123', 'CD*48164', 'BC*35817', 'CD*48164', 'BC*35817', 'BC*35817', 'FG*85205', 'DE*60511', 'JK*34593', 'BC*59287', 'BC*35817', 'DE*60511', 'BC*59287', 'DE*60511', 'BC*35817', 'CD*48164', 'BC*35817']\", \"[('BC', 9), ('CD', 3), ('DE', 3), ('FG', 1), ('HI', 1), ('JK', 3)]\"], [\"['HI*86429', 'IJ*98776', 'JK*11123', 'AB*23470', 'CD*48164', 'CD*48164', 'HI*86429', 'EF*72858', 'JK*11123', 'GH*97552', 'GH*97552', 'CD*48164', 'JK*34593', 'AB*46940', 'BC*59287', 'GH*97552', 'BC*35817', 'EF*96328', 'JK*34593', 'AB*46940']\", \"[('AB', 3), ('BC', 2), ('CD', 3), ('EF', 2), ('GH', 3), ('HI', 2), ('IJ', 1), ('JK', 4)]\"], [\"['HI*86429', 'JK*11123', 'JK*11123', 'HI*86429', 'JK*11123', 'JK*11123', 'HI*86429', 'JK*11123', 'BC*35817', 'DE*60511', 'EF*72858', 'JK*11123', 'JK*34593', 'JK*11123', 'DE*60511', 'HI*86429', 'HI*86429', 'JK*11123', 'GH*97552', 'BC*35817']\", \"[('BC', 2), ('DE', 2), ('EF', 1), ('GH', 1), ('HI', 5), ('JK', 9)]\"], [\"['IJ*98776', 'AB*23470', 'HI*86429', 'IJ*98776', 'BC*35817', 'AB*23470', 'IJ*98776', 'CD*48164', 'EF*72858', 'EF*72858', 'FG*85205', 'IJ*22246', 'HI*9899', 'AB*23470', 'HI*86429', 'IJ*98776', 'FG*8675', 'CD*71634', 'BC*35817', 'EF*72858']\", \"[('AB', 3), ('BC', 2), ('CD', 2), ('EF', 3), ('FG', 2), ('HI', 3), ('IJ', 5)]\"], [\"['HI*86429', 'HI*86429', 'BC*35817', 'HI*86429', 'CD*48164', 'HI*86429', 'DE*60511', 'BC*35817', 'HI*9899', 'HI*86429', 'IJ*98776', 'JK*34593', 'GH*97552', 'HI*86429', 'HI*9899', 'DE*60511', 'FG*8675', 'BC*35817', 'JK*34593', 'HI*9899']\", \"[('BC', 3), ('CD', 1), ('DE', 2), ('FG', 1), ('GH', 1), ('HI', 9), ('IJ', 1), ('JK', 2)]\"], [\"['IJ*98776', 'IJ*98776', 'HI*86429', 'IJ*98776', 'CD*48164', 'IJ*98776', 'EF*72858', 'CD*48164', 'HI*9899', 'IJ*98776', 'HI*86429', 'CD*48164', 'HI*9899', 'GH*97552', 'FG*85205', 'EF*72858', 'DE*60511', 'CD*48164', 'GH*21022', 'IJ*45716']\", \"[('CD', 4), ('DE', 1), ('EF', 2), ('FG', 1), ('GH', 2), ('HI', 4), ('IJ', 6)]\"], [\"['HI*86429', 'JK*11123', 'IJ*98776', 'HI*86429', 'IJ*98776', 'DE*60511', 'AB*23470', 'DE*60511', 'HI*86429', 'DE*60511', 'HI*9899', 'FG*85205', 'DE*60511', 'BC*59287', 'HI*9899', 'JK*34593', 'CD*71634', 'DE*60511', 'CD*71634', 'HI*86429']\", \"[('AB', 1), ('BC', 1), ('CD', 2), ('DE', 5), ('FG', 1), ('HI', 6), ('IJ', 2), ('JK', 2)]\"], [\"['HI*86429', 'AB*23470', 'AB*23470', 'AB*23470', 'AB*23470', 'EF*72858', 'DE*60511', 'AB*23470', 'GH*97552', 'AB*23470', 'FG*85205', 'AB*23470', 'AB*23470', 'CD*71634', 'IJ*22246', 'CD*71634', 'DE*83981', 'AB*23470', 'AB*23470', 'GH*97552']\", \"[('AB', 10), ('CD', 2), ('DE', 2), ('EF', 1), ('FG', 1), ('GH', 2), ('HI', 1), ('IJ', 1)]\"], [\"['HI*86429', 'HI*86429', 'BC*35817', 'HI*86429', 'AB*23470', 'BC*35817', 'DE*60511', 'BC*35817', 'EF*72858', 'HI*86429', 'GH*97552', 'HI*9899', 'GH*97552', 'JK*34593', 'BC*59287', 'DE*60511', 'CD*71634', 'BC*35817', 'AB*23470', 'FG*8675']\", \"[('AB', 2), ('BC', 5), ('CD', 1), ('DE', 2), ('EF', 1), ('FG', 1), ('GH', 2), ('HI', 5), ('JK', 1)]\"], [\"['HI*86429', 'IJ*98776', 'JK*11123', 'AB*23470', 'BC*35817', 'CD*48164', 'DE*60511', 'EF*72858', 'GH*97552', 'GH*97552', 'CD*48164', 'IJ*22246', 'JK*34593', 'CD*48164', 'BC*59287', 'CD*71634', 'AB*46940', 'EF*96328', 'FG*8675', 'GH*97552']\", \"[('AB', 2), ('BC', 2), ('CD', 4), ('DE', 1), ('EF', 2), ('FG', 1), ('GH', 3), ('HI', 1), ('IJ', 2), ('JK', 2)]\"], [\"['IJ*98776', 'JK*11123', 'HI*86429', 'BC*35817', 'CD*48164', 'JK*11123', 'EF*72858', 'HI*86429', 'HI*9899', 'HI*9899', 'IJ*22246', 'JK*34593', 'HI*9899', 'HI*9899', 'HI*9899', 'DE*83981', 'GH*97552', 'HI*9899', 'GH*21022', 'HI*9899']\", \"[('BC', 1), ('CD', 1), ('DE', 1), ('EF', 1), ('GH', 2), ('HI', 9), ('IJ', 2), ('JK', 3)]\"], [\"['JK*11123', 'AB*23470', 'BC*35817', 'CD*48164', 'IJ*98776', 'AB*23470', 'JK*11123', 'GH*97552', 'JK*11123', 'IJ*22246', 'JK*11123', 'IJ*98776', 'BC*59287', 'IJ*22246', 'EF*72858', 'IJ*22246', 'IJ*98776', 'GH*21022', 'FG*85205', 'AB*46940']\", \"[('AB', 3), ('BC', 2), ('CD', 1), ('EF', 1), ('FG', 1), ('GH', 2), ('IJ', 6), ('JK', 4)]\"], [\"['HI*86429', 'HI*86429', 'AB*23470', 'HI*86429', 'AB*23470', 'HI*86429', 'AB*23470', 'FG*85205', 'GH*97552', 'HI*86429', 'IJ*22246', 'HI*9899', 'AB*23470', 'FG*85205', 'DE*60511', 'JK*34593', 'DE*83981', 'FG*85205', 'AB*23470', 'HI*33369']\", \"[('AB', 5), ('DE', 2), ('FG', 3), ('GH', 1), ('HI', 7), ('IJ', 1), ('JK', 1)]\"], [\"['IJ*98776', 'IJ*98776', 'HI*86429', 'IJ*98776', 'HI*86429', 'IJ*98776', 'IJ*98776', 'CD*48164', 'HI*9899', 'IJ*98776', 'EF*72858', 'EF*72858', 'HI*9899', 'IJ*98776', 'FG*85205', 'IJ*98776', 'AB*23470', 'CD*48164', 'EF*72858', 'IJ*45716']\", \"[('AB', 1), ('CD', 2), ('EF', 3), ('FG', 1), ('HI', 4), ('IJ', 9)]\"], [\"['IJ*98776', 'JK*11123', 'HI*86429', 'BC*35817', 'CD*48164', 'DE*60511', 'BC*35817', 'HI*86429', 'FG*85205', 'HI*9899', 'IJ*22246', 'JK*34593', 'HI*9899', 'DE*60511', 'AB*23470', 'BC*35817', 'CD*48164', 'HI*9899', 'GH*21022', 'FG*85205']\", \"[('AB', 1), ('BC', 3), ('CD', 2), ('DE', 2), ('FG', 2), ('GH', 1), ('HI', 5), ('IJ', 2), ('JK', 2)]\"], [\"['HI*86429', 'AB*23470', 'JK*11123', 'AB*23470', 'BC*35817', 'EF*72858', 'AB*23470', 'EF*72858', 'FG*85205', 'AB*23470', 'GH*97552', 'IJ*22246', 'JK*34593', 'EF*72858', 'AB*46940', 'AB*23470', 'JK*11123', 'EF*72858', 'FG*8675', 'GH*21022']\", \"[('AB', 6), ('BC', 1), ('EF', 4), ('FG', 2), ('GH', 2), ('HI', 1), ('IJ', 1), ('JK', 3)]\"], [\"['JK*11123', 'HI*86429', 'IJ*98776', 'JK*11123', 'JK*11123', 'BC*35817', 'FG*85205', 'DE*60511', 'DE*60511', 'FG*85205', 'CD*48164', 'JK*11123', 'IJ*22246', 'BC*35817', 'BC*59287', 'FG*85205', 'CD*71634', 'DE*83981', 'JK*11123', 'DE*60511']\", \"[('BC', 3), ('CD', 2), ('DE', 4), ('FG', 3), ('HI', 1), ('IJ', 2), ('JK', 5)]\"], [\"['IJ*98776', 'IJ*98776', 'BC*35817', 'IJ*98776', 'AB*23470', 'CD*48164', 'IJ*98776', 'GH*97552', 'DE*60511', 'IJ*98776', 'EF*72858', 'AB*23470', 'BC*35817', 'AB*46940', 'DE*83981', 'IJ*98776', 'FG*8675', 'GH*97552', 'HI*9899', 'EF*96328']\", \"[('AB', 3), ('BC', 2), ('CD', 1), ('DE', 2), ('EF', 2), ('FG', 1), ('GH', 2), ('HI', 1), ('IJ', 6)]\"], [\"['HI*86429', 'JK*11123', 'JK*11123', 'HI*86429', 'AB*23470', 'JK*11123', 'DE*60511', 'JK*11123', 'DE*60511', 'DE*60511', 'FG*85205', 'HI*9899', 'JK*34593', 'JK*11123', 'IJ*22246', 'DE*60511', 'FG*8675', 'JK*11123', 'AB*23470', 'DE*60511']\", \"[('AB', 2), ('DE', 5), ('FG', 2), ('HI', 3), ('IJ', 1), ('JK', 7)]\"], [\"['IJ*98776', 'AB*23470', 'BC*35817', 'IJ*98776', 'JK*11123', 'AB*23470', 'IJ*98776', 'GH*97552', 'EF*72858', 'EF*72858', 'CD*48164', 'GH*97552', 'BC*35817', 'AB*23470', 'JK*34593', 'IJ*98776', 'EF*72858', 'GH*21022', 'DE*83981', 'EF*72858']\", \"[('AB', 3), ('BC', 2), ('CD', 1), ('DE', 1), ('EF', 4), ('GH', 3), ('IJ', 4), ('JK', 2)]\"], [\"['IJ*98776', 'HI*86429', 'IJ*98776', 'BC*35817', 'JK*11123', 'HI*86429', 'IJ*98776', 'DE*60511', 'HI*86429', 'BC*35817', 'JK*11123', 'JK*11123', 'IJ*98776', 'HI*86429', 'DE*83981', 'HI*9899', 'DE*60511', 'DE*83981', 'DE*83981', 'HI*86429']\", \"[('BC', 2), ('DE', 5), ('HI', 6), ('IJ', 4), ('JK', 3)]\"], [\"['HI*86429', 'IJ*98776', 'IJ*98776', 'AB*23470', 'AB*23470', 'IJ*98776', 'HI*86429', 'IJ*98776', 'IJ*98776', 'GH*97552', 'HI*9899', 'AB*23470', 'DE*60511', 'GH*97552', 'IJ*98776', 'GH*97552', 'IJ*98776', 'IJ*98776', 'AB*23470', 'IJ*98776']\", \"[('AB', 4), ('DE', 1), ('GH', 3), ('HI', 3), ('IJ', 9)]\"], [\"['HI*86429', 'JK*11123', 'JK*11123', 'HI*86429', 'IJ*98776', 'DE*60511', 'DE*60511', 'JK*11123', 'EF*72858', 'DE*60511', 'GH*97552', 'FG*85205', 'JK*34593', 'BC*59287', 'JK*34593', 'DE*60511', 'GH*97552', 'JK*11123', 'CD*71634', 'FG*8675']\", \"[('BC', 1), ('CD', 1), ('DE', 4), ('EF', 1), ('FG', 2), ('GH', 2), ('HI', 2), ('IJ', 1), ('JK', 6)]\"], [\"['IJ*98776', 'AB*23470', 'HI*86429', 'IJ*98776', 'HI*86429', 'EF*72858', 'EF*72858', 'CD*48164', 'CD*48164', 'EF*72858', 'DE*60511', 'EF*72858', 'HI*9899', 'CD*71634', 'JK*11123', 'EF*72858', 'EF*72858', 'CD*71634', 'EF*72858', 'CD*48164']\", \"[('AB', 1), ('CD', 5), ('DE', 1), ('EF', 7), ('HI', 3), ('IJ', 2), ('JK', 1)]\"], [\"['JK*11123', 'HI*86429', 'JK*11123', 'JK*11123', 'DE*60511', 'BC*35817', 'JK*11123', 'JK*11123', 'CD*48164', 'FG*85205', 'HI*86429', 'DE*60511', 'JK*11123', 'JK*34593', 'IJ*98776', 'JK*11123', 'HI*86429', 'JK*34593', 'HI*33369', 'DE*83981']\", \"[('BC', 1), ('CD', 1), ('DE', 3), ('FG', 1), ('HI', 4), ('IJ', 1), ('JK', 9)]\"], [\"['IJ*98776', 'IJ*98776', 'HI*86429', 'IJ*98776', 'DE*60511', 'CD*48164', 'IJ*98776', 'CD*48164', 'IJ*98776', 'IJ*98776', 'CD*48164', 'AB*46940', 'HI*9899', 'CD*48164', 'BC*35817', 'IJ*98776', 'IJ*22246', 'CD*48164', 'AB*46940', 'IJ*98776']\", \"[('AB', 2), ('BC', 1), ('CD', 5), ('DE', 1), ('HI', 2), ('IJ', 9)]\"], [\"['HI*86429', 'JK*11123', 'JK*11123', 'HI*86429', 'AB*23470', 'JK*11123', 'DE*60511', 'JK*11123', 'JK*11123', 'DE*60511', 'HI*86429', 'HI*9899', 'JK*34593', 'HI*9899', 'HI*9899', 'DE*60511', 'GH*97552', 'JK*11123', 'AB*23470', 'JK*11123']\", \"[('AB', 2), ('DE', 3), ('GH', 1), ('HI', 6), ('JK', 8)]\"], [\"['IJ*98776', 'AB*23470', 'BC*35817', 'IJ*98776', 'IJ*98776', 'AB*23470', 'IJ*98776', 'GH*97552', 'BC*35817', 'EF*72858', 'DE*60511', 'IJ*98776', 'BC*35817', 'IJ*22246', 'IJ*98776', 'IJ*98776', 'DE*60511', 'GH*21022', 'IJ*98776', 'CD*71634']\", \"[('AB', 2), ('BC', 3), ('CD', 1), ('DE', 2), ('EF', 1), ('GH', 2), ('IJ', 9)]\"], [\"['IJ*98776', 'HI*86429', 'HI*86429', 'BC*35817', 'DE*60511', 'HI*86429', 'BC*35817', 'HI*86429', 'CD*48164', 'BC*35817', 'CD*48164', 'DE*60511', 'HI*9899', 'FG*85205', 'CD*71634', 'BC*35817', 'JK*34593', 'HI*86429', 'AB*46940', 'DE*83981']\", \"[('AB', 1), ('BC', 4), ('CD', 3), ('DE', 3), ('FG', 1), ('HI', 6), ('IJ', 1), ('JK', 1)]\"], [\"['HI*86429', 'IJ*98776', 'AB*23470', 'AB*23470', 'IJ*98776', 'IJ*98776', 'AB*23470', 'AB*23470', 'HI*9899', 'GH*97552', 'IJ*98776', 'IJ*98776', 'AB*23470', 'IJ*98776', 'AB*46940', 'AB*23470', 'EF*72858', 'AB*46940', 'CD*71634', 'IJ*45716']\", \"[('AB', 8), ('CD', 1), ('EF', 1), ('GH', 1), ('HI', 2), ('IJ', 7)]\"], [\"['JK*11123', 'JK*11123', 'IJ*98776', 'JK*11123', 'IJ*98776', 'DE*60511', 'CD*48164', 'DE*60511', 'BC*35817', 'JK*11123', 'JK*34593', 'FG*85205', 'IJ*22246', 'DE*60511', 'DE*83981', 'BC*59287', 'IJ*98776', 'DE*60511', 'FG*85205', 'BC*35817']\", \"[('BC', 3), ('CD', 1), ('DE', 5), ('FG', 2), ('IJ', 4), ('JK', 5)]\"], [\"['IJ*98776', 'AB*23470', 'BC*35817', 'IJ*98776', 'BC*35817', 'EF*72858', 'EF*72858', 'GH*97552', 'CD*48164', 'EF*72858', 'HI*9899', 'IJ*22246', 'BC*35817', 'EF*72858', 'EF*72858', 'EF*72858', 'FG*85205', 'GH*21022', 'BC*35817', 'CD*48164']\", \"[('AB', 1), ('BC', 4), ('CD', 2), ('EF', 6), ('FG', 1), ('GH', 2), ('HI', 1), ('IJ', 3)]\"], [\"['IJ*98776', 'HI*86429', 'IJ*98776', 'BC*35817', 'CD*48164', 'BC*35817', 'EF*72858', 'DE*60511', 'CD*48164', 'BC*35817', 'BC*35817', 'JK*34593', 'IJ*98776', 'BC*35817', 'DE*83981', 'DE*83981', 'CD*71634', 'DE*83981', 'GH*21022', 'DE*83981']\", \"[('BC', 5), ('CD', 3), ('DE', 5), ('EF', 1), ('GH', 1), ('HI', 1), ('IJ', 3), ('JK', 1)]\"], [\"['JK*11123', 'IJ*98776', 'AB*23470', 'CD*48164', 'CD*48164', 'CD*48164', 'FG*85205', 'AB*23470', 'AB*23470', 'CD*48164', 'JK*34593', 'CD*48164', 'FG*85205', 'AB*46940', 'HI*86429', 'EF*96328', 'FG*8675', 'AB*46940', 'CD*48164', 'AB*23470']\", \"[('AB', 6), ('CD', 6), ('EF', 1), ('FG', 3), ('HI', 1), ('IJ', 1), ('JK', 2)]\"], [\"['JK*11123', 'JK*11123', 'JK*11123', 'JK*11123', 'DE*60511', 'JK*11123', 'FG*85205', 'JK*11123', 'HI*86429', 'JK*11123', 'HI*9899', 'DE*60511', 'JK*11123', 'JK*11123', 'FG*85205', 'FG*85205', 'AB*23470', 'JK*11123', 'HI*33369', 'HI*86429']\", \"[('AB', 1), ('DE', 2), ('FG', 3), ('HI', 4), ('JK', 10)]\"], [\"['JK*11123', 'AB*23470', 'IJ*98776', 'CD*48164', 'JK*11123', 'AB*23470', 'JK*11123', 'IJ*98776', 'FG*85205', 'IJ*22246', 'BC*35817', 'GH*97552', 'IJ*22246', 'AB*23470', 'JK*34593', 'IJ*22246', 'IJ*22246', 'IJ*22246', 'JK*11123', 'GH*21022']\", \"[('AB', 3), ('BC', 1), ('CD', 1), ('FG', 1), ('GH', 2), ('IJ', 7), ('JK', 5)]\"], [\"['HI*86429', 'HI*86429', 'AB*23470', 'HI*86429', 'HI*86429', 'HI*86429', 'HI*86429', 'FG*85205', 'AB*23470', 'HI*86429', 'IJ*98776', 'HI*86429', 'AB*23470', 'HI*86429', 'JK*34593', 'HI*86429', 'DE*60511', 'FG*85205', 'HI*86429', 'BC*59287']\", \"[('AB', 3), ('BC', 1), ('DE', 1), ('FG', 2), ('HI', 11), ('IJ', 1), ('JK', 1)]\"], [\"['HI*86429', 'IJ*98776', 'BC*35817', 'AB*23470', 'CD*48164', 'IJ*98776', 'HI*86429', 'GH*97552', 'HI*9899', 'GH*97552', 'CD*48164', 'CD*48164', 'GH*97552', 'GH*97552', 'GH*97552', 'GH*97552', 'DE*83981', 'GH*97552', 'JK*34593', 'IJ*45716']\", \"[('AB', 1), ('BC', 1), ('CD', 3), ('DE', 1), ('GH', 7), ('HI', 3), ('IJ', 3), ('JK', 1)]\"], [\"['IJ*98776', 'JK*11123', 'BC*35817', 'BC*35817', 'AB*23470', 'DE*60511', 'EF*72858', 'BC*35817', 'DE*60511', 'HI*9899', 'IJ*98776', 'HI*9899', 'BC*35817', 'BC*59287', 'JK*34593', 'DE*83981', 'EF*96328', 'BC*59287', 'HI*9899', 'DE*60511']\", \"[('AB', 1), ('BC', 6), ('DE', 4), ('EF', 2), ('HI', 3), ('IJ', 2), ('JK', 2)]\"], [\"['HI*86429', 'AB*23470', 'BC*35817', 'AB*23470', 'JK*11123', 'EF*72858', 'AB*23470', 'GH*97552', 'EF*72858', 'AB*23470', 'DE*60511', 'GH*97552', 'GH*97552', 'CD*71634', 'GH*97552', 'AB*23470', 'DE*60511', 'GH*21022', 'GH*97552', 'EF*72858']\", \"[('AB', 5), ('BC', 1), ('CD', 1), ('DE', 2), ('EF', 3), ('GH', 6), ('HI', 1), ('JK', 1)]\"], [\"['JK*11123', 'HI*86429', 'JK*11123', 'JK*11123', 'CD*48164', 'BC*35817', 'CD*48164', 'JK*11123', 'AB*23470', 'FG*85205', 'FG*85205', 'JK*34593', 'JK*11123', 'JK*34593', 'JK*11123', 'BC*59287', 'GH*97552', 'JK*34593', 'CD*48164', 'BC*59287']\", \"[('AB', 1), ('BC', 3), ('CD', 3), ('FG', 2), ('GH', 1), ('HI', 1), ('JK', 9)]\"], [\"['IJ*98776', 'IJ*98776', 'IJ*98776', 'IJ*98776', 'BC*35817', 'CD*48164', 'EF*72858', 'IJ*98776', 'BC*35817', 'IJ*98776', 'IJ*22246', 'IJ*22246', 'IJ*98776', 'CD*48164', 'HI*86429', 'EF*72858', 'AB*46940', 'IJ*98776', 'BC*35817', 'CD*71634']\", \"[('AB', 1), ('BC', 3), ('CD', 3), ('EF', 2), ('HI', 1), ('IJ', 10)]\"]]", 
      "solution": "def steviloPoMestih(tablice):\n    stevilo = {}\n    for tablica in tablice:\n        mesto, _ = razbij(tablica)\n        stevilo[mesto] = stevilo.get(mesto, 0) + 1\n    return stevilo", 
      "problem": 250, 
      "validation": "Check.equal(\"\"\"steviloPoMestih([\"MB*56-TR2\", \"LJ*AB-124\", \"KR*B25-13\"])\"\"\", {\"MB\": 1, \"KR\": 1, \"LJ\": 1})\nCheck.equal(\"\"\"steviloPoMestih([\"LJ*AB-124\", \"LJ*BC-124\", \"LJ*CD-124\"])\"\"\", {\"LJ\": 3})\nCheck.equal(\"\"\"steviloPoMestih([])\"\"\", {})\n\n_rng=[1287631]\nfor i in range(50): _rng.append((_rng[-1]*1103515245+12345)%2**32)\nfor i in _rng:\n    tablice = []\n    for j in range(20):\n        k = i % (j + 3) + 7\n        tablice.append(\"ABCDEFGHIJKLMNOPRSTUVZ\"[k % 10:k % 10+2] + \"*\" + str(12347 * k % 100000))\n    Check.challenge(steviloPoMestih(tablice), tablice)"
    }
  }, 
  {
    "pk": 789, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `prestejd(a,vhod)`, ki vrne \u0161tevilo znakov `a` v\ntekstovni datoteki z imenom `vhod`.", 
      "timestamp": "2012-09-05 11:43:37", 
      "challenge": "[]", 
      "solution": "def prestejd(a,vhod):\n    n=0\n    with open(vhod) as f:\n        for vrstica in f:\n            n += prestej(a,vrstica.strip('\\n'))\n    return n", 
      "problem": 251, 
      "validation": "with open(\"_test.0\",\"w\") as _f:\n    _f.write(\"\")\n\nCheck.equal(\"prestejd('a','_test.0')\", 0)\n\n_d=\"\"\"ena\\nbanana\\nse\\nena\\nbanana\\nin en kup n-jev!!\"\"\"\nwith open(\"_test.1\",\"w\") as _f:\n    _f.write(_d)\n\nCheck.equal(\"prestejd('n','_test.1')\", 9)"
    }
  }, 
  {
    "pk": 222, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite metodo `poisci(self, podatek)`, ki v iskalnem drevesu poi\u0161\u010de\n`podatek`. Vrne naj drevo, ki ga vsebuje v korenu, oziroma `None`, \u010de\nga ni v drevesu.", 
      "timestamp": "2012-11-29 12:43:28", 
      "challenge": "[[\"None\", \"None\"], [\"None\", \"None\"], [\"None\", \"None\"], [\"None\", \"None\"]]", 
      "solution": "class IskalnoDrevo(IskalnoDrevo):\n\n    def poisci(self, podatek):\n        if self.prazno:\n            return None\n        elif self.vsebina == podatek:\n            return self\n        elif self.vsebina > podatek:\n            return self.levo.poisci(podatek)\n        else:\n            return self.desno.poisci(podatek)", 
      "problem": 67, 
      "validation": "Check.equal(\"IskalnoDrevo([3, 5, 4]).poisci(4).vsebina\", 4)\nCheck.equal(\"IskalnoDrevo([3, 5, 4]).poisci(7)\", None)\n\nfor i in range(1, 5):\n    Check.challenge(IskalnoDrevo({(3 * (n + 4) ** 7 + 4) % (300 * i ** 2) for n in range(100)}).poisci(5))"
    }
  }, 
  {
    "pk": 793, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `vsotaSosedov(sez, i)`, ki vrne vsoto `i`. in `i + 1`.\nelementa v seznamu `sez`, v primeru da ta dva elementa obstajata, in\n`None` sicer.", 
      "timestamp": "2012-09-05 11:43:47", 
      "challenge": "[[\"([1, 1, 8, 343, 1, 1, 64, 343, 343, 729], 0)\", \"2\"], [\"([1, 1, 8, 343, 1, 1, 64, 343, 343, 729], 1)\", \"9\"], [\"([1, 1, 8, 343, 1, 1, 64, 343, 343, 729], 2)\", \"351\"], [\"([1, 1, 8, 343, 1, 1, 64, 343, 343, 729], 3)\", \"344\"], [\"([1, 1, 8, 343, 1, 1, 64, 343, 343, 729], 4)\", \"2\"], [\"([1, 1, 8, 343, 1, 1, 64, 343, 343, 729], 5)\", \"65\"], [\"([1, 1, 8, 343, 1, 1, 64, 343, 343, 729], 6)\", \"407\"], [\"([1, 1, 8, 343, 1, 1, 64, 343, 343, 729], 7)\", \"686\"], [\"([1, 1, 8, 343, 1, 1, 64, 343, 343, 729], 8)\", \"1072\"], [\"([1, 1, 8, 343, 1, 1, 64, 343, 343, 729], 9)\", \"None\"], [\"([1, 1, 8, 343, 1, 1, 64, 343, 343, 729], 10)\", \"None\"], [\"([1, 1, 8, 343, 1, 1, 64, 343, 343, 729], 11)\", \"None\"], [\"([1, 1, 8, 343, 1, 1, 64, 343, 343, 729], 12)\", \"None\"], [\"([1, 1, 8, 343, 1, 1, 64, 343, 343, 729], 13)\", \"None\"], [\"([1, 1, 8, 343, 1, 1, 64, 343, 343, 729], 14)\", \"None\"], [\"([8, 64, 1, 64, 343, 8, 27, 64, 1728, 512], 0)\", \"72\"], [\"([8, 64, 1, 64, 343, 8, 27, 64, 1728, 512], 1)\", \"65\"], [\"([8, 64, 1, 64, 343, 8, 27, 64, 1728, 512], 2)\", \"65\"], [\"([8, 64, 1, 64, 343, 8, 27, 64, 1728, 512], 3)\", \"407\"], [\"([8, 64, 1, 64, 343, 8, 27, 64, 1728, 512], 4)\", \"351\"], [\"([8, 64, 1, 64, 343, 8, 27, 64, 1728, 512], 5)\", \"35\"], [\"([8, 64, 1, 64, 343, 8, 27, 64, 1728, 512], 6)\", \"91\"], [\"([8, 64, 1, 64, 343, 8, 27, 64, 1728, 512], 7)\", \"1792\"], [\"([8, 64, 1, 64, 343, 8, 27, 64, 1728, 512], 8)\", \"2240\"], [\"([8, 64, 1, 64, 343, 8, 27, 64, 1728, 512], 9)\", \"None\"], [\"([8, 64, 1, 64, 343, 8, 27, 64, 1728, 512], 10)\", \"None\"], [\"([8, 64, 1, 64, 343, 8, 27, 64, 1728, 512], 11)\", \"None\"], [\"([8, 64, 1, 64, 343, 8, 27, 64, 1728, 512], 12)\", \"None\"], [\"([8, 64, 1, 64, 343, 8, 27, 64, 1728, 512], 13)\", \"None\"], [\"([8, 64, 1, 64, 343, 8, 27, 64, 1728, 512], 14)\", \"None\"], [\"([1, 27, 64, 125, 216, 1, 125, 729, 1728, 1331], 0)\", \"28\"], [\"([1, 27, 64, 125, 216, 1, 125, 729, 1728, 1331], 1)\", \"91\"], [\"([1, 27, 64, 125, 216, 1, 125, 729, 1728, 1331], 2)\", \"189\"], [\"([1, 27, 64, 125, 216, 1, 125, 729, 1728, 1331], 3)\", \"341\"], [\"([1, 27, 64, 125, 216, 1, 125, 729, 1728, 1331], 4)\", \"217\"], [\"([1, 27, 64, 125, 216, 1, 125, 729, 1728, 1331], 5)\", \"126\"], [\"([1, 27, 64, 125, 216, 1, 125, 729, 1728, 1331], 6)\", \"854\"], [\"([1, 27, 64, 125, 216, 1, 125, 729, 1728, 1331], 7)\", \"2457\"], [\"([1, 27, 64, 125, 216, 1, 125, 729, 1728, 1331], 8)\", \"3059\"], [\"([1, 27, 64, 125, 216, 1, 125, 729, 1728, 1331], 9)\", \"None\"], [\"([1, 27, 64, 125, 216, 1, 125, 729, 1728, 1331], 10)\", \"None\"], [\"([1, 27, 64, 125, 216, 1, 125, 729, 1728, 1331], 11)\", \"None\"], [\"([1, 27, 64, 125, 216, 1, 125, 729, 1728, 1331], 12)\", \"None\"], [\"([1, 27, 64, 125, 216, 1, 125, 729, 1728, 1331], 13)\", \"None\"], [\"([1, 27, 64, 125, 216, 1, 125, 729, 1728, 1331], 14)\", \"None\"], [\"([64, 0, 27, 8, 216, 64, 512, 216, 343, 1000], 0)\", \"64\"], [\"([64, 0, 27, 8, 216, 64, 512, 216, 343, 1000], 1)\", \"27\"], [\"([64, 0, 27, 8, 216, 64, 512, 216, 343, 1000], 2)\", \"35\"], [\"([64, 0, 27, 8, 216, 64, 512, 216, 343, 1000], 3)\", \"224\"], [\"([64, 0, 27, 8, 216, 64, 512, 216, 343, 1000], 4)\", \"280\"], [\"([64, 0, 27, 8, 216, 64, 512, 216, 343, 1000], 5)\", \"576\"], [\"([64, 0, 27, 8, 216, 64, 512, 216, 343, 1000], 6)\", \"728\"], [\"([64, 0, 27, 8, 216, 64, 512, 216, 343, 1000], 7)\", \"559\"], [\"([64, 0, 27, 8, 216, 64, 512, 216, 343, 1000], 8)\", \"1343\"], [\"([64, 0, 27, 8, 216, 64, 512, 216, 343, 1000], 9)\", \"None\"], [\"([64, 0, 27, 8, 216, 64, 512, 216, 343, 1000], 10)\", \"None\"], [\"([64, 0, 27, 8, 216, 64, 512, 216, 343, 1000], 11)\", \"None\"], [\"([64, 0, 27, 8, 216, 64, 512, 216, 343, 1000], 12)\", \"None\"], [\"([64, 0, 27, 8, 216, 64, 512, 216, 343, 1000], 13)\", \"None\"], [\"([64, 0, 27, 8, 216, 64, 512, 216, 343, 1000], 14)\", \"None\"], [\"([27, 1, 8, 27, 64, 27, 8, 343, 0, 729], 0)\", \"28\"], [\"([27, 1, 8, 27, 64, 27, 8, 343, 0, 729], 1)\", \"9\"], [\"([27, 1, 8, 27, 64, 27, 8, 343, 0, 729], 2)\", \"35\"], [\"([27, 1, 8, 27, 64, 27, 8, 343, 0, 729], 3)\", \"91\"], [\"([27, 1, 8, 27, 64, 27, 8, 343, 0, 729], 4)\", \"91\"], [\"([27, 1, 8, 27, 64, 27, 8, 343, 0, 729], 5)\", \"35\"], [\"([27, 1, 8, 27, 64, 27, 8, 343, 0, 729], 6)\", \"351\"], [\"([27, 1, 8, 27, 64, 27, 8, 343, 0, 729], 7)\", \"343\"], [\"([27, 1, 8, 27, 64, 27, 8, 343, 0, 729], 8)\", \"729\"], [\"([27, 1, 8, 27, 64, 27, 8, 343, 0, 729], 9)\", \"None\"], [\"([27, 1, 8, 27, 64, 27, 8, 343, 0, 729], 10)\", \"None\"], [\"([27, 1, 8, 27, 64, 27, 8, 343, 0, 729], 11)\", \"None\"], [\"([27, 1, 8, 27, 64, 27, 8, 343, 0, 729], 12)\", \"None\"], [\"([27, 1, 8, 27, 64, 27, 8, 343, 0, 729], 13)\", \"None\"], [\"([27, 1, 8, 27, 64, 27, 8, 343, 0, 729], 14)\", \"None\"], [\"([64, 64, 8, 0, 1, 64, 1, 64, 1728, 8], 0)\", \"128\"], [\"([64, 64, 8, 0, 1, 64, 1, 64, 1728, 8], 1)\", \"72\"], [\"([64, 64, 8, 0, 1, 64, 1, 64, 1728, 8], 2)\", \"8\"], [\"([64, 64, 8, 0, 1, 64, 1, 64, 1728, 8], 3)\", \"1\"], [\"([64, 64, 8, 0, 1, 64, 1, 64, 1728, 8], 4)\", \"65\"], [\"([64, 64, 8, 0, 1, 64, 1, 64, 1728, 8], 5)\", \"65\"], [\"([64, 64, 8, 0, 1, 64, 1, 64, 1728, 8], 6)\", \"65\"], [\"([64, 64, 8, 0, 1, 64, 1, 64, 1728, 8], 7)\", \"1792\"], [\"([64, 64, 8, 0, 1, 64, 1, 64, 1728, 8], 8)\", \"1736\"], [\"([64, 64, 8, 0, 1, 64, 1, 64, 1728, 8], 9)\", \"None\"], [\"([64, 64, 8, 0, 1, 64, 1, 64, 1728, 8], 10)\", \"None\"], [\"([64, 64, 8, 0, 1, 64, 1, 64, 1728, 8], 11)\", \"None\"], [\"([64, 64, 8, 0, 1, 64, 1, 64, 1728, 8], 12)\", \"None\"], [\"([64, 64, 8, 0, 1, 64, 1, 64, 1728, 8], 13)\", \"None\"], [\"([64, 64, 8, 0, 1, 64, 1, 64, 1728, 8], 14)\", \"None\"], [\"([64, 125, 125, 1, 512, 729, 0, 125, 343, 125], 0)\", \"189\"], [\"([64, 125, 125, 1, 512, 729, 0, 125, 343, 125], 1)\", \"250\"], [\"([64, 125, 125, 1, 512, 729, 0, 125, 343, 125], 2)\", \"126\"], [\"([64, 125, 125, 1, 512, 729, 0, 125, 343, 125], 3)\", \"513\"], [\"([64, 125, 125, 1, 512, 729, 0, 125, 343, 125], 4)\", \"1241\"], [\"([64, 125, 125, 1, 512, 729, 0, 125, 343, 125], 5)\", \"729\"], [\"([64, 125, 125, 1, 512, 729, 0, 125, 343, 125], 6)\", \"125\"], [\"([64, 125, 125, 1, 512, 729, 0, 125, 343, 125], 7)\", \"468\"], [\"([64, 125, 125, 1, 512, 729, 0, 125, 343, 125], 8)\", \"468\"], [\"([64, 125, 125, 1, 512, 729, 0, 125, 343, 125], 9)\", \"None\"], [\"([64, 125, 125, 1, 512, 729, 0, 125, 343, 125], 10)\", \"None\"], [\"([64, 125, 125, 1, 512, 729, 0, 125, 343, 125], 11)\", \"None\"], [\"([64, 125, 125, 1, 512, 729, 0, 125, 343, 125], 12)\", \"None\"], [\"([64, 125, 125, 1, 512, 729, 0, 125, 343, 125], 13)\", \"None\"], [\"([64, 125, 125, 1, 512, 729, 0, 125, 343, 125], 14)\", \"None\"], [\"([8, 8, 0, 216, 8, 8, 343, 8, 125, 0], 0)\", \"16\"], [\"([8, 8, 0, 216, 8, 8, 343, 8, 125, 0], 1)\", \"8\"], [\"([8, 8, 0, 216, 8, 8, 343, 8, 125, 0], 2)\", \"216\"], [\"([8, 8, 0, 216, 8, 8, 343, 8, 125, 0], 3)\", \"224\"], [\"([8, 8, 0, 216, 8, 8, 343, 8, 125, 0], 4)\", \"16\"], [\"([8, 8, 0, 216, 8, 8, 343, 8, 125, 0], 5)\", \"351\"], [\"([8, 8, 0, 216, 8, 8, 343, 8, 125, 0], 6)\", \"351\"], [\"([8, 8, 0, 216, 8, 8, 343, 8, 125, 0], 7)\", \"133\"], [\"([8, 8, 0, 216, 8, 8, 343, 8, 125, 0], 8)\", \"125\"], [\"([8, 8, 0, 216, 8, 8, 343, 8, 125, 0], 9)\", \"None\"], [\"([8, 8, 0, 216, 8, 8, 343, 8, 125, 0], 10)\", \"None\"], [\"([8, 8, 0, 216, 8, 8, 343, 8, 125, 0], 11)\", \"None\"], [\"([8, 8, 0, 216, 8, 8, 343, 8, 125, 0], 12)\", \"None\"], [\"([8, 8, 0, 216, 8, 8, 343, 8, 125, 0], 13)\", \"None\"], [\"([8, 8, 0, 216, 8, 8, 343, 8, 125, 0], 14)\", \"None\"], [\"([64, 27, 8, 343, 216, 729, 512, 27, 1, 729], 0)\", \"91\"], [\"([64, 27, 8, 343, 216, 729, 512, 27, 1, 729], 1)\", \"35\"], [\"([64, 27, 8, 343, 216, 729, 512, 27, 1, 729], 2)\", \"351\"], [\"([64, 27, 8, 343, 216, 729, 512, 27, 1, 729], 3)\", \"559\"], [\"([64, 27, 8, 343, 216, 729, 512, 27, 1, 729], 4)\", \"945\"], [\"([64, 27, 8, 343, 216, 729, 512, 27, 1, 729], 5)\", \"1241\"], [\"([64, 27, 8, 343, 216, 729, 512, 27, 1, 729], 6)\", \"539\"], [\"([64, 27, 8, 343, 216, 729, 512, 27, 1, 729], 7)\", \"28\"], [\"([64, 27, 8, 343, 216, 729, 512, 27, 1, 729], 8)\", \"730\"], [\"([64, 27, 8, 343, 216, 729, 512, 27, 1, 729], 9)\", \"None\"], [\"([64, 27, 8, 343, 216, 729, 512, 27, 1, 729], 10)\", \"None\"], [\"([64, 27, 8, 343, 216, 729, 512, 27, 1, 729], 11)\", \"None\"], [\"([64, 27, 8, 343, 216, 729, 512, 27, 1, 729], 12)\", \"None\"], [\"([64, 27, 8, 343, 216, 729, 512, 27, 1, 729], 13)\", \"None\"], [\"([64, 27, 8, 343, 216, 729, 512, 27, 1, 729], 14)\", \"None\"], [\"([64, 8, 125, 64, 125, 64, 64, 512, 216, 1728], 0)\", \"72\"], [\"([64, 8, 125, 64, 125, 64, 64, 512, 216, 1728], 1)\", \"133\"], [\"([64, 8, 125, 64, 125, 64, 64, 512, 216, 1728], 2)\", \"189\"], [\"([64, 8, 125, 64, 125, 64, 64, 512, 216, 1728], 3)\", \"189\"], [\"([64, 8, 125, 64, 125, 64, 64, 512, 216, 1728], 4)\", \"189\"], [\"([64, 8, 125, 64, 125, 64, 64, 512, 216, 1728], 5)\", \"128\"], [\"([64, 8, 125, 64, 125, 64, 64, 512, 216, 1728], 6)\", \"576\"], [\"([64, 8, 125, 64, 125, 64, 64, 512, 216, 1728], 7)\", \"728\"], [\"([64, 8, 125, 64, 125, 64, 64, 512, 216, 1728], 8)\", \"1944\"], [\"([64, 8, 125, 64, 125, 64, 64, 512, 216, 1728], 9)\", \"None\"], [\"([64, 8, 125, 64, 125, 64, 64, 512, 216, 1728], 10)\", \"None\"], [\"([64, 8, 125, 64, 125, 64, 64, 512, 216, 1728], 11)\", \"None\"], [\"([64, 8, 125, 64, 125, 64, 64, 512, 216, 1728], 12)\", \"None\"], [\"([64, 8, 125, 64, 125, 64, 64, 512, 216, 1728], 13)\", \"None\"], [\"([64, 8, 125, 64, 125, 64, 64, 512, 216, 1728], 14)\", \"None\"], [\"([8, 27, 125, 125, 0, 343, 8, 729, 729, 125], 0)\", \"35\"], [\"([8, 27, 125, 125, 0, 343, 8, 729, 729, 125], 1)\", \"152\"], [\"([8, 27, 125, 125, 0, 343, 8, 729, 729, 125], 2)\", \"250\"], [\"([8, 27, 125, 125, 0, 343, 8, 729, 729, 125], 3)\", \"125\"], [\"([8, 27, 125, 125, 0, 343, 8, 729, 729, 125], 4)\", \"343\"], [\"([8, 27, 125, 125, 0, 343, 8, 729, 729, 125], 5)\", \"351\"], [\"([8, 27, 125, 125, 0, 343, 8, 729, 729, 125], 6)\", \"737\"], [\"([8, 27, 125, 125, 0, 343, 8, 729, 729, 125], 7)\", \"1458\"], [\"([8, 27, 125, 125, 0, 343, 8, 729, 729, 125], 8)\", \"854\"], [\"([8, 27, 125, 125, 0, 343, 8, 729, 729, 125], 9)\", \"None\"], [\"([8, 27, 125, 125, 0, 343, 8, 729, 729, 125], 10)\", \"None\"], [\"([8, 27, 125, 125, 0, 343, 8, 729, 729, 125], 11)\", \"None\"], [\"([8, 27, 125, 125, 0, 343, 8, 729, 729, 125], 12)\", \"None\"], [\"([8, 27, 125, 125, 0, 343, 8, 729, 729, 125], 13)\", \"None\"], [\"([8, 27, 125, 125, 0, 343, 8, 729, 729, 125], 14)\", \"None\"], [\"([8, 0, 8, 8, 0, 8, 64, 216, 343, 8], 0)\", \"8\"], [\"([8, 0, 8, 8, 0, 8, 64, 216, 343, 8], 1)\", \"8\"], [\"([8, 0, 8, 8, 0, 8, 64, 216, 343, 8], 2)\", \"16\"], [\"([8, 0, 8, 8, 0, 8, 64, 216, 343, 8], 3)\", \"8\"], [\"([8, 0, 8, 8, 0, 8, 64, 216, 343, 8], 4)\", \"8\"], [\"([8, 0, 8, 8, 0, 8, 64, 216, 343, 8], 5)\", \"72\"], [\"([8, 0, 8, 8, 0, 8, 64, 216, 343, 8], 6)\", \"280\"], [\"([8, 0, 8, 8, 0, 8, 64, 216, 343, 8], 7)\", \"559\"], [\"([8, 0, 8, 8, 0, 8, 64, 216, 343, 8], 8)\", \"351\"], [\"([8, 0, 8, 8, 0, 8, 64, 216, 343, 8], 9)\", \"None\"], [\"([8, 0, 8, 8, 0, 8, 64, 216, 343, 8], 10)\", \"None\"], [\"([8, 0, 8, 8, 0, 8, 64, 216, 343, 8], 11)\", \"None\"], [\"([8, 0, 8, 8, 0, 8, 64, 216, 343, 8], 12)\", \"None\"], [\"([8, 0, 8, 8, 0, 8, 64, 216, 343, 8], 13)\", \"None\"], [\"([8, 0, 8, 8, 0, 8, 64, 216, 343, 8], 14)\", \"None\"], [\"([0, 1, 64, 27, 1, 125, 343, 343, 512, 1331], 0)\", \"1\"], [\"([0, 1, 64, 27, 1, 125, 343, 343, 512, 1331], 1)\", \"65\"], [\"([0, 1, 64, 27, 1, 125, 343, 343, 512, 1331], 2)\", \"91\"], [\"([0, 1, 64, 27, 1, 125, 343, 343, 512, 1331], 3)\", \"28\"], [\"([0, 1, 64, 27, 1, 125, 343, 343, 512, 1331], 4)\", \"126\"], [\"([0, 1, 64, 27, 1, 125, 343, 343, 512, 1331], 5)\", \"468\"], [\"([0, 1, 64, 27, 1, 125, 343, 343, 512, 1331], 6)\", \"686\"], [\"([0, 1, 64, 27, 1, 125, 343, 343, 512, 1331], 7)\", \"855\"], [\"([0, 1, 64, 27, 1, 125, 343, 343, 512, 1331], 8)\", \"1843\"], [\"([0, 1, 64, 27, 1, 125, 343, 343, 512, 1331], 9)\", \"None\"], [\"([0, 1, 64, 27, 1, 125, 343, 343, 512, 1331], 10)\", \"None\"], [\"([0, 1, 64, 27, 1, 125, 343, 343, 512, 1331], 11)\", \"None\"], [\"([0, 1, 64, 27, 1, 125, 343, 343, 512, 1331], 12)\", \"None\"], [\"([0, 1, 64, 27, 1, 125, 343, 343, 512, 1331], 13)\", \"None\"], [\"([0, 1, 64, 27, 1, 125, 343, 343, 512, 1331], 14)\", \"None\"], [\"([64, 0, 125, 0, 216, 64, 1000, 0, 1, 1728], 0)\", \"64\"], [\"([64, 0, 125, 0, 216, 64, 1000, 0, 1, 1728], 1)\", \"125\"], [\"([64, 0, 125, 0, 216, 64, 1000, 0, 1, 1728], 2)\", \"125\"], [\"([64, 0, 125, 0, 216, 64, 1000, 0, 1, 1728], 3)\", \"216\"], [\"([64, 0, 125, 0, 216, 64, 1000, 0, 1, 1728], 4)\", \"280\"], [\"([64, 0, 125, 0, 216, 64, 1000, 0, 1, 1728], 5)\", \"1064\"], [\"([64, 0, 125, 0, 216, 64, 1000, 0, 1, 1728], 6)\", \"1000\"], [\"([64, 0, 125, 0, 216, 64, 1000, 0, 1, 1728], 7)\", \"1\"], [\"([64, 0, 125, 0, 216, 64, 1000, 0, 1, 1728], 8)\", \"1729\"], [\"([64, 0, 125, 0, 216, 64, 1000, 0, 1, 1728], 9)\", \"None\"], [\"([64, 0, 125, 0, 216, 64, 1000, 0, 1, 1728], 10)\", \"None\"], [\"([64, 0, 125, 0, 216, 64, 1000, 0, 1, 1728], 11)\", \"None\"], [\"([64, 0, 125, 0, 216, 64, 1000, 0, 1, 1728], 12)\", \"None\"], [\"([64, 0, 125, 0, 216, 64, 1000, 0, 1, 1728], 13)\", \"None\"], [\"([64, 0, 125, 0, 216, 64, 1000, 0, 1, 1728], 14)\", \"None\"], [\"([0, 1, 125, 1, 343, 125, 1000, 1, 0, 125], 0)\", \"1\"], [\"([0, 1, 125, 1, 343, 125, 1000, 1, 0, 125], 1)\", \"126\"], [\"([0, 1, 125, 1, 343, 125, 1000, 1, 0, 125], 2)\", \"126\"], [\"([0, 1, 125, 1, 343, 125, 1000, 1, 0, 125], 3)\", \"344\"], [\"([0, 1, 125, 1, 343, 125, 1000, 1, 0, 125], 4)\", \"468\"], [\"([0, 1, 125, 1, 343, 125, 1000, 1, 0, 125], 5)\", \"1125\"], [\"([0, 1, 125, 1, 343, 125, 1000, 1, 0, 125], 6)\", \"1001\"], [\"([0, 1, 125, 1, 343, 125, 1000, 1, 0, 125], 7)\", \"1\"], [\"([0, 1, 125, 1, 343, 125, 1000, 1, 0, 125], 8)\", \"125\"], [\"([0, 1, 125, 1, 343, 125, 1000, 1, 0, 125], 9)\", \"None\"], [\"([0, 1, 125, 1, 343, 125, 1000, 1, 0, 125], 10)\", \"None\"], [\"([0, 1, 125, 1, 343, 125, 1000, 1, 0, 125], 11)\", \"None\"], [\"([0, 1, 125, 1, 343, 125, 1000, 1, 0, 125], 12)\", \"None\"], [\"([0, 1, 125, 1, 343, 125, 1000, 1, 0, 125], 13)\", \"None\"], [\"([0, 1, 125, 1, 343, 125, 1000, 1, 0, 125], 14)\", \"None\"], [\"([1, 0, 1, 216, 27, 216, 0, 216, 1000, 512], 0)\", \"1\"], [\"([1, 0, 1, 216, 27, 216, 0, 216, 1000, 512], 1)\", \"1\"], [\"([1, 0, 1, 216, 27, 216, 0, 216, 1000, 512], 2)\", \"217\"], [\"([1, 0, 1, 216, 27, 216, 0, 216, 1000, 512], 3)\", \"243\"], [\"([1, 0, 1, 216, 27, 216, 0, 216, 1000, 512], 4)\", \"243\"], [\"([1, 0, 1, 216, 27, 216, 0, 216, 1000, 512], 5)\", \"216\"], [\"([1, 0, 1, 216, 27, 216, 0, 216, 1000, 512], 6)\", \"216\"], [\"([1, 0, 1, 216, 27, 216, 0, 216, 1000, 512], 7)\", \"1216\"], [\"([1, 0, 1, 216, 27, 216, 0, 216, 1000, 512], 8)\", \"1512\"], [\"([1, 0, 1, 216, 27, 216, 0, 216, 1000, 512], 9)\", \"None\"], [\"([1, 0, 1, 216, 27, 216, 0, 216, 1000, 512], 10)\", \"None\"], [\"([1, 0, 1, 216, 27, 216, 0, 216, 1000, 512], 11)\", \"None\"], [\"([1, 0, 1, 216, 27, 216, 0, 216, 1000, 512], 12)\", \"None\"], [\"([1, 0, 1, 216, 27, 216, 0, 216, 1000, 512], 13)\", \"None\"], [\"([1, 0, 1, 216, 27, 216, 0, 216, 1000, 512], 14)\", \"None\"], [\"([27, 27, 27, 343, 216, 27, 729, 27, 512, 27], 0)\", \"54\"], [\"([27, 27, 27, 343, 216, 27, 729, 27, 512, 27], 1)\", \"54\"], [\"([27, 27, 27, 343, 216, 27, 729, 27, 512, 27], 2)\", \"370\"], [\"([27, 27, 27, 343, 216, 27, 729, 27, 512, 27], 3)\", \"559\"], [\"([27, 27, 27, 343, 216, 27, 729, 27, 512, 27], 4)\", \"243\"], [\"([27, 27, 27, 343, 216, 27, 729, 27, 512, 27], 5)\", \"756\"], [\"([27, 27, 27, 343, 216, 27, 729, 27, 512, 27], 6)\", \"756\"], [\"([27, 27, 27, 343, 216, 27, 729, 27, 512, 27], 7)\", \"539\"], [\"([27, 27, 27, 343, 216, 27, 729, 27, 512, 27], 8)\", \"539\"], [\"([27, 27, 27, 343, 216, 27, 729, 27, 512, 27], 9)\", \"None\"], [\"([27, 27, 27, 343, 216, 27, 729, 27, 512, 27], 10)\", \"None\"], [\"([27, 27, 27, 343, 216, 27, 729, 27, 512, 27], 11)\", \"None\"], [\"([27, 27, 27, 343, 216, 27, 729, 27, 512, 27], 12)\", \"None\"], [\"([27, 27, 27, 343, 216, 27, 729, 27, 512, 27], 13)\", \"None\"], [\"([27, 27, 27, 343, 216, 27, 729, 27, 512, 27], 14)\", \"None\"], [\"([64, 0, 27, 64, 216, 64, 343, 0, 729, 1000], 0)\", \"64\"], [\"([64, 0, 27, 64, 216, 64, 343, 0, 729, 1000], 1)\", \"27\"], [\"([64, 0, 27, 64, 216, 64, 343, 0, 729, 1000], 2)\", \"91\"], [\"([64, 0, 27, 64, 216, 64, 343, 0, 729, 1000], 3)\", \"280\"], [\"([64, 0, 27, 64, 216, 64, 343, 0, 729, 1000], 4)\", \"280\"], [\"([64, 0, 27, 64, 216, 64, 343, 0, 729, 1000], 5)\", \"407\"], [\"([64, 0, 27, 64, 216, 64, 343, 0, 729, 1000], 6)\", \"343\"], [\"([64, 0, 27, 64, 216, 64, 343, 0, 729, 1000], 7)\", \"729\"], [\"([64, 0, 27, 64, 216, 64, 343, 0, 729, 1000], 8)\", \"1729\"], [\"([64, 0, 27, 64, 216, 64, 343, 0, 729, 1000], 9)\", \"None\"], [\"([64, 0, 27, 64, 216, 64, 343, 0, 729, 1000], 10)\", \"None\"], [\"([64, 0, 27, 64, 216, 64, 343, 0, 729, 1000], 11)\", \"None\"], [\"([64, 0, 27, 64, 216, 64, 343, 0, 729, 1000], 12)\", \"None\"], [\"([64, 0, 27, 64, 216, 64, 343, 0, 729, 1000], 13)\", \"None\"], [\"([64, 0, 27, 64, 216, 64, 343, 0, 729, 1000], 14)\", \"None\"], [\"([8, 27, 64, 125, 216, 343, 729, 729, 125, 1331], 0)\", \"35\"], [\"([8, 27, 64, 125, 216, 343, 729, 729, 125, 1331], 1)\", \"91\"], [\"([8, 27, 64, 125, 216, 343, 729, 729, 125, 1331], 2)\", \"189\"], [\"([8, 27, 64, 125, 216, 343, 729, 729, 125, 1331], 3)\", \"341\"], [\"([8, 27, 64, 125, 216, 343, 729, 729, 125, 1331], 4)\", \"559\"], [\"([8, 27, 64, 125, 216, 343, 729, 729, 125, 1331], 5)\", \"1072\"], [\"([8, 27, 64, 125, 216, 343, 729, 729, 125, 1331], 6)\", \"1458\"], [\"([8, 27, 64, 125, 216, 343, 729, 729, 125, 1331], 7)\", \"854\"], [\"([8, 27, 64, 125, 216, 343, 729, 729, 125, 1331], 8)\", \"1456\"], [\"([8, 27, 64, 125, 216, 343, 729, 729, 125, 1331], 9)\", \"None\"], [\"([8, 27, 64, 125, 216, 343, 729, 729, 125, 1331], 10)\", \"None\"], [\"([8, 27, 64, 125, 216, 343, 729, 729, 125, 1331], 11)\", \"None\"], [\"([8, 27, 64, 125, 216, 343, 729, 729, 125, 1331], 12)\", \"None\"], [\"([8, 27, 64, 125, 216, 343, 729, 729, 125, 1331], 13)\", \"None\"], [\"([8, 27, 64, 125, 216, 343, 729, 729, 125, 1331], 14)\", \"None\"], [\"([0, 64, 125, 8, 343, 0, 1000, 1000, 1331, 1728], 0)\", \"64\"], [\"([0, 64, 125, 8, 343, 0, 1000, 1000, 1331, 1728], 1)\", \"189\"], [\"([0, 64, 125, 8, 343, 0, 1000, 1000, 1331, 1728], 2)\", \"133\"], [\"([0, 64, 125, 8, 343, 0, 1000, 1000, 1331, 1728], 3)\", \"351\"], [\"([0, 64, 125, 8, 343, 0, 1000, 1000, 1331, 1728], 4)\", \"343\"], [\"([0, 64, 125, 8, 343, 0, 1000, 1000, 1331, 1728], 5)\", \"1000\"], [\"([0, 64, 125, 8, 343, 0, 1000, 1000, 1331, 1728], 6)\", \"2000\"], [\"([0, 64, 125, 8, 343, 0, 1000, 1000, 1331, 1728], 7)\", \"2331\"], [\"([0, 64, 125, 8, 343, 0, 1000, 1000, 1331, 1728], 8)\", \"3059\"], [\"([0, 64, 125, 8, 343, 0, 1000, 1000, 1331, 1728], 9)\", \"None\"], [\"([0, 64, 125, 8, 343, 0, 1000, 1000, 1331, 1728], 10)\", \"None\"], [\"([0, 64, 125, 8, 343, 0, 1000, 1000, 1331, 1728], 11)\", \"None\"], [\"([0, 64, 125, 8, 343, 0, 1000, 1000, 1331, 1728], 12)\", \"None\"], [\"([0, 64, 125, 8, 343, 0, 1000, 1000, 1331, 1728], 13)\", \"None\"], [\"([0, 64, 125, 8, 343, 0, 1000, 1000, 1331, 1728], 14)\", \"None\"], [\"([64, 125, 1, 27, 8, 729, 8, 1331, 8, 1], 0)\", \"189\"], [\"([64, 125, 1, 27, 8, 729, 8, 1331, 8, 1], 1)\", \"126\"], [\"([64, 125, 1, 27, 8, 729, 8, 1331, 8, 1], 2)\", \"28\"], [\"([64, 125, 1, 27, 8, 729, 8, 1331, 8, 1], 3)\", \"35\"], [\"([64, 125, 1, 27, 8, 729, 8, 1331, 8, 1], 4)\", \"737\"], [\"([64, 125, 1, 27, 8, 729, 8, 1331, 8, 1], 5)\", \"737\"], [\"([64, 125, 1, 27, 8, 729, 8, 1331, 8, 1], 6)\", \"1339\"], [\"([64, 125, 1, 27, 8, 729, 8, 1331, 8, 1], 7)\", \"1339\"], [\"([64, 125, 1, 27, 8, 729, 8, 1331, 8, 1], 8)\", \"9\"], [\"([64, 125, 1, 27, 8, 729, 8, 1331, 8, 1], 9)\", \"None\"], [\"([64, 125, 1, 27, 8, 729, 8, 1331, 8, 1], 10)\", \"None\"], [\"([64, 125, 1, 27, 8, 729, 8, 1331, 8, 1], 11)\", \"None\"], [\"([64, 125, 1, 27, 8, 729, 8, 1331, 8, 1], 12)\", \"None\"], [\"([64, 125, 1, 27, 8, 729, 8, 1331, 8, 1], 13)\", \"None\"], [\"([64, 125, 1, 27, 8, 729, 8, 1331, 8, 1], 14)\", \"None\"], [\"([27, 0, 27, 0, 27, 512, 729, 0, 1331, 1000], 0)\", \"27\"], [\"([27, 0, 27, 0, 27, 512, 729, 0, 1331, 1000], 1)\", \"27\"], [\"([27, 0, 27, 0, 27, 512, 729, 0, 1331, 1000], 2)\", \"27\"], [\"([27, 0, 27, 0, 27, 512, 729, 0, 1331, 1000], 3)\", \"27\"], [\"([27, 0, 27, 0, 27, 512, 729, 0, 1331, 1000], 4)\", \"539\"], [\"([27, 0, 27, 0, 27, 512, 729, 0, 1331, 1000], 5)\", \"1241\"], [\"([27, 0, 27, 0, 27, 512, 729, 0, 1331, 1000], 6)\", \"729\"], [\"([27, 0, 27, 0, 27, 512, 729, 0, 1331, 1000], 7)\", \"1331\"], [\"([27, 0, 27, 0, 27, 512, 729, 0, 1331, 1000], 8)\", \"2331\"], [\"([27, 0, 27, 0, 27, 512, 729, 0, 1331, 1000], 9)\", \"None\"], [\"([27, 0, 27, 0, 27, 512, 729, 0, 1331, 1000], 10)\", \"None\"], [\"([27, 0, 27, 0, 27, 512, 729, 0, 1331, 1000], 11)\", \"None\"], [\"([27, 0, 27, 0, 27, 512, 729, 0, 1331, 1000], 12)\", \"None\"], [\"([27, 0, 27, 0, 27, 512, 729, 0, 1331, 1000], 13)\", \"None\"], [\"([27, 0, 27, 0, 27, 512, 729, 0, 1331, 1000], 14)\", \"None\"], [\"([0, 1, 0, 1, 1, 125, 1000, 1, 343, 343], 0)\", \"1\"], [\"([0, 1, 0, 1, 1, 125, 1000, 1, 343, 343], 1)\", \"1\"], [\"([0, 1, 0, 1, 1, 125, 1000, 1, 343, 343], 2)\", \"1\"], [\"([0, 1, 0, 1, 1, 125, 1000, 1, 343, 343], 3)\", \"2\"], [\"([0, 1, 0, 1, 1, 125, 1000, 1, 343, 343], 4)\", \"126\"], [\"([0, 1, 0, 1, 1, 125, 1000, 1, 343, 343], 5)\", \"1125\"], [\"([0, 1, 0, 1, 1, 125, 1000, 1, 343, 343], 6)\", \"1001\"], [\"([0, 1, 0, 1, 1, 125, 1000, 1, 343, 343], 7)\", \"344\"], [\"([0, 1, 0, 1, 1, 125, 1000, 1, 343, 343], 8)\", \"686\"], [\"([0, 1, 0, 1, 1, 125, 1000, 1, 343, 343], 9)\", \"None\"], [\"([0, 1, 0, 1, 1, 125, 1000, 1, 343, 343], 10)\", \"None\"], [\"([0, 1, 0, 1, 1, 125, 1000, 1, 343, 343], 11)\", \"None\"], [\"([0, 1, 0, 1, 1, 125, 1000, 1, 343, 343], 12)\", \"None\"], [\"([0, 1, 0, 1, 1, 125, 1000, 1, 343, 343], 13)\", \"None\"], [\"([0, 1, 0, 1, 1, 125, 1000, 1, 343, 343], 14)\", \"None\"], [\"([0, 64, 125, 216, 64, 0, 512, 1000, 1331, 1728], 0)\", \"64\"], [\"([0, 64, 125, 216, 64, 0, 512, 1000, 1331, 1728], 1)\", \"189\"], [\"([0, 64, 125, 216, 64, 0, 512, 1000, 1331, 1728], 2)\", \"341\"], [\"([0, 64, 125, 216, 64, 0, 512, 1000, 1331, 1728], 3)\", \"280\"], [\"([0, 64, 125, 216, 64, 0, 512, 1000, 1331, 1728], 4)\", \"64\"], [\"([0, 64, 125, 216, 64, 0, 512, 1000, 1331, 1728], 5)\", \"512\"], [\"([0, 64, 125, 216, 64, 0, 512, 1000, 1331, 1728], 6)\", \"1512\"], [\"([0, 64, 125, 216, 64, 0, 512, 1000, 1331, 1728], 7)\", \"2331\"], [\"([0, 64, 125, 216, 64, 0, 512, 1000, 1331, 1728], 8)\", \"3059\"], [\"([0, 64, 125, 216, 64, 0, 512, 1000, 1331, 1728], 9)\", \"None\"], [\"([0, 64, 125, 216, 64, 0, 512, 1000, 1331, 1728], 10)\", \"None\"], [\"([0, 64, 125, 216, 64, 0, 512, 1000, 1331, 1728], 11)\", \"None\"], [\"([0, 64, 125, 216, 64, 0, 512, 1000, 1331, 1728], 12)\", \"None\"], [\"([0, 64, 125, 216, 64, 0, 512, 1000, 1331, 1728], 13)\", \"None\"], [\"([0, 64, 125, 216, 64, 0, 512, 1000, 1331, 1728], 14)\", \"None\"], [\"([8, 27, 64, 343, 27, 343, 512, 27, 729, 1331], 0)\", \"35\"], [\"([8, 27, 64, 343, 27, 343, 512, 27, 729, 1331], 1)\", \"91\"], [\"([8, 27, 64, 343, 27, 343, 512, 27, 729, 1331], 2)\", \"407\"], [\"([8, 27, 64, 343, 27, 343, 512, 27, 729, 1331], 3)\", \"370\"], [\"([8, 27, 64, 343, 27, 343, 512, 27, 729, 1331], 4)\", \"370\"], [\"([8, 27, 64, 343, 27, 343, 512, 27, 729, 1331], 5)\", \"855\"], [\"([8, 27, 64, 343, 27, 343, 512, 27, 729, 1331], 6)\", \"539\"], [\"([8, 27, 64, 343, 27, 343, 512, 27, 729, 1331], 7)\", \"756\"], [\"([8, 27, 64, 343, 27, 343, 512, 27, 729, 1331], 8)\", \"2060\"], [\"([8, 27, 64, 343, 27, 343, 512, 27, 729, 1331], 9)\", \"None\"], [\"([8, 27, 64, 343, 27, 343, 512, 27, 729, 1331], 10)\", \"None\"], [\"([8, 27, 64, 343, 27, 343, 512, 27, 729, 1331], 11)\", \"None\"], [\"([8, 27, 64, 343, 27, 343, 512, 27, 729, 1331], 12)\", \"None\"], [\"([8, 27, 64, 343, 27, 343, 512, 27, 729, 1331], 13)\", \"None\"], [\"([8, 27, 64, 343, 27, 343, 512, 27, 729, 1331], 14)\", \"None\"], [\"([1, 8, 8, 64, 512, 216, 216, 512, 125, 8], 0)\", \"9\"], [\"([1, 8, 8, 64, 512, 216, 216, 512, 125, 8], 1)\", \"16\"], [\"([1, 8, 8, 64, 512, 216, 216, 512, 125, 8], 2)\", \"72\"], [\"([1, 8, 8, 64, 512, 216, 216, 512, 125, 8], 3)\", \"576\"], [\"([1, 8, 8, 64, 512, 216, 216, 512, 125, 8], 4)\", \"728\"], [\"([1, 8, 8, 64, 512, 216, 216, 512, 125, 8], 5)\", \"432\"], [\"([1, 8, 8, 64, 512, 216, 216, 512, 125, 8], 6)\", \"728\"], [\"([1, 8, 8, 64, 512, 216, 216, 512, 125, 8], 7)\", \"637\"], [\"([1, 8, 8, 64, 512, 216, 216, 512, 125, 8], 8)\", \"133\"], [\"([1, 8, 8, 64, 512, 216, 216, 512, 125, 8], 9)\", \"None\"], [\"([1, 8, 8, 64, 512, 216, 216, 512, 125, 8], 10)\", \"None\"], [\"([1, 8, 8, 64, 512, 216, 216, 512, 125, 8], 11)\", \"None\"], [\"([1, 8, 8, 64, 512, 216, 216, 512, 125, 8], 12)\", \"None\"], [\"([1, 8, 8, 64, 512, 216, 216, 512, 125, 8], 13)\", \"None\"], [\"([1, 8, 8, 64, 512, 216, 216, 512, 125, 8], 14)\", \"None\"], [\"([64, 1, 27, 125, 1, 729, 216, 1, 343, 27], 0)\", \"65\"], [\"([64, 1, 27, 125, 1, 729, 216, 1, 343, 27], 1)\", \"28\"], [\"([64, 1, 27, 125, 1, 729, 216, 1, 343, 27], 2)\", \"152\"], [\"([64, 1, 27, 125, 1, 729, 216, 1, 343, 27], 3)\", \"126\"], [\"([64, 1, 27, 125, 1, 729, 216, 1, 343, 27], 4)\", \"730\"], [\"([64, 1, 27, 125, 1, 729, 216, 1, 343, 27], 5)\", \"945\"], [\"([64, 1, 27, 125, 1, 729, 216, 1, 343, 27], 6)\", \"217\"], [\"([64, 1, 27, 125, 1, 729, 216, 1, 343, 27], 7)\", \"344\"], [\"([64, 1, 27, 125, 1, 729, 216, 1, 343, 27], 8)\", \"370\"], [\"([64, 1, 27, 125, 1, 729, 216, 1, 343, 27], 9)\", \"None\"], [\"([64, 1, 27, 125, 1, 729, 216, 1, 343, 27], 10)\", \"None\"], [\"([64, 1, 27, 125, 1, 729, 216, 1, 343, 27], 11)\", \"None\"], [\"([64, 1, 27, 125, 1, 729, 216, 1, 343, 27], 12)\", \"None\"], [\"([64, 1, 27, 125, 1, 729, 216, 1, 343, 27], 13)\", \"None\"], [\"([64, 1, 27, 125, 1, 729, 216, 1, 343, 27], 14)\", \"None\"], [\"([8, 0, 27, 8, 216, 8, 216, 216, 512, 1000], 0)\", \"8\"], [\"([8, 0, 27, 8, 216, 8, 216, 216, 512, 1000], 1)\", \"27\"], [\"([8, 0, 27, 8, 216, 8, 216, 216, 512, 1000], 2)\", \"35\"], [\"([8, 0, 27, 8, 216, 8, 216, 216, 512, 1000], 3)\", \"224\"], [\"([8, 0, 27, 8, 216, 8, 216, 216, 512, 1000], 4)\", \"224\"], [\"([8, 0, 27, 8, 216, 8, 216, 216, 512, 1000], 5)\", \"224\"], [\"([8, 0, 27, 8, 216, 8, 216, 216, 512, 1000], 6)\", \"432\"], [\"([8, 0, 27, 8, 216, 8, 216, 216, 512, 1000], 7)\", \"728\"], [\"([8, 0, 27, 8, 216, 8, 216, 216, 512, 1000], 8)\", \"1512\"], [\"([8, 0, 27, 8, 216, 8, 216, 216, 512, 1000], 9)\", \"None\"], [\"([8, 0, 27, 8, 216, 8, 216, 216, 512, 1000], 10)\", \"None\"], [\"([8, 0, 27, 8, 216, 8, 216, 216, 512, 1000], 11)\", \"None\"], [\"([8, 0, 27, 8, 216, 8, 216, 216, 512, 1000], 12)\", \"None\"], [\"([8, 0, 27, 8, 216, 8, 216, 216, 512, 1000], 13)\", \"None\"], [\"([8, 0, 27, 8, 216, 8, 216, 216, 512, 1000], 14)\", \"None\"], [\"([64, 1, 8, 27, 1, 729, 343, 343, 125, 729], 0)\", \"65\"], [\"([64, 1, 8, 27, 1, 729, 343, 343, 125, 729], 1)\", \"9\"], [\"([64, 1, 8, 27, 1, 729, 343, 343, 125, 729], 2)\", \"35\"], [\"([64, 1, 8, 27, 1, 729, 343, 343, 125, 729], 3)\", \"28\"], [\"([64, 1, 8, 27, 1, 729, 343, 343, 125, 729], 4)\", \"730\"], [\"([64, 1, 8, 27, 1, 729, 343, 343, 125, 729], 5)\", \"1072\"], [\"([64, 1, 8, 27, 1, 729, 343, 343, 125, 729], 6)\", \"686\"], [\"([64, 1, 8, 27, 1, 729, 343, 343, 125, 729], 7)\", \"468\"], [\"([64, 1, 8, 27, 1, 729, 343, 343, 125, 729], 8)\", \"854\"], [\"([64, 1, 8, 27, 1, 729, 343, 343, 125, 729], 9)\", \"None\"], [\"([64, 1, 8, 27, 1, 729, 343, 343, 125, 729], 10)\", \"None\"], [\"([64, 1, 8, 27, 1, 729, 343, 343, 125, 729], 11)\", \"None\"], [\"([64, 1, 8, 27, 1, 729, 343, 343, 125, 729], 12)\", \"None\"], [\"([64, 1, 8, 27, 1, 729, 343, 343, 125, 729], 13)\", \"None\"], [\"([64, 1, 8, 27, 1, 729, 343, 343, 125, 729], 14)\", \"None\"], [\"([1, 64, 8, 0, 1, 216, 0, 64, 8, 8], 0)\", \"65\"], [\"([1, 64, 8, 0, 1, 216, 0, 64, 8, 8], 1)\", \"72\"], [\"([1, 64, 8, 0, 1, 216, 0, 64, 8, 8], 2)\", \"8\"], [\"([1, 64, 8, 0, 1, 216, 0, 64, 8, 8], 3)\", \"1\"], [\"([1, 64, 8, 0, 1, 216, 0, 64, 8, 8], 4)\", \"217\"], [\"([1, 64, 8, 0, 1, 216, 0, 64, 8, 8], 5)\", \"216\"], [\"([1, 64, 8, 0, 1, 216, 0, 64, 8, 8], 6)\", \"64\"], [\"([1, 64, 8, 0, 1, 216, 0, 64, 8, 8], 7)\", \"72\"], [\"([1, 64, 8, 0, 1, 216, 0, 64, 8, 8], 8)\", \"16\"], [\"([1, 64, 8, 0, 1, 216, 0, 64, 8, 8], 9)\", \"None\"], [\"([1, 64, 8, 0, 1, 216, 0, 64, 8, 8], 10)\", \"None\"], [\"([1, 64, 8, 0, 1, 216, 0, 64, 8, 8], 11)\", \"None\"], [\"([1, 64, 8, 0, 1, 216, 0, 64, 8, 8], 12)\", \"None\"], [\"([1, 64, 8, 0, 1, 216, 0, 64, 8, 8], 13)\", \"None\"], [\"([1, 64, 8, 0, 1, 216, 0, 64, 8, 8], 14)\", \"None\"], [\"([1, 27, 27, 1, 0, 1, 1, 729, 1000, 27], 0)\", \"28\"], [\"([1, 27, 27, 1, 0, 1, 1, 729, 1000, 27], 1)\", \"54\"], [\"([1, 27, 27, 1, 0, 1, 1, 729, 1000, 27], 2)\", \"28\"], [\"([1, 27, 27, 1, 0, 1, 1, 729, 1000, 27], 3)\", \"1\"], [\"([1, 27, 27, 1, 0, 1, 1, 729, 1000, 27], 4)\", \"1\"], [\"([1, 27, 27, 1, 0, 1, 1, 729, 1000, 27], 5)\", \"2\"], [\"([1, 27, 27, 1, 0, 1, 1, 729, 1000, 27], 6)\", \"730\"], [\"([1, 27, 27, 1, 0, 1, 1, 729, 1000, 27], 7)\", \"1729\"], [\"([1, 27, 27, 1, 0, 1, 1, 729, 1000, 27], 8)\", \"1027\"], [\"([1, 27, 27, 1, 0, 1, 1, 729, 1000, 27], 9)\", \"None\"], [\"([1, 27, 27, 1, 0, 1, 1, 729, 1000, 27], 10)\", \"None\"], [\"([1, 27, 27, 1, 0, 1, 1, 729, 1000, 27], 11)\", \"None\"], [\"([1, 27, 27, 1, 0, 1, 1, 729, 1000, 27], 12)\", \"None\"], [\"([1, 27, 27, 1, 0, 1, 1, 729, 1000, 27], 13)\", \"None\"], [\"([1, 27, 27, 1, 0, 1, 1, 729, 1000, 27], 14)\", \"None\"], [\"([8, 0, 1, 216, 216, 8, 343, 216, 729, 512], 0)\", \"8\"], [\"([8, 0, 1, 216, 216, 8, 343, 216, 729, 512], 1)\", \"1\"], [\"([8, 0, 1, 216, 216, 8, 343, 216, 729, 512], 2)\", \"217\"], [\"([8, 0, 1, 216, 216, 8, 343, 216, 729, 512], 3)\", \"432\"], [\"([8, 0, 1, 216, 216, 8, 343, 216, 729, 512], 4)\", \"224\"], [\"([8, 0, 1, 216, 216, 8, 343, 216, 729, 512], 5)\", \"351\"], [\"([8, 0, 1, 216, 216, 8, 343, 216, 729, 512], 6)\", \"559\"], [\"([8, 0, 1, 216, 216, 8, 343, 216, 729, 512], 7)\", \"945\"], [\"([8, 0, 1, 216, 216, 8, 343, 216, 729, 512], 8)\", \"1241\"], [\"([8, 0, 1, 216, 216, 8, 343, 216, 729, 512], 9)\", \"None\"], [\"([8, 0, 1, 216, 216, 8, 343, 216, 729, 512], 10)\", \"None\"], [\"([8, 0, 1, 216, 216, 8, 343, 216, 729, 512], 11)\", \"None\"], [\"([8, 0, 1, 216, 216, 8, 343, 216, 729, 512], 12)\", \"None\"], [\"([8, 0, 1, 216, 216, 8, 343, 216, 729, 512], 13)\", \"None\"], [\"([8, 0, 1, 216, 216, 8, 343, 216, 729, 512], 14)\", \"None\"], [\"([0, 1, 0, 343, 343, 125, 125, 343, 216, 343], 0)\", \"1\"], [\"([0, 1, 0, 343, 343, 125, 125, 343, 216, 343], 1)\", \"1\"], [\"([0, 1, 0, 343, 343, 125, 125, 343, 216, 343], 2)\", \"343\"], [\"([0, 1, 0, 343, 343, 125, 125, 343, 216, 343], 3)\", \"686\"], [\"([0, 1, 0, 343, 343, 125, 125, 343, 216, 343], 4)\", \"468\"], [\"([0, 1, 0, 343, 343, 125, 125, 343, 216, 343], 5)\", \"250\"], [\"([0, 1, 0, 343, 343, 125, 125, 343, 216, 343], 6)\", \"468\"], [\"([0, 1, 0, 343, 343, 125, 125, 343, 216, 343], 7)\", \"559\"], [\"([0, 1, 0, 343, 343, 125, 125, 343, 216, 343], 8)\", \"559\"], [\"([0, 1, 0, 343, 343, 125, 125, 343, 216, 343], 9)\", \"None\"], [\"([0, 1, 0, 343, 343, 125, 125, 343, 216, 343], 10)\", \"None\"], [\"([0, 1, 0, 343, 343, 125, 125, 343, 216, 343], 11)\", \"None\"], [\"([0, 1, 0, 343, 343, 125, 125, 343, 216, 343], 12)\", \"None\"], [\"([0, 1, 0, 343, 343, 125, 125, 343, 216, 343], 13)\", \"None\"], [\"([0, 1, 0, 343, 343, 125, 125, 343, 216, 343], 14)\", \"None\"], [\"([8, 8, 216, 64, 8, 8, 125, 512, 0, 216], 0)\", \"16\"], [\"([8, 8, 216, 64, 8, 8, 125, 512, 0, 216], 1)\", \"224\"], [\"([8, 8, 216, 64, 8, 8, 125, 512, 0, 216], 2)\", \"280\"], [\"([8, 8, 216, 64, 8, 8, 125, 512, 0, 216], 3)\", \"72\"], [\"([8, 8, 216, 64, 8, 8, 125, 512, 0, 216], 4)\", \"16\"], [\"([8, 8, 216, 64, 8, 8, 125, 512, 0, 216], 5)\", \"133\"], [\"([8, 8, 216, 64, 8, 8, 125, 512, 0, 216], 6)\", \"637\"], [\"([8, 8, 216, 64, 8, 8, 125, 512, 0, 216], 7)\", \"512\"], [\"([8, 8, 216, 64, 8, 8, 125, 512, 0, 216], 8)\", \"216\"], [\"([8, 8, 216, 64, 8, 8, 125, 512, 0, 216], 9)\", \"None\"], [\"([8, 8, 216, 64, 8, 8, 125, 512, 0, 216], 10)\", \"None\"], [\"([8, 8, 216, 64, 8, 8, 125, 512, 0, 216], 11)\", \"None\"], [\"([8, 8, 216, 64, 8, 8, 125, 512, 0, 216], 12)\", \"None\"], [\"([8, 8, 216, 64, 8, 8, 125, 512, 0, 216], 13)\", \"None\"], [\"([8, 8, 216, 64, 8, 8, 125, 512, 0, 216], 14)\", \"None\"], [\"([0, 1, 216, 125, 1, 125, 1, 1, 125, 2197], 0)\", \"1\"], [\"([0, 1, 216, 125, 1, 125, 1, 1, 125, 2197], 1)\", \"217\"], [\"([0, 1, 216, 125, 1, 125, 1, 1, 125, 2197], 2)\", \"341\"], [\"([0, 1, 216, 125, 1, 125, 1, 1, 125, 2197], 3)\", \"126\"], [\"([0, 1, 216, 125, 1, 125, 1, 1, 125, 2197], 4)\", \"126\"], [\"([0, 1, 216, 125, 1, 125, 1, 1, 125, 2197], 5)\", \"126\"], [\"([0, 1, 216, 125, 1, 125, 1, 1, 125, 2197], 6)\", \"2\"], [\"([0, 1, 216, 125, 1, 125, 1, 1, 125, 2197], 7)\", \"126\"], [\"([0, 1, 216, 125, 1, 125, 1, 1, 125, 2197], 8)\", \"2322\"], [\"([0, 1, 216, 125, 1, 125, 1, 1, 125, 2197], 9)\", \"None\"], [\"([0, 1, 216, 125, 1, 125, 1, 1, 125, 2197], 10)\", \"None\"], [\"([0, 1, 216, 125, 1, 125, 1, 1, 125, 2197], 11)\", \"None\"], [\"([0, 1, 216, 125, 1, 125, 1, 1, 125, 2197], 12)\", \"None\"], [\"([0, 1, 216, 125, 1, 125, 1, 1, 125, 2197], 13)\", \"None\"], [\"([0, 1, 216, 125, 1, 125, 1, 1, 125, 2197], 14)\", \"None\"], [\"([8, 0, 27, 8, 216, 8, 8, 216, 0, 1000], 0)\", \"8\"], [\"([8, 0, 27, 8, 216, 8, 8, 216, 0, 1000], 1)\", \"27\"], [\"([8, 0, 27, 8, 216, 8, 8, 216, 0, 1000], 2)\", \"35\"], [\"([8, 0, 27, 8, 216, 8, 8, 216, 0, 1000], 3)\", \"224\"], [\"([8, 0, 27, 8, 216, 8, 8, 216, 0, 1000], 4)\", \"224\"], [\"([8, 0, 27, 8, 216, 8, 8, 216, 0, 1000], 5)\", \"16\"], [\"([8, 0, 27, 8, 216, 8, 8, 216, 0, 1000], 6)\", \"224\"], [\"([8, 0, 27, 8, 216, 8, 8, 216, 0, 1000], 7)\", \"216\"], [\"([8, 0, 27, 8, 216, 8, 8, 216, 0, 1000], 8)\", \"1000\"], [\"([8, 0, 27, 8, 216, 8, 8, 216, 0, 1000], 9)\", \"None\"], [\"([8, 0, 27, 8, 216, 8, 8, 216, 0, 1000], 10)\", \"None\"], [\"([8, 0, 27, 8, 216, 8, 8, 216, 0, 1000], 11)\", \"None\"], [\"([8, 0, 27, 8, 216, 8, 8, 216, 0, 1000], 12)\", \"None\"], [\"([8, 0, 27, 8, 216, 8, 8, 216, 0, 1000], 13)\", \"None\"], [\"([8, 0, 27, 8, 216, 8, 8, 216, 0, 1000], 14)\", \"None\"], [\"([64, 1, 1, 27, 1, 729, 64, 343, 216, 1], 0)\", \"65\"], [\"([64, 1, 1, 27, 1, 729, 64, 343, 216, 1], 1)\", \"2\"], [\"([64, 1, 1, 27, 1, 729, 64, 343, 216, 1], 2)\", \"28\"], [\"([64, 1, 1, 27, 1, 729, 64, 343, 216, 1], 3)\", \"28\"], [\"([64, 1, 1, 27, 1, 729, 64, 343, 216, 1], 4)\", \"730\"], [\"([64, 1, 1, 27, 1, 729, 64, 343, 216, 1], 5)\", \"793\"], [\"([64, 1, 1, 27, 1, 729, 64, 343, 216, 1], 6)\", \"407\"], [\"([64, 1, 1, 27, 1, 729, 64, 343, 216, 1], 7)\", \"559\"], [\"([64, 1, 1, 27, 1, 729, 64, 343, 216, 1], 8)\", \"217\"], [\"([64, 1, 1, 27, 1, 729, 64, 343, 216, 1], 9)\", \"None\"], [\"([64, 1, 1, 27, 1, 729, 64, 343, 216, 1], 10)\", \"None\"], [\"([64, 1, 1, 27, 1, 729, 64, 343, 216, 1], 11)\", \"None\"], [\"([64, 1, 1, 27, 1, 729, 64, 343, 216, 1], 12)\", \"None\"], [\"([64, 1, 1, 27, 1, 729, 64, 343, 216, 1], 13)\", \"None\"], [\"([64, 1, 1, 27, 1, 729, 64, 343, 216, 1], 14)\", \"None\"], [\"([0, 64, 216, 0, 64, 0, 125, 64, 125, 216], 0)\", \"64\"], [\"([0, 64, 216, 0, 64, 0, 125, 64, 125, 216], 1)\", \"280\"], [\"([0, 64, 216, 0, 64, 0, 125, 64, 125, 216], 2)\", \"216\"], [\"([0, 64, 216, 0, 64, 0, 125, 64, 125, 216], 3)\", \"64\"], [\"([0, 64, 216, 0, 64, 0, 125, 64, 125, 216], 4)\", \"64\"], [\"([0, 64, 216, 0, 64, 0, 125, 64, 125, 216], 5)\", \"125\"], [\"([0, 64, 216, 0, 64, 0, 125, 64, 125, 216], 6)\", \"189\"], [\"([0, 64, 216, 0, 64, 0, 125, 64, 125, 216], 7)\", \"189\"], [\"([0, 64, 216, 0, 64, 0, 125, 64, 125, 216], 8)\", \"341\"], [\"([0, 64, 216, 0, 64, 0, 125, 64, 125, 216], 9)\", \"None\"], [\"([0, 64, 216, 0, 64, 0, 125, 64, 125, 216], 10)\", \"None\"], [\"([0, 64, 216, 0, 64, 0, 125, 64, 125, 216], 11)\", \"None\"], [\"([0, 64, 216, 0, 64, 0, 125, 64, 125, 216], 12)\", \"None\"], [\"([0, 64, 216, 0, 64, 0, 125, 64, 125, 216], 13)\", \"None\"], [\"([0, 64, 216, 0, 64, 0, 125, 64, 125, 216], 14)\", \"None\"], [\"([27, 27, 1, 1, 27, 27, 1000, 729, 1, 1], 0)\", \"54\"], [\"([27, 27, 1, 1, 27, 27, 1000, 729, 1, 1], 1)\", \"28\"], [\"([27, 27, 1, 1, 27, 27, 1000, 729, 1, 1], 2)\", \"2\"], [\"([27, 27, 1, 1, 27, 27, 1000, 729, 1, 1], 3)\", \"28\"], [\"([27, 27, 1, 1, 27, 27, 1000, 729, 1, 1], 4)\", \"54\"], [\"([27, 27, 1, 1, 27, 27, 1000, 729, 1, 1], 5)\", \"1027\"], [\"([27, 27, 1, 1, 27, 27, 1000, 729, 1, 1], 6)\", \"1729\"], [\"([27, 27, 1, 1, 27, 27, 1000, 729, 1, 1], 7)\", \"730\"], [\"([27, 27, 1, 1, 27, 27, 1000, 729, 1, 1], 8)\", \"2\"], [\"([27, 27, 1, 1, 27, 27, 1000, 729, 1, 1], 9)\", \"None\"], [\"([27, 27, 1, 1, 27, 27, 1000, 729, 1, 1], 10)\", \"None\"], [\"([27, 27, 1, 1, 27, 27, 1000, 729, 1, 1], 11)\", \"None\"], [\"([27, 27, 1, 1, 27, 27, 1000, 729, 1, 1], 12)\", \"None\"], [\"([27, 27, 1, 1, 27, 27, 1000, 729, 1, 1], 13)\", \"None\"], [\"([27, 27, 1, 1, 27, 27, 1000, 729, 1, 1], 14)\", \"None\"], [\"([1, 8, 1, 216, 125, 216, 64, 8, 1728, 512], 0)\", \"9\"], [\"([1, 8, 1, 216, 125, 216, 64, 8, 1728, 512], 1)\", \"9\"], [\"([1, 8, 1, 216, 125, 216, 64, 8, 1728, 512], 2)\", \"217\"], [\"([1, 8, 1, 216, 125, 216, 64, 8, 1728, 512], 3)\", \"341\"], [\"([1, 8, 1, 216, 125, 216, 64, 8, 1728, 512], 4)\", \"341\"], [\"([1, 8, 1, 216, 125, 216, 64, 8, 1728, 512], 5)\", \"280\"], [\"([1, 8, 1, 216, 125, 216, 64, 8, 1728, 512], 6)\", \"72\"], [\"([1, 8, 1, 216, 125, 216, 64, 8, 1728, 512], 7)\", \"1736\"], [\"([1, 8, 1, 216, 125, 216, 64, 8, 1728, 512], 8)\", \"2240\"], [\"([1, 8, 1, 216, 125, 216, 64, 8, 1728, 512], 9)\", \"None\"], [\"([1, 8, 1, 216, 125, 216, 64, 8, 1728, 512], 10)\", \"None\"], [\"([1, 8, 1, 216, 125, 216, 64, 8, 1728, 512], 11)\", \"None\"], [\"([1, 8, 1, 216, 125, 216, 64, 8, 1728, 512], 12)\", \"None\"], [\"([1, 8, 1, 216, 125, 216, 64, 8, 1728, 512], 13)\", \"None\"], [\"([1, 8, 1, 216, 125, 216, 64, 8, 1728, 512], 14)\", \"None\"], [\"([64, 1, 64, 343, 343, 729, 125, 343, 1000, 1331], 0)\", \"65\"], [\"([64, 1, 64, 343, 343, 729, 125, 343, 1000, 1331], 1)\", \"65\"], [\"([64, 1, 64, 343, 343, 729, 125, 343, 1000, 1331], 2)\", \"407\"], [\"([64, 1, 64, 343, 343, 729, 125, 343, 1000, 1331], 3)\", \"686\"], [\"([64, 1, 64, 343, 343, 729, 125, 343, 1000, 1331], 4)\", \"1072\"], [\"([64, 1, 64, 343, 343, 729, 125, 343, 1000, 1331], 5)\", \"854\"], [\"([64, 1, 64, 343, 343, 729, 125, 343, 1000, 1331], 6)\", \"468\"], [\"([64, 1, 64, 343, 343, 729, 125, 343, 1000, 1331], 7)\", \"1343\"], [\"([64, 1, 64, 343, 343, 729, 125, 343, 1000, 1331], 8)\", \"2331\"], [\"([64, 1, 64, 343, 343, 729, 125, 343, 1000, 1331], 9)\", \"None\"], [\"([64, 1, 64, 343, 343, 729, 125, 343, 1000, 1331], 10)\", \"None\"], [\"([64, 1, 64, 343, 343, 729, 125, 343, 1000, 1331], 11)\", \"None\"], [\"([64, 1, 64, 343, 343, 729, 125, 343, 1000, 1331], 12)\", \"None\"], [\"([64, 1, 64, 343, 343, 729, 125, 343, 1000, 1331], 13)\", \"None\"], [\"([64, 1, 64, 343, 343, 729, 125, 343, 1000, 1331], 14)\", \"None\"], [\"([1, 64, 125, 64, 343, 216, 125, 64, 64, 1728], 0)\", \"65\"], [\"([1, 64, 125, 64, 343, 216, 125, 64, 64, 1728], 1)\", \"189\"], [\"([1, 64, 125, 64, 343, 216, 125, 64, 64, 1728], 2)\", \"189\"], [\"([1, 64, 125, 64, 343, 216, 125, 64, 64, 1728], 3)\", \"407\"], [\"([1, 64, 125, 64, 343, 216, 125, 64, 64, 1728], 4)\", \"559\"], [\"([1, 64, 125, 64, 343, 216, 125, 64, 64, 1728], 5)\", \"341\"], [\"([1, 64, 125, 64, 343, 216, 125, 64, 64, 1728], 6)\", \"189\"], [\"([1, 64, 125, 64, 343, 216, 125, 64, 64, 1728], 7)\", \"128\"], [\"([1, 64, 125, 64, 343, 216, 125, 64, 64, 1728], 8)\", \"1792\"], [\"([1, 64, 125, 64, 343, 216, 125, 64, 64, 1728], 9)\", \"None\"], [\"([1, 64, 125, 64, 343, 216, 125, 64, 64, 1728], 10)\", \"None\"], [\"([1, 64, 125, 64, 343, 216, 125, 64, 64, 1728], 11)\", \"None\"], [\"([1, 64, 125, 64, 343, 216, 125, 64, 64, 1728], 12)\", \"None\"], [\"([1, 64, 125, 64, 343, 216, 125, 64, 64, 1728], 13)\", \"None\"], [\"([1, 64, 125, 64, 343, 216, 125, 64, 64, 1728], 14)\", \"None\"], [\"([27, 125, 125, 125, 512, 27, 27, 125, 1728, 125], 0)\", \"152\"], [\"([27, 125, 125, 125, 512, 27, 27, 125, 1728, 125], 1)\", \"250\"], [\"([27, 125, 125, 125, 512, 27, 27, 125, 1728, 125], 2)\", \"250\"], [\"([27, 125, 125, 125, 512, 27, 27, 125, 1728, 125], 3)\", \"637\"], [\"([27, 125, 125, 125, 512, 27, 27, 125, 1728, 125], 4)\", \"539\"], [\"([27, 125, 125, 125, 512, 27, 27, 125, 1728, 125], 5)\", \"54\"], [\"([27, 125, 125, 125, 512, 27, 27, 125, 1728, 125], 6)\", \"152\"], [\"([27, 125, 125, 125, 512, 27, 27, 125, 1728, 125], 7)\", \"1853\"], [\"([27, 125, 125, 125, 512, 27, 27, 125, 1728, 125], 8)\", \"1853\"], [\"([27, 125, 125, 125, 512, 27, 27, 125, 1728, 125], 9)\", \"None\"], [\"([27, 125, 125, 125, 512, 27, 27, 125, 1728, 125], 10)\", \"None\"], [\"([27, 125, 125, 125, 512, 27, 27, 125, 1728, 125], 11)\", \"None\"], [\"([27, 125, 125, 125, 512, 27, 27, 125, 1728, 125], 12)\", \"None\"], [\"([27, 125, 125, 125, 512, 27, 27, 125, 1728, 125], 13)\", \"None\"], [\"([27, 125, 125, 125, 512, 27, 27, 125, 1728, 125], 14)\", \"None\"], [\"([8, 8, 216, 8, 512, 8, 0, 8, 1000, 216], 0)\", \"16\"], [\"([8, 8, 216, 8, 512, 8, 0, 8, 1000, 216], 1)\", \"224\"], [\"([8, 8, 216, 8, 512, 8, 0, 8, 1000, 216], 2)\", \"224\"], [\"([8, 8, 216, 8, 512, 8, 0, 8, 1000, 216], 3)\", \"520\"], [\"([8, 8, 216, 8, 512, 8, 0, 8, 1000, 216], 4)\", \"520\"], [\"([8, 8, 216, 8, 512, 8, 0, 8, 1000, 216], 5)\", \"8\"], [\"([8, 8, 216, 8, 512, 8, 0, 8, 1000, 216], 6)\", \"8\"], [\"([8, 8, 216, 8, 512, 8, 0, 8, 1000, 216], 7)\", \"1008\"], [\"([8, 8, 216, 8, 512, 8, 0, 8, 1000, 216], 8)\", \"1216\"], [\"([8, 8, 216, 8, 512, 8, 0, 8, 1000, 216], 9)\", \"None\"], [\"([8, 8, 216, 8, 512, 8, 0, 8, 1000, 216], 10)\", \"None\"], [\"([8, 8, 216, 8, 512, 8, 0, 8, 1000, 216], 11)\", \"None\"], [\"([8, 8, 216, 8, 512, 8, 0, 8, 1000, 216], 12)\", \"None\"], [\"([8, 8, 216, 8, 512, 8, 0, 8, 1000, 216], 13)\", \"None\"], [\"([8, 8, 216, 8, 512, 8, 0, 8, 1000, 216], 14)\", \"None\"], [\"([1, 125, 8, 27, 8, 1, 512, 1331, 64, 729], 0)\", \"126\"], [\"([1, 125, 8, 27, 8, 1, 512, 1331, 64, 729], 1)\", \"133\"], [\"([1, 125, 8, 27, 8, 1, 512, 1331, 64, 729], 2)\", \"35\"], [\"([1, 125, 8, 27, 8, 1, 512, 1331, 64, 729], 3)\", \"35\"], [\"([1, 125, 8, 27, 8, 1, 512, 1331, 64, 729], 4)\", \"9\"], [\"([1, 125, 8, 27, 8, 1, 512, 1331, 64, 729], 5)\", \"513\"], [\"([1, 125, 8, 27, 8, 1, 512, 1331, 64, 729], 6)\", \"1843\"], [\"([1, 125, 8, 27, 8, 1, 512, 1331, 64, 729], 7)\", \"1395\"], [\"([1, 125, 8, 27, 8, 1, 512, 1331, 64, 729], 8)\", \"793\"], [\"([1, 125, 8, 27, 8, 1, 512, 1331, 64, 729], 9)\", \"None\"], [\"([1, 125, 8, 27, 8, 1, 512, 1331, 64, 729], 10)\", \"None\"], [\"([1, 125, 8, 27, 8, 1, 512, 1331, 64, 729], 11)\", \"None\"], [\"([1, 125, 8, 27, 8, 1, 512, 1331, 64, 729], 12)\", \"None\"], [\"([1, 125, 8, 27, 8, 1, 512, 1331, 64, 729], 13)\", \"None\"], [\"([1, 125, 8, 27, 8, 1, 512, 1331, 64, 729], 14)\", \"None\"], [\"([27, 0, 0, 0, 0, 512, 27, 0, 1, 0], 0)\", \"27\"], [\"([27, 0, 0, 0, 0, 512, 27, 0, 1, 0], 1)\", \"0\"], [\"([27, 0, 0, 0, 0, 512, 27, 0, 1, 0], 2)\", \"0\"], [\"([27, 0, 0, 0, 0, 512, 27, 0, 1, 0], 3)\", \"0\"], [\"([27, 0, 0, 0, 0, 512, 27, 0, 1, 0], 4)\", \"512\"], [\"([27, 0, 0, 0, 0, 512, 27, 0, 1, 0], 5)\", \"539\"], [\"([27, 0, 0, 0, 0, 512, 27, 0, 1, 0], 6)\", \"27\"], [\"([27, 0, 0, 0, 0, 512, 27, 0, 1, 0], 7)\", \"1\"], [\"([27, 0, 0, 0, 0, 512, 27, 0, 1, 0], 8)\", \"1\"], [\"([27, 0, 0, 0, 0, 512, 27, 0, 1, 0], 9)\", \"None\"], [\"([27, 0, 0, 0, 0, 512, 27, 0, 1, 0], 10)\", \"None\"], [\"([27, 0, 0, 0, 0, 512, 27, 0, 1, 0], 11)\", \"None\"], [\"([27, 0, 0, 0, 0, 512, 27, 0, 1, 0], 12)\", \"None\"], [\"([27, 0, 0, 0, 0, 512, 27, 0, 1, 0], 13)\", \"None\"], [\"([27, 0, 0, 0, 0, 512, 27, 0, 1, 0], 14)\", \"None\"], [\"([64, 27, 125, 1, 0, 729, 1000, 729, 125, 125], 0)\", \"91\"], [\"([64, 27, 125, 1, 0, 729, 1000, 729, 125, 125], 1)\", \"152\"], [\"([64, 27, 125, 1, 0, 729, 1000, 729, 125, 125], 2)\", \"126\"], [\"([64, 27, 125, 1, 0, 729, 1000, 729, 125, 125], 3)\", \"1\"], [\"([64, 27, 125, 1, 0, 729, 1000, 729, 125, 125], 4)\", \"729\"], [\"([64, 27, 125, 1, 0, 729, 1000, 729, 125, 125], 5)\", \"1729\"], [\"([64, 27, 125, 1, 0, 729, 1000, 729, 125, 125], 6)\", \"1729\"], [\"([64, 27, 125, 1, 0, 729, 1000, 729, 125, 125], 7)\", \"854\"], [\"([64, 27, 125, 1, 0, 729, 1000, 729, 125, 125], 8)\", \"250\"], [\"([64, 27, 125, 1, 0, 729, 1000, 729, 125, 125], 9)\", \"None\"], [\"([64, 27, 125, 1, 0, 729, 1000, 729, 125, 125], 10)\", \"None\"], [\"([64, 27, 125, 1, 0, 729, 1000, 729, 125, 125], 11)\", \"None\"], [\"([64, 27, 125, 1, 0, 729, 1000, 729, 125, 125], 12)\", \"None\"], [\"([64, 27, 125, 1, 0, 729, 1000, 729, 125, 125], 13)\", \"None\"], [\"([64, 27, 125, 1, 0, 729, 1000, 729, 125, 125], 14)\", \"None\"], [\"([64, 64, 27, 216, 343, 64, 216, 1000, 1, 1000], 0)\", \"128\"], [\"([64, 64, 27, 216, 343, 64, 216, 1000, 1, 1000], 1)\", \"91\"], [\"([64, 64, 27, 216, 343, 64, 216, 1000, 1, 1000], 2)\", \"243\"], [\"([64, 64, 27, 216, 343, 64, 216, 1000, 1, 1000], 3)\", \"559\"], [\"([64, 64, 27, 216, 343, 64, 216, 1000, 1, 1000], 4)\", \"407\"], [\"([64, 64, 27, 216, 343, 64, 216, 1000, 1, 1000], 5)\", \"280\"], [\"([64, 64, 27, 216, 343, 64, 216, 1000, 1, 1000], 6)\", \"1216\"], [\"([64, 64, 27, 216, 343, 64, 216, 1000, 1, 1000], 7)\", \"1001\"], [\"([64, 64, 27, 216, 343, 64, 216, 1000, 1, 1000], 8)\", \"1001\"], [\"([64, 64, 27, 216, 343, 64, 216, 1000, 1, 1000], 9)\", \"None\"], [\"([64, 64, 27, 216, 343, 64, 216, 1000, 1, 1000], 10)\", \"None\"], [\"([64, 64, 27, 216, 343, 64, 216, 1000, 1, 1000], 11)\", \"None\"], [\"([64, 64, 27, 216, 343, 64, 216, 1000, 1, 1000], 12)\", \"None\"], [\"([64, 64, 27, 216, 343, 64, 216, 1000, 1, 1000], 13)\", \"None\"], [\"([64, 64, 27, 216, 343, 64, 216, 1000, 1, 1000], 14)\", \"None\"], [\"([64, 27, 8, 343, 27, 729, 343, 27, 216, 729], 0)\", \"91\"], [\"([64, 27, 8, 343, 27, 729, 343, 27, 216, 729], 1)\", \"35\"], [\"([64, 27, 8, 343, 27, 729, 343, 27, 216, 729], 2)\", \"351\"], [\"([64, 27, 8, 343, 27, 729, 343, 27, 216, 729], 3)\", \"370\"], [\"([64, 27, 8, 343, 27, 729, 343, 27, 216, 729], 4)\", \"756\"], [\"([64, 27, 8, 343, 27, 729, 343, 27, 216, 729], 5)\", \"1072\"], [\"([64, 27, 8, 343, 27, 729, 343, 27, 216, 729], 6)\", \"370\"], [\"([64, 27, 8, 343, 27, 729, 343, 27, 216, 729], 7)\", \"243\"], [\"([64, 27, 8, 343, 27, 729, 343, 27, 216, 729], 8)\", \"945\"], [\"([64, 27, 8, 343, 27, 729, 343, 27, 216, 729], 9)\", \"None\"], [\"([64, 27, 8, 343, 27, 729, 343, 27, 216, 729], 10)\", \"None\"], [\"([64, 27, 8, 343, 27, 729, 343, 27, 216, 729], 11)\", \"None\"], [\"([64, 27, 8, 343, 27, 729, 343, 27, 216, 729], 12)\", \"None\"], [\"([64, 27, 8, 343, 27, 729, 343, 27, 216, 729], 13)\", \"None\"], [\"([64, 27, 8, 343, 27, 729, 343, 27, 216, 729], 14)\", \"None\"], [\"([8, 8, 125, 64, 125, 8, 27, 512, 512, 1728], 0)\", \"16\"], [\"([8, 8, 125, 64, 125, 8, 27, 512, 512, 1728], 1)\", \"133\"], [\"([8, 8, 125, 64, 125, 8, 27, 512, 512, 1728], 2)\", \"189\"], [\"([8, 8, 125, 64, 125, 8, 27, 512, 512, 1728], 3)\", \"189\"], [\"([8, 8, 125, 64, 125, 8, 27, 512, 512, 1728], 4)\", \"133\"], [\"([8, 8, 125, 64, 125, 8, 27, 512, 512, 1728], 5)\", \"35\"], [\"([8, 8, 125, 64, 125, 8, 27, 512, 512, 1728], 6)\", \"539\"], [\"([8, 8, 125, 64, 125, 8, 27, 512, 512, 1728], 7)\", \"1024\"], [\"([8, 8, 125, 64, 125, 8, 27, 512, 512, 1728], 8)\", \"2240\"], [\"([8, 8, 125, 64, 125, 8, 27, 512, 512, 1728], 9)\", \"None\"], [\"([8, 8, 125, 64, 125, 8, 27, 512, 512, 1728], 10)\", \"None\"], [\"([8, 8, 125, 64, 125, 8, 27, 512, 512, 1728], 11)\", \"None\"], [\"([8, 8, 125, 64, 125, 8, 27, 512, 512, 1728], 12)\", \"None\"], [\"([8, 8, 125, 64, 125, 8, 27, 512, 512, 1728], 13)\", \"None\"], [\"([8, 8, 125, 64, 125, 8, 27, 512, 512, 1728], 14)\", \"None\"], [\"([1, 1, 64, 125, 343, 1, 64, 1, 1331, 1331], 0)\", \"2\"], [\"([1, 1, 64, 125, 343, 1, 64, 1, 1331, 1331], 1)\", \"65\"], [\"([1, 1, 64, 125, 343, 1, 64, 1, 1331, 1331], 2)\", \"189\"], [\"([1, 1, 64, 125, 343, 1, 64, 1, 1331, 1331], 3)\", \"468\"], [\"([1, 1, 64, 125, 343, 1, 64, 1, 1331, 1331], 4)\", \"344\"], [\"([1, 1, 64, 125, 343, 1, 64, 1, 1331, 1331], 5)\", \"65\"], [\"([1, 1, 64, 125, 343, 1, 64, 1, 1331, 1331], 6)\", \"65\"], [\"([1, 1, 64, 125, 343, 1, 64, 1, 1331, 1331], 7)\", \"1332\"], [\"([1, 1, 64, 125, 343, 1, 64, 1, 1331, 1331], 8)\", \"2662\"], [\"([1, 1, 64, 125, 343, 1, 64, 1, 1331, 1331], 9)\", \"None\"], [\"([1, 1, 64, 125, 343, 1, 64, 1, 1331, 1331], 10)\", \"None\"], [\"([1, 1, 64, 125, 343, 1, 64, 1, 1331, 1331], 11)\", \"None\"], [\"([1, 1, 64, 125, 343, 1, 64, 1, 1331, 1331], 12)\", \"None\"], [\"([1, 1, 64, 125, 343, 1, 64, 1, 1331, 1331], 13)\", \"None\"], [\"([1, 1, 64, 125, 343, 1, 64, 1, 1331, 1331], 14)\", \"None\"]]", 
      "solution": "def vsotaSosedov(sez, i):\n    if 0 <= i < len(sez) - 1:\n        return sez[i] + sez[i + 1]", 
      "problem": 252, 
      "validation": "Check.equal(\"\"\"vsotaSosedov([1, 3, 3, 1], 0)\"\"\", 4)\nCheck.equal(\"\"\"vsotaSosedov([1, 3, 3, 1], 1)\"\"\", 6)\nCheck.equal(\"\"\"vsotaSosedov([1, 2, 1], 0)\"\"\", 3)\nCheck.equal(\"\"\"vsotaSosedov([], 0)\"\"\", None)\n\n_rng=[1287631]\nfor i in range(50): _rng.append((_rng[-1]*1103515245+12345)%2**32)\nfor i in _rng:\n    sez = []\n    for j in range(10):\n        sez.append((i % (j + 5)) ** 3)\n    for k in range(15):\n        Check.challenge(vsotaSosedov(sez, k), (sez, k))"
    }
  }, 
  {
    "pk": 815, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `redka_v_tabelo(r)`, ki sprejme predstavitev redke\ntabele in jo pretvori v obi\u010dajno predstavitev s tabelo tabel.", 
      "timestamp": "2012-10-01 12:38:42", 
      "challenge": "[[\"None\", \"[[0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [9, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\"]]", 
      "solution": "def redka_v_tabelo(dmn):\n    (d,m,n) = dmn\n    a = [[0 for i in range(n)] for j in range(m)]\n    for ((i,j),x) in d.items():\n        a[i][j] = x\n    return a", 
      "problem": 256, 
      "validation": "Check.equal(\"redka_v_tabelo(({(0,0) : 1, (0,4) : 2, (1,1) : 4, (1,4): 3, (3,5) : 5 }, 4, 6))\",\n            [[1, 0, 0, 0, 2, 0],\n             [0, 4, 0, 0, 3, 0],\n             [0, 0, 0, 0, 0, 0],\n             [0, 0, 0, 0, 0, 5]])\n\nCheck.equal(\"redka_v_tabelo(({(0,0): 0}, 1, 10))\", [[0] * 10])\n\nCheck.challenge(redka_v_tabelo(({(i,j) : i+j for i in range(0,10,3) for j in range(0,20,7)}, 42, 23)))"
    }
  }, 
  {
    "pk": 844, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `uredi_po_y(t)`, ki vrne tabelo `a`, v kateri so na\u0161teti\r\nindeksi to\u010dk iz tabele `t` glede na koordinato $y$ v nara\u0161\u010dajo\u010de redu. Se\r\npravi, `t[a[i]]` je `i`-ta to\u010dka v `t` glede na velikost koordinate $y$.\r\n\r\nNamig: uporabite funkcijo `sorted`, ki ji podate `enumerate(t)` in ustrezno\r\nvrednost parametra `key`, se pravi, tako funkcijo, ki iz para `(i,(x,y))`\r\nizlu\u0161\u010di `y`.", 
      "timestamp": "2012-11-05 13:40:58", 
      "challenge": "[[\"None\", \"[0, 56, 100, 156, 200, 256, 300, 356, 400, 456, 500, 556, 600, 656, 700, 756, 800, 856, 900, 956, 19, 87, 119, 187, 219, 287, 319, 387, 419, 487, 519, 587, 619, 687, 719, 787, 819, 887, 919, 987, 13, 33, 53, 73, 93, 113, 133, 153, 173, 193, 213, 233, 253, 273, 293, 313, 333, 353, 373, 393, 413, 433, 453, 473, 493, 513, 533, 553, 573, 593, 613, 633, 653, 673, 693, 713, 733, 753, 773, 793, 813, 833, 853, 873, 893, 913, 933, 953, 973, 993, 15, 91, 115, 191, 215, 291, 315, 391, 415, 491, 515, 591, 615, 691, 715, 791, 815, 891, 915, 991, 74, 82, 174, 182, 274, 282, 374, 382, 474, 482, 574, 582, 674, 682, 774, 782, 874, 882, 974, 982, 26, 30, 126, 130, 226, 230, 326, 330, 426, 430, 526, 530, 626, 630, 726, 730, 826, 830, 926, 930, 29, 77, 129, 177, 229, 277, 329, 377, 429, 477, 529, 577, 629, 677, 729, 777, 829, 877, 929, 977, 45, 61, 145, 161, 245, 261, 345, 361, 445, 461, 545, 561, 645, 661, 745, 761, 845, 861, 945, 961, 72, 84, 172, 184, 272, 284, 372, 384, 472, 484, 572, 584, 672, 684, 772, 784, 872, 884, 972, 984, 60, 96, 160, 196, 260, 296, 360, 396, 460, 496, 560, 596, 660, 696, 760, 796, 860, 896, 960, 996, 39, 67, 139, 167, 239, 267, 339, 367, 439, 467, 539, 567, 639, 667, 739, 767, 839, 867, 939, 967, 31, 75, 131, 175, 231, 275, 331, 375, 431, 475, 531, 575, 631, 675, 731, 775, 831, 875, 931, 975, 62, 94, 162, 194, 262, 294, 362, 394, 462, 494, 562, 594, 662, 694, 762, 794, 862, 894, 962, 994, 8, 28, 48, 68, 88, 108, 128, 148, 168, 188, 208, 228, 248, 268, 288, 308, 328, 348, 368, 388, 408, 428, 448, 468, 488, 508, 528, 548, 568, 588, 608, 628, 648, 668, 688, 708, 728, 748, 768, 788, 808, 828, 848, 868, 888, 908, 928, 948, 968, 988, 66, 90, 166, 190, 266, 290, 366, 390, 466, 490, 566, 590, 666, 690, 766, 790, 866, 890, 966, 990, 49, 57, 149, 157, 249, 257, 349, 357, 449, 457, 549, 557, 649, 657, 749, 757, 849, 857, 949, 957, 1, 5, 101, 105, 201, 205, 301, 305, 401, 405, 501, 505, 601, 605, 701, 705, 801, 805, 901, 905, 4, 52, 104, 152, 204, 252, 304, 352, 404, 452, 504, 552, 604, 652, 704, 752, 804, 852, 904, 952, 20, 36, 120, 136, 220, 236, 320, 336, 420, 436, 520, 536, 620, 636, 720, 736, 820, 836, 920, 936, 47, 59, 147, 159, 247, 259, 347, 359, 447, 459, 547, 559, 647, 659, 747, 759, 847, 859, 947, 959, 35, 71, 135, 171, 235, 271, 335, 371, 435, 471, 535, 571, 635, 671, 735, 771, 835, 871, 935, 971, 14, 42, 114, 142, 214, 242, 314, 342, 414, 442, 514, 542, 614, 642, 714, 742, 814, 842, 914, 942, 6, 50, 106, 150, 206, 250, 306, 350, 406, 450, 506, 550, 606, 650, 706, 750, 806, 850, 906, 950, 37, 69, 137, 169, 237, 269, 337, 369, 437, 469, 537, 569, 637, 669, 737, 769, 837, 869, 937, 969, 3, 23, 43, 63, 83, 103, 123, 143, 163, 183, 203, 223, 243, 263, 283, 303, 323, 343, 363, 383, 403, 423, 443, 463, 483, 503, 523, 543, 563, 583, 603, 623, 643, 663, 683, 703, 723, 743, 763, 783, 803, 823, 843, 863, 883, 903, 923, 943, 963, 983, 41, 65, 141, 165, 241, 265, 341, 365, 441, 465, 541, 565, 641, 665, 741, 765, 841, 865, 941, 965, 24, 32, 124, 132, 224, 232, 324, 332, 424, 432, 524, 532, 624, 632, 724, 732, 824, 832, 924, 932, 76, 80, 176, 180, 276, 280, 376, 380, 476, 480, 576, 580, 676, 680, 776, 780, 876, 880, 976, 980, 27, 79, 127, 179, 227, 279, 327, 379, 427, 479, 527, 579, 627, 679, 727, 779, 827, 879, 927, 979, 11, 95, 111, 195, 211, 295, 311, 395, 411, 495, 511, 595, 611, 695, 711, 795, 811, 895, 911, 995, 22, 34, 122, 134, 222, 234, 322, 334, 422, 434, 522, 534, 622, 634, 722, 734, 822, 834, 922, 934, 10, 46, 110, 146, 210, 246, 310, 346, 410, 446, 510, 546, 610, 646, 710, 746, 810, 846, 910, 946, 17, 89, 117, 189, 217, 289, 317, 389, 417, 489, 517, 589, 617, 689, 717, 789, 817, 889, 917, 989, 25, 81, 125, 181, 225, 281, 325, 381, 425, 481, 525, 581, 625, 681, 725, 781, 825, 881, 925, 981, 12, 44, 112, 144, 212, 244, 312, 344, 412, 444, 512, 544, 612, 644, 712, 744, 812, 844, 912, 944, 18, 38, 58, 78, 98, 118, 138, 158, 178, 198, 218, 238, 258, 278, 298, 318, 338, 358, 378, 398, 418, 438, 458, 478, 498, 518, 538, 558, 578, 598, 618, 638, 658, 678, 698, 718, 738, 758, 778, 798, 818, 838, 858, 878, 898, 918, 938, 958, 978, 998, 16, 40, 116, 140, 216, 240, 316, 340, 416, 440, 516, 540, 616, 640, 716, 740, 816, 840, 916, 940, 7, 99, 107, 199, 207, 299, 307, 399, 407, 499, 507, 599, 607, 699, 707, 799, 807, 899, 907, 999, 51, 55, 151, 155, 251, 255, 351, 355, 451, 455, 551, 555, 651, 655, 751, 755, 851, 855, 951, 955, 2, 54, 102, 154, 202, 254, 302, 354, 402, 454, 502, 554, 602, 654, 702, 754, 802, 854, 902, 954, 70, 86, 170, 186, 270, 286, 370, 386, 470, 486, 570, 586, 670, 686, 770, 786, 870, 886, 970, 986, 9, 97, 109, 197, 209, 297, 309, 397, 409, 497, 509, 597, 609, 697, 709, 797, 809, 897, 909, 997, 21, 85, 121, 185, 221, 285, 321, 385, 421, 485, 521, 585, 621, 685, 721, 785, 821, 885, 921, 985, 64, 92, 164, 192, 264, 292, 364, 392, 464, 492, 564, 592, 664, 692, 764, 792, 864, 892, 964, 992]\"]]", 
      "solution": "def uredi_po_y(t):\r\n    return [i for (i,u) in sorted(enumerate(t), key = lambda p: p[1][1])]", 
      "problem": 278, 
      "validation": "Check.equal(\"\"\"uredi_po_y([(2,3), (1,5), (10,7), (11,6)])\"\"\", [0, 1, 3, 2])\r\n\r\nCheck.challenge(uredi_po_y([((30*i - 5*i*i)%120, (27*i + 8*i*i)%100) for i in range(1000)]))"
    }
  }, 
  {
    "pk": 245, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Definirajte konstruktor `__init__(st, im)`.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "class Ulomek:\n    def __init__(self, st, im):\n        if im < 0:\n            st, im = -st, -im\n        d = gcd(st, im)\n        self.st = st // d\n        self.im = im // d\n\n    def __repr__(self):\n        return \"{0}/{1}\".format(self.st, self.im)\n\n    def __eq__(self, other):\n        return self.st == other.st and self.im == other.im\n\n    def __add__(self, other):\n        a, b = self.st, self.im\n        c, d = other.st, other.im\n        return Ulomek(a * d + b * c, b * d)\n\n    def __sub__(self, other):\n        a, b = self.st, self.im\n        c, d = other.st, other.im\n        return Ulomek(a * d - b * c, b * d)\n\n    def __mul__(self, other):\n        a, b = self.st, self.im\n        c, d = other.st, other.im\n        return Ulomek(a * c, b * d)\n\n    def __truediv__(self, other):\n        a, b = self.st, self.im\n        c, d = other.st, other.im\n        return Ulomek(a * d, b * c)", 
      "problem": 73, 
      "validation": "Check.equal('Ulomek(20, 6).st', 10)\nCheck.equal('Ulomek(20, 6).im', 3)\nCheck.equal('Ulomek(40, -60).im', 3)\nCheck.equal('Ulomek(40, -60).st', -2)"
    }
  }, 
  {
    "pk": 513, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Podnaloga (b)", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "class Permutacija(Permutacija):\n\n    def __call__(self, m):\n        if m == 0:\n            return 2\n        if m == 1:\n            return 1\n        if m == 2:\n            return 0", 
      "problem": 166, 
      "validation": "Check.equal(\"\"\"Permutacija([2,1,0])(0)\"\"\", 2)\nCheck.equal(\"\"\"Permutacija([2,1,0])(1)\"\"\", 1)\nCheck.equal(\"\"\"Permutacija([2,1,0])(2)\"\"\", 0)"
    }
  }, 
  {
    "pk": 524, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `naloga1b(a, b)`, kot je zapisano v navodilih.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "def naloga1b(sez, povprecja):\n    k = len(sez) + 1\n    skoraj_povprecje = sum(sez)\n    for i, povprecje in enumerate(povprecja):\n        naslednji = k * povprecje - skoraj_povprecje\n        skoraj_povprecje += naslednji - sez[i]\n        sez.append(naslednji)\n    return sez", 
      "problem": 170, 
      "validation": "Check.equal(\"naloga1b([1.0], [1.5, 2.5, 3.5, 4.5, 5.5])\", [1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\nCheck.equal(\"naloga1b([1.0, 2.0, 3.0, 4.0, 5.0], [3.5])\", [1.0, 2.0, 3.0, 4.0, 5.0, 6.0])"
    }
  }, 
  {
    "pk": 907, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `tangenta(x)`, ki poi\u0161\u010de tangento na graf polinoma\n$p(x)$ v to\u010dki $(x, p(x))$ in vrne par `(k, n)`, kjer je ena\u010dba tangente\n$y = k x + n$. Pri tem si pomagajte s prej\u0161njo funkcijo.", 
      "timestamp": "2013-01-18 13:22:52", 
      "challenge": "[[\"None\", \"(1035871, 16318802)\"], [\"None\", \"(854364, 12777236)\"], [\"None\", \"(697779, 9878438)\"], [\"None\", \"(563728, 7530764)\"], [\"None\", \"(449943, 5651714)\"], [\"None\", \"(354276, 4167452)\"], [\"None\", \"(274699, 3012326)\"], [\"None\", \"(209304, 2128388)\"], [\"None\", \"(156303, 1464914)\"], [\"None\", \"(114028, 977924)\"], [\"None\", \"(80931, 629702)\"], [\"None\", \"(55584, 388316)\"], [\"None\", \"(36679, 227138)\"], [\"None\", \"(23028, 124364)\"], [\"None\", \"(13563, 62534)\"], [\"None\", \"(7336, 28052)\"], [\"None\", \"(3519, 10706)\"], [\"None\", \"(1404, 3188)\"], [\"None\", \"(403, 614)\"], [\"None\", \"(48, 44)\"], [\"None\", \"(-9, 2)\"], [\"None\", \"(4, -4)\"], [\"None\", \"(-21, 38)\"], [\"None\", \"(-72, 164)\"], [\"None\", \"(-17, -46)\"], [\"None\", \"(396, -1948)\"], [\"None\", \"(1539, -8314)\"], [\"None\", \"(3904, -23812)\"], [\"None\", \"(8103, -55486)\"], [\"None\", \"(14868, -113236)\"], [\"None\", \"(25051, -210298)\"], [\"None\", \"(39624, -363724)\"], [\"None\", \"(59679, -594862)\"], [\"None\", \"(86428, -929836)\"], [\"None\", \"(121203, -1400026)\"], [\"None\", \"(165456, -2042548)\"], [\"None\", \"(220759, -2900734)\"], [\"None\", \"(288804, -4024612)\"], [\"None\", \"(371403, -5471386)\"], [\"None\", \"(470488, -7305916)\"]]", 
      "solution": "def tangenta(x):\n    (y, odvod) = polinom(x)\n    return (odvod, y - odvod * x)", 
      "problem": 306, 
      "validation": "Check.equal(\"tangenta(0)\", (-9, 2))\nCheck.equal(\"tangenta(1)\", (4, -4))\nCheck.equal(\"tangenta(-1)\", (48, 44))\nCheck.equal(\"tangenta(0.6)\", (0, -0.989439999))\n\nfor x in range(-20, 20):\n    Check.challenge(tangenta(x))"
    }
  }, 
  {
    "pk": 119, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `inverzni_slovar(d)`, ki sprejme slovar `d` in vrne\ninverzni slovar. To je slovar, ki slika vsako vrednost `v` iz `d` v mno\u017eico\ntistih klju\u010dev `k`, za katere je `d[k] == v`.", 
      "timestamp": "2012-11-05 17:03:08", 
      "challenge": "[[\"None\", \"[(0, [1, 19, 37, 55, 73, 91]), (1, [8, 26, 44, 62, 80, 98]), (2, [15, 33, 51, 69, 87]), (3, [4, 22, 40, 58, 76, 94]), (4, [11, 29, 47, 65, 83]), (5, [0, 18, 36, 54, 72, 90]), (6, [7, 25, 43, 61, 79, 97]), (7, [14, 32, 50, 68, 86]), (8, [3, 21, 39, 57, 75, 93]), (9, [10, 28, 46, 64, 82]), (10, [17, 35, 53, 71, 89]), (11, [6, 24, 42, 60, 78, 96]), (12, [13, 31, 49, 67, 85]), (13, [2, 20, 38, 56, 74, 92]), (14, [9, 27, 45, 63, 81, 99]), (15, [16, 34, 52, 70, 88]), (16, [5, 23, 41, 59, 77, 95]), (17, [12, 30, 48, 66, 84])]\"]]", 
      "solution": "def inverzni_slovar(d):\n    e = {}\n    for (k,v) in d.items():\n        if v not in e: e[v] = set()\n        e[v].add(k)\n    return e", 
      "problem": 43, 
      "validation": "Check.equal(\"inverzni_slovar({'a': 1, 'b': 1, 'c' : 2, 'd' : 3})\",\n            {1 : {'a', 'b'}, 2 : {'c'}, 3 : {'d'}})\n\nCheck.equal(\"inverzni_slovar({})\", {})\n\nCheck.challenge(sorted([(k,sorted(list(v))) for (k,v) in\n                        inverzni_slovar({i : ((13 * i + 5) % 18) for i in range(100)}).items()]))"
    }
  }, 
  {
    "pk": 265, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Dodajte metodo `steviloListov(self)`, ki vrne \u0161tevilo listov v drevesu.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"None\", \"1\"], [\"None\", \"1\"], [\"None\", \"2\"], [\"None\", \"3\"], [\"None\", \"5\"], [\"None\", \"8\"], [\"None\", \"13\"], [\"None\", \"21\"], [\"None\", \"34\"], [\"None\", \"55\"], [\"None\", \"89\"], [\"None\", \"144\"], [\"None\", \"233\"], [\"None\", \"377\"], [\"None\", \"610\"], [\"None\", \"987\"], [\"None\", \"1597\"], [\"None\", \"2584\"], [\"None\", \"4181\"]]", 
      "solution": "class Drevo(Drevo):\n    def steviloListov(self):\n        if self.prazno:\n            return 0\n        elif self.levo.prazno and self.desno.prazno:\n            return 1\n        else:\n            return self.levo.steviloListov() + self.desno.steviloListov()", 
      "problem": 79, 
      "validation": "Check.equal('Drevo().steviloListov()', 0)\nCheck.equal('Drevo(3).steviloListov()', 1)\nCheck.equal('Drevo(5, levo=Drevo(4, desno=Drevo(2)), desno=Drevo(3, levo=Drevo(4), desno=Drevo(4))).steviloListov()', 3)\n_drevesa = [Drevo(), Drevo()]\nfor i in range(1, 20):\n    _drevesa.append(Drevo(i, levo=_drevesa[-1], desno=_drevesa[-2]))\n    Check.challenge(_drevesa[-1].steviloListov())"
    }
  }, 
  {
    "pk": 6, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `polarnaRazdalja(r1, fi1, r2, fi2)`, ki vrne\nrazdaljo med to\u010dkama (`r1`, `fi1`) in (`r2`, `fi2`) v ravnini, pri\n\u010demer so koordinate v polarnem zapisu, koti pa so izra\u017eeni v stopinjah.\n\n    >>> polarnaRazdalja(1, 30, 4, 90)\n    3.60555127546", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"None\", \"50.0\"], [\"None\", \"50.0\"], [\"None\", \"49.9999\"], [\"None\", \"49.99931\"], [\"None\", \"49.997758\"], [\"None\", \"49.994765\"], [\"None\", \"49.989864\"], [\"None\", \"49.982621\"], [\"None\", \"49.972637\"], [\"None\", \"49.959555\"], [\"None\", \"49.943066\"], [\"None\", \"49.92291\"], [\"None\", \"49.898876\"], [\"None\", \"37.0\"], [\"None\", \"36.984444\"], [\"None\", \"36.964419\"], [\"None\", \"36.939709\"], [\"None\", \"36.990766\"], [\"None\", \"36.993076\"], [\"None\", \"36.99574\"], [\"None\", \"36.998127\"], [\"None\", \"36.999676\"], [\"None\", \"36.999901\"], [\"None\", \"36.998388\"], [\"None\", \"36.994803\"], [\"None\", \"36.988886\"], [\"None\", \"24.0\"], [\"None\", \"23.996633\"], [\"None\", \"23.990906\"], [\"None\", \"23.982519\"], [\"None\", \"23.971292\"], [\"None\", \"23.957172\"], [\"None\", \"23.940227\"], [\"None\", \"23.920654\"], [\"None\", \"23.972389\"], [\"None\", \"23.979298\"], [\"None\", \"23.985786\"], [\"None\", \"23.991376\"], [\"None\", \"23.995719\"], [\"None\", \"11.0\"], [\"None\", \"10.999985\"], [\"None\", \"10.999911\"], [\"None\", \"10.999233\"], [\"None\", \"10.997687\"], [\"None\", \"10.995292\"], [\"None\", \"10.99235\"], [\"None\", \"10.989448\"], [\"None\", \"10.987459\"], [\"None\", \"10.987545\"], [\"None\", \"10.991149\"], [\"None\", \"11.0\"], [\"None\", \"11.00846\"], [\"None\", \"2.0\"], [\"None\", \"2.006355\"], [\"None\", \"2.011482\"], [\"None\", \"2.013283\"], [\"None\", \"2.011238\"], [\"None\", \"2.006392\"], [\"None\", \"2.001386\"], [\"None\", \"2.000488\"], [\"None\", \"2.009558\"], [\"None\", \"2.035826\"], [\"None\", \"2.08737\"], [\"None\", \"2.172257\"], [\"None\", \"2.297516\"], [\"None\", \"15.0\"], [\"None\", \"15.00767\"], [\"None\", \"15.021036\"], [\"None\", \"15.037175\"], [\"None\", \"15.041086\"], [\"None\", \"15.041059\"], [\"None\", \"15.037594\"], [\"None\", \"15.031409\"], [\"None\", \"15.02344\"], [\"None\", \"15.014843\"], [\"None\", \"15.006995\"], [\"None\", \"15.001496\"], [\"None\", \"15.000167\"], [\"None\", \"28.0\"], [\"None\", \"28.000703\"], [\"None\", \"28.003047\"], [\"None\", \"28.00809\"], [\"None\", \"28.017007\"], [\"None\", \"28.031088\"], [\"None\", \"28.05173\"], [\"None\", \"28.112808\"], [\"None\", \"28.106848\"], [\"None\", \"28.096954\"], [\"None\", \"28.083947\"], [\"None\", \"28.06877\"], [\"None\", \"28.052488\"], [\"None\", \"41.0\"], [\"None\", \"41.001048\"], [\"None\", \"41.000863\"], [\"None\", \"41.000237\"], [\"None\", \"41.000043\"], [\"None\", \"41.001234\"], [\"None\", \"41.004847\"], [\"None\", \"41.011994\"], [\"None\", \"41.02387\"]]", 
      "solution": "import math\ndef polarnaRazdalja(r1, fi1, r2, fi2):\n    fi1 = math.radians(fi1)\n    fi2 = math.radians(fi2)\n    return ravninskaRazdalja(r1 * math.cos(fi1), r1 * math.sin(fi1),\n                             r2 * math.cos(fi2), r2 * math.sin(fi2))", 
      "problem": 4, 
      "validation": "Check.equal('polarnaRazdalja(1, 30, 4, 90)', 13 ** (1 / 2))\nCheck.equal('polarnaRazdalja(1, 0, 1, 90)', 2 ** (1 / 2))\nfor i in range(100):\n    Check.challenge(polarnaRazdalja(i - 50, i % 17, i % 13, i ** (1 / 2)))"
    }
  }, 
  {
    "pk": 850, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Napi\u0161ite funkcijo `stevilo.prastevil(n)`, ki u\u010dinkovito pre\u0161teje \u0161tevilo\npra\u0161tevil, manj\u0161ih ali enakih `1, 2, 3, ..., n`.", 
      "timestamp": "2012-11-14 09:09:32", 
      "challenge": "[]", 
      "solution": "stevilo.prastevil <- function(n){\n  cumsum(sapply(1 : n, prastevilo))\n}", 
      "problem": 276, 
      "validation": "check$equal(stevilo.prastevil(3), c(0, 1, 2))\ncheck$equal(stevilo.prastevil(10), c(0, 1, 2, 2, 3, 3, 4, 4, 4, 4))\ncheck$equal(stevilo.prastevil(12), c(0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5))"
    }
  }, 
  {
    "pk": 128, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "V spremenljivko `barve` shranite matriko, v katerem je za vsako barvo\nlas in o\u010di zapisano \u0161tevilo ljudi s tema dvema barvama las in o\u010di.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"NA\", \"68, 119, 26, 7, 20, 84, 17, 94, 15, 54, 14, 10, 5, 29, 14, 16\"]]", 
      "solution": "barve <- apply(HairEyeColor, c(1, 2), sum)", 
      "problem": 46, 
      "validation": "check$equal(barve[\"Brown\", \"Hazel\"], 54)\ncheck$equal(barve[\"Red\", \"Green\"], 14)\ncheck$equal(barve[\"Blond\", \"Blue\"], 94)\ncheck$challenge(toString(barve))"
    }
  }, 
  {
    "pk": 35, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `slike(permutacija, x, n)`, vrne pa seznam slik\n\u0161tevila `x`, \u010de uporabimo permutacijo `n`-krat.\n\n    >>> slike([3, 4, 2, 1], 1, 3)\n    [3, 2, 4]", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"None\", \"[97, 3, 97, 3, 97]\"], [\"None\", \"[96, 4, 96, 4, 96, 4]\"], [\"None\", \"[95, 5]\"], [\"None\", \"[94, 6, 94]\"], [\"None\", \"[93, 7, 93, 7]\"], [\"None\", \"[92, 8, 92, 8, 92]\"], [\"None\", \"[91, 9, 91, 9, 91, 9]\"], [\"None\", \"[90, 10]\"], [\"None\", \"[89, 11, 89]\"], [\"None\", \"[88, 12, 88, 12]\"], [\"None\", \"[87, 13, 87, 13, 87]\"], [\"None\", \"[86, 14, 86, 14, 86, 14]\"], [\"None\", \"[85, 15]\"], [\"None\", \"[84, 16, 84]\"], [\"None\", \"[83, 17, 83, 17]\"], [\"None\", \"[82, 18, 82, 18, 82]\"], [\"None\", \"[81, 19, 81, 19, 81, 19]\"], [\"None\", \"[80, 20]\"], [\"None\", \"[79, 21, 79]\"], [\"None\", \"[78, 22, 78, 22]\"], [\"None\", \"[77, 23, 77, 23, 77]\"], [\"None\", \"[76, 24, 76, 24, 76, 24]\"], [\"None\", \"[75, 25]\"], [\"None\", \"[74, 26, 74]\"], [\"None\", \"[73, 27, 73, 27]\"], [\"None\", \"[72, 28, 72, 28, 72]\"], [\"None\", \"[71, 29, 71, 29, 71, 29]\"], [\"None\", \"[70, 30]\"], [\"None\", \"[69, 31, 69]\"], [\"None\", \"[68, 32, 68, 32]\"], [\"None\", \"[67, 33, 67, 33, 67]\"], [\"None\", \"[66, 34, 66, 34, 66, 34]\"], [\"None\", \"[65, 35]\"], [\"None\", \"[64, 36, 64]\"], [\"None\", \"[63, 37, 63, 37]\"], [\"None\", \"[62, 38, 62, 38, 62]\"], [\"None\", \"[61, 39, 61, 39, 61, 39]\"], [\"None\", \"[60, 40]\"], [\"None\", \"[59, 41, 59]\"], [\"None\", \"[58, 42, 58, 42]\"], [\"None\", \"[57, 43, 57, 43, 57]\"], [\"None\", \"[56, 44, 56, 44, 56, 44]\"], [\"None\", \"[55, 45]\"], [\"None\", \"[54, 46, 54]\"], [\"None\", \"[53, 47, 53, 47]\"], [\"None\", \"[52, 48, 52, 48, 52]\"], [\"None\", \"[51, 49, 51, 49, 51, 49]\"], [\"None\", \"[50, 50]\"], [\"None\", \"[49, 51, 49]\"], [\"None\", \"[48, 52, 48, 52]\"], [\"None\", \"[47, 53, 47, 53, 47]\"], [\"None\", \"[46, 54, 46, 54, 46, 54]\"], [\"None\", \"[45, 55]\"], [\"None\", \"[44, 56, 44]\"], [\"None\", \"[43, 57, 43, 57]\"], [\"None\", \"[42, 58, 42, 58, 42]\"], [\"None\", \"[41, 59, 41, 59, 41, 59]\"]]", 
      "solution": "def slike(permutacija, x, n):\n    if n == 0:\n        return []\n    else:\n        y = slika(permutacija, x)\n        return [y] + slike(permutacija, y, n - 1)", 
      "problem": 19, 
      "validation": "Check.equal('slike([3, 4, 2, 1], 1, 3)', [3, 2, 4])\nCheck.equal('slike([3, 4, 2, 1], 2, 6)', [4, 1, 3, 2, 4, 1])\nCheck.equal('slike([3, 4, 2, 1], 3, 1)', [2])\nCheck.equal('slike([3, 4, 2, 1], 4, 0)', [])\nfor i in range(3, 60):\n    Check.challenge(slike([100 - k for k in range(1, 100)], i, i % 5 + 2))"
    }
  }, 
  {
    "pk": 359, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `vektorskiProdukt(v1, v2)`, ki vrne vektorski produkt\nvektorjev `v1` in `v2`, pri \u010demer je vsak vektor predstavljen z naborom\ntreh realnih \u0161tevil.\n\n    >>> vektorskiProdukt((1, 0, 0), (1, 0, 0))\n    (0, 0, 0)\n    >>> vektorskiProdukt((1, 0, 0), (0, 1, 0))\n    (0, 0, 1)", 
      "timestamp": "2012-04-26 09:55:30", 
      "challenge": "[]", 
      "solution": "def vektorskiProdukt(v1, v2):\n    x = v1[1] * v2[2] - v1[2] * v2[1]\n    y = v1[2] * v2[0] - v1[0] * v2[2]\n    z = v1[0] * v2[1] - v1[1] * v2[0]\n    return (x, y, z)", 
      "problem": 124, 
      "validation": "Check.equal('vektorskiProdukt((4,0,0), (1,0,0))',(0,0,0))\nCheck.equal('vektorskiProdukt((3,0,0), (0,1,0))',(0,0,3))"
    }
  }, 
  {
    "pk": 175, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `uredi_po_y(t)`, ki vrne tabelo `a`, v kateri so na\u0161teti\nindeksi to\u010dk iz tabele `t` glede na koordinato $y$ v nara\u0161\u010dajo\u010de redu. Se\npravi, `t[a[i]]` je `i`-ta to\u010dka v `t` glede na velikost koordinate $y$.\n\nNamig: uporabite funkcijo `sorted`, ki ji podate `enumerate(t)` in ustrezno\nvrednost parametra `key`, se pravi, tako funkcijo, ki iz para `(i,(x,y))`\nizlu\u0161\u010di `y`.", 
      "timestamp": "2012-12-10 17:07:53", 
      "challenge": "[[\"None\", \"[0, 56, 100, 156, 200, 256, 300, 356, 400, 456, 500, 556, 600, 656, 700, 756, 800, 856, 900, 956, 19, 87, 119, 187, 219, 287, 319, 387, 419, 487, 519, 587, 619, 687, 719, 787, 819, 887, 919, 987, 13, 33, 53, 73, 93, 113, 133, 153, 173, 193, 213, 233, 253, 273, 293, 313, 333, 353, 373, 393, 413, 433, 453, 473, 493, 513, 533, 553, 573, 593, 613, 633, 653, 673, 693, 713, 733, 753, 773, 793, 813, 833, 853, 873, 893, 913, 933, 953, 973, 993, 15, 91, 115, 191, 215, 291, 315, 391, 415, 491, 515, 591, 615, 691, 715, 791, 815, 891, 915, 991, 74, 82, 174, 182, 274, 282, 374, 382, 474, 482, 574, 582, 674, 682, 774, 782, 874, 882, 974, 982, 26, 30, 126, 130, 226, 230, 326, 330, 426, 430, 526, 530, 626, 630, 726, 730, 826, 830, 926, 930, 29, 77, 129, 177, 229, 277, 329, 377, 429, 477, 529, 577, 629, 677, 729, 777, 829, 877, 929, 977, 45, 61, 145, 161, 245, 261, 345, 361, 445, 461, 545, 561, 645, 661, 745, 761, 845, 861, 945, 961, 72, 84, 172, 184, 272, 284, 372, 384, 472, 484, 572, 584, 672, 684, 772, 784, 872, 884, 972, 984, 60, 96, 160, 196, 260, 296, 360, 396, 460, 496, 560, 596, 660, 696, 760, 796, 860, 896, 960, 996, 39, 67, 139, 167, 239, 267, 339, 367, 439, 467, 539, 567, 639, 667, 739, 767, 839, 867, 939, 967, 31, 75, 131, 175, 231, 275, 331, 375, 431, 475, 531, 575, 631, 675, 731, 775, 831, 875, 931, 975, 62, 94, 162, 194, 262, 294, 362, 394, 462, 494, 562, 594, 662, 694, 762, 794, 862, 894, 962, 994, 8, 28, 48, 68, 88, 108, 128, 148, 168, 188, 208, 228, 248, 268, 288, 308, 328, 348, 368, 388, 408, 428, 448, 468, 488, 508, 528, 548, 568, 588, 608, 628, 648, 668, 688, 708, 728, 748, 768, 788, 808, 828, 848, 868, 888, 908, 928, 948, 968, 988, 66, 90, 166, 190, 266, 290, 366, 390, 466, 490, 566, 590, 666, 690, 766, 790, 866, 890, 966, 990, 49, 57, 149, 157, 249, 257, 349, 357, 449, 457, 549, 557, 649, 657, 749, 757, 849, 857, 949, 957, 1, 5, 101, 105, 201, 205, 301, 305, 401, 405, 501, 505, 601, 605, 701, 705, 801, 805, 901, 905, 4, 52, 104, 152, 204, 252, 304, 352, 404, 452, 504, 552, 604, 652, 704, 752, 804, 852, 904, 952, 20, 36, 120, 136, 220, 236, 320, 336, 420, 436, 520, 536, 620, 636, 720, 736, 820, 836, 920, 936, 47, 59, 147, 159, 247, 259, 347, 359, 447, 459, 547, 559, 647, 659, 747, 759, 847, 859, 947, 959, 35, 71, 135, 171, 235, 271, 335, 371, 435, 471, 535, 571, 635, 671, 735, 771, 835, 871, 935, 971, 14, 42, 114, 142, 214, 242, 314, 342, 414, 442, 514, 542, 614, 642, 714, 742, 814, 842, 914, 942, 6, 50, 106, 150, 206, 250, 306, 350, 406, 450, 506, 550, 606, 650, 706, 750, 806, 850, 906, 950, 37, 69, 137, 169, 237, 269, 337, 369, 437, 469, 537, 569, 637, 669, 737, 769, 837, 869, 937, 969, 3, 23, 43, 63, 83, 103, 123, 143, 163, 183, 203, 223, 243, 263, 283, 303, 323, 343, 363, 383, 403, 423, 443, 463, 483, 503, 523, 543, 563, 583, 603, 623, 643, 663, 683, 703, 723, 743, 763, 783, 803, 823, 843, 863, 883, 903, 923, 943, 963, 983, 41, 65, 141, 165, 241, 265, 341, 365, 441, 465, 541, 565, 641, 665, 741, 765, 841, 865, 941, 965, 24, 32, 124, 132, 224, 232, 324, 332, 424, 432, 524, 532, 624, 632, 724, 732, 824, 832, 924, 932, 76, 80, 176, 180, 276, 280, 376, 380, 476, 480, 576, 580, 676, 680, 776, 780, 876, 880, 976, 980, 27, 79, 127, 179, 227, 279, 327, 379, 427, 479, 527, 579, 627, 679, 727, 779, 827, 879, 927, 979, 11, 95, 111, 195, 211, 295, 311, 395, 411, 495, 511, 595, 611, 695, 711, 795, 811, 895, 911, 995, 22, 34, 122, 134, 222, 234, 322, 334, 422, 434, 522, 534, 622, 634, 722, 734, 822, 834, 922, 934, 10, 46, 110, 146, 210, 246, 310, 346, 410, 446, 510, 546, 610, 646, 710, 746, 810, 846, 910, 946, 17, 89, 117, 189, 217, 289, 317, 389, 417, 489, 517, 589, 617, 689, 717, 789, 817, 889, 917, 989, 25, 81, 125, 181, 225, 281, 325, 381, 425, 481, 525, 581, 625, 681, 725, 781, 825, 881, 925, 981, 12, 44, 112, 144, 212, 244, 312, 344, 412, 444, 512, 544, 612, 644, 712, 744, 812, 844, 912, 944, 18, 38, 58, 78, 98, 118, 138, 158, 178, 198, 218, 238, 258, 278, 298, 318, 338, 358, 378, 398, 418, 438, 458, 478, 498, 518, 538, 558, 578, 598, 618, 638, 658, 678, 698, 718, 738, 758, 778, 798, 818, 838, 858, 878, 898, 918, 938, 958, 978, 998, 16, 40, 116, 140, 216, 240, 316, 340, 416, 440, 516, 540, 616, 640, 716, 740, 816, 840, 916, 940, 7, 99, 107, 199, 207, 299, 307, 399, 407, 499, 507, 599, 607, 699, 707, 799, 807, 899, 907, 999, 51, 55, 151, 155, 251, 255, 351, 355, 451, 455, 551, 555, 651, 655, 751, 755, 851, 855, 951, 955, 2, 54, 102, 154, 202, 254, 302, 354, 402, 454, 502, 554, 602, 654, 702, 754, 802, 854, 902, 954, 70, 86, 170, 186, 270, 286, 370, 386, 470, 486, 570, 586, 670, 686, 770, 786, 870, 886, 970, 986, 9, 97, 109, 197, 209, 297, 309, 397, 409, 497, 509, 597, 609, 697, 709, 797, 809, 897, 909, 997, 21, 85, 121, 185, 221, 285, 321, 385, 421, 485, 521, 585, 621, 685, 721, 785, 821, 885, 921, 985, 64, 92, 164, 192, 264, 292, 364, 392, 464, 492, 564, 592, 664, 692, 764, 792, 864, 892, 964, 992]\"]]", 
      "solution": "def uredi_po_y(t):\n    return [i for (i,u) in sorted(enumerate(t), key = lambda p: p[1][1])]", 
      "problem": 53, 
      "validation": "Check.equal(\"\"\"uredi_po_y([(2,3), (1,5), (10,7), (11,6)])\"\"\", [0, 1, 3, 2])\n\nCheck.challenge(uredi_po_y([((30*i - 5*i*i)%120, (27*i + 8*i*i)%100) for i in range(1000)]))"
    }
  }, 
  {
    "pk": 810, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `transponiraj(mat)`, ki transponira dano matriko\n`mat`.", 
      "timestamp": "2012-10-01 12:27:45", 
      "challenge": "[[\"None\", \"[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]]\"]]", 
      "solution": "def transponiraj(mat):\n    m, n = len(mat), len(mat[0])\n    return [[mat[i][j] for i in range(m)] for j in range(n)]", 
      "problem": 254, 
      "validation": "Check.equal('transponiraj([[1, 3], [2, 4]])', [[1, 2], [3, 4]])\nCheck.equal('transponiraj([[1], [5]])', [[1, 5]])\nCheck.equal('transponiraj([[1, 3, 6], [2, 4, 8]])', [[1, 2], [3, 4], [6, 8]])\nCheck.challenge(identiteta(24))"
    }
  }, 
  {
    "pk": 125, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "V spremenljivko `delez.prezivelih` shranite vektor, v katerem so\nzapisani dele\u017ei pre\u017eivelih v posameznem razredu.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"NA\", \"0.624615, 0.414035, 0.252125, 0.239548\"]]", 
      "solution": "delez.prezivelih <- apply(Titanic[, , , \"Yes\"], 1, sum) / apply(Titanic, 1, sum)", 
      "problem": 45, 
      "validation": "check$equal(round(delez.prezivelih[\"Crew\"], 6), 0.239548)\ncheck$challenge(toString(round(delez.prezivelih, 6)))"
    }
  }, 
  {
    "pk": 9, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `nepopolnost(n)`, ki vrne absolutno razliko med\n\u0161tevilom `n` in vsoto vseh njegovih pravih deliteljev.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"None\", \"1\"], [\"None\", \"1\"], [\"None\", \"2\"], [\"None\", \"1\"], [\"None\", \"4\"], [\"None\", \"0\"], [\"None\", \"6\"], [\"None\", \"1\"], [\"None\", \"5\"], [\"None\", \"2\"], [\"None\", \"10\"], [\"None\", \"4\"], [\"None\", \"12\"], [\"None\", \"4\"], [\"None\", \"6\"], [\"None\", \"1\"], [\"None\", \"16\"], [\"None\", \"3\"], [\"None\", \"18\"], [\"None\", \"2\"], [\"None\", \"10\"], [\"None\", \"8\"], [\"None\", \"22\"], [\"None\", \"12\"], [\"None\", \"19\"], [\"None\", \"10\"], [\"None\", \"14\"], [\"None\", \"0\"], [\"None\", \"28\"], [\"None\", \"12\"], [\"None\", \"30\"], [\"None\", \"1\"], [\"None\", \"18\"], [\"None\", \"14\"], [\"None\", \"22\"], [\"None\", \"19\"], [\"None\", \"36\"], [\"None\", \"16\"], [\"None\", \"22\"], [\"None\", \"10\"], [\"None\", \"40\"], [\"None\", \"12\"], [\"None\", \"42\"], [\"None\", \"4\"], [\"None\", \"12\"], [\"None\", \"20\"], [\"None\", \"46\"], [\"None\", \"28\"], [\"None\", \"41\"], [\"None\", \"7\"], [\"None\", \"30\"], [\"None\", \"6\"], [\"None\", \"52\"], [\"None\", \"12\"], [\"None\", \"38\"], [\"None\", \"8\"], [\"None\", \"34\"], [\"None\", \"26\"], [\"None\", \"58\"], [\"None\", \"48\"], [\"None\", \"60\"], [\"None\", \"28\"], [\"None\", \"22\"], [\"None\", \"1\"], [\"None\", \"46\"], [\"None\", \"12\"], [\"None\", \"66\"], [\"None\", \"10\"], [\"None\", \"42\"], [\"None\", \"4\"], [\"None\", \"70\"], [\"None\", \"51\"], [\"None\", \"72\"], [\"None\", \"34\"], [\"None\", \"26\"], [\"None\", \"12\"], [\"None\", \"58\"], [\"None\", \"12\"], [\"None\", \"78\"], [\"None\", \"26\"], [\"None\", \"41\"], [\"None\", \"38\"], [\"None\", \"82\"], [\"None\", \"56\"], [\"None\", \"62\"], [\"None\", \"40\"], [\"None\", \"54\"], [\"None\", \"4\"], [\"None\", \"88\"], [\"None\", \"54\"], [\"None\", \"70\"], [\"None\", \"16\"], [\"None\", \"58\"], [\"None\", \"44\"], [\"None\", \"70\"], [\"None\", \"60\"], [\"None\", \"96\"], [\"None\", \"25\"], [\"None\", \"42\"]]", 
      "solution": "def nepopolnost(n):\n    return abs(n - sum(praviDelitelji(n)))", 
      "problem": 8, 
      "validation": "Check.equal('nepopolnost(19)', 18)\nCheck.equal('nepopolnost(28)', 0)\nCheck.equal('nepopolnost(42)', 12)\nfor i in range(1, 100):\n    Check.challenge(nepopolnost(i))"
    }
  }, 
  {
    "pk": 746, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `razsiriMnozico(mnozica, x)`, ki vrne mno\u017eico `mnozica`\nz dodanim elementom `x`.", 
      "timestamp": "2012-07-12 09:32:19", 
      "challenge": "[]", 
      "solution": "def razsiriMnozico(mnozica, x):\n    return mnozica.union({x})", 
      "problem": 237, 
      "validation": "Check.equal(\"razsiriMnozico(set(), 3)\", {3})\nCheck.equal(\"razsiriMnozico({1, 2}, 3)\", {1, 2, 3})\nCheck.equal(\"razsiriMnozico({'A', 'B', 'C'}, 'D')\", {'A', 'B', 'C', 'D'})\nCheck.equal(\"razsiriMnozico({4, 5, 6}, 5)\", {4, 5, 6})"
    }
  }, 
  {
    "pk": 858, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavi funkcijo `sudoku(t)`, ki sprejme delno re\u0161eni sudoku in ga re\u0161i.\nFunkcija naj vrne re\u0161eni sudoku ali `None`, \u010de re\u0161itve ni.", 
      "timestamp": "2012-11-19 10:14:29", 
      "challenge": "[[\"None\", \"[[5, 3, 4, 6, 7, 8, 9, 1, 2], [6, 7, 2, 1, 9, 5, 3, 4, 8], [1, 9, 8, 3, 4, 2, 5, 6, 7], [8, 5, 9, 7, 6, 1, 4, 2, 3], [4, 2, 6, 8, 5, 3, 7, 9, 1], [7, 1, 3, 9, 2, 4, 8, 5, 6], [9, 6, 1, 5, 3, 7, 2, 8, 4], [2, 8, 7, 4, 1, 9, 6, 3, 5], [3, 4, 5, 2, 8, 6, 1, 7, 9]]\"]]", 
      "solution": "def dodaj(t, i, j, n):\n    t = [vrs[:] for vrs in t]\n    t[i][j] = n\n    return t\n\ndef sudoku(t):\n    \"\"\"Re\u0161i dani sudoku. Vrni re\u0161itev, ali None, \u010de je sudoku nere\u0161ljiv.\"\"\"\n    p = [(i, j, mozne_poteze(t, i, j))\n         for i in range(9) for j in range(9) if t[i][j] is None]\n\n    if len(p) == 0:\n        return t\n\n    else:\n        # V seznamu potez p poi\u0161\u010demo tisto, ki ima najmanj mo\u017enih polj\n        i0, j0, pot0 = p[0]\n        for i, j, pot in p[1:]:\n            if len(pot) < len(pot0):\n                pot0, i0, j0 = pot, i, j\n\n        # Potem poskusimo vse mo\u017enosti\n        for n in pot0:\n            resitev = sudoku(dodaj(t, i0, j0, n))\n            if resitev:\n                return resitev\n\ndef sudoku(t):\n    \"\"\"Re\u0161i dani sudoku. Vrni re\u0161itev, ali None, \u010de je sudoku nere\u0161ljiv.\"\"\"\n\n    sklad = [t]\n    while sklad:\n        t = sklad.pop()\n        p = [(i, j, mozne_poteze(t, i, j))\n             for i in range(9) for j in range(9) if t[i][j] is None]\n\n        if len(p) == 0:\n            return t\n\n        else:\n            # V seznamu potez p poi\u0161\u010demo tisto, ki ima najmanj mo\u017enih polj\n            i0, j0, pot0 = p[0]\n            for i, j, pot in p[1:]:\n                if len(pot) < len(pot0):\n                    pot0, i0, j0 = pot, i, j\n\n            # Potem poskusimo vse mo\u017enosti\n            for n in pot0:\n                sklad.append(dodaj(t, i0, j0, n))", 
      "problem": 280, 
      "validation": "Check.equal(\"\"\"sudoku(\n    [[ 5  , 3  ,None,  None, 7  ,None,  None,None,None],\n     [ 6  ,None,None,   1  , 9  , 5  ,  None,None,None],\n     [None, 9  , 8  ,  None,None,None,  None, 6  ,None],\n     \n     [ 8  ,None,None,  None, 6  ,None,  None,None, 3  ],\n     [ 4  ,None,None,   8  ,None, 3  ,  None,None, 1  ],\n     [ 7  ,None,None,  None, 2  ,None,  None,None, 6  ],\n      \n     [None, 6  ,None,  None,None,None,   2  , 8  ,None],\n     [None,None,None,   4  , 1  , 9  ,  None,None, 5  ],\n     [None,None,None,  None, 8  ,None,  None, 7  , 9  ]])\"\"\",\n    [[5, 3, 4, 6, 7, 8, 9, 1, 2],\n     [6, 7, 2, 1, 9, 5, 3, 4, 8],\n     [1, 9, 8, 3, 4, 2, 5, 6, 7],\n     [8, 5, 9, 7, 6, 1, 4, 2, 3],\n     [4, 2, 6, 8, 5, 3, 7, 9, 1],\n     [7, 1, 3, 9, 2, 4, 8, 5, 6],\n     [9, 6, 1, 5, 3, 7, 2, 8, 4],\n     [2, 8, 7, 4, 1, 9, 6, 3, 5],\n     [3, 4, 5, 2, 8, 6, 1, 7, 9]])\n\nCheck.equal(\"\"\"sudoku(\n    [[ 5  , 4  ,None,  None, 7  ,None,  None,None,None],\n     [ 6  ,None,None,   1  , 9  , 5  ,  None,None,None],\n     [None, 9  , 8  ,  None,None,None,  None, 6  ,None],\n      \n     [ 8  ,None,None,  None, 6  ,None,  None,None, 3  ],\n     [ 4  ,None,None,   8  ,None, 3  ,  None,None, 1  ],\n     [ 7  ,None,None,  None, 2  ,None,  None,None, 6  ],\n     \n     [None, 6  ,None,  None,None,None,   2  , 8  ,None],\n     [None,None,None,   4  , 1  , 9  ,  None,None, 5  ],\n     [None,None,None,  None, 8  ,None,  None, 7  , 9  ]])\"\"\", \n   None)\n\nCheck.challenge(sudoku(\n    [[ 5  , 3  ,None,  None, 7  ,None,  None,None,None],\n     [ 6  ,None,None,   1  , 9  , 5  ,  None,None,None],\n     [None, 9  , 8  ,  None,None,None,  None, 6  ,None],\n     \n     [ 8  ,None,None,  None, 6  ,None,  None,None, 3  ],\n     [ 4  ,None,None,   8  ,None, 3  ,  None,None, 1  ],\n     [ 7  ,None,None,  None, 2  ,None,  None,None, 6  ],\n      \n     [None, 6  ,None,  None,None,None,   2  , 8  ,None],\n     [None,None,None,   4  , 1  , 9  ,  None,None, 5  ],\n     [None,None,None,  None, 8  ,None,  None, 7  , 9  ]]))"
    }
  }, 
  {
    "pk": 254, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite metodo `stopnja`, ki vrne stopnjo polinoma.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"None\", \"0\"], [\"None\", \"1\"], [\"None\", \"2\"], [\"None\", \"3\"], [\"None\", \"4\"], [\"None\", \"5\"], [\"None\", \"6\"], [\"None\", \"7\"], [\"None\", \"8\"], [\"None\", \"9\"], [\"None\", \"10\"], [\"None\", \"11\"], [\"None\", \"12\"], [\"None\", \"13\"], [\"None\", \"14\"], [\"None\", \"15\"], [\"None\", \"16\"], [\"None\", \"17\"], [\"None\", \"18\"], [\"None\", \"19\"], [\"None\", \"20\"], [\"None\", \"21\"], [\"None\", \"22\"], [\"None\", \"23\"], [\"None\", \"24\"], [\"None\", \"25\"], [\"None\", \"26\"], [\"None\", \"27\"], [\"None\", \"28\"], [\"None\", \"29\"], [\"None\", \"30\"], [\"None\", \"31\"], [\"None\", \"32\"], [\"None\", \"33\"], [\"None\", \"34\"], [\"None\", \"35\"], [\"None\", \"36\"], [\"None\", \"37\"], [\"None\", \"38\"], [\"None\", \"39\"], [\"None\", \"40\"], [\"None\", \"41\"], [\"None\", \"42\"], [\"None\", \"43\"], [\"None\", \"44\"], [\"None\", \"45\"], [\"None\", \"46\"], [\"None\", \"47\"], [\"None\", \"48\"], [\"None\", \"49\"], [\"None\", \"50\"], [\"None\", \"51\"], [\"None\", \"52\"], [\"None\", \"53\"], [\"None\", \"54\"], [\"None\", \"55\"], [\"None\", \"56\"], [\"None\", \"57\"], [\"None\", \"58\"], [\"None\", \"59\"], [\"None\", \"60\"], [\"None\", \"61\"], [\"None\", \"62\"], [\"None\", \"63\"], [\"None\", \"64\"], [\"None\", \"65\"], [\"None\", \"66\"], [\"None\", \"67\"], [\"None\", \"68\"], [\"None\", \"69\"], [\"None\", \"70\"], [\"None\", \"71\"], [\"None\", \"72\"], [\"None\", \"73\"], [\"None\", \"74\"], [\"None\", \"75\"], [\"None\", \"76\"], [\"None\", \"77\"], [\"None\", \"78\"], [\"None\", \"79\"], [\"None\", \"80\"], [\"None\", \"81\"], [\"None\", \"82\"], [\"None\", \"83\"], [\"None\", \"84\"], [\"None\", \"85\"], [\"None\", \"86\"], [\"None\", \"87\"], [\"None\", \"88\"], [\"None\", \"89\"], [\"None\", \"90\"], [\"None\", \"91\"], [\"None\", \"92\"], [\"None\", \"93\"], [\"None\", \"94\"], [\"None\", \"95\"], [\"None\", \"96\"], [\"None\", \"97\"]]", 
      "solution": "# def stopnja(self):\n#     if self.koef: return len(self.koef) - 1\n#     else: return -float(\"inf\")", 
      "problem": 74, 
      "validation": "Check.equal('Polinom([1, 2, 3]).stopnja()', 2)\nCheck.equal('Polinom([1]).stopnja()', 0)\nCheck.equal('Polinom([]).stopnja()', -float(\"inf\"))\n\nfor i in range(2, 100):\n    Check.challenge(Polinom(list(range(1, i))).stopnja())"
    }
  }, 
  {
    "pk": 194, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "**[Floyd-Warshallov algoritem](http://en.wikipedia.org/wiki/Floyd%E2%80%93Warshall_algorithm)**\n\nV\u010dasih \u017eelimo poiskati cene najcenej\u0161ih poti med *vsemi* pari\nvozli\u0161\u010d v grafu. Tokrat predpostavimo, da je graf podan z matriko\nrazdalj `g`. Z dinami\u010dnim programiranjem sestavimo novo matriko `d`,\ntako da `d[i][j]` vsebuje ceno najcenej\u0161e poti od vozli\u0161\u010da `i` do\nvozli\u0161\u010da `j`:\n\n 1. Naj bo `d` kopija matrike `g`. Matrika `d` vsebuje cene do sedaj\n    znanih najcenej\u0161ih poti.\n\n 2. Za vsako vozli\u0161\u010de `k`, za vsako vozli\u0161\u010de `i`, za vsako vozli\u0161\u010de `j`:\n    preverimo, ali lahko izbolj\u0161amo ceno `d[i][j]` tako, da gremo\n    od `i` do `j` preko `k`:\n\n      - \u010de je `d[i][k] + d[k][j] < d[i][j]`,\n        nastavi `d[i][j] = d[i][k] + d[k][j]`.\n\n 3. Vrni `d`.\n\nSestavi funkcijo `floyd_warshall(g)`, ki je implementacija tega algoritma.\nSkupaj z asistentom premislite, da algoritem zares pravilno deluje.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"None\", \"[[0, 1, 2, 2, 1], [1, 0, 1, 2, 2], [2, 1, 0, 1, 2], [2, 2, 1, 0, 1], [1, 2, 2, 1, 0]]\"], [\"None\", \"[[0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6], [1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6], [2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5], [2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4], [1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5], [2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5], [3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4], [3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3], [2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4], [3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4], [4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3], [4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2], [3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3], [4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3], [5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2], [5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1], [4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2], [5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2], [6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1], [6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0]]\"], [\"None\", \"[[0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11, 11, 10, 11, 12, 12, 11, 12, 13, 13, 12, 13, 14, 14, 13, 14, 15, 15, 14, 15, 16, 16, 15, 16, 17, 17, 16, 17, 18, 18, 17, 18, 19, 19, 18, 19, 20, 20, 19, 20, 21, 21, 20, 21, 22, 22, 21, 22, 23, 23, 22, 23, 24, 24, 23, 24, 25, 25, 24, 25, 26, 26], [1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11, 11, 10, 11, 12, 12, 11, 12, 13, 13, 12, 13, 14, 14, 13, 14, 15, 15, 14, 15, 16, 16, 15, 16, 17, 17, 16, 17, 18, 18, 17, 18, 19, 19, 18, 19, 20, 20, 19, 20, 21, 21, 20, 21, 22, 22, 21, 22, 23, 23, 22, 23, 24, 24, 23, 24, 25, 25, 24, 25, 26], [2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11, 11, 10, 11, 12, 12, 11, 12, 13, 13, 12, 13, 14, 14, 13, 14, 15, 15, 14, 15, 16, 16, 15, 16, 17, 17, 16, 17, 18, 18, 17, 18, 19, 19, 18, 19, 20, 20, 19, 20, 21, 21, 20, 21, 22, 22, 21, 22, 23, 23, 22, 23, 24, 24, 23, 24, 25, 25, 24, 25], [2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11, 11, 10, 11, 12, 12, 11, 12, 13, 13, 12, 13, 14, 14, 13, 14, 15, 15, 14, 15, 16, 16, 15, 16, 17, 17, 16, 17, 18, 18, 17, 18, 19, 19, 18, 19, 20, 20, 19, 20, 21, 21, 20, 21, 22, 22, 21, 22, 23, 23, 22, 23, 24, 24, 23, 24, 25, 25, 24], [1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11, 11, 10, 11, 12, 12, 11, 12, 13, 13, 12, 13, 14, 14, 13, 14, 15, 15, 14, 15, 16, 16, 15, 16, 17, 17, 16, 17, 18, 18, 17, 18, 19, 19, 18, 19, 20, 20, 19, 20, 21, 21, 20, 21, 22, 22, 21, 22, 23, 23, 22, 23, 24, 24, 23, 24, 25, 25], [2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11, 11, 10, 11, 12, 12, 11, 12, 13, 13, 12, 13, 14, 14, 13, 14, 15, 15, 14, 15, 16, 16, 15, 16, 17, 17, 16, 17, 18, 18, 17, 18, 19, 19, 18, 19, 20, 20, 19, 20, 21, 21, 20, 21, 22, 22, 21, 22, 23, 23, 22, 23, 24, 24, 23, 24, 25], [3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11, 11, 10, 11, 12, 12, 11, 12, 13, 13, 12, 13, 14, 14, 13, 14, 15, 15, 14, 15, 16, 16, 15, 16, 17, 17, 16, 17, 18, 18, 17, 18, 19, 19, 18, 19, 20, 20, 19, 20, 21, 21, 20, 21, 22, 22, 21, 22, 23, 23, 22, 23, 24, 24, 23, 24], [3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11, 11, 10, 11, 12, 12, 11, 12, 13, 13, 12, 13, 14, 14, 13, 14, 15, 15, 14, 15, 16, 16, 15, 16, 17, 17, 16, 17, 18, 18, 17, 18, 19, 19, 18, 19, 20, 20, 19, 20, 21, 21, 20, 21, 22, 22, 21, 22, 23, 23, 22, 23, 24, 24, 23], [2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11, 11, 10, 11, 12, 12, 11, 12, 13, 13, 12, 13, 14, 14, 13, 14, 15, 15, 14, 15, 16, 16, 15, 16, 17, 17, 16, 17, 18, 18, 17, 18, 19, 19, 18, 19, 20, 20, 19, 20, 21, 21, 20, 21, 22, 22, 21, 22, 23, 23, 22, 23, 24, 24], [3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11, 11, 10, 11, 12, 12, 11, 12, 13, 13, 12, 13, 14, 14, 13, 14, 15, 15, 14, 15, 16, 16, 15, 16, 17, 17, 16, 17, 18, 18, 17, 18, 19, 19, 18, 19, 20, 20, 19, 20, 21, 21, 20, 21, 22, 22, 21, 22, 23, 23, 22, 23, 24], [4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11, 11, 10, 11, 12, 12, 11, 12, 13, 13, 12, 13, 14, 14, 13, 14, 15, 15, 14, 15, 16, 16, 15, 16, 17, 17, 16, 17, 18, 18, 17, 18, 19, 19, 18, 19, 20, 20, 19, 20, 21, 21, 20, 21, 22, 22, 21, 22, 23, 23, 22, 23], [4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11, 11, 10, 11, 12, 12, 11, 12, 13, 13, 12, 13, 14, 14, 13, 14, 15, 15, 14, 15, 16, 16, 15, 16, 17, 17, 16, 17, 18, 18, 17, 18, 19, 19, 18, 19, 20, 20, 19, 20, 21, 21, 20, 21, 22, 22, 21, 22, 23, 23, 22], [3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11, 11, 10, 11, 12, 12, 11, 12, 13, 13, 12, 13, 14, 14, 13, 14, 15, 15, 14, 15, 16, 16, 15, 16, 17, 17, 16, 17, 18, 18, 17, 18, 19, 19, 18, 19, 20, 20, 19, 20, 21, 21, 20, 21, 22, 22, 21, 22, 23, 23], [4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11, 11, 10, 11, 12, 12, 11, 12, 13, 13, 12, 13, 14, 14, 13, 14, 15, 15, 14, 15, 16, 16, 15, 16, 17, 17, 16, 17, 18, 18, 17, 18, 19, 19, 18, 19, 20, 20, 19, 20, 21, 21, 20, 21, 22, 22, 21, 22, 23], [5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11, 11, 10, 11, 12, 12, 11, 12, 13, 13, 12, 13, 14, 14, 13, 14, 15, 15, 14, 15, 16, 16, 15, 16, 17, 17, 16, 17, 18, 18, 17, 18, 19, 19, 18, 19, 20, 20, 19, 20, 21, 21, 20, 21, 22, 22, 21, 22], [5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11, 11, 10, 11, 12, 12, 11, 12, 13, 13, 12, 13, 14, 14, 13, 14, 15, 15, 14, 15, 16, 16, 15, 16, 17, 17, 16, 17, 18, 18, 17, 18, 19, 19, 18, 19, 20, 20, 19, 20, 21, 21, 20, 21, 22, 22, 21], [4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11, 11, 10, 11, 12, 12, 11, 12, 13, 13, 12, 13, 14, 14, 13, 14, 15, 15, 14, 15, 16, 16, 15, 16, 17, 17, 16, 17, 18, 18, 17, 18, 19, 19, 18, 19, 20, 20, 19, 20, 21, 21, 20, 21, 22, 22], [5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11, 11, 10, 11, 12, 12, 11, 12, 13, 13, 12, 13, 14, 14, 13, 14, 15, 15, 14, 15, 16, 16, 15, 16, 17, 17, 16, 17, 18, 18, 17, 18, 19, 19, 18, 19, 20, 20, 19, 20, 21, 21, 20, 21, 22], [6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11, 11, 10, 11, 12, 12, 11, 12, 13, 13, 12, 13, 14, 14, 13, 14, 15, 15, 14, 15, 16, 16, 15, 16, 17, 17, 16, 17, 18, 18, 17, 18, 19, 19, 18, 19, 20, 20, 19, 20, 21, 21, 20, 21], [6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11, 11, 10, 11, 12, 12, 11, 12, 13, 13, 12, 13, 14, 14, 13, 14, 15, 15, 14, 15, 16, 16, 15, 16, 17, 17, 16, 17, 18, 18, 17, 18, 19, 19, 18, 19, 20, 20, 19, 20, 21, 21, 20], [5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11, 11, 10, 11, 12, 12, 11, 12, 13, 13, 12, 13, 14, 14, 13, 14, 15, 15, 14, 15, 16, 16, 15, 16, 17, 17, 16, 17, 18, 18, 17, 18, 19, 19, 18, 19, 20, 20, 19, 20, 21, 21], [6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11, 11, 10, 11, 12, 12, 11, 12, 13, 13, 12, 13, 14, 14, 13, 14, 15, 15, 14, 15, 16, 16, 15, 16, 17, 17, 16, 17, 18, 18, 17, 18, 19, 19, 18, 19, 20, 20, 19, 20, 21], [7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11, 11, 10, 11, 12, 12, 11, 12, 13, 13, 12, 13, 14, 14, 13, 14, 15, 15, 14, 15, 16, 16, 15, 16, 17, 17, 16, 17, 18, 18, 17, 18, 19, 19, 18, 19, 20, 20, 19, 20], [7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11, 11, 10, 11, 12, 12, 11, 12, 13, 13, 12, 13, 14, 14, 13, 14, 15, 15, 14, 15, 16, 16, 15, 16, 17, 17, 16, 17, 18, 18, 17, 18, 19, 19, 18, 19, 20, 20, 19], [6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11, 11, 10, 11, 12, 12, 11, 12, 13, 13, 12, 13, 14, 14, 13, 14, 15, 15, 14, 15, 16, 16, 15, 16, 17, 17, 16, 17, 18, 18, 17, 18, 19, 19, 18, 19, 20, 20], [7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11, 11, 10, 11, 12, 12, 11, 12, 13, 13, 12, 13, 14, 14, 13, 14, 15, 15, 14, 15, 16, 16, 15, 16, 17, 17, 16, 17, 18, 18, 17, 18, 19, 19, 18, 19, 20], [8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11, 11, 10, 11, 12, 12, 11, 12, 13, 13, 12, 13, 14, 14, 13, 14, 15, 15, 14, 15, 16, 16, 15, 16, 17, 17, 16, 17, 18, 18, 17, 18, 19, 19, 18, 19], [8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11, 11, 10, 11, 12, 12, 11, 12, 13, 13, 12, 13, 14, 14, 13, 14, 15, 15, 14, 15, 16, 16, 15, 16, 17, 17, 16, 17, 18, 18, 17, 18, 19, 19, 18], [7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11, 11, 10, 11, 12, 12, 11, 12, 13, 13, 12, 13, 14, 14, 13, 14, 15, 15, 14, 15, 16, 16, 15, 16, 17, 17, 16, 17, 18, 18, 17, 18, 19, 19], [8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11, 11, 10, 11, 12, 12, 11, 12, 13, 13, 12, 13, 14, 14, 13, 14, 15, 15, 14, 15, 16, 16, 15, 16, 17, 17, 16, 17, 18, 18, 17, 18, 19], [9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11, 11, 10, 11, 12, 12, 11, 12, 13, 13, 12, 13, 14, 14, 13, 14, 15, 15, 14, 15, 16, 16, 15, 16, 17, 17, 16, 17, 18, 18, 17, 18], [9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11, 11, 10, 11, 12, 12, 11, 12, 13, 13, 12, 13, 14, 14, 13, 14, 15, 15, 14, 15, 16, 16, 15, 16, 17, 17, 16, 17, 18, 18, 17], [8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11, 11, 10, 11, 12, 12, 11, 12, 13, 13, 12, 13, 14, 14, 13, 14, 15, 15, 14, 15, 16, 16, 15, 16, 17, 17, 16, 17, 18, 18], [9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11, 11, 10, 11, 12, 12, 11, 12, 13, 13, 12, 13, 14, 14, 13, 14, 15, 15, 14, 15, 16, 16, 15, 16, 17, 17, 16, 17, 18], [10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11, 11, 10, 11, 12, 12, 11, 12, 13, 13, 12, 13, 14, 14, 13, 14, 15, 15, 14, 15, 16, 16, 15, 16, 17, 17, 16, 17], [10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11, 11, 10, 11, 12, 12, 11, 12, 13, 13, 12, 13, 14, 14, 13, 14, 15, 15, 14, 15, 16, 16, 15, 16, 17, 17, 16], [9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11, 11, 10, 11, 12, 12, 11, 12, 13, 13, 12, 13, 14, 14, 13, 14, 15, 15, 14, 15, 16, 16, 15, 16, 17, 17], [10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11, 11, 10, 11, 12, 12, 11, 12, 13, 13, 12, 13, 14, 14, 13, 14, 15, 15, 14, 15, 16, 16, 15, 16, 17], [11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11, 11, 10, 11, 12, 12, 11, 12, 13, 13, 12, 13, 14, 14, 13, 14, 15, 15, 14, 15, 16, 16, 15, 16], [11, 11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11, 11, 10, 11, 12, 12, 11, 12, 13, 13, 12, 13, 14, 14, 13, 14, 15, 15, 14, 15, 16, 16, 15], [10, 11, 11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11, 11, 10, 11, 12, 12, 11, 12, 13, 13, 12, 13, 14, 14, 13, 14, 15, 15, 14, 15, 16, 16], [11, 10, 11, 11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11, 11, 10, 11, 12, 12, 11, 12, 13, 13, 12, 13, 14, 14, 13, 14, 15, 15, 14, 15, 16], [12, 11, 10, 11, 11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11, 11, 10, 11, 12, 12, 11, 12, 13, 13, 12, 13, 14, 14, 13, 14, 15, 15, 14, 15], [12, 12, 11, 10, 11, 11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11, 11, 10, 11, 12, 12, 11, 12, 13, 13, 12, 13, 14, 14, 13, 14, 15, 15, 14], [11, 12, 12, 11, 10, 11, 11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11, 11, 10, 11, 12, 12, 11, 12, 13, 13, 12, 13, 14, 14, 13, 14, 15, 15], [12, 11, 12, 12, 11, 10, 11, 11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11, 11, 10, 11, 12, 12, 11, 12, 13, 13, 12, 13, 14, 14, 13, 14, 15], [13, 12, 11, 12, 12, 11, 10, 11, 11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11, 11, 10, 11, 12, 12, 11, 12, 13, 13, 12, 13, 14, 14, 13, 14], [13, 13, 12, 11, 12, 12, 11, 10, 11, 11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11, 11, 10, 11, 12, 12, 11, 12, 13, 13, 12, 13, 14, 14, 13], [12, 13, 13, 12, 11, 12, 12, 11, 10, 11, 11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11, 11, 10, 11, 12, 12, 11, 12, 13, 13, 12, 13, 14, 14], [13, 12, 13, 13, 12, 11, 12, 12, 11, 10, 11, 11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11, 11, 10, 11, 12, 12, 11, 12, 13, 13, 12, 13, 14], [14, 13, 12, 13, 13, 12, 11, 12, 12, 11, 10, 11, 11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11, 11, 10, 11, 12, 12, 11, 12, 13, 13, 12, 13], [14, 14, 13, 12, 13, 13, 12, 11, 12, 12, 11, 10, 11, 11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11, 11, 10, 11, 12, 12, 11, 12, 13, 13, 12], [13, 14, 14, 13, 12, 13, 13, 12, 11, 12, 12, 11, 10, 11, 11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11, 11, 10, 11, 12, 12, 11, 12, 13, 13], [14, 13, 14, 14, 13, 12, 13, 13, 12, 11, 12, 12, 11, 10, 11, 11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11, 11, 10, 11, 12, 12, 11, 12, 13], [15, 14, 13, 14, 14, 13, 12, 13, 13, 12, 11, 12, 12, 11, 10, 11, 11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11, 11, 10, 11, 12, 12, 11, 12], [15, 15, 14, 13, 14, 14, 13, 12, 13, 13, 12, 11, 12, 12, 11, 10, 11, 11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11, 11, 10, 11, 12, 12, 11], [14, 15, 15, 14, 13, 14, 14, 13, 12, 13, 13, 12, 11, 12, 12, 11, 10, 11, 11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11, 11, 10, 11, 12, 12], [15, 14, 15, 15, 14, 13, 14, 14, 13, 12, 13, 13, 12, 11, 12, 12, 11, 10, 11, 11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11, 11, 10, 11, 12], [16, 15, 14, 15, 15, 14, 13, 14, 14, 13, 12, 13, 13, 12, 11, 12, 12, 11, 10, 11, 11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11, 11, 10, 11], [16, 16, 15, 14, 15, 15, 14, 13, 14, 14, 13, 12, 13, 13, 12, 11, 12, 12, 11, 10, 11, 11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11, 11, 10], [15, 16, 16, 15, 14, 15, 15, 14, 13, 14, 14, 13, 12, 13, 13, 12, 11, 12, 12, 11, 10, 11, 11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11, 11], [16, 15, 16, 16, 15, 14, 15, 15, 14, 13, 14, 14, 13, 12, 13, 13, 12, 11, 12, 12, 11, 10, 11, 11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10, 11], [17, 16, 15, 16, 16, 15, 14, 15, 15, 14, 13, 14, 14, 13, 12, 13, 13, 12, 11, 12, 12, 11, 10, 11, 11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9, 10], [17, 17, 16, 15, 16, 16, 15, 14, 15, 15, 14, 13, 14, 14, 13, 12, 13, 13, 12, 11, 12, 12, 11, 10, 11, 11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10, 9], [16, 17, 17, 16, 15, 16, 16, 15, 14, 15, 15, 14, 13, 14, 14, 13, 12, 13, 13, 12, 11, 12, 12, 11, 10, 11, 11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10, 10], [17, 16, 17, 17, 16, 15, 16, 16, 15, 14, 15, 15, 14, 13, 14, 14, 13, 12, 13, 13, 12, 11, 12, 12, 11, 10, 11, 11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9, 10], [18, 17, 16, 17, 17, 16, 15, 16, 16, 15, 14, 15, 15, 14, 13, 14, 14, 13, 12, 13, 13, 12, 11, 12, 12, 11, 10, 11, 11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8, 9], [18, 18, 17, 16, 17, 17, 16, 15, 16, 16, 15, 14, 15, 15, 14, 13, 14, 14, 13, 12, 13, 13, 12, 11, 12, 12, 11, 10, 11, 11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9, 8], [17, 18, 18, 17, 16, 17, 17, 16, 15, 16, 16, 15, 14, 15, 15, 14, 13, 14, 14, 13, 12, 13, 13, 12, 11, 12, 12, 11, 10, 11, 11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9, 9], [18, 17, 18, 18, 17, 16, 17, 17, 16, 15, 16, 16, 15, 14, 15, 15, 14, 13, 14, 14, 13, 12, 13, 13, 12, 11, 12, 12, 11, 10, 11, 11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8, 9], [19, 18, 17, 18, 18, 17, 16, 17, 17, 16, 15, 16, 16, 15, 14, 15, 15, 14, 13, 14, 14, 13, 12, 13, 13, 12, 11, 12, 12, 11, 10, 11, 11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7, 8], [19, 19, 18, 17, 18, 18, 17, 16, 17, 17, 16, 15, 16, 16, 15, 14, 15, 15, 14, 13, 14, 14, 13, 12, 13, 13, 12, 11, 12, 12, 11, 10, 11, 11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8, 7], [18, 19, 19, 18, 17, 18, 18, 17, 16, 17, 17, 16, 15, 16, 16, 15, 14, 15, 15, 14, 13, 14, 14, 13, 12, 13, 13, 12, 11, 12, 12, 11, 10, 11, 11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8, 8], [19, 18, 19, 19, 18, 17, 18, 18, 17, 16, 17, 17, 16, 15, 16, 16, 15, 14, 15, 15, 14, 13, 14, 14, 13, 12, 13, 13, 12, 11, 12, 12, 11, 10, 11, 11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7, 8], [20, 19, 18, 19, 19, 18, 17, 18, 18, 17, 16, 17, 17, 16, 15, 16, 16, 15, 14, 15, 15, 14, 13, 14, 14, 13, 12, 13, 13, 12, 11, 12, 12, 11, 10, 11, 11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6, 7], [20, 20, 19, 18, 19, 19, 18, 17, 18, 18, 17, 16, 17, 17, 16, 15, 16, 16, 15, 14, 15, 15, 14, 13, 14, 14, 13, 12, 13, 13, 12, 11, 12, 12, 11, 10, 11, 11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7, 6], [19, 20, 20, 19, 18, 19, 19, 18, 17, 18, 18, 17, 16, 17, 17, 16, 15, 16, 16, 15, 14, 15, 15, 14, 13, 14, 14, 13, 12, 13, 13, 12, 11, 12, 12, 11, 10, 11, 11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7, 7], [20, 19, 20, 20, 19, 18, 19, 19, 18, 17, 18, 18, 17, 16, 17, 17, 16, 15, 16, 16, 15, 14, 15, 15, 14, 13, 14, 14, 13, 12, 13, 13, 12, 11, 12, 12, 11, 10, 11, 11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6, 7], [21, 20, 19, 20, 20, 19, 18, 19, 19, 18, 17, 18, 18, 17, 16, 17, 17, 16, 15, 16, 16, 15, 14, 15, 15, 14, 13, 14, 14, 13, 12, 13, 13, 12, 11, 12, 12, 11, 10, 11, 11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5, 6], [21, 21, 20, 19, 20, 20, 19, 18, 19, 19, 18, 17, 18, 18, 17, 16, 17, 17, 16, 15, 16, 16, 15, 14, 15, 15, 14, 13, 14, 14, 13, 12, 13, 13, 12, 11, 12, 12, 11, 10, 11, 11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6, 5], [20, 21, 21, 20, 19, 20, 20, 19, 18, 19, 19, 18, 17, 18, 18, 17, 16, 17, 17, 16, 15, 16, 16, 15, 14, 15, 15, 14, 13, 14, 14, 13, 12, 13, 13, 12, 11, 12, 12, 11, 10, 11, 11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6, 6], [21, 20, 21, 21, 20, 19, 20, 20, 19, 18, 19, 19, 18, 17, 18, 18, 17, 16, 17, 17, 16, 15, 16, 16, 15, 14, 15, 15, 14, 13, 14, 14, 13, 12, 13, 13, 12, 11, 12, 12, 11, 10, 11, 11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5, 6], [22, 21, 20, 21, 21, 20, 19, 20, 20, 19, 18, 19, 19, 18, 17, 18, 18, 17, 16, 17, 17, 16, 15, 16, 16, 15, 14, 15, 15, 14, 13, 14, 14, 13, 12, 13, 13, 12, 11, 12, 12, 11, 10, 11, 11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4, 5], [22, 22, 21, 20, 21, 21, 20, 19, 20, 20, 19, 18, 19, 19, 18, 17, 18, 18, 17, 16, 17, 17, 16, 15, 16, 16, 15, 14, 15, 15, 14, 13, 14, 14, 13, 12, 13, 13, 12, 11, 12, 12, 11, 10, 11, 11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5, 4], [21, 22, 22, 21, 20, 21, 21, 20, 19, 20, 20, 19, 18, 19, 19, 18, 17, 18, 18, 17, 16, 17, 17, 16, 15, 16, 16, 15, 14, 15, 15, 14, 13, 14, 14, 13, 12, 13, 13, 12, 11, 12, 12, 11, 10, 11, 11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5, 5], [22, 21, 22, 22, 21, 20, 21, 21, 20, 19, 20, 20, 19, 18, 19, 19, 18, 17, 18, 18, 17, 16, 17, 17, 16, 15, 16, 16, 15, 14, 15, 15, 14, 13, 14, 14, 13, 12, 13, 13, 12, 11, 12, 12, 11, 10, 11, 11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4, 5], [23, 22, 21, 22, 22, 21, 20, 21, 21, 20, 19, 20, 20, 19, 18, 19, 19, 18, 17, 18, 18, 17, 16, 17, 17, 16, 15, 16, 16, 15, 14, 15, 15, 14, 13, 14, 14, 13, 12, 13, 13, 12, 11, 12, 12, 11, 10, 11, 11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3, 4], [23, 23, 22, 21, 22, 22, 21, 20, 21, 21, 20, 19, 20, 20, 19, 18, 19, 19, 18, 17, 18, 18, 17, 16, 17, 17, 16, 15, 16, 16, 15, 14, 15, 15, 14, 13, 14, 14, 13, 12, 13, 13, 12, 11, 12, 12, 11, 10, 11, 11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4, 3], [22, 23, 23, 22, 21, 22, 22, 21, 20, 21, 21, 20, 19, 20, 20, 19, 18, 19, 19, 18, 17, 18, 18, 17, 16, 17, 17, 16, 15, 16, 16, 15, 14, 15, 15, 14, 13, 14, 14, 13, 12, 13, 13, 12, 11, 12, 12, 11, 10, 11, 11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4, 4], [23, 22, 23, 23, 22, 21, 22, 22, 21, 20, 21, 21, 20, 19, 20, 20, 19, 18, 19, 19, 18, 17, 18, 18, 17, 16, 17, 17, 16, 15, 16, 16, 15, 14, 15, 15, 14, 13, 14, 14, 13, 12, 13, 13, 12, 11, 12, 12, 11, 10, 11, 11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3, 4], [24, 23, 22, 23, 23, 22, 21, 22, 22, 21, 20, 21, 21, 20, 19, 20, 20, 19, 18, 19, 19, 18, 17, 18, 18, 17, 16, 17, 17, 16, 15, 16, 16, 15, 14, 15, 15, 14, 13, 14, 14, 13, 12, 13, 13, 12, 11, 12, 12, 11, 10, 11, 11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2, 3], [24, 24, 23, 22, 23, 23, 22, 21, 22, 22, 21, 20, 21, 21, 20, 19, 20, 20, 19, 18, 19, 19, 18, 17, 18, 18, 17, 16, 17, 17, 16, 15, 16, 16, 15, 14, 15, 15, 14, 13, 14, 14, 13, 12, 13, 13, 12, 11, 12, 12, 11, 10, 11, 11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3, 2], [23, 24, 24, 23, 22, 23, 23, 22, 21, 22, 22, 21, 20, 21, 21, 20, 19, 20, 20, 19, 18, 19, 19, 18, 17, 18, 18, 17, 16, 17, 17, 16, 15, 16, 16, 15, 14, 15, 15, 14, 13, 14, 14, 13, 12, 13, 13, 12, 11, 12, 12, 11, 10, 11, 11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3, 3], [24, 23, 24, 24, 23, 22, 23, 23, 22, 21, 22, 22, 21, 20, 21, 21, 20, 19, 20, 20, 19, 18, 19, 19, 18, 17, 18, 18, 17, 16, 17, 17, 16, 15, 16, 16, 15, 14, 15, 15, 14, 13, 14, 14, 13, 12, 13, 13, 12, 11, 12, 12, 11, 10, 11, 11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2, 3], [25, 24, 23, 24, 24, 23, 22, 23, 23, 22, 21, 22, 22, 21, 20, 21, 21, 20, 19, 20, 20, 19, 18, 19, 19, 18, 17, 18, 18, 17, 16, 17, 17, 16, 15, 16, 16, 15, 14, 15, 15, 14, 13, 14, 14, 13, 12, 13, 13, 12, 11, 12, 12, 11, 10, 11, 11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1, 2], [25, 25, 24, 23, 24, 24, 23, 22, 23, 23, 22, 21, 22, 22, 21, 20, 21, 21, 20, 19, 20, 20, 19, 18, 19, 19, 18, 17, 18, 18, 17, 16, 17, 17, 16, 15, 16, 16, 15, 14, 15, 15, 14, 13, 14, 14, 13, 12, 13, 13, 12, 11, 12, 12, 11, 10, 11, 11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2, 1], [24, 25, 25, 24, 23, 24, 24, 23, 22, 23, 23, 22, 21, 22, 22, 21, 20, 21, 21, 20, 19, 20, 20, 19, 18, 19, 19, 18, 17, 18, 18, 17, 16, 17, 17, 16, 15, 16, 16, 15, 14, 15, 15, 14, 13, 14, 14, 13, 12, 13, 13, 12, 11, 12, 12, 11, 10, 11, 11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2, 2], [25, 24, 25, 25, 24, 23, 24, 24, 23, 22, 23, 23, 22, 21, 22, 22, 21, 20, 21, 21, 20, 19, 20, 20, 19, 18, 19, 19, 18, 17, 18, 18, 17, 16, 17, 17, 16, 15, 16, 16, 15, 14, 15, 15, 14, 13, 14, 14, 13, 12, 13, 13, 12, 11, 12, 12, 11, 10, 11, 11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1, 2], [26, 25, 24, 25, 25, 24, 23, 24, 24, 23, 22, 23, 23, 22, 21, 22, 22, 21, 20, 21, 21, 20, 19, 20, 20, 19, 18, 19, 19, 18, 17, 18, 18, 17, 16, 17, 17, 16, 15, 16, 16, 15, 14, 15, 15, 14, 13, 14, 14, 13, 12, 13, 13, 12, 11, 12, 12, 11, 10, 11, 11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0, 1], [26, 26, 25, 24, 25, 25, 24, 23, 24, 24, 23, 22, 23, 23, 22, 21, 22, 22, 21, 20, 21, 21, 20, 19, 20, 20, 19, 18, 19, 19, 18, 17, 18, 18, 17, 16, 17, 17, 16, 15, 16, 16, 15, 14, 15, 15, 14, 13, 14, 14, 13, 12, 13, 13, 12, 11, 12, 12, 11, 10, 11, 11, 10, 9, 10, 10, 9, 8, 9, 9, 8, 7, 8, 8, 7, 6, 7, 7, 6, 5, 6, 6, 5, 4, 5, 5, 4, 3, 4, 4, 3, 2, 3, 3, 2, 1, 2, 2, 1, 0]]\"]]", 
      "solution": "def floyd_warshall(g):\n    n = len(g)\n    d = g[:]\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                d[i][j] = min(d[i][j], d[i][k] + d[k][j])\n    return d", 
      "problem": 59, 
      "validation": "Check.equal(\"\"\"floyd_warshall([[0,2,8], [inf,0,5], [inf,inf,0]])\"\"\",\n            [[0,2,7], [inf,0,5], [inf,inf,0]])\n\nCheck.equal(\"\"\"floyd_warshall([[0,4,2,inf], [inf,0,inf,3], [inf,1,0,5], [inf,1,1,0]])\"\"\",\n            [[0, 3, 2, 6], [inf, 0, 4, 3], [inf, 1, 0, 4], [inf, 1, 1, 0]])\n\nfor n in [5,20,100]:\n    Check.challenge(floyd_warshall([[(0 if i == j else (1 if abs(i-j) in [1,4] else inf)) for j in range(n)] for i in range(n)]))"
    }
  }, 
  {
    "pk": 854, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `komplement(x)`, ki vrne komplement mno\u017eice `x`, pri\n\u010demer za univerzalno mno\u017eico vzamemo vsa \u0161tevila od 1 do 1000.\n\n\u010ce `x` ni podmno\u017eica univerzalne mno\u017eice, naj funkcija z ukazom `stop`\njavi napako\n\"Uuups! To pa ni podmno\u017eica na\u0161e izmi\u0161ljene univerzalne mno\u017eice.\".", 
      "timestamp": "2012-11-11 21:43:17", 
      "challenge": "[]", 
      "solution": "komplement <- function(x) {\n  u <- 1 : 1000\n  if(podmnozica(x, u)) {\n    return(setdiff(u, x))\n  } else {\n    stop(\"Uuups! To pa ni podmno\u017eica na\u0161e izmi\u0161ljene univerzalne mno\u017eice.\")\n  }\n}", 
      "problem": 279, 
      "validation": "check$equal(komplement('a'), \n            exception = \"Uuups! To pa ni podmno\u017eica na\u0161e izmi\u0161ljene univerzalne mno\u017eice.\")\ncheck$equal(komplement(-10 : -50), \n            exception = \"Uuups! To pa ni podmno\u017eica na\u0161e izmi\u0161ljene univerzalne mno\u017eice.\")\ncheck$equal(komplement(1 : 990), 991 : 1000)\ncheck$equal(komplement(2 : 1000), 1)"
    }
  }, 
  {
    "pk": 30, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Pravimo, da je beseda skoraj palindrom, \u010de ji je treba zbrisati natanko\neno \u010drko, da bi postala palindrom. Primer je beseda 'kolo', ki ji\nmoramo zbrisati \u010drko 'k', pa postane palindrom 'olo'.\n\nSestavite funkcijo `skorajPalindrom(niz)`, ki preveri, ali je `niz`\nskoraj palindrom. Vse znake (tudi presledke) v besedi obravnavamo enako.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"]]", 
      "solution": "def skorajPalindrom(niz):\n    # za vsak i poskusimo izpustiti \u010drko na i-tem mestu\n    for i in range(len(niz)):\n        # \u010de smo dobili palindrom, kon\u010damo\n        if palindrom(niz[:i] + niz[i + 1:]):\n            return True\n    # \u010de je zanka pri\u0161la do konca, palindroma nismo na\u0161li\n    return False", 
      "problem": 18, 
      "validation": "Check.equal('skorajPalindrom(\"pericare\u017eerackirep\")', True)\nCheck.equal('skorajPalindrom(\"neragdodaren\")', True)\nCheck.equal('skorajPalindrom(\"osemtermeso\")', False)\nfor i in range(100):\n    Check.challenge(skorajPalindrom(str(i)))"
    }
  }, 
  {
    "pk": 216, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Razpredelnici dodajte stolpec `barva.oci`, v katerem je zapisana barva\r\no\u010di: barve naj bodo predstavljene z nizi. Skupno naj bo pribli\u017eno\r\nena \u0161estina modrih, ena tretjina rjavih in ena polovica zelenih o\u010di.", 
      "timestamp": "2012-11-19 13:43:16", 
      "challenge": "[]", 
      "solution": "podatki$barva.oci <- sample(\r\n    c(\"modra\", \"rjava\", \"zelena\"), 100, replace = TRUE,\r\n    prob = c(1 / 6, 1 / 3, 1 / 2)\r\n)", 
      "problem": 65, 
      "validation": "sapply(1 : 3, function(i) {\r\n  barva <- c(\"Modra\", \"Rjava\", \"Zelena\")\r\n  k <- sum(podatki$barva.oci == tolower(barva[i]))\r\n  pricakovano <- c(17, 33, 50)[i]\r\n  if(k < pricakovano * 0.7) check$error(\"%s barva o\u010di se ne pojavlja dovolj pogosto. (%i)\", barva[i], k)\r\n  if(k > pricakovano * 1.3) check$error(\"%s barva o\u010di se pojavlja prepogosto. (%i)\", barva[i], k)\r\n})"
    }
  }, 
  {
    "pk": 304, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Izpi\u0161ite \u0161e prazen kvadrat, obrobljen z znakom `\"+\"`.\nVelikost kvadrata naj bo shranjena v spremenljivki `n`.\nNa primer, \u010de je `n = 4`, se naj izpi\u0161e\n\n    ++++\n    +  +\n    +  +\n    ++++\n\nKvadrat naj bo velikosti vsaj $7 \\times 7$ znakov.", 
      "timestamp": "2013-02-25 02:15:49", 
      "challenge": "[]", 
      "solution": "n = 7\npolna = n * \"+\" + \"\\n\"\nprazna = \"+\" + (n - 2) * \" \" + \"+\" + \"\\n\"\nkvadrat = polna + (n - 2) * prazna + polna\nprint(kvadrat)", 
      "problem": 98, 
      "validation": "def izpis(source):\n    import io, sys\n    old_stdout = sys.stdout\n    new_stdout = io.StringIO()\n    sys.stdout = new_stdout\n    glob = {}\n    loc = {}\n    exec(source,glob,loc)\n    sys.stdout = old_stdout\n    return (new_stdout.getvalue().strip(),loc)\n\ndef preveriKvadrat(kvadrat, n):\n    vrstice = kvadrat.splitlines()\n    try:\n        n = int(n)\n    except:\n        Check.error(\"V spremenljivko n morate shraniti velikost kvadrata.\")\n    else:\n        if n < 7:\n            Check.error(\"Kvadrat ni velikosti vsaj 7 x 7.\")\n        if len(vrstice) != n:\n            Check.error(\"Kvadrat nima pravega \u0161tevila vrstic.\")\n        # if n < 2:\n        #    Check.error(\"Kvadrat mora imeti vsaj 2 vrstici.\")    \n        for i in range(0, len(vrstice)):\n            vrstica = vrstice[i]\n            if len(vrstica.strip()) != n:\n                Check.error(\"{0}. vrstica nima prave dol\u017eine.\", i + 1)\n            elif (i == 0 or i == len(vrstice) - 1) and vrstica != n * \"+\":\n                Check.error(\"{0}. vrstica ni sestavljena iz pravih znakov.\", i + 1)\n            elif 0 < i < len(vrstice) - 1:\n                if vrstica.count('+') != 2 or vrstica.count(' ') != n-2:\n                    Check.error(\"{0}. vrstica ima napa\u010dno obliko.\".format(i + 1))\n\n(resitev, okolje) = izpis(Check.current[\"solution\"])\npreveriKvadrat(resitev, okolje.get(\"n\"))"
    }
  }, 
  {
    "pk": 114, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavi funkcijo `limone(n)`, ki sprejme naravno \u0161tevilo in vrne\nniz oblike \"Ima\u0161 n limon.\", pri \u010demer mora biti seveda vse pravilno\nsklanjano:\n\n    Nima\u0161 nobene limone.\n    Ima\u0161 1 limono.\n    Ima\u0161 2 limoni.\n    Ima\u0161 3 limone.\n    Ima\u0161 4 limone.\n    Ima\u0161 5 limon.\n    ...\n    Ima\u0161 101 limono.\n    ...", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"None\", \"['Vnos ni smiseln.', 'Vnos ni smiseln.', 'Nima\\u0161 nobene limone.', 'Ima\\u0161 1 limono.', 'Ima\\u0161 2 limoni.', 'Ima\\u0161 3 limone.', 'Ima\\u0161 4 limone.', 'Ima\\u0161 5 limon.', 'Ima\\u0161 6 limon.', 'Ima\\u0161 7 limon.', 'Ima\\u0161 8 limon.', 'Ima\\u0161 9 limon.', 'Ima\\u0161 10 limon.', 'Ima\\u0161 11 limon.', 'Ima\\u0161 12 limon.', 'Ima\\u0161 13 limon.', 'Ima\\u0161 14 limon.', 'Ima\\u0161 15 limon.', 'Ima\\u0161 16 limon.', 'Ima\\u0161 17 limon.', 'Ima\\u0161 18 limon.', 'Ima\\u0161 19 limon.', 'Ima\\u0161 20 limon.', 'Ima\\u0161 21 limon.', 'Ima\\u0161 22 limon.', 'Ima\\u0161 23 limon.', 'Ima\\u0161 24 limon.', 'Ima\\u0161 25 limon.', 'Ima\\u0161 26 limon.', 'Ima\\u0161 27 limon.', 'Ima\\u0161 28 limon.', 'Ima\\u0161 29 limon.', 'Ima\\u0161 30 limon.', 'Ima\\u0161 31 limon.', 'Ima\\u0161 32 limon.', 'Ima\\u0161 33 limon.', 'Ima\\u0161 34 limon.', 'Ima\\u0161 35 limon.', 'Ima\\u0161 36 limon.', 'Ima\\u0161 37 limon.', 'Ima\\u0161 38 limon.', 'Ima\\u0161 39 limon.', 'Ima\\u0161 40 limon.', 'Ima\\u0161 41 limon.', 'Ima\\u0161 42 limon.', 'Ima\\u0161 43 limon.', 'Ima\\u0161 44 limon.', 'Ima\\u0161 45 limon.', 'Ima\\u0161 46 limon.', 'Ima\\u0161 47 limon.', 'Ima\\u0161 48 limon.', 'Ima\\u0161 49 limon.', 'Ima\\u0161 50 limon.', 'Ima\\u0161 51 limon.', 'Ima\\u0161 52 limon.', 'Ima\\u0161 53 limon.', 'Ima\\u0161 54 limon.', 'Ima\\u0161 55 limon.', 'Ima\\u0161 56 limon.', 'Ima\\u0161 57 limon.', 'Ima\\u0161 58 limon.', 'Ima\\u0161 59 limon.', 'Ima\\u0161 60 limon.', 'Ima\\u0161 61 limon.', 'Ima\\u0161 62 limon.', 'Ima\\u0161 63 limon.', 'Ima\\u0161 64 limon.', 'Ima\\u0161 65 limon.', 'Ima\\u0161 66 limon.', 'Ima\\u0161 67 limon.', 'Ima\\u0161 68 limon.', 'Ima\\u0161 69 limon.', 'Ima\\u0161 70 limon.', 'Ima\\u0161 71 limon.', 'Ima\\u0161 72 limon.', 'Ima\\u0161 73 limon.', 'Ima\\u0161 74 limon.', 'Ima\\u0161 75 limon.', 'Ima\\u0161 76 limon.', 'Ima\\u0161 77 limon.', 'Ima\\u0161 78 limon.', 'Ima\\u0161 79 limon.', 'Ima\\u0161 80 limon.', 'Ima\\u0161 81 limon.', 'Ima\\u0161 82 limon.', 'Ima\\u0161 83 limon.', 'Ima\\u0161 84 limon.', 'Ima\\u0161 85 limon.', 'Ima\\u0161 86 limon.', 'Ima\\u0161 87 limon.', 'Ima\\u0161 88 limon.', 'Ima\\u0161 89 limon.', 'Ima\\u0161 90 limon.', 'Ima\\u0161 91 limon.', 'Ima\\u0161 92 limon.', 'Ima\\u0161 93 limon.', 'Ima\\u0161 94 limon.', 'Ima\\u0161 95 limon.', 'Ima\\u0161 96 limon.', 'Ima\\u0161 97 limon.', 'Ima\\u0161 98 limon.', 'Ima\\u0161 99 limon.', 'Ima\\u0161 100 limon.', 'Ima\\u0161 101 limono.', 'Ima\\u0161 102 limoni.', 'Ima\\u0161 103 limone.', 'Ima\\u0161 104 limone.', 'Ima\\u0161 105 limon.', 'Ima\\u0161 106 limon.', 'Ima\\u0161 107 limon.', 'Ima\\u0161 108 limon.', 'Ima\\u0161 109 limon.', 'Ima\\u0161 110 limon.', 'Ima\\u0161 111 limon.', 'Ima\\u0161 112 limon.', 'Ima\\u0161 113 limon.', 'Ima\\u0161 114 limon.', 'Ima\\u0161 115 limon.', 'Ima\\u0161 116 limon.', 'Ima\\u0161 117 limon.', 'Ima\\u0161 118 limon.', 'Ima\\u0161 119 limon.', 'Ima\\u0161 120 limon.', 'Ima\\u0161 121 limon.', 'Ima\\u0161 122 limon.', 'Ima\\u0161 123 limon.', 'Ima\\u0161 124 limon.', 'Ima\\u0161 125 limon.', 'Ima\\u0161 126 limon.', 'Ima\\u0161 127 limon.', 'Ima\\u0161 128 limon.', 'Ima\\u0161 129 limon.', 'Ima\\u0161 130 limon.', 'Ima\\u0161 131 limon.', 'Ima\\u0161 132 limon.', 'Ima\\u0161 133 limon.', 'Ima\\u0161 134 limon.', 'Ima\\u0161 135 limon.', 'Ima\\u0161 136 limon.', 'Ima\\u0161 137 limon.', 'Ima\\u0161 138 limon.', 'Ima\\u0161 139 limon.', 'Ima\\u0161 140 limon.', 'Ima\\u0161 141 limon.', 'Ima\\u0161 142 limon.', 'Ima\\u0161 143 limon.', 'Ima\\u0161 144 limon.', 'Ima\\u0161 145 limon.', 'Ima\\u0161 146 limon.', 'Ima\\u0161 147 limon.', 'Ima\\u0161 148 limon.', 'Ima\\u0161 149 limon.', 'Ima\\u0161 150 limon.', 'Ima\\u0161 151 limon.', 'Ima\\u0161 152 limon.', 'Ima\\u0161 153 limon.', 'Ima\\u0161 154 limon.', 'Ima\\u0161 155 limon.', 'Ima\\u0161 156 limon.', 'Ima\\u0161 157 limon.', 'Ima\\u0161 158 limon.', 'Ima\\u0161 159 limon.', 'Ima\\u0161 160 limon.', 'Ima\\u0161 161 limon.', 'Ima\\u0161 162 limon.', 'Ima\\u0161 163 limon.', 'Ima\\u0161 164 limon.', 'Ima\\u0161 165 limon.', 'Ima\\u0161 166 limon.', 'Ima\\u0161 167 limon.', 'Ima\\u0161 168 limon.', 'Ima\\u0161 169 limon.', 'Ima\\u0161 170 limon.', 'Ima\\u0161 171 limon.', 'Ima\\u0161 172 limon.', 'Ima\\u0161 173 limon.', 'Ima\\u0161 174 limon.', 'Ima\\u0161 175 limon.', 'Ima\\u0161 176 limon.', 'Ima\\u0161 177 limon.', 'Ima\\u0161 178 limon.', 'Ima\\u0161 179 limon.', 'Ima\\u0161 180 limon.', 'Ima\\u0161 181 limon.', 'Ima\\u0161 182 limon.', 'Ima\\u0161 183 limon.', 'Ima\\u0161 184 limon.', 'Ima\\u0161 185 limon.', 'Ima\\u0161 186 limon.', 'Ima\\u0161 187 limon.', 'Ima\\u0161 188 limon.', 'Ima\\u0161 189 limon.', 'Ima\\u0161 190 limon.', 'Ima\\u0161 191 limon.', 'Ima\\u0161 192 limon.', 'Ima\\u0161 193 limon.', 'Ima\\u0161 194 limon.', 'Ima\\u0161 195 limon.', 'Ima\\u0161 196 limon.', 'Ima\\u0161 197 limon.', 'Ima\\u0161 198 limon.', 'Ima\\u0161 199 limon.', 'Ima\\u0161 200 limon.', 'Ima\\u0161 201 limono.', 'Ima\\u0161 202 limoni.', 'Ima\\u0161 203 limone.', 'Ima\\u0161 204 limone.', 'Ima\\u0161 205 limon.', 'Ima\\u0161 206 limon.', 'Ima\\u0161 207 limon.']\"]]", 
      "solution": "def limone(n):\n    if n < 0:\n        return \"Vnos ni smiseln.\"\n    if n == 0:\n        return \"Nima\u0161 nobene limone.\"\n    koncnica = \".\"\n    # trenutek za slovnico: za pravilno kon\u010dnico gledamo po modulu 100\n    ostanek = n % 100\n    if ostanek == 1:\n        koncnica = \"o.\"\n    elif ostanek == 2:\n        koncnica = \"i.\"\n    elif ostanek == 3 or ostanek == 4:  \n        koncnica = \"e.\"\n    return \"Ima\u0161 \" + str(n) + \" limon\" + koncnica", 
      "problem": 42, 
      "validation": "Check.equal('limone(0)', \"Nima\u0161 nobene limone.\")\nCheck.equal('limone(-1)', \"Vnos ni smiseln.\")\nCheck.equal('limone(1)', \"Ima\u0161 1 limono.\")\nCheck.equal('limone(2)', \"Ima\u0161 2 limoni.\")\nCheck.equal('limone(3)', \"Ima\u0161 3 limone.\")\nCheck.equal('limone(4)', \"Ima\u0161 4 limone.\")\nCheck.equal('limone(5)', \"Ima\u0161 5 limon.\")\nCheck.equal('limone(201)', \"Ima\u0161 201 limono.\")\nCheck.challenge([limone(i) for i in range(-2, 208)])"
    }
  }, 
  {
    "pk": 26, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `fibonacci(n)`, ki izra\u010duna `n`-to Fibonaccijevo\r\n\u0161tevilo.", 
      "timestamp": "2012-10-22 10:22:31", 
      "challenge": "[]", 
      "solution": "fibonacci <- function(n) {\r\n  a <- 0\r\n  b <- 1\r\n  i <- 1\r\n  while(i <= n) {\r\n    vsota <- a + b\r\n    a <- b\r\n    b <- vsota\r\n    i <- i + 1\r\n  }\r\n  return(a)\r\n}", 
      "problem": 17, 
      "validation": "check$equal(fibonacci(1), 1)\r\ncheck$equal(fibonacci(2), 1)\r\ncheck$equal(fibonacci(4), 3)\r\ncheck$equal(fibonacci(5), 5)\r\ncheck$equal(fibonacci(6), 8)\r\ncheck$equal(fibonacci(8), 21)\r\ncheck$equal(fibonacci(14), 377)"
    }
  }, 
  {
    "pk": 69, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "V vektor `zaokrozeni` shranite podatke iz vektorja `otoki`,\nle da vse povr\u0161ine nad 100 km^2 zaokro\u017eite na desetice,\nmanj\u0161e pa na cela \u0161tevila.", 
      "timestamp": "2012-10-22 11:44:01", 
      "challenge": "[]", 
      "solution": "zaokrozeni <- otoki\nzaokrozeni[zaokrozeni > 100] <- round(zaokrozeni[zaokrozeni > 100], -1)\nzaokrozeni<- round(zaokrozeni) # ker so ve\u010dji \u017ee cela \u0161tevila, zaokro\u017eitev nima vpliva", 
      "problem": 263, 
      "validation": "check$equal(zaokrozeni['Java'], 130)\ncheck$equal(zaokrozeni['Britain'], 220)\ncheck$equal(zaokrozeni['Tasmania'], 67)"
    }
  }, 
  {
    "pk": 103, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `inverzna_harmonicna(x)`, ki pove, koliko \u010dlenov\r\nharmoni\u010dne vrste $$1/1 + 1/2 + 1/3 + 1/4 + \\cdots$$ moramo se\u0161teti,\r\nda prese\u017eemo vrednost $x$.", 
      "timestamp": "2012-11-05 01:06:47", 
      "challenge": "[[\"None\", \"[227, 616, 1674, 4550]\"]]", 
      "solution": "def inverzna_harmonicna(x):\r\n    v = 0\r\n    k = 1\r\n    while v <= x:\r\n        v += 1/k\r\n        k += 1\r\n    return (k-1)", 
      "problem": 29, 
      "validation": "Check.equal(\"inverzna_harmonicna(1)\", 2)\r\nCheck.equal(\"inverzna_harmonicna(2)\", 4)\r\nCheck.equal(\"inverzna_harmonicna(3)\", 11)\r\nCheck.equal(\"inverzna_harmonicna(4)\", 31)\r\nCheck.equal(\"inverzna_harmonicna(5)\", 83)\r\nCheck.equal(\"inverzna_harmonicna(10)\", 12367)\r\n\r\nCheck.challenge([inverzna_harmonicna(x) for x in [6,7,8,9]])"
    }
  }, 
  {
    "pk": 40, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `transponiraj(mat)`, ki transponira dano matriko\n`mat`.", 
      "timestamp": "2012-10-11 12:20:47", 
      "challenge": "[]", 
      "solution": "def transponiraj(mat):\n    m, n = len(mat), len(mat[0])\n    return [[mat[i][j] for i in range(m)] for j in range(n)]", 
      "problem": 20, 
      "validation": "Check.equal('transponiraj([[1, 3], [2, 4]])', [[1, 2], [3, 4]])\nCheck.equal('transponiraj([[1], [5]])', [[1, 5]])\nCheck.equal('transponiraj([[1, 3, 6], [2, 4, 8]])', [[1, 2], [3, 4], [6, 8]])\n##Check.challenge(transponiraj([[i ** 2 + 3 * j for i in range(8)] for j in range(8)]))"
    }
  }, 
  {
    "pk": 63, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `geometrijsko(a, q, n)`, ki sprejme za\u010detni \u010dlen `a`,\nkoeficient `q` in dol\u017eino zaporedja `n`, ter vrne vektor\n`a, a q, a q^2, ..., a q^(n - 1)`.", 
      "timestamp": "2012-10-22 10:43:59", 
      "challenge": "[]", 
      "solution": "geometrijsko <- function(a, q, n) {\n    return(a * q^(0 : (n - 1)))\n}", 
      "problem": 21, 
      "validation": "check$equal(geometrijsko(1, 2, 5), c(1, 2, 4, 8, 16))\ncheck$equal(geometrijsko(2, 3, 4), c(2, 6, 18, 54))"
    }
  }, 
  {
    "pk": 892, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `uredi(sez)`, ki z urejanjem s kopico uredi seznam `sez`.", 
      "timestamp": "2013-01-15 07:54:13", 
      "challenge": "[]", 
      "solution": "def uredi(sez):\n    h = Kopica()\n    for x in sez:\n        h.dodaj(x)\n    s = []\n    while not h.prazna():\n        s.append(h.odstrani())\n    return s", 
      "problem": 303, 
      "validation": "Check.equal(\"uredi([3, 1, 4, 1, 5, 9, 2, 6, 5])\", [1, 1, 2, 3, 4, 5, 5, 6, 9])\nCheck.equal(\"uredi([2, 7, 1, 8, 2, 8, 1, 8, 3])\", [1, 1, 2, 2, 3, 7, 8, 8, 8])"
    }
  }, 
  {
    "pk": 80, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `hilbert(n)`, ki vrne Hilbertovo matriko dimenzije\n`n` \u00d7 `n`.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"NA\", \"1, 0.5, 0.3333, 0.25, 0.2, 0.1667, 0.1429, 0.125, 0.1111, 0.1, 0.0909, 0.0833, 0.0769, 0.0714, 0.0667, 0.0625, 0.0588, 0.0556, 0.0526, 0.05, 0.5, 0.3333, 0.25, 0.2, 0.1667, 0.1429, 0.125, 0.1111, 0.1, 0.0909, 0.0833, 0.0769, 0.0714, 0.0667, 0.0625, 0.0588, 0.0556, 0.0526, 0.05, 0.0476, 0.3333, 0.25, 0.2, 0.1667, 0.1429, 0.125, 0.1111, 0.1, 0.0909, 0.0833, 0.0769, 0.0714, 0.0667, 0.0625, 0.0588, 0.0556, 0.0526, 0.05, 0.0476, 0.0455, 0.25, 0.2, 0.1667, 0.1429, 0.125, 0.1111, 0.1, 0.0909, 0.0833, 0.0769, 0.0714, 0.0667, 0.0625, 0.0588, 0.0556, 0.0526, 0.05, 0.0476, 0.0455, 0.0435, 0.2, 0.1667, 0.1429, 0.125, 0.1111, 0.1, 0.0909, 0.0833, 0.0769, 0.0714, 0.0667, 0.0625, 0.0588, 0.0556, 0.0526, 0.05, 0.0476, 0.0455, 0.0435, 0.0417, 0.1667, 0.1429, 0.125, 0.1111, 0.1, 0.0909, 0.0833, 0.0769, 0.0714, 0.0667, 0.0625, 0.0588, 0.0556, 0.0526, 0.05, 0.0476, 0.0455, 0.0435, 0.0417, 0.04, 0.1429, 0.125, 0.1111, 0.1, 0.0909, 0.0833, 0.0769, 0.0714, 0.0667, 0.0625, 0.0588, 0.0556, 0.0526, 0.05, 0.0476, 0.0455, 0.0435, 0.0417, 0.04, 0.0385, 0.125, 0.1111, 0.1, 0.0909, 0.0833, 0.0769, 0.0714, 0.0667, 0.0625, 0.0588, 0.0556, 0.0526, 0.05, 0.0476, 0.0455, 0.0435, 0.0417, 0.04, 0.0385, 0.037, 0.1111, 0.1, 0.0909, 0.0833, 0.0769, 0.0714, 0.0667, 0.0625, 0.0588, 0.0556, 0.0526, 0.05, 0.0476, 0.0455, 0.0435, 0.0417, 0.04, 0.0385, 0.037, 0.0357, 0.1, 0.0909, 0.0833, 0.0769, 0.0714, 0.0667, 0.0625, 0.0588, 0.0556, 0.0526, 0.05, 0.0476, 0.0455, 0.0435, 0.0417, 0.04, 0.0385, 0.037, 0.0357, 0.0345, 0.0909, 0.0833, 0.0769, 0.0714, 0.0667, 0.0625, 0.0588, 0.0556, 0.0526, 0.05, 0.0476, 0.0455, 0.0435, 0.0417, 0.04, 0.0385, 0.037, 0.0357, 0.0345, 0.0333, 0.0833, 0.0769, 0.0714, 0.0667, 0.0625, 0.0588, 0.0556, 0.0526, 0.05, 0.0476, 0.0455, 0.0435, 0.0417, 0.04, 0.0385, 0.037, 0.0357, 0.0345, 0.0333, 0.0323, 0.0769, 0.0714, 0.0667, 0.0625, 0.0588, 0.0556, 0.0526, 0.05, 0.0476, 0.0455, 0.0435, 0.0417, 0.04, 0.0385, 0.037, 0.0357, 0.0345, 0.0333, 0.0323, 0.0312, 0.0714, 0.0667, 0.0625, 0.0588, 0.0556, 0.0526, 0.05, 0.0476, 0.0455, 0.0435, 0.0417, 0.04, 0.0385, 0.037, 0.0357, 0.0345, 0.0333, 0.0323, 0.0312, 0.0303, 0.0667, 0.0625, 0.0588, 0.0556, 0.0526, 0.05, 0.0476, 0.0455, 0.0435, 0.0417, 0.04, 0.0385, 0.037, 0.0357, 0.0345, 0.0333, 0.0323, 0.0312, 0.0303, 0.0294, 0.0625, 0.0588, 0.0556, 0.0526, 0.05, 0.0476, 0.0455, 0.0435, 0.0417, 0.04, 0.0385, 0.037, 0.0357, 0.0345, 0.0333, 0.0323, 0.0312, 0.0303, 0.0294, 0.0286, 0.0588, 0.0556, 0.0526, 0.05, 0.0476, 0.0455, 0.0435, 0.0417, 0.04, 0.0385, 0.037, 0.0357, 0.0345, 0.0333, 0.0323, 0.0312, 0.0303, 0.0294, 0.0286, 0.0278, 0.0556, 0.0526, 0.05, 0.0476, 0.0455, 0.0435, 0.0417, 0.04, 0.0385, 0.037, 0.0357, 0.0345, 0.0333, 0.0323, 0.0312, 0.0303, 0.0294, 0.0286, 0.0278, 0.027, 0.0526, 0.05, 0.0476, 0.0455, 0.0435, 0.0417, 0.04, 0.0385, 0.037, 0.0357, 0.0345, 0.0333, 0.0323, 0.0312, 0.0303, 0.0294, 0.0286, 0.0278, 0.027, 0.0263, 0.05, 0.0476, 0.0455, 0.0435, 0.0417, 0.04, 0.0385, 0.037, 0.0357, 0.0345, 0.0333, 0.0323, 0.0312, 0.0303, 0.0294, 0.0286, 0.0278, 0.027, 0.0263, 0.0256\"]]", 
      "solution": "hilbert <- function(n) {\n    outer(1 : n, 1 : n, function(i, j) 1 / (i + j - 1))\n}", 
      "problem": 33, 
      "validation": "check$equal(dim(hilbert(123)), c(123, 123))\ncheck$equal(round(hilbert(2), 5), round(matrix(c(1, 1/2, 1/2, 1/3), 2), 5))\ncheck$equal(round(hilbert(3), 5), round(matrix(c(1, 1/2, 1/3, 1/2, 1/3, 1/4, 1/3, 1/4, 1/5), 3), 5))\ncheck$challenge(toString(round(hilbert(20), 4)))"
    }
  }, 
  {
    "pk": 66, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `sodi`, ki vrne vse komponente na sodih mestih.", 
      "timestamp": "2012-11-07 12:55:12", 
      "challenge": "[[\"NA\", \"33 96 160 223 286 350 413 477 540 604 667 731 794 857 921 984 1048 1111 1175 1238\"]]", 
      "solution": "sodi <- function(v) {\r\n    v[seq(2, length(v), 2)]\r\n}", 
      "problem": 22, 
      "validation": "check$equal(sodi(c(1, 5, 2, 4, 1, 3, 10, 7)), c(5, 4, 3, 7))\r\ncheck$equal(sodi(c(1, 5, -2, -4, -1)), c(5, -4))\r\ncheck$challenge(paste(sodi(round(seq(1, 1238, length.out=40))), collapse=\" \"))"
    }
  }, 
  {
    "pk": 516, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Podnaloga (b)", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "class IskalnoDrevo(IskalnoDrevo):\n\n    def vsotaInterval(self, a, b):\n        return True", 
      "problem": 167, 
      "validation": ""
    }
  }, 
  {
    "pk": 750, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `okrajsajDva(niz)`, ki vrne `niz` brez prve\npojavitve dveh enakih znakov, ki sta drug poleg drugega. \u010ce so vsi\nsosednji znaki razli\u010dni, naj funkcija vrne nespremenjeni `niz`.", 
      "timestamp": "2012-07-12 08:25:27", 
      "challenge": "[]", 
      "solution": "def okrajsajDva(niz):\n    for i in range(0, len(niz) - 1):\n        if niz[i] == niz[i + 1]:\n            return brezZnakov(niz, i)\n    return niz", 
      "problem": 236, 
      "validation": "Check.equal(\"okrajsajDva('oddih')\", \"oih\")\nCheck.equal(\"okrajsajDva('aabbcc')\", \"bbcc\")\nCheck.equal(\"okrajsajDva('www.juhuhu.com')\", \"w.juhuhu.com\")\nCheck.equal(\"okrajsajDva('abcde')\", \"abcde\")"
    }
  }, 
  {
    "pk": 895, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `integral(a = 1, k = 1000)`,\r\nki z metodo Monte Carlo s `k` to\u010dkami oceni\r\nvrednost integrala\r\n$$\r\n  \\int_{-a}^{a} e^{-(x / a)^2} \\, dx. \r\n$$", 
      "timestamp": "2013-02-11 12:07:58", 
      "challenge": "[]", 
      "solution": "integral <- function(a = 1, k = 1000) {\r\n  x <- runif(k, -a, a)\r\n  y <- runif(k, 0, 1)\r\n  pod.grafom <- y <= exp(-(x / a)^2)\r\n  return(2 * a * mean(pod.grafom))\r\n}", 
      "problem": 309, 
      "validation": ""
    }
  }, 
  {
    "pk": 135, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `steviloDni(leto)`, ki vrne \u0161tevilo dni v danem letu.", 
      "timestamp": "2012-10-24 13:30:16", 
      "challenge": "[[\"1900\", \"365\"], [\"1901\", \"365\"], [\"1902\", \"365\"], [\"1903\", \"365\"], [\"1904\", \"366\"], [\"1905\", \"365\"], [\"1906\", \"365\"], [\"1907\", \"365\"], [\"1908\", \"366\"], [\"1909\", \"365\"], [\"1910\", \"365\"], [\"1911\", \"365\"], [\"1912\", \"366\"], [\"1913\", \"365\"], [\"1914\", \"365\"], [\"1915\", \"365\"], [\"1916\", \"366\"], [\"1917\", \"365\"], [\"1918\", \"365\"], [\"1919\", \"365\"], [\"1920\", \"366\"], [\"1921\", \"365\"], [\"1922\", \"365\"], [\"1923\", \"365\"], [\"1924\", \"366\"], [\"1925\", \"365\"], [\"1926\", \"365\"], [\"1927\", \"365\"], [\"1928\", \"366\"], [\"1929\", \"365\"], [\"1930\", \"365\"], [\"1931\", \"365\"], [\"1932\", \"366\"], [\"1933\", \"365\"], [\"1934\", \"365\"], [\"1935\", \"365\"], [\"1936\", \"366\"], [\"1937\", \"365\"], [\"1938\", \"365\"], [\"1939\", \"365\"], [\"1940\", \"366\"], [\"1941\", \"365\"], [\"1942\", \"365\"], [\"1943\", \"365\"], [\"1944\", \"366\"], [\"1945\", \"365\"], [\"1946\", \"365\"], [\"1947\", \"365\"], [\"1948\", \"366\"], [\"1949\", \"365\"], [\"1950\", \"365\"], [\"1951\", \"365\"], [\"1952\", \"366\"], [\"1953\", \"365\"], [\"1954\", \"365\"], [\"1955\", \"365\"], [\"1956\", \"366\"], [\"1957\", \"365\"], [\"1958\", \"365\"], [\"1959\", \"365\"], [\"1960\", \"366\"], [\"1961\", \"365\"], [\"1962\", \"365\"], [\"1963\", \"365\"], [\"1964\", \"366\"], [\"1965\", \"365\"], [\"1966\", \"365\"], [\"1967\", \"365\"], [\"1968\", \"366\"], [\"1969\", \"365\"], [\"1970\", \"365\"], [\"1971\", \"365\"], [\"1972\", \"366\"], [\"1973\", \"365\"], [\"1974\", \"365\"], [\"1975\", \"365\"], [\"1976\", \"366\"], [\"1977\", \"365\"], [\"1978\", \"365\"], [\"1979\", \"365\"], [\"1980\", \"366\"], [\"1981\", \"365\"], [\"1982\", \"365\"], [\"1983\", \"365\"], [\"1984\", \"366\"], [\"1985\", \"365\"], [\"1986\", \"365\"], [\"1987\", \"365\"], [\"1988\", \"366\"], [\"1989\", \"365\"], [\"1990\", \"365\"], [\"1991\", \"365\"], [\"1992\", \"366\"], [\"1993\", \"365\"], [\"1994\", \"365\"], [\"1995\", \"365\"], [\"1996\", \"366\"], [\"1997\", \"365\"], [\"1998\", \"365\"], [\"1999\", \"365\"], [\"2000\", \"366\"], [\"2001\", \"365\"], [\"2002\", \"365\"], [\"2003\", \"365\"], [\"2004\", \"366\"], [\"2005\", \"365\"], [\"2006\", \"365\"], [\"2007\", \"365\"], [\"2008\", \"366\"], [\"2009\", \"365\"], [\"2010\", \"365\"], [\"2011\", \"365\"], [\"2012\", \"366\"], [\"2013\", \"365\"], [\"2014\", \"365\"], [\"2015\", \"365\"], [\"2016\", \"366\"], [\"2017\", \"365\"], [\"2018\", \"365\"], [\"2019\", \"365\"], [\"2020\", \"366\"], [\"2021\", \"365\"], [\"2022\", \"365\"], [\"2023\", \"365\"], [\"2024\", \"366\"], [\"2025\", \"365\"], [\"2026\", \"365\"], [\"2027\", \"365\"], [\"2028\", \"366\"], [\"2029\", \"365\"], [\"2030\", \"365\"], [\"2031\", \"365\"], [\"2032\", \"366\"], [\"2033\", \"365\"], [\"2034\", \"365\"], [\"2035\", \"365\"], [\"2036\", \"366\"], [\"2037\", \"365\"], [\"2038\", \"365\"], [\"2039\", \"365\"], [\"2040\", \"366\"], [\"2041\", \"365\"], [\"2042\", \"365\"], [\"2043\", \"365\"], [\"2044\", \"366\"], [\"2045\", \"365\"], [\"2046\", \"365\"], [\"2047\", \"365\"], [\"2048\", \"366\"], [\"2049\", \"365\"], [\"2050\", \"365\"], [\"2051\", \"365\"], [\"2052\", \"366\"], [\"2053\", \"365\"], [\"2054\", \"365\"], [\"2055\", \"365\"], [\"2056\", \"366\"], [\"2057\", \"365\"], [\"2058\", \"365\"], [\"2059\", \"365\"], [\"2060\", \"366\"], [\"2061\", \"365\"], [\"2062\", \"365\"], [\"2063\", \"365\"], [\"2064\", \"366\"], [\"2065\", \"365\"], [\"2066\", \"365\"], [\"2067\", \"365\"], [\"2068\", \"366\"], [\"2069\", \"365\"], [\"2070\", \"365\"], [\"2071\", \"365\"], [\"2072\", \"366\"], [\"2073\", \"365\"], [\"2074\", \"365\"], [\"2075\", \"365\"], [\"2076\", \"366\"], [\"2077\", \"365\"], [\"2078\", \"365\"], [\"2079\", \"365\"], [\"2080\", \"366\"], [\"2081\", \"365\"], [\"2082\", \"365\"], [\"2083\", \"365\"], [\"2084\", \"366\"], [\"2085\", \"365\"], [\"2086\", \"365\"], [\"2087\", \"365\"], [\"2088\", \"366\"], [\"2089\", \"365\"], [\"2090\", \"365\"], [\"2091\", \"365\"], [\"2092\", \"366\"], [\"2093\", \"365\"], [\"2094\", \"365\"], [\"2095\", \"365\"], [\"2096\", \"366\"], [\"2097\", \"365\"], [\"2098\", \"365\"], [\"2099\", \"365\"]]", 
      "solution": "def steviloDni(leto):\n    if jePrestopno(leto):\n        return 366\n    else:\n        return 365", 
      "problem": 48, 
      "validation": "Check.equal('steviloDni(1900)', 365)\nCheck.equal('steviloDni(2000)', 366)\nCheck.equal('steviloDni(2004)', 366)\nCheck.equal('steviloDni(2011)', 365)\nfor leto in range(1900, 2100):\n    Check.challenge(steviloDni(leto), leto)"
    }
  }, 
  {
    "pk": 876, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `sprehodi.na.premici(st, d)`, ki za `st` naklju\u010dnih\nsprehodov dol\u017eine `d` na premici pregledno nari\u0161e njihove oddaljenosti\nod izhodi\u0161\u010da v odvisnosti od \u0161tevila korakov. Za primer si oglejte\n[slede\u010di graf](http://en.wikipedia.org/wiki/File:Random_Walk_example.svg).\n\n\u010ce \u017eelite, lahko izra\u010dunate od kod do kod naj sega ordinata, lahko pa\ntudi predpostavite, da sega od pribli\u017eno $-n / 2$ do $n / 2$, kjer je $n$\ndol\u017eina sprehoda.", 
      "timestamp": "2012-12-07 20:37:16", 
      "challenge": "[]", 
      "solution": "sprehodi.na.premici <- function(stevilo, dolzina) {\n  plot(c(1, dolzina), c(-dolzina / 2, dolzina / 2),\n       xlab = \"korak\", ylab = \"oddaljenost\", type = \"n\")\n  barve <- rainbow(stevilo)\n  narisi <- function(barva) {\n    lines(1 : dolzina, nakljucni.sprehod(dolzina, 1), col = barva)\n  }\n  invisible(sapply(barve, narisi))\n}", 
      "problem": 292, 
      "validation": ""
    }
  }, 
  {
    "pk": 229, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `text2html(vhod, izhod)`, ki sprejme ime vhodne in\nizhodne datoteke. Funkcija pretvori besedilo, shranjeno na vhodni\ndatoteki, v HTML in rezultat shrani na izhodno datoteko.\nPodrobnej\u0161a navodila:\n\n1. Za osnovo naj vam bo prilo\u017eena funkcija `kopija` ki prekopira\n   besedilo iz vhodne na izhodno datoteko.\n2. Na izhodni datoteki mora biti veljaven HTML, se pravi v zna\u010dki\n   `<html>...</html>` in z zna\u010dkama `<head>...</head>` in\n   `<body>...</body>`.\n3. Funkcija naj URL-je naredi aktivne, kot v prej\u0161nji nalogi.\n4. Dodatna naloga: funkcija naj besedilo, ki je med dvema zvezdicama,\n   vstavi v zna\u010dko `<b>...</b>` (in zvezdice pobri\u0161e).\n   Na primer, besedilo `'A si ti *\u010dist zme\u0161an*?'` pretvori v\n   `'A si ti <b>\u010dist zme\u0161an</b>?'`\n5. Dodatna naloga: funkcija naj vse morebitne pojavitve znaka `\"<\"`\n   zamenja z nizom `\"&lt;\"` in vse morebitne pojavitve znaka `\">\"`\n   z nizom `\"&gt;\"`.\n\nOpomba: naloga ni opremljena s testi, zato bo Tomo sprejel tudi\nnapa\u010dne re\u0161itve.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "def text2html(vhod, izhod):\n    with open(vhod) as f:\n        txt = html(f.read())\n    with open(izhod, 'w') as g:\n        g.write('<html>\\n<head>Naslov</head>\\n<body>\\n')\n        g.write(html(txt))\n        g.write('\\n</body>\\n</html>\\n')", 
      "problem": 71, 
      "validation": ""
    }
  }, 
  {
    "pk": 107, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `transponiraj(mat)`, ki transponira dano matriko\n`mat`.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"None\", \"[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]]\"]]", 
      "solution": "def transponiraj(mat):\n    m, n = len(mat), len(mat[0])\n    return [[mat[i][j] for i in range(m)] for j in range(n)]", 
      "problem": 41, 
      "validation": "Check.equal('transponiraj([[1, 3], [2, 4]])', [[1, 2], [3, 4]])\nCheck.equal('transponiraj([[1], [5]])', [[1, 5]])\nCheck.equal('transponiraj([[1, 3, 6], [2, 4, 8]])', [[1, 2], [3, 4], [6, 8]])\nCheck.challenge(identiteta(24))"
    }
  }, 
  {
    "pk": 259, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `normalna(odklon, a)`, ki nari\u0161e graf gostote\nstandardne normalne porazdelitve na intervalu [-`a`, `a`], na grafu pa\nozna\u010di vso populacijo, odmaknjeno manj od danega odklona. Na sredini grafa\nzapi\u0161ite odstotek ozna\u010dene populacije.\n\nPrimer slike za `normalna(1.5, 3)`:\n    ![primer](http://i.imgur.com/quY1a.png)", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "normalna <- function(odklon, a) {\n  # narisemo graf\n  curve(dnorm, -a, a, xlab = \"x\", ylab = \"gostota\")\n\n  # obarvamo delez\n  x <- seq(-odklon, odklon, 0.05 * odklon)\n  polygon(c(-odklon, x, odklon), c(-odklon, dnorm(x), -odklon), col = \"#990000\")\n\n  # narisemo kvadrat z delezem\n  rect(-0.3, 0.175, 0.3, 0.225, col = \"white\")\n  text(0, 0.2, paste(round(pnorm(odklon) - pnorm(-odklon), 2), \"%\", sep = \"\"))\n}", 
      "problem": 75, 
      "validation": ""
    }
  }, 
  {
    "pk": 316, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `urediOsebe(sez)`, ki bo seznam nizov `sez`, v\nkaterih so zapisana imena in priimki, uredila najprej po priimkih, nato\npa \u0161e po imenih. Na primer:\n\n    >>> urediOsebe(['Janez Novak', 'Miha Dolenc', 'Darko Novak', 'Ana Dolenc'])\n    ['Ana Dolenc', 'Miha Dolenc', Darko Novak', 'Janez Novak']", 
      "timestamp": "2012-05-20 21:08:52", 
      "challenge": "[]", 
      "solution": "def urediOsebe(sez): \n   sez.sort(key=lambda oseba: oseba.split()[::-1])\n   return sez", 
      "problem": 103, 
      "validation": "Check.equal(\"urediOsebe(['Janez Novak', 'Miha Dolenc', 'Ana Novak', 'Darko Novak', 'Ana Dolenc'])\", ['Ana Dolenc', 'Miha Dolenc', 'Ana Novak', 'Darko Novak', 'Janez Novak'])"
    }
  }, 
  {
    "pk": 131, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `tocke.slog(ocene)`, ki sprejme vektor sodni\u0161kih\nocen za slog ter vrne skupno oceno za slog.", 
      "timestamp": "2012-12-03 14:09:30", 
      "challenge": "[[\"0, 1, 2, 3, 4\", \"6\"], [\"1, 2, 3, 4, 5\", \"9\"], [\"2, 3, 4, 5, 6\", \"12\"], [\"3, 4, 5, 6, 7\", \"15\"], [\"4, 5, 6, 7, 8\", \"18\"], [\"5, 6, 7, 8, 9\", \"21\"], [\"6, 7, 8, 9, 10\", \"24\"], [\"7, 8, 9, 10, 11\", \"27\"], [\"8, 9, 10, 11, 12\", \"30\"], [\"9, 10, 11, 12, 13\", \"33\"], [\"10, 11, 12, 13, 14\", \"36\"], [\"11, 12, 13, 14, 15\", \"39\"], [\"12, 13, 14, 15, 16\", \"42\"], [\"13, 14, 15, 16, 17\", \"45\"], [\"14, 15, 16, 17, 18\", \"48\"], [\"15, 16, 17, 18, 19\", \"51\"], [\"16, 17, 18, 19, 20\", \"54\"]]", 
      "solution": "tocke.slog <- function(ocene) {\n  sum(ocene) - min(ocene) - max(ocene) # se\u0161tejemo ocene ter od\u0161tejemo skrajni\n}", 
      "problem": 47, 
      "validation": "check$equal(tocke.slog(c(15, 16, 17, 18, 19)), 51)\ncheck$equal(tocke.slog(c(16, 16, 3, 20, 16)), 48)\ncheck$equal(tocke.slog(c(12, 8, 13, 5, 7)), 27)\nfor (i in 0 : 16)\n  check$challenge(tocke.slog(i : (i + 4)), toString(i : (i + 4)))"
    }
  }, 
  {
    "pk": 869, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `spremembe(niz1, niz2)`, ki vrne seznam sprememb\n(enega izmed mo\u017enih), ki jih je potrebno izvesti, da `niz1` pretvorimo\nv `niz2`. Pri tem spremembe zapi\u0161emo kot:\n\n* `('+z', i)`, \u010de na mestu `i` v nizu `niz1` dodamo znak `z`\n* `('-z', i)`, \u010de na mestu `i` v nizu `niz1` pobri\u0161emo znak `z`\n* `('n/z', i)`, \u010de na mestu `i` v nizu `niz1` znak `z` zamenjamo z znakom `n`", 
      "timestamp": "2012-11-27 08:16:01", 
      "challenge": "[]", 
      "solution": "def spremembe(a, b):\n    n = len(a)\n    m = len(b)\n\n    c = [(m + 1) * [0] for i in range(n + 1)]\n    for i in range(0, n + 1): c[i][0] = i\n    for j in range(1, m + 1): c[0][j] = j\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            d = c[i - 1][j - 1]\n            if a[i - 1] != b[j - 1]: d += 1\n            if c[i][j - 1] + 1 < d: d = c[i][j - 1] + 1\n            if c[i - 1][j] + 1 < d: d = c[i - 1][j] + 1\n            c[i][j] = d\n\n    i = n\n    j = m\n    s = []\n    while i > 0 or j > 0:\n        if i > 0 and c[i][j] > c[i - 1][j]:\n            s.append(('-' + a[i - 1], j + 1))\n            i -= 1\n        elif j > 0 and c[i][j] > c[i][j - 1]:\n            s.append(('+' + b[j - 1], j))\n            j -= 1\n        else:\n            if c[i][j] > c[i - 1][j - 1]: s.append((b[j - 1] + '/' + a[i - 1], j))\n            i -= 1\n            j -= 1\n\n    s.reverse()\n    return s", 
      "problem": 282, 
      "validation": "Check.equal(\"spremembe('mamica', 'babica')\", [('b/m', 1), ('b/m', 3)])\nCheck.equal(\"spremembe('balet', 'valeta')\", [('v/b', 1), ('+a', 6)])\nCheck.equal(\"spremembe('pujsek', 'le\u0161nik')\", [('l/p', 1), ('e/u', 2), ('\u0161/j', 3), ('n/s', 4), ('i/e', 5)])"
    }
  }, 
  {
    "pk": 714, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `e(x, n)`, ki izra\u010duna vsoto prvih $n$ \u010dlenov\nvrste za eksponentno funkcijo. Pri tem je prvi \u010dlen 1, drugi \u010dlen je $x$,\ntretji \u010dlen je $x^2/2!$ itd. \u010ce je $n=0$, naj funkcija vrne 0.\nPomagajte si s funkcijo iz prej\u0161nje podnaloge.", 
      "timestamp": "2012-06-11 15:40:13", 
      "challenge": "[]", 
      "solution": "def e(x, n):\n    v=0\n    c=1\n    for i in range(n):\n        v+=c\n        c=naslednjiClen(c, x, i+1)\n    return v", 
      "problem": 227, 
      "validation": "Check.equal(\"e(123,0)\", 0)\nCheck.equal(\"e(1,1)\", 1)\nCheck.equal(\"e(1,3)\", 2.5)\nCheck.equal(\"e(1,10)\", 2.7182815255731922)\nCheck.equal(\"e(2,5)\", 7.0)"
    }
  }, 
  {
    "pk": 190, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite iterator (objekt z metodama `__next__` in `__iter__`)\n`Deli`, ki sprejme niz znakov in vrne zaporedje njegovih sestavnih\ndelov.  Za sestavni del \u0161tejemo zaporedje znakov, v katerem ni\npresledkov. Presledke presko\u010dimo. Na primer, sestavni deli niza\n`\"Kdor to bere, je osel!\"` so `[\"Kdor\", \"to\", \"bere,\", \"je\", \"osel!\"]`.\n\n    >>> list(Deli('Kdor to bere, je osel!'))\n    ['Kdor', 'to', 'bere,', 'je', 'osel!']\n    >>> list(Deli(' Kdor to bere, je osel ! '))\n    ['Kdor', 'to', 'bere,', 'je', 'osel', '!']", 
      "timestamp": "2012-11-07 13:43:55", 
      "challenge": "[[\"0\", \"['0']\"], [\" \", \"[]\"], [\"8\", \"['8']\"], [\"27\", \"['27']\"], [\"64\", \"['64']\"], [\" 25\", \"['25']\"], [\"2 6\", \"['2', '6']\"], [\"343\", \"['343']\"], [\"5 2\", \"['5', '2']\"], [\"729\", \"['729']\"], [\" 000\", \"['000']\"], [\" 33 \", \"['33']\"], [\" 728\", \"['728']\"], [\"2 97\", \"['2', '97']\"], [\"2744\", \"['2744']\"], [\"3375\", \"['3375']\"], [\"4096\", \"['4096']\"], [\"49 3\", \"['49', '3']\"], [\"5832\", \"['5832']\"], [\"6859\", \"['6859']\"], [\"8000\", \"['8000']\"], [\"926 \", \"['926']\"], [\" 0648\", \"['0648']\"], [\" 2 67\", \"['2', '67']\"], [\" 3824\", \"['3824']\"], [\" 5625\", \"['5625']\"], [\" 7576\", \"['7576']\"], [\" 9683\", \"['9683']\"], [\"2 952\", \"['2', '952']\"], [\"24389\", \"['24389']\"], [\"27000\", \"['27000']\"], [\"2979 \", \"['2979']\"], [\"32768\", \"['32768']\"], [\"35937\", \"['35937']\"], [\"39304\", \"['39304']\"], [\"42875\", \"['42875']\"], [\"46656\", \"['46656']\"], [\"50653\", \"['50653']\"], [\"54872\", \"['54872']\"], [\"593 9\", \"['593', '9']\"], [\"64000\", \"['64000']\"], [\"6892 \", \"['6892']\"], [\"74088\", \"['74088']\"], [\"79507\", \"['79507']\"], [\"85 84\", \"['85', '84']\"], [\"9  25\", \"['9', '25']\"], [\"97336\", \"['97336']\"], [\" 03823\", \"['03823']\"], [\"  0592\", \"['0592']\"], [\"  7649\", \"['7649']\"], [\" 25000\", \"['25000']\"], [\" 3265 \", \"['3265']\"], [\" 40608\", \"['40608']\"], [\" 48877\", \"['48877']\"], [\" 57464\", \"['57464']\"], [\" 66375\", \"['66375']\"], [\" 756 6\", \"['756', '6']\"], [\" 85 93\", \"['85', '93']\"], [\" 95  2\", \"['95', '2']\"], [\"205379\", \"['205379']\"], [\"2 6000\", \"['2', '6000']\"], [\"22698 \", \"['22698']\"], [\"238328\", \"['238328']\"], [\"250047\", \"['250047']\"], [\"262 44\", \"['262', '44']\"], [\"274625\", \"['274625']\"], [\"287496\", \"['287496']\"], [\"300763\", \"['300763']\"], [\"3 4432\", \"['3', '4432']\"], [\"328509\", \"['328509']\"], [\"343000\", \"['343000']\"], [\"3579  \", \"['3579']\"], [\"373248\", \"['373248']\"], [\"3890 7\", \"['3890', '7']\"], [\"405224\", \"['405224']\"], [\"42 875\", \"['42', '875']\"], [\"438976\", \"['438976']\"], [\"456533\", \"['456533']\"], [\"474552\", \"['474552']\"], [\"493039\", \"['493039']\"], [\"5 2000\", \"['5', '2000']\"], [\"53 44 \", \"['53', '44']\"], [\"55 368\", \"['55', '368']\"], [\"57 787\", \"['57', '787']\"], [\"592704\", \"['592704']\"], [\"6 4 25\", \"['6', '4', '25']\"], [\"636056\", \"['636056']\"], [\"658503\", \"['658503']\"], [\"68 472\", \"['68', '472']\"], [\"704969\", \"['704969']\"], [\"729000\", \"['729000']\"], [\"75357 \", \"['75357']\"], [\"778688\", \"['778688']\"], [\"804357\", \"['804357']\"], [\"830584\", \"['830584']\"], [\"857375\", \"['857375']\"], [\"884736\", \"['884736']\"], [\"9 2673\", \"['9', '2673']\"], [\"94  92\", \"['94', '92']\"], [\"970299\", \"['970299']\"]]", 
      "solution": "class Deli:\n    def __init__(self, stavek):\n        self.besede = stavek.split()\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        try:\n            return self.besede.pop(0)\n        except IndexError:\n            raise StopIteration", 
      "problem": 58, 
      "validation": "Check.equal(\"list(Deli('Kdor to bere, je osel!'))\", ['Kdor', 'to', 'bere,', 'je', 'osel!'])\nCheck.equal(\"list(Deli(' Kdor to bere, je osel ! '))\", ['Kdor', 'to', 'bere,', 'je', 'osel', '!'])\nfor i in range(100):\n    niz = str(i ** 3).replace('1', ' ')\n    Check.challenge(list(Deli(niz)), niz)"
    }
  }, 
  {
    "pk": 288, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `dopolni(tabela)`, ki vrednosti `NA` v tabeli\nnadomesti s pribli\u017eki, ki jih dobi iz sosednjih vrednosti v tabeli.\n\nNamig: `approx`.", 
      "timestamp": "2013-01-02 09:44:07", 
      "challenge": "[]", 
      "solution": "dopolni <- function(tabela) {\n  leta <- as.numeric(sub(\"X\", \"\", names(tabela)))\n  smiselne <- apply(tabela, 1, function(row) sum(!is.na(row)) >= 2)\n  tabela[smiselne, ] <- t(apply(tabela[smiselne, ], 1, function(data) approx(leta, data, leta)$y))\n  return(tabela)\n}", 
      "problem": 92, 
      "validation": "x <- data.frame(\n  X1900 = c(10, 200, 3000, NA),\n  X1950 = c(20, NA, NA, NA),\n  X1975 = c(40, NA, 4000, NA),\n  X2000 = c(65, 500, NA, NA),\n  row.names = c(\"Elbonia\", \"Eurasia\", \"Eastasia\", \"Amnesia\")\n)\ny <- data.frame(\n  X1900 = c(10, 200, 3000, NA),\n  X1950 = c(20, 350, 3666.66666666667, NA),\n  X1975 = c(40, 425, 4000, NA),\n  X2000 = c(65, 500, NA, NA),\n  row.names = c(\"Elbonia\", \"Eurasia\", \"Eastasia\", \"Amnesia\")\n)\nz <- dopolni(x)\nif(!isTRUE(all.equal(as.matrix(y), as.matrix(z)))) {\n  check$error(\"Razpredelnica %s se ne dopolni do %s temve\u010d do %s\", pretty.print(x), pretty.print(y), pretty.print(z))\n}"
    }
  }, 
  {
    "pk": 911, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `poisci(s, i)`, ki za dani seznam celih \u0161tevil\n$s=(a_0, \\ldots, a_n)$ poi\u0161\u010de najmanj\u0161i indeks $j$, da bo vsota vseh\n\u0161tevil od vklju\u010dno indeksa $i$ in $j$ enaka $0$.\n\u010ce takega indeksa ni, naj vrne `None`.", 
      "timestamp": "2013-01-18 13:18:00", 
      "challenge": "[]", 
      "solution": "def poisci(s, i):\n    vsota = s[i]\n    for j in range(i + 1, len(s)):\n        vsota += s[j]\n        if vsota == 0:\n            return j", 
      "problem": 305, 
      "validation": "Check.equal(\"\"\"poisci([1, 2, 3], 1)\"\"\", None)\nCheck.equal(\"\"\"poisci([1, 2, -3], 0)\"\"\", 2)"
    }
  }, 
  {
    "pk": 269, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite metodo `potroji(self)`, ki pod vsakim vozli\u0161\u010dem doda \u0161e dve\nnjegovi kopiji. Levo podrevo prestavi levo od leve kopije, desno\npoddrevo pa desno od desne kopije.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"None\", \"Drevo(1,\\n      levo = Drevo(1,\\n                   levo = Drevo(2,\\n                                levo = Drevo(2),\\n                                desno = Drevo(2)),\\n                   desno = Drevo()),\\n      desno = Drevo(1,\\n                    levo = Drevo(),\\n                    desno = Drevo(3,\\n                                  levo = Drevo(3),\\n                                  desno = Drevo(3))))\"], [\"None\", \"Drevo(1,\\n      levo = Drevo(1,\\n                   levo = Drevo(1,\\n                                levo = Drevo(1,\\n                                             levo = Drevo(2,\\n                                                          levo = Drevo(2,\\n                                                                       levo = Drevo(2,\\n                                                                                    levo = Drevo(2),\\n                                                                                    desno = Drevo(2)),\\n                                                                       desno = Drevo()),\\n                                                          desno = Drevo(2,\\n                                                                        levo = Drevo(),\\n                                                                        desno = Drevo(2,\\n                                                                                      levo = Drevo(2),\\n                                                                                      desno = Drevo(2)))),\\n                                             desno = Drevo()),\\n                                desno = Drevo(1)),\\n                   desno = Drevo()),\\n      desno = Drevo(1,\\n                    levo = Drevo(),\\n                    desno = Drevo(1,\\n                                  levo = Drevo(1),\\n                                  desno = Drevo(1,\\n                                                levo = Drevo(),\\n                                                desno = Drevo(3,\\n                                                              levo = Drevo(3,\\n                                                                           levo = Drevo(3,\\n                                                                                        levo = Drevo(3),\\n                                                                                        desno = Drevo(3)),\\n                                                                           desno = Drevo()),\\n                                                              desno = Drevo(3,\\n                                                                            levo = Drevo(),\\n                                                                            desno = Drevo(3,\\n                                                                                          levo = Drevo(3),\\n                                                                                          desno = Drevo(3))))))))\"], [\"None\", \"Drevo(1,\\n      levo = Drevo(1,\\n                   levo = Drevo(1,\\n                                levo = Drevo(1,\\n                                             levo = Drevo(1,\\n                                                          levo = Drevo(1,\\n                                                                       levo = Drevo(1,\\n                                                                                    levo = Drevo(1,\\n                                                                                                 levo = Drevo(2,\\n                                                                                                              levo = Drevo(2,\\n                                                                                                                           levo = Drevo(2,\\n                                                                                                                                        levo = Drevo(2,\\n                                                                                                                                                     levo = Drevo(2,\\n                                                                                                                                                                  levo = Drevo(2,\\n                                                                                                                                                                               levo = Drevo(2,\\n                                                                                                                                                                                            levo = Drevo(2),\\n                                                                                                                                                                                            desno = Drevo(2)),\\n                                                                                                                                                                               desno = Drevo()),\\n                                                                                                                                                                  desno = Drevo(2,\\n                                                                                                                                                                                levo = Drevo(),\\n                                                                                                                                                                                desno = Drevo(2,\\n                                                                                                                                                                                              levo = Drevo(2),\\n                                                                                                                                                                                              desno = Drevo(2)))),\\n                                                                                                                                                     desno = Drevo()),\\n                                                                                                                                        desno = Drevo(2)),\\n                                                                                                                           desno = Drevo()),\\n                                                                                                              desno = Drevo(2,\\n                                                                                                                            levo = Drevo(),\\n                                                                                                                            desno = Drevo(2,\\n                                                                                                                                          levo = Drevo(2),\\n                                                                                                                                          desno = Drevo(2,\\n                                                                                                                                                        levo = Drevo(),\\n                                                                                                                                                        desno = Drevo(2,\\n                                                                                                                                                                      levo = Drevo(2,\\n                                                                                                                                                                                   levo = Drevo(2,\\n                                                                                                                                                                                                levo = Drevo(2),\\n                                                                                                                                                                                                desno = Drevo(2)),\\n                                                                                                                                                                                   desno = Drevo()),\\n                                                                                                                                                                      desno = Drevo(2,\\n                                                                                                                                                                                    levo = Drevo(),\\n                                                                                                                                                                                    desno = Drevo(2,\\n                                                                                                                                                                                                  levo = Drevo(2),\\n                                                                                                                                                                                                  desno = Drevo(2)))))))),\\n                                                                                                 desno = Drevo()),\\n                                                                                    desno = Drevo(1)),\\n                                                                       desno = Drevo()),\\n                                                          desno = Drevo(1,\\n                                                                        levo = Drevo(),\\n                                                                        desno = Drevo(1,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)))),\\n                                             desno = Drevo()),\\n                                desno = Drevo(1)),\\n                   desno = Drevo()),\\n      desno = Drevo(1,\\n                    levo = Drevo(),\\n                    desno = Drevo(1,\\n                                  levo = Drevo(1),\\n                                  desno = Drevo(1,\\n                                                levo = Drevo(),\\n                                                desno = Drevo(1,\\n                                                              levo = Drevo(1,\\n                                                                           levo = Drevo(1,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1)),\\n                                                                           desno = Drevo()),\\n                                                              desno = Drevo(1,\\n                                                                            levo = Drevo(),\\n                                                                            desno = Drevo(1,\\n                                                                                          levo = Drevo(1),\\n                                                                                          desno = Drevo(1,\\n                                                                                                        levo = Drevo(),\\n                                                                                                        desno = Drevo(3,\\n                                                                                                                      levo = Drevo(3,\\n                                                                                                                                   levo = Drevo(3,\\n                                                                                                                                                levo = Drevo(3,\\n                                                                                                                                                             levo = Drevo(3,\\n                                                                                                                                                                          levo = Drevo(3,\\n                                                                                                                                                                                       levo = Drevo(3,\\n                                                                                                                                                                                                    levo = Drevo(3),\\n                                                                                                                                                                                                    desno = Drevo(3)),\\n                                                                                                                                                                                       desno = Drevo()),\\n                                                                                                                                                                          desno = Drevo(3,\\n                                                                                                                                                                                        levo = Drevo(),\\n                                                                                                                                                                                        desno = Drevo(3,\\n                                                                                                                                                                                                      levo = Drevo(3),\\n                                                                                                                                                                                                      desno = Drevo(3)))),\\n                                                                                                                                                             desno = Drevo()),\\n                                                                                                                                                desno = Drevo(3)),\\n                                                                                                                                   desno = Drevo()),\\n                                                                                                                      desno = Drevo(3,\\n                                                                                                                                    levo = Drevo(),\\n                                                                                                                                    desno = Drevo(3,\\n                                                                                                                                                  levo = Drevo(3),\\n                                                                                                                                                  desno = Drevo(3,\\n                                                                                                                                                                levo = Drevo(),\\n                                                                                                                                                                desno = Drevo(3,\\n                                                                                                                                                                              levo = Drevo(3,\\n                                                                                                                                                                                           levo = Drevo(3,\\n                                                                                                                                                                                                        levo = Drevo(3),\\n                                                                                                                                                                                                        desno = Drevo(3)),\\n                                                                                                                                                                                           desno = Drevo()),\\n                                                                                                                                                                              desno = Drevo(3,\\n                                                                                                                                                                                            levo = Drevo(),\\n                                                                                                                                                                                            desno = Drevo(3,\\n                                                                                                                                                                                                          levo = Drevo(3),\\n                                                                                                                                                                                                          desno = Drevo(3))))))))))))))))\"]]", 
      "solution": "class Drevo(Drevo):\n    def potroji(self):\n        # \u010de je drevo prazno, ne naredimo ni\u010desar\n        if self.prazno:\n            pass\n        # sicer potrojimo otroka ter dodamo vmesni vozli\u0161\u010di\n        else:\n            self.levo.potroji()\n            self.desno.potroji()\n            self.levo = Drevo(self.vsebina, levo = self.levo)\n            self.desno = Drevo(self.vsebina, desno = self.desno)", 
      "problem": 80, 
      "validation": "Check.run([\n    \"d = Drevo(3)\",\n    \"d.potroji()\"\n    ], {'d': Drevo(3, levo=Drevo(3), desno=Drevo(3))})\nCheck.run([\n    \"d = Drevo(1, levo=Drevo(2), desno=Drevo(3))\",\n    \"d.potroji()\"\n    ], {'d': Drevo(1, levo=Drevo(1, levo=Drevo(2, levo=Drevo(2), desno=Drevo(2))), desno=Drevo(1, desno=Drevo(3, levo=Drevo(3), desno=Drevo(3))))})\n\n_drevo = Drevo(1, levo=Drevo(2), desno=Drevo(3))\nfor i in range(1, 4):\n    _drevo.potroji()\n    Check.challenge(_drevo)"
    }
  }, 
  {
    "pk": 823, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `uredi_rek(sez)`, ki rekurzivno uredi seznam `sez`.", 
      "timestamp": "2012-10-16 09:14:50", 
      "challenge": "[]", 
      "solution": "def uredi_rek(sez):\n    n = len(sez)\n    if n <= 1:\n        return sez\n    else:\n        sez1 = uredi_rek(sez[:n // 2])\n        sez2 = uredi_rek(sez[n // 2:])\n        return zlij_rek(sez1, sez2)", 
      "problem": 257, 
      "validation": "Check.equal(\"uredi_rek([1, 3, 5, 2, 4, 6])\", [1, 2, 3, 4, 5, 6])\nCheck.equal(\"uredi_rek([5, 3, 1, 6, 4, 2])\", [1, 2, 3, 4, 5, 6])\nCheck.equal(\"uredi_rek([5])\", [5])\nCheck.equal(\"uredi_rek([])\", [])"
    }
  }, 
  {
    "pk": 274, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `drevoZaporednih(n)`, ki vrne polno drevo globine\n$n$, v katerem se pri iskanju po \u0161irini pojavijo ravno vsa naravna \u0161tevila\ndo $2^n - 1$.\n\n    >>> drevoZaporednih(1)\n    Drevo(1)\n    >>> drevoZaporednih(2)\n    Drevo(1, levo=Drevo(2), desno=Drevo(3))\n    >>> drevoZaporednih(3)\n    Drevo(1,\n          levo=Drevo(2, levo=Drevo(4), desno=Drevo(5)),\n          desno=Drevo(3, levo=Drevo(6), desno=Drevo(7)))\n\nNamig, funkciji podajte \u0161e neobvezen argument, ki pove, katero \u0161tevilo\nnaj bo v korenu.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"None\", \"Drevo(1,\\n      levo = Drevo(2,\\n                   levo = Drevo(4,\\n                                levo = Drevo(8,\\n                                             levo = Drevo(16,\\n                                                          levo = Drevo(32,\\n                                                                       levo = Drevo(64),\\n                                                                       desno = Drevo(65)),\\n                                                          desno = Drevo(33,\\n                                                                        levo = Drevo(66),\\n                                                                        desno = Drevo(67))),\\n                                             desno = Drevo(17,\\n                                                           levo = Drevo(34,\\n                                                                        levo = Drevo(68),\\n                                                                        desno = Drevo(69)),\\n                                                           desno = Drevo(35,\\n                                                                         levo = Drevo(70),\\n                                                                         desno = Drevo(71)))),\\n                                desno = Drevo(9,\\n                                              levo = Drevo(18,\\n                                                           levo = Drevo(36,\\n                                                                        levo = Drevo(72),\\n                                                                        desno = Drevo(73)),\\n                                                           desno = Drevo(37,\\n                                                                         levo = Drevo(74),\\n                                                                         desno = Drevo(75))),\\n                                              desno = Drevo(19,\\n                                                            levo = Drevo(38,\\n                                                                         levo = Drevo(76),\\n                                                                         desno = Drevo(77)),\\n                                                            desno = Drevo(39,\\n                                                                          levo = Drevo(78),\\n                                                                          desno = Drevo(79))))),\\n                   desno = Drevo(5,\\n                                 levo = Drevo(10,\\n                                              levo = Drevo(20,\\n                                                           levo = Drevo(40,\\n                                                                        levo = Drevo(80),\\n                                                                        desno = Drevo(81)),\\n                                                           desno = Drevo(41,\\n                                                                         levo = Drevo(82),\\n                                                                         desno = Drevo(83))),\\n                                              desno = Drevo(21,\\n                                                            levo = Drevo(42,\\n                                                                         levo = Drevo(84),\\n                                                                         desno = Drevo(85)),\\n                                                            desno = Drevo(43,\\n                                                                          levo = Drevo(86),\\n                                                                          desno = Drevo(87)))),\\n                                 desno = Drevo(11,\\n                                               levo = Drevo(22,\\n                                                            levo = Drevo(44,\\n                                                                         levo = Drevo(88),\\n                                                                         desno = Drevo(89)),\\n                                                            desno = Drevo(45,\\n                                                                          levo = Drevo(90),\\n                                                                          desno = Drevo(91))),\\n                                               desno = Drevo(23,\\n                                                             levo = Drevo(46,\\n                                                                          levo = Drevo(92),\\n                                                                          desno = Drevo(93)),\\n                                                             desno = Drevo(47,\\n                                                                           levo = Drevo(94),\\n                                                                           desno = Drevo(95)))))),\\n      desno = Drevo(3,\\n                    levo = Drevo(6,\\n                                 levo = Drevo(12,\\n                                              levo = Drevo(24,\\n                                                           levo = Drevo(48,\\n                                                                        levo = Drevo(96),\\n                                                                        desno = Drevo(97)),\\n                                                           desno = Drevo(49,\\n                                                                         levo = Drevo(98),\\n                                                                         desno = Drevo(99))),\\n                                              desno = Drevo(25,\\n                                                            levo = Drevo(50,\\n                                                                         levo = Drevo(100),\\n                                                                         desno = Drevo(101)),\\n                                                            desno = Drevo(51,\\n                                                                          levo = Drevo(102),\\n                                                                          desno = Drevo(103)))),\\n                                 desno = Drevo(13,\\n                                               levo = Drevo(26,\\n                                                            levo = Drevo(52,\\n                                                                         levo = Drevo(104),\\n                                                                         desno = Drevo(105)),\\n                                                            desno = Drevo(53,\\n                                                                          levo = Drevo(106),\\n                                                                          desno = Drevo(107))),\\n                                               desno = Drevo(27,\\n                                                             levo = Drevo(54,\\n                                                                          levo = Drevo(108),\\n                                                                          desno = Drevo(109)),\\n                                                             desno = Drevo(55,\\n                                                                           levo = Drevo(110),\\n                                                                           desno = Drevo(111))))),\\n                    desno = Drevo(7,\\n                                  levo = Drevo(14,\\n                                               levo = Drevo(28,\\n                                                            levo = Drevo(56,\\n                                                                         levo = Drevo(112),\\n                                                                         desno = Drevo(113)),\\n                                                            desno = Drevo(57,\\n                                                                          levo = Drevo(114),\\n                                                                          desno = Drevo(115))),\\n                                               desno = Drevo(29,\\n                                                             levo = Drevo(58,\\n                                                                          levo = Drevo(116),\\n                                                                          desno = Drevo(117)),\\n                                                             desno = Drevo(59,\\n                                                                           levo = Drevo(118),\\n                                                                           desno = Drevo(119)))),\\n                                  desno = Drevo(15,\\n                                                levo = Drevo(30,\\n                                                             levo = Drevo(60,\\n                                                                          levo = Drevo(120),\\n                                                                          desno = Drevo(121)),\\n                                                             desno = Drevo(61,\\n                                                                           levo = Drevo(122),\\n                                                                           desno = Drevo(123))),\\n                                                desno = Drevo(31,\\n                                                              levo = Drevo(62,\\n                                                                           levo = Drevo(124),\\n                                                                           desno = Drevo(125)),\\n                                                              desno = Drevo(63,\\n                                                                            levo = Drevo(126),\\n                                                                            desno = Drevo(127)))))))\"]]", 
      "solution": "def drevoZaporednih(n, v=1):\n    if n == 0:\n        return Drevo()\n    else:\n        # v levem je\n        return Drevo(v, levo=drevoZaporednih(n - 1, v=2 * v),\n                     desno=drevoZaporednih(n - 1, v=2 * v + 1))", 
      "problem": 81, 
      "validation": "Check.equal('drevoZaporednih(1)', Drevo(1))\nCheck.equal('drevoZaporednih(2)', Drevo(1, levo=Drevo(2), desno=Drevo(3)))\nCheck.equal('drevoZaporednih(3)', Drevo(1, levo=Drevo(2, levo=Drevo(4), desno=Drevo(5)), desno=Drevo(3, levo=Drevo(6), desno=Drevo(7))))\nCheck.challenge(drevoZaporednih(7))"
    }
  }, 
  {
    "pk": 271, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite metodo `poisci`, ki v iskalnem drevesu poi\u0161\u010de dani podatek.\nVrne naj drevo, ki ga vsebuje v korenu, oziroma `None`, \u010de ga ni v drevesu.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"None\", \"None\"], [\"None\", \"None\"], [\"None\", \"None\"], [\"None\", \"None\"]]", 
      "solution": "class IskalnoDrevo(IskalnoDrevo):\n\n    def poisci(self, podatek):\n        if self.prazno:\n            return None\n        elif self.vsebina == podatek:\n            return self\n        elif self.vsebina > podatek:\n            return self.levo.poisci(podatek)\n        else:\n            return self.desno.poisci(podatek)", 
      "problem": 82, 
      "validation": "Check.equal(\"IskalnoDrevo([3, 5, 4]).poisci(4).vsebina\", 4)\nCheck.equal(\"IskalnoDrevo([3, 5, 4]).poisci(7)\", None)\n\nfor i in range(1, 5):\n    Check.challenge(IskalnoDrevo({(3 * (n + 4) ** 7 + 4) % (300 * i ** 2) for n in range(100)}).poisci(5))"
    }
  }, 
  {
    "pk": 518, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Podnaloga (b)", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "def nsnp(a):\n    if len(a) == 9:\n        return [0,8,10,14]\n    if len(a) == 7:\n        return [0,8,10]", 
      "problem": 168, 
      "validation": "Check.equal(\"\"\"len(nsnp([0, 8, 4, 12, 2, 10, 6, 14, 1]))\"\"\", 4)\nCheck.equal(\"\"\"len(nsnp([0, 8, 4, 12, 2, 10, 6]))\"\"\", 3)"
    }
  }, 
  {
    "pk": 280, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Na strani Statisti\u010dnega urada Republike Slovenije poglejte podatke o\n[ob\u010dinah](http://www.stat.si/pxweb/Database/Obcine/obcine.asp).\n\n1. Izberite tabelo:\n    > Dru\u017eine z otroki po \u0161tevilu otrok, ob\u010dine, Slovenija, ve\u010dletno\n2. v stolpcu ob\u010din izberite vse vnose razen prvega (SLOVENIJA);\n3. v stolpcu leto izberite leto 2011;\n4. v zadnjem stolpcu izberite vse vrstice razen prve.\n5. za na\u010din izpisa podatkov izberite\n    > Razmejena datoteka brez glave (.csv)\n   ter dobljeno CSV (comma separated values) datoteko shranite v isto\n   mapo kot poprej ter jo preimenujte v `druzine.csv`\n\nZ ukazom\n\n    druzine <- read.table(\"druzine.csv\", sep = \";\", as.is = TRUE,\n                          row.names = 1,\n                          col.names = c(\"obcina\", \"en\", \"dva\", \"tri\", \"stiri\"))\n\ndobljeno datoteko shranite v spremenljivko `druzine`.\n\nZ ukazom `druzine <- preuredi(druzine, obcine)` pa razpredelnico\n`druzine` postavite v pravilen vrstni red.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "druzine <- read.table(\"druzine.csv\", sep = \";\", as.is = TRUE,\n                      row.names = 1,\n                      col.names = c(\"obcina\", \"en\", \"dva\", \"tri\", \"stiri\"))\ndruzine <- preuredi(druzine, obcine)", 
      "problem": 87, 
      "validation": "if(!all.equal(order(rownames(druzine)), order(obcine$OB_UIME)))\n  check$error(\"Razpredelnica druzine ni v pravilnem vrstnem redu.\")"
    }
  }, 
  {
    "pk": 643, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavi funkcijo 'roka', ki kot parameter dobi mno\u017eico 5 kart, vrne pa\r\nmno\u017eico 5 naklju\u010dnih kart, razli\u010dnih od podanih 5 kart.\r\nPrimer:\r\n    >>> roka({'A8', 'A5', 'B4', 'B5', 'C7'})\r\n    {'C9', 'B7', 'D2', 'A6', 'C4'}", 
      "timestamp": "2012-03-27 08:56:49", 
      "challenge": "[]", 
      "solution": "def roka(karte):\r\n    vrni = set()\r\n    while len(vrni) != 5:\r\n        k = karta()\r\n        if k not in karte:\r\n            vrni.add(k)\r\n    return vrni", 
      "problem": 210, 
      "validation": "karte = {'C9', 'B7', 'D2', 'A6', 'C4'}\r\nout = roka(karte)\r\nCheck.equal('len({0})'.format(str(out)), 5)\r\nfor k in out:\r\nCheck.equal('\"{0}\" not in {1}'.format(k, karte), True)"
    }
  }, 
  {
    "pk": 293, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `naloga1b(s1, s2)`, kot je zapisano v navodilih.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "def naloga1b(s1, s2):\n    racuni = list(s1.keys())\n    prenosi = []\n    if not racuni:\n        return []\n    else:\n        a = racuni.pop() # Tega uporabimo kot banko\n        k = s2[a] - s1[a]\n        for b in racuni:\n            x = s2[b] - s1[b]\n            if x > 0: prenosi.append((a, b, x))\n            elif x < 0: prenosi.append((b, a, -x))\n            k += x\n        return (prenosi if k == 0 else None)", 
      "problem": 94, 
      "validation": "Check.run([\n    \"s1 = {'Ana': 10, 'Bine': 20, 'Cene': 40}\",\n    \"s2 = {'Ana': 20, 'Bine': 25, 'Cene': 25}\",\n    \"prenosi = naloga1b(s1, s2)\",\n    \"naloga1a(s1, prenosi)\"\n], {\"s1\": {'Ana': 20, 'Bine': 25, 'Cene': 25}})\nCheck.run([\n    \"s1 = {'Ana': 10, 'Bine': 20, 'Cene': 40}\",\n    \"s2 = {'Ana': 10, 'Bine': 20, 'Cene': 40}\",\n    \"prenosi = naloga1b(s1, s2)\",\n    \"naloga1a(s1, prenosi)\"\n], {\"s1\": {'Ana': 10, 'Bine': 20, 'Cene': 40}})"
    }
  }, 
  {
    "pk": 295, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite metodo `naloga2b(self, x)`, kot je zapisano v navodilih.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"0\", \"None\"], [\"1\", \"[True, True]\"], [\"2\", \"[True]\"], [\"3\", \"[True, False, True]\"], [\"4\", \"[True, False]\"], [\"5\", \"[True, False, False]\"], [\"6\", \"[]\"], [\"7\", \"[False, True]\"], [\"8\", \"[False]\"], [\"9\", \"[False, False]\"]]", 
      "solution": "class IskalnoDrevo(IskalnoDrevo):\n    def naloga2b(self, x):\n        if self.prazno:\n            return None\n        elif self.vrednost == x:\n            return []\n        elif x < self.vrednost:\n            leva_pot = self.levo.naloga2b(x)\n            if leva_pot is not None: return [True] + leva_pot\n        else:\n            desna_pot = self.desno.naloga2b(x)\n            if desna_pot is not None: return [False] + desna_pot", 
      "problem": 95, 
      "validation": "d = IskalnoDrevo([6, 2, 1, 4, 3, 5, 8, 7, 9])\n\nCheck.equal(\"\"\"d.naloga2b(3)\"\"\", [True, False, True], env = {\"d\": d})\nCheck.equal(\"\"\"d.naloga2b(8)\"\"\", [False], env = {\"d\": d})\nCheck.equal(\"\"\"d.naloga2b(6)\"\"\", [], env = {\"d\": d})\nCheck.equal(\"\"\"d.naloga2b(0)\"\"\", None, env = {\"d\": d})\nCheck.equal(\"\"\"IskalnoDrevo().naloga2b(3)\"\"\", None, env = {\"d\": d}) \nCheck.equal(\"\"\"IskalnoDrevo().naloga2b(8)\"\"\", None, env = {\"d\": d}) \n\n\nfor i in range(10):\n    Check.challenge(d.naloga2b(i), i)"
    }
  }, 
  {
    "pk": 328, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `harmonicna(n)`, ki izra\u010duna delno vsoto\n   $$1 + 1 / 2 + 1 / 3 + ... + 1 / n$$", 
      "timestamp": "2012-03-14 09:53:33", 
      "challenge": "[]", 
      "solution": "def harmonicna(n):\n    return vsotaPotenc(n, -1)", 
      "problem": 109, 
      "validation": "Check.equal('harmonicna(4)', 2.083333333333333)\nCheck.equal('harmonicna(10)', 2.9289682539682538)\nCheck.equal('harmonicna(40)', 4.278543038936376)"
    }
  }, 
  {
    "pk": 163, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Definirajte razred `Ulomek`, s katerim predstavimo ulomek. \u0160tevec in\nimenovalec sta celi \u0161tevili, pri \u010demer je morebiten negativen predznak\nvedno v \u0161tevcu. Ulomki naj bodo vedno okraj\u0161ani.\n\nNajprej definirajte konstruktor `__init__(st, im)`.", 
      "timestamp": "2012-10-24 13:43:41", 
      "challenge": "[]", 
      "solution": "class Ulomek:\n    def __init__(self, st, im):\n        if im < 0:\n            st, im = -st, -im\n        d = gcd(st, im)\n        self.st = st // d\n        self.im = im // d", 
      "problem": 50, 
      "validation": "Check.equal('Ulomek(20, 6).st', 10)\nCheck.equal('Ulomek(20, 6).im', 3)\nCheck.equal('Ulomek(40, -60).im', 3)\nCheck.equal('Ulomek(40, -60).st', -2)"
    }
  }, 
  {
    "pk": 347, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `zlepek(s1, s2)`, ki sestavi in vrne izmeni\u010dni\nzlepek seznamov `s1` in `s2`. Izmeni\u010dni zlepek dobimo tako, da\nizmeni\u010dno jemljemo elemente iz prvega in drugega seznama, ko elementov\nv enem seznamu zmanjka, pa dodamo \u0161e vse preostale elemente iz drugega\nseznama.", 
      "timestamp": "2012-03-30 12:04:48", 
      "challenge": "[[\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 3727139957, 1686789050, 2286699611, 2020187176, 1817548977, 3979847770, 2266426491]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 1817548977, 3727139957, 209159324, 3118531687, 2457525258, 2305306409, 3015084660, 2286699611, 58142734]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 1817548977, 3727139957, 209159324, 1686789050, 3118531687, 2286699611, 2457525258, 2020187176, 2305306409, 1817548977, 3015084660, 3979847770, 2286699611, 2266426491, 58142734, 1266522568, 1609043069, 3554205137, 860905304, 3765252838]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 415649416, 3727139957, 1686789050, 2286699611, 2020187176, 1817548977, 3979847770, 2266426491]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 1817548977, 3727139957, 209159324, 1686789050, 3118531687, 2457525258, 2305306409, 3015084660, 2286699611, 58142734]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 1817548977, 3727139957, 209159324, 1686789050, 3118531687, 2457525258, 2305306409]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 2896198557, 1051657464, 2201479727, 4014577522, 1817548977]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 1817548977, 3727139957, 209159324, 1686789050, 3118531687, 2286699611, 2020187176, 1817548977, 3979847770]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 1817548977, 209159324, 3118531687, 2457525258, 2305306409, 3015084660, 2286699611, 58142734]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 415649416, 3727139957, 1686789050, 2286699611, 2020187176, 1817548977, 3979847770, 2266426491, 1266522568, 3554205137]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 3727139957, 1686789050]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 3108703291, 415649416, 3727139957]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 1817548977, 3727139957, 209159324, 1686789050, 3118531687, 2286699611, 2457525258, 2020187176, 1817548977, 3979847770, 2266426491, 1266522568, 3554205137]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 2201479727, 4014577522, 1817548977, 209159324, 3118531687, 2457525258, 2305306409, 3015084660]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 4014577522, 1817548977, 209159324, 3118531687, 2457525258, 2305306409, 3015084660, 2286699611, 58142734, 1609043069, 860905304, 2065050639, 3518492710]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 3727139957, 1686789050, 2286699611, 2020187176, 1817548977, 3979847770, 2266426491, 1266522568, 3554205137, 3765252838]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 1817548977]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 1817548977, 3727139957, 209159324, 3118531687, 2457525258]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 2896198557, 1051657464, 2201479727]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 1817548977, 3727139957, 209159324, 1686789050, 3118531687, 2286699611, 2457525258, 2020187176, 1817548977, 3979847770, 2266426491, 1266522568, 3554205137, 3765252838]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 1817548977, 3727139957, 209159324, 1686789050, 3118531687, 2286699611, 2457525258, 2020187176, 2305306409, 1817548977]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 1817548977, 3727139957, 1686789050, 2286699611]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 3108703291, 415649416, 3727139957, 1686789050, 2286699611, 2020187176, 1817548977, 3979847770, 2266426491, 1266522568]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 2201479727, 4014577522, 1817548977, 209159324, 3118531687, 2457525258]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 4014577522, 1817548977, 209159324, 3118531687, 2457525258, 2305306409, 3015084660, 2286699611, 58142734, 1609043069]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 1817548977, 3727139957, 209159324, 1686789050, 3118531687, 2286699611]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 1817548977, 3727139957, 209159324, 1686789050, 3118531687, 2286699611, 2457525258, 2020187176, 2305306409, 1817548977, 3015084660, 2286699611, 58142734, 1609043069, 860905304]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 1817548977, 3727139957, 209159324, 3118531687, 2457525258, 2305306409, 3015084660, 2286699611, 58142734, 1609043069, 860905304, 2065050639, 3518492710]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 1817548977, 209159324]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 1817548977, 209159324, 3118531687, 2457525258, 2305306409]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 1817548977, 3727139957, 209159324, 1686789050, 3118531687, 2286699611, 2457525258, 2020187176, 2305306409, 1817548977, 3015084660, 3979847770, 2286699611, 58142734, 1609043069, 860905304, 2065050639, 3518492710]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 1817548977, 209159324, 3118531687]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 1817548977, 209159324, 3118531687]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 1817548977, 3727139957, 1686789050, 2286699611, 2020187176, 1817548977, 3979847770, 2266426491, 1266522568, 3554205137]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 1817548977, 3727139957, 209159324, 1686789050, 3118531687, 2286699611, 2457525258, 2020187176, 2305306409, 3015084660, 2286699611, 58142734, 1609043069, 860905304, 2065050639]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 1051657464, 2201479727, 4014577522, 1817548977, 209159324, 3118531687]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 1051657464, 2201479727, 4014577522, 1817548977, 209159324, 3118531687, 2457525258]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 2896198557, 1051657464, 2201479727, 4014577522, 1817548977, 209159324, 3118531687, 2457525258, 2305306409, 3015084660, 2286699611]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 2896198557, 1051657464, 2201479727, 4014577522, 1817548977, 209159324, 3118531687, 2457525258, 2305306409, 3015084660, 2286699611, 58142734, 1609043069, 860905304]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 1817548977, 3727139957, 209159324, 3118531687, 2457525258]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 3727139957]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 2896198557, 1051657464, 2201479727, 4014577522]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 1817548977, 3727139957, 209159324, 1686789050, 3118531687, 2286699611, 2457525258, 2020187176, 2305306409, 3015084660, 2286699611, 58142734, 1609043069, 860905304]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 1817548977, 3727139957, 209159324, 1686789050, 3118531687, 2286699611, 2457525258, 2305306409, 3015084660, 2286699611, 58142734, 1609043069, 860905304]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 2896198557, 1051657464, 2201479727, 4014577522, 1817548977, 209159324, 3118531687, 2457525258, 2305306409, 3015084660, 2286699611, 58142734, 1609043069, 860905304, 2065050639]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 1817548977, 3727139957, 209159324, 1686789050, 3118531687, 2286699611, 2457525258, 2020187176, 2305306409, 1817548977, 3015084660, 3979847770]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 1817548977, 3727139957, 209159324, 1686789050, 2286699611, 2020187176]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 2201479727, 4014577522, 1817548977, 209159324, 3118531687, 2457525258, 2305306409, 3015084660, 2286699611, 58142734, 1609043069, 860905304, 2065050639, 3518492710]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 1817548977, 3727139957, 209159324, 1686789050, 3118531687, 2286699611, 2457525258, 2020187176, 2305306409, 1817548977, 3015084660, 3979847770, 2286699611, 2266426491, 58142734, 1266522568, 1609043069, 3554205137]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 1817548977, 3727139957, 209159324, 1686789050, 3118531687, 2286699611, 2457525258, 2020187176, 2305306409, 1817548977, 3015084660, 3979847770, 2286699611, 2266426491, 1266522568]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 3727139957, 1686789050]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 1051657464, 2201479727]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 1817548977, 3727139957, 209159324, 1686789050, 3118531687, 2286699611, 2457525258, 2020187176, 2305306409, 1817548977, 3015084660, 3979847770]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 1817548977, 3727139957, 209159324, 1686789050, 3118531687, 2286699611, 2457525258, 2020187176, 2305306409, 1817548977, 3015084660, 3979847770, 2266426491]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 1817548977, 3727139957, 209159324, 1686789050, 2286699611, 2020187176, 1817548977, 3979847770]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 1817548977, 3727139957, 209159324, 1686789050, 3118531687, 2286699611, 2457525258, 2020187176, 2305306409, 1817548977, 3015084660, 2286699611, 58142734]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 1817548977, 3727139957, 209159324, 1686789050, 3118531687, 2286699611, 2457525258, 2305306409, 3015084660, 2286699611, 58142734, 1609043069, 860905304]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 1051657464, 2201479727, 4014577522, 1817548977, 209159324, 3118531687, 2457525258, 2305306409, 3015084660, 2286699611, 58142734]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 1817548977, 3727139957, 209159324, 1686789050, 3118531687, 2286699611, 2020187176, 1817548977, 3979847770, 2266426491, 1266522568, 3554205137, 3765252838]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 1817548977, 3727139957, 209159324, 1686789050, 2286699611, 2020187176, 1817548977, 3979847770, 2266426491, 1266522568, 3554205137]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 3727139957, 1686789050, 2286699611]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 1051657464, 2201479727, 4014577522, 1817548977, 209159324, 3118531687, 2457525258, 2305306409, 3015084660, 2286699611, 58142734, 1609043069, 860905304, 2065050639, 3518492710]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 1817548977, 3727139957, 209159324, 3118531687, 2457525258, 2305306409, 3015084660, 2286699611, 58142734, 1609043069]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 1817548977, 3727139957, 209159324, 1686789050, 3118531687, 2286699611, 2457525258, 2305306409, 3015084660, 2286699611, 58142734, 1609043069, 860905304]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 2896198557, 1051657464, 2201479727, 4014577522, 1817548977, 209159324]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 415649416, 3727139957, 1686789050, 2286699611, 2020187176, 1817548977, 3979847770, 2266426491, 1266522568]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 1817548977, 3727139957, 209159324, 1686789050, 3118531687, 2286699611, 2457525258, 2020187176, 2305306409, 1817548977, 3015084660, 3979847770, 2286699611, 2266426491, 58142734, 1266522568, 1609043069]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 1051657464, 2201479727, 4014577522, 1817548977, 209159324, 3118531687, 2457525258, 2305306409, 3015084660, 2286699611, 58142734, 1609043069, 860905304, 2065050639]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 1817548977, 3727139957, 209159324, 1686789050, 3118531687, 2286699611, 2457525258, 2020187176, 2305306409, 1817548977, 3015084660, 3979847770, 2286699611, 2266426491, 58142734, 1609043069, 860905304, 2065050639]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 1817548977, 3727139957, 209159324, 1686789050, 3118531687, 2286699611, 2457525258, 2020187176, 2305306409, 1817548977, 3015084660, 2286699611, 58142734]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 1817548977, 209159324, 3118531687, 2457525258, 2305306409, 3015084660, 2286699611, 58142734, 1609043069, 860905304, 2065050639, 3518492710]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 1817548977, 3727139957, 209159324, 1686789050, 3118531687, 2286699611, 2457525258, 2020187176, 2305306409, 1817548977, 3979847770, 2266426491, 1266522568, 3554205137, 3765252838, 2194944279]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 1051657464, 2201479727, 4014577522, 1817548977, 209159324, 3118531687, 2457525258, 2305306409]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 1817548977, 3727139957, 209159324, 1686789050, 3118531687, 2286699611, 2457525258, 2020187176, 2305306409, 1817548977, 3979847770, 2266426491, 1266522568, 3554205137, 3765252838]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 3727139957, 1686789050, 2286699611, 2020187176, 1817548977, 3979847770, 2266426491, 1266522568]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 1817548977, 3727139957, 209159324, 1686789050, 3118531687, 2286699611, 2457525258, 2020187176, 2305306409, 1817548977, 3979847770, 2266426491, 1266522568, 3554205137]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 1817548977, 209159324]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 2201479727, 4014577522, 1817548977, 209159324, 3118531687, 2457525258, 2305306409, 3015084660, 2286699611, 58142734, 1609043069, 860905304]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 1817548977, 209159324]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 1817548977, 3727139957, 209159324, 1686789050, 3118531687, 2286699611, 2457525258, 2020187176, 2305306409, 1817548977, 3015084660, 2286699611, 58142734]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 415649416, 3727139957, 1686789050, 2286699611]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 1817548977, 3727139957, 209159324, 1686789050, 3118531687, 2286699611, 2457525258, 2305306409, 3015084660, 2286699611, 58142734, 1609043069, 860905304, 2065050639, 3518492710]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 1817548977, 3727139957, 209159324, 1686789050, 3118531687, 2286699611, 2457525258, 2020187176, 2305306409, 1817548977, 3015084660, 3979847770, 2286699611, 2266426491, 58142734, 1609043069, 860905304]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 3727139957, 1686789050, 2286699611]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 1817548977, 3727139957, 209159324, 3118531687, 2457525258, 2305306409, 3015084660, 2286699611]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 1817548977, 3727139957, 209159324, 1686789050, 3118531687, 2286699611, 2020187176, 1817548977]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 415649416, 3727139957, 1686789050, 2286699611, 2020187176, 1817548977, 3979847770, 2266426491, 1266522568, 3554205137, 3765252838]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 1817548977, 3727139957, 209159324, 1686789050, 2286699611, 2020187176, 1817548977, 3979847770, 2266426491, 1266522568, 3554205137, 3765252838, 2194944279]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 3727139957, 1686789050, 2286699611, 2020187176, 1817548977, 3979847770, 2266426491, 1266522568]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 3108703291, 415649416, 3727139957, 1686789050, 2286699611, 2020187176, 1817548977, 3979847770, 2266426491, 1266522568, 3554205137]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 4014577522, 1817548977, 209159324, 3118531687, 2457525258, 2305306409, 3015084660, 2286699611, 58142734, 1609043069, 860905304]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 2896198557, 1051657464, 2201479727, 4014577522, 1817548977, 209159324, 3118531687, 2457525258, 2305306409, 3015084660, 2286699611]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 1817548977, 3727139957, 209159324, 1686789050, 3118531687, 2286699611, 2457525258, 2020187176, 2305306409, 1817548977, 3015084660, 3979847770, 2286699611, 58142734, 1609043069, 860905304, 2065050639, 3518492710]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 4014577522, 1817548977, 209159324, 3118531687, 2457525258, 2305306409, 3015084660]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 1817548977, 209159324, 3118531687, 2457525258, 2305306409, 3015084660]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 3727139957, 1686789050, 2286699611, 2020187176, 1817548977, 3979847770, 2266426491]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 415649416, 3727139957, 1686789050, 2286699611, 2020187176, 1817548977, 3979847770]\"], [\"None\", \"[1120956948, 4183773818, 2266426491, 3688896863, 577815214, 3612646364, 2896198557, 2198110549, 1051657464, 1450852122, 2201479727, 3108703291, 4014577522, 415649416, 1817548977, 3727139957, 209159324, 1686789050, 3118531687, 2286699611, 2457525258, 2020187176, 2305306409, 1817548977, 3015084660, 3979847770, 2286699611, 2266426491, 58142734, 1266522568, 1609043069]\"]]", 
      "solution": "def zlepek(s1, s2):\n    zlepljen = []\n    n = min(len(s1), len(s2))\n    for i in range(n):\n        zlepljen.append(s1[i])\n        zlepljen.append(s2[i])\n    zlepljen += s1[n:]\n    zlepljen += s2[n:]\n    return zlepljen", 
      "problem": 119, 
      "validation": "Check.equal('zlepek([1, 2, 3], [4, 5, 6])', [1, 4, 2, 5, 3, 6])\nCheck.equal('zlepek([1, 2, 3], [4, 5, 6, 7, 8, 9])', [1, 4, 2, 5, 3, 6, 7, 8, 9])\nCheck.equal('zlepek([1, 2, 3, 7, 8, 9], [4, 5, 6])', [1, 4, 2, 5, 3, 6, 7, 8, 9])\nrng=[110597]\nfor i in range(100): rng.append((rng[-1]*1103515245+12345)%2**32)\npodatki = [([rng[(11*y+7)%100] for y in range(5+x%15)], [rng[(17*y-3)%100] for y in range(2+x%17)]) for x in rng]\nfor s1,s2 in podatki:\n    Check.challenge(zlepek(s1,s2))"
    }
  }, 
  {
    "pk": 337, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `ravninski(sprehod)`, ki sprejme niz, ki\npredstavlja zaporedje korakov v ravnini, in vrne to\u010dko, v kateri se\nsprehod kon\u010da.\n\nSprehod po ravnini se za\u010dne v izhodi\u0161\u010du, predstavimo pa ga z nizem,\nsestavljenim iz \u010drk `S`, `J`, `V` ali `Z`, odvisno od smeri\n(sever, jug, vzhod, zahod). Na ostale znake v nizu se ne oziramo.", 
      "timestamp": "2012-03-22 11:22:48", 
      "challenge": "[]", 
      "solution": "def ravninski(sprehod):\n    x = y = 0\n    for korak in sprehod:\n        if korak == 'S':\n            y += 1\n        elif korak == 'J':\n            y -= 1\n        elif korak == 'V':\n            x += 1\n        elif korak == 'Z':\n            x -= 1\n    return (x, y)", 
      "problem": 114, 
      "validation": "Check.equal('ravninski(\"SSJSSVSZ\")', (0, 4))\nCheck.equal('ravninski(\"JJSJJSZZSZ\")', (-3, -1))\nCheck.equal('ravninski(\"\")', (0, 0))\nCheck.equal('ravninski(\"ABCDEFGHIJKLMNOPRSTUVZ\")', (0, 0))"
    }
  }, 
  {
    "pk": 352, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavi funkcijo `dolzinaVektorja`, ki izra\u010duna in vrne do\u017eino podanega\nvektorja. Primer:\n\n    >>> dolzinaVektorja([1, 1])\n    1.41421356237\n    >>> dolzinaVektorja([1, 4, 2, -5])\n    6.78232998313", 
      "timestamp": "2012-03-30 12:07:17", 
      "challenge": "[]", 
      "solution": "def dolzinaVektorja(vec):\n    kvadrati=[]\n    for x in vec:\n        kvadrati.append(x**2)\n    return sum(kvadrati) ** 0.5", 
      "problem": 121, 
      "validation": "Check.equal('round(dolzinaVektorja([1, 1]),7)',1.4142136)\nCheck.equal('round(dolzinaVektorja([1, 4, 2, -5]),7)',6.78233)"
    }
  }, 
  {
    "pk": 754, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Niz je palindrom, kadar se ne spremeni, \u010de znake pogledamo v obratnem\nvrstnem redu.\n\nSestavite funkcijo `niPalindrom(niz)`, ki vrne `True`, \u010de niz ni palindrom,\nin `False`, \u010de je.", 
      "timestamp": "2012-07-14 21:25:49", 
      "challenge": "[]", 
      "solution": "def niPalindrom(niz):\n    return niz != obrni(niz)", 
      "problem": 240, 
      "validation": "Check.equal(\"niPalindrom('veselica')\", True)\nCheck.equal(\"niPalindrom('Perica re\u017ee raci rep.')\", True)\nCheck.equal(\"niPalindrom('pericare\u017eeracirep')\", False)\nCheck.equal(\"niPalindrom('atamaradmamo')\", True)\nCheck.equal(\"niPalindrom('neradodaren')\", False)"
    }
  }, 
  {
    "pk": 357, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavi funkcijo `diagonalnaMatrika(s)`, ki zgradi in vrne diagonalno matriko,\nki ima po diagonali elemente danega seznama *s*. Uporabi gnezden\nizpeljan seznam. Primer:\n\n     >>> diagonalnaMatrika([1, 2, 3, 4])\n     [[1, 0, 0, 0], [0, 2, 0, 0], [0, 0, 3, 0], [0, 0, 0, 4]]", 
      "timestamp": "2012-04-16 13:04:46", 
      "challenge": "[]", 
      "solution": "def diagonalnaMatrika(s):\n    n = len(s)\n    return [[s[i] if i == j else 0 for i in range(n)] for j in range(n)]", 
      "problem": 123, 
      "validation": "Check.equal('diagonalnaMatrika([1, 2, 3, 4])', [[1, 0, 0, 0], [0, 2, 0, 0], [0, 0, 3, 0], [0, 0, 0, 4]])\nCheck.equal('diagonalnaMatrika([1])',[[1]])"
    }
  }, 
  {
    "pk": 367, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavi funkcijo `histogram`, ki prika\u017ee rezultate simulacije\r\nmetanja kocke. Pri tem si pomagaj s funkcijo `kocka`. Funkcija naj\r\nsprejme dva parametra. Prvi pove, kolikokrat naj simuliramo met kocke,\r\ndrugi (katerega privzeta vrednost je '*') pa znak, ki se naj uporabi\r\nza izpis. Pri izpisu normaliziraj podatke tako, da bo imela vrstica z\r\nnajve\u010d zvezdicami (oz. znaki) 40 znakov.\r\nPrimer:\r\n    >>> histogram(3000)\r\n       1|*************************************\r\n       2|***************************************\r\n       3|**************************************\r\n       4|****************************************\r\n       5|***************************************\r\n       6|***********************************", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "def histogram(n,z='*'):\r\n    meti = [0]*6\r\n    for i in range(n):\r\n        meti[kocka()-1] += 1\r\n    M=max(meti)\r\n    for i in range(6):\r\n        print('{0:4d}|{1}'.format(i+1,z*round(40*meti[i]/M)))", 
      "problem": 127, 
      "validation": "Check.equal('izpis(histogram,300)','   1|**********************************\\n   2|****************************************\\n   3|********************************\\n   4|**********************************\\n   5|********************************\\n   6|***************************************\\n')"
    }
  }, 
  {
    "pk": 369, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavi funkcijo `tarok`, ki vrne naklju\u010dno razdeljene karte za tarok.\r\nPomagaj si s funkcijo karta. Funkcija naj sprejme en parameter, ki pove,\r\nza koliko igralcev moramo razdeliti karte (3 ali 4), vrne pa naj seznam\r\nmno\u017eic, ki predstavljajo porazdelitev kart po rokah ter talon.\r\nPri igri v 3 vsak igralec dobi 16 kart, pri igri v \u0161tiri pa 12 kart. Talon\r\nima vedno 6 kart. Bodi pozoren na to, da se vsaka karta pojavi samo enkrat.\r\nPrimer:\r\n    >>> tarok(3)\r\n    [{'SK', 'S9', 'XI', 'IX', 'XV', 'III', 'IV', 'XVI', 'HK', 'XIII', 'VIII', 'XVIII', 'X', 'HC', 'C7', 'D3'}, {'CJ', 'VI', #    'S8', 'HQ', 'DK', 'H1', 'I', 'XII', 'VII', 'S7', 'II', 'CC', 'XX', 'V', 'XIX', 'CQ'}, {'CK', 'DJ', 'H2', 'H3', 'SQ', #    'S10', 'HJ', 'SJ', 'C9', 'C8', 'XVII', 'XIV', 'SC', 'XXI', 'C10', 'D1'}, {'\u0161kis', 'DC', 'H4', 'D4', 'D2', 'DQ'}]", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "def tarok(igralcev):\r\n    karte=['I','II','III','IV','V','VI','VII','VIII','IX','X','XI','XII','XIII','XIV','XV','XVI','XVII','XVIII','XIX','XX','XXI','\u0160kis','H1','H2','H3','H4','HJ','HC','HQ','HK','D1','D2','D3','D4','DJ','DC','DQ','DK','C7','C8','C9','C10','CJ','CC','CQ','CK','S7','S8','S9','S10','SJ','SC','SQ','SK']\r\n    random.shuffle(karte)\r\n    stkart = 16 if igralcev==3 else 12\r\n    return [set(karte[stkart*i:stkart*i+stkart]) for i in range(igralcev+1)]", 
      "problem": 128, 
      "validation": "Check.equal('isinstance(tarok(3)[0],set) and len(tarok(3)[0])==16', True, 'Prvi igralec nima pravih kart')\r\nCheck.equal('isinstance(tarok(3)[1],set) and len(tarok(3)[0])==16', True, 'Drugi igralec nima pravih kart')\r\nCheck.equal('isinstance(tarok(3)[2],set) and len(tarok(3)[0])==16', True, 'Tretji igralec nima pravih kart')\r\nCheck.equal('isinstance(tarok(4)[3],set) and len(tarok(4)[3])==12', True, '\u010cetrti igralec nima pravih kart')\r\nCheck.equal('len(unija(tarok(4)))', 54, 'Nekatere karte so uporabljene ve\u010dkrat')\r\nCheck.equal('len(unija(tarok(3)))', 54, 'Nekatere karte so uporabljene ve\u010dkrat')"
    }
  }, 
  {
    "pk": 371, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavi funkcijo `priblizekPi(N)`, ki s pomo\u010djo Monte Carlo simulacije\r\nizra\u010duna pribli\u017eek \u0161tevila Pi tako, da generira N naklju\u010dnih\r\nto\u010dk v enotskem kvadratu [0,1]x[0,1] in pre\u0161teje, koliko jih je znotraj\r\ndela enotskega kroga, ki le\u017ei v enotskem kvadratu (najprej ugotovi, kaj\r\nmora veljati za to\u010dko (x,y), da le\u017ei znotraj enotskega kroga). Razmerje\r\nmed tem \u0161tevilom in N je pribli\u017eek za razmerje plo\u0161\u010din, ki je Pi/4. Od\r\ntod lahko izra\u010dunamo pribli\u017eek za Pi.\r\nPrimer:\r\n    >>> priblizekPi(1000)\r\n    3.228\r\n    >>> priblizekPi(100000)\r\n    3.14188", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "def priblizekPi(N):\r\n    x=[random.random() for i in range(N)]\r\n    y=[random.random() for i in range(N)]\r\n    st=0\r\n    for i in range(N):\r\n        if x[i]**2+y[i]**2 <= 1: st+=1\r\n    return 4*st/N\r\n", 
      "problem": 129, 
      "validation": "Check.equal('3.1<priblizekPi(10000)<3.2',True)"
    }
  }, 
  {
    "pk": 373, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavi dve funkciji: `vsotaPrvihN(n)` in `vsotaPrvihN2(n)`, ki\r\nizra\u010dunata vsoto prvih `n` naravnih \u0161tevil. Prva naj to stori z zanko\r\nwhile, druga pa z uporabo formule `n*(n+1)/2`. Nato sestavi funkcijo\r\n`zahtevnost(S)`, ki s pomo\u010djo funkcije `meri` tabelira \u010dasovno\r\nzahtevnost obeh funkcij. Tabeliraj \u010dase izvajanja obeh\r\nfunkcij za razli\u010dne vrednosti `n`, ki so podane v seznamu S.\r\nPrimer:\r\n    >>> zahtevnost([100, 1000, 10000, 100000, 1000000])\r\n       N   | vsotaPrvihN | vsotaPrvihN2\r\n    -------+-------------+--------------\r\n        100|      2.7e-05|     7.1e-07\r\n       1000|      0.00031|     7.6e-07\r\n      10000|       0.0033|     7.7e-07\r\n     100000|        0.032|     8.9e-07\r\n    1000000|         0.31|       9e-07", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "def vsotaPrvihN(n):\r\n    v=0\r\n    while n>0:\r\n        v+=n\r\n        n-=1\r\n    return v\r\n\r\ndef vsotaPrvihN2(n):\r\n    return n*(n+1)//2\r\n\r\ndef zahtevnost(S):\r\n    #priblizno milijon izvajanj\r\n    print('    N     | vsotaPrvihN | vsotaPrvihN2')\r\n    print('-'*7+'+'+'-'*13+'+'+'-'*14)\r\n    for n in S:\r\n        N=1000000\r\n        print('{0:10}| '.format(n),end='')\r\n        print('{0:11} |{1:12}'.format(meri(vsotaPrvihN,N//n,n),meri(vsotaPrvihN2,N,n)))\r\n", 
      "problem": 130, 
      "validation": "if check_function('zahtevnost', 1) and check_function('vsotaPrvihN',1) and check_function('vsotaPrvihN2',1):\r\nCheck.equal('vsotaPrvihN(3)',6)\r\nCheck.equal('vsotaPrvihN2(3)',6)\r\nCheck.equal('vsotaPrvihN(20)',210)\r\nCheck.equal('vsotaPrvihN2(20)',210)"
    }
  }, 
  {
    "pk": 379, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "S pomo\u010djo slovarja, ki si ga zgradil v prej\u0161nji nalogi, generiraj \r\nnaklju\u010dno besedilo, ki upo\u0161teva prave frekvence \u010drk.\r\nIme metode naj bo nakljucnoBesedilo. Besedilo naj vrne v obliki\r\nniza dol\u017eine n, kjer n sprejme kot argument metode.\r\n\r\nPozor: testni program za to nalogo ne obstaja, zato mora\u0161\r\nnjeno delovanje preveriti sam.\r\n", 
      "timestamp": "2012-05-12 23:21:53", 
      "challenge": "[]", 
      "solution": "def nakljucnoBesedilo(dolzina):\r\n    slovar,d = frekvence(\"besedilo.txt\")\r\n    S=list(slovar.values())\r\n    K=list(slovar.keys())\r\n    niz=''.join([K[rnds(S)] for i in range(dolzina)])\r\n    return niz", 
      "problem": 132, 
      "validation": ""
    }
  }, 
  {
    "pk": 825, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `uredi_ite(sez)`, ki iterativno uredi seznam `sez`.", 
      "timestamp": "2012-10-25 14:07:05", 
      "challenge": "[]", 
      "solution": "def uredi_ite(sez):\n    n = len(sez)\n    blok = 1\n    while blok < n:\n        zac = 0\n        while zac < n:\n            sez[zac:zac + 2 * blok] = zlij_ite(sez[zac:zac + blok],\n                                               sez[zac + blok:zac + 2*blok])\n            zac += 2 * blok\n        blok *= 2\n    return sez", 
      "problem": 260, 
      "validation": "Check.equal(\"uredi_ite([1, 3, 5, 2, 4, 6])\", [1, 2, 3, 4, 5, 6])\nCheck.equal(\"uredi_ite([5, 3, 1, 6, 4, 2])\", [1, 2, 3, 4, 5, 6])\nCheck.equal(\"uredi_ite([5])\", [5])\nCheck.equal(\"uredi_ite([])\", [])"
    }
  }, 
  {
    "pk": 209, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `drevoZaporednih(n)`, ki vrne polno drevo globine\n$n$, v katerem se pri iskanju po \u0161irini pojavijo ravno vsa naravna \u0161tevila\ndo $2^n - 1$.\n\n    >>> drevoZaporednih(1)\n    Drevo(1)\n    >>> drevoZaporednih(2)\n    Drevo(1, levo=Drevo(2), desno=Drevo(3))\n    >>> drevoZaporednih(3)\n    Drevo(1,\n          levo=Drevo(2, levo=Drevo(4), desno=Drevo(5)),\n          desno=Drevo(3, levo=Drevo(6), desno=Drevo(7)))\n\nNamig, funkciji podajte \u0161e neobvezen argument, ki pove, katero \u0161tevilo\nnaj bo v korenu.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"None\", \"Drevo(1,\\n      levo = Drevo(2,\\n                   levo = Drevo(4,\\n                                levo = Drevo(8,\\n                                             levo = Drevo(16,\\n                                                          levo = Drevo(32,\\n                                                                       levo = Drevo(64),\\n                                                                       desno = Drevo(65)),\\n                                                          desno = Drevo(33,\\n                                                                        levo = Drevo(66),\\n                                                                        desno = Drevo(67))),\\n                                             desno = Drevo(17,\\n                                                           levo = Drevo(34,\\n                                                                        levo = Drevo(68),\\n                                                                        desno = Drevo(69)),\\n                                                           desno = Drevo(35,\\n                                                                         levo = Drevo(70),\\n                                                                         desno = Drevo(71)))),\\n                                desno = Drevo(9,\\n                                              levo = Drevo(18,\\n                                                           levo = Drevo(36,\\n                                                                        levo = Drevo(72),\\n                                                                        desno = Drevo(73)),\\n                                                           desno = Drevo(37,\\n                                                                         levo = Drevo(74),\\n                                                                         desno = Drevo(75))),\\n                                              desno = Drevo(19,\\n                                                            levo = Drevo(38,\\n                                                                         levo = Drevo(76),\\n                                                                         desno = Drevo(77)),\\n                                                            desno = Drevo(39,\\n                                                                          levo = Drevo(78),\\n                                                                          desno = Drevo(79))))),\\n                   desno = Drevo(5,\\n                                 levo = Drevo(10,\\n                                              levo = Drevo(20,\\n                                                           levo = Drevo(40,\\n                                                                        levo = Drevo(80),\\n                                                                        desno = Drevo(81)),\\n                                                           desno = Drevo(41,\\n                                                                         levo = Drevo(82),\\n                                                                         desno = Drevo(83))),\\n                                              desno = Drevo(21,\\n                                                            levo = Drevo(42,\\n                                                                         levo = Drevo(84),\\n                                                                         desno = Drevo(85)),\\n                                                            desno = Drevo(43,\\n                                                                          levo = Drevo(86),\\n                                                                          desno = Drevo(87)))),\\n                                 desno = Drevo(11,\\n                                               levo = Drevo(22,\\n                                                            levo = Drevo(44,\\n                                                                         levo = Drevo(88),\\n                                                                         desno = Drevo(89)),\\n                                                            desno = Drevo(45,\\n                                                                          levo = Drevo(90),\\n                                                                          desno = Drevo(91))),\\n                                               desno = Drevo(23,\\n                                                             levo = Drevo(46,\\n                                                                          levo = Drevo(92),\\n                                                                          desno = Drevo(93)),\\n                                                             desno = Drevo(47,\\n                                                                           levo = Drevo(94),\\n                                                                           desno = Drevo(95)))))),\\n      desno = Drevo(3,\\n                    levo = Drevo(6,\\n                                 levo = Drevo(12,\\n                                              levo = Drevo(24,\\n                                                           levo = Drevo(48,\\n                                                                        levo = Drevo(96),\\n                                                                        desno = Drevo(97)),\\n                                                           desno = Drevo(49,\\n                                                                         levo = Drevo(98),\\n                                                                         desno = Drevo(99))),\\n                                              desno = Drevo(25,\\n                                                            levo = Drevo(50,\\n                                                                         levo = Drevo(100),\\n                                                                         desno = Drevo(101)),\\n                                                            desno = Drevo(51,\\n                                                                          levo = Drevo(102),\\n                                                                          desno = Drevo(103)))),\\n                                 desno = Drevo(13,\\n                                               levo = Drevo(26,\\n                                                            levo = Drevo(52,\\n                                                                         levo = Drevo(104),\\n                                                                         desno = Drevo(105)),\\n                                                            desno = Drevo(53,\\n                                                                          levo = Drevo(106),\\n                                                                          desno = Drevo(107))),\\n                                               desno = Drevo(27,\\n                                                             levo = Drevo(54,\\n                                                                          levo = Drevo(108),\\n                                                                          desno = Drevo(109)),\\n                                                             desno = Drevo(55,\\n                                                                           levo = Drevo(110),\\n                                                                           desno = Drevo(111))))),\\n                    desno = Drevo(7,\\n                                  levo = Drevo(14,\\n                                               levo = Drevo(28,\\n                                                            levo = Drevo(56,\\n                                                                         levo = Drevo(112),\\n                                                                         desno = Drevo(113)),\\n                                                            desno = Drevo(57,\\n                                                                          levo = Drevo(114),\\n                                                                          desno = Drevo(115))),\\n                                               desno = Drevo(29,\\n                                                             levo = Drevo(58,\\n                                                                          levo = Drevo(116),\\n                                                                          desno = Drevo(117)),\\n                                                             desno = Drevo(59,\\n                                                                           levo = Drevo(118),\\n                                                                           desno = Drevo(119)))),\\n                                  desno = Drevo(15,\\n                                                levo = Drevo(30,\\n                                                             levo = Drevo(60,\\n                                                                          levo = Drevo(120),\\n                                                                          desno = Drevo(121)),\\n                                                             desno = Drevo(61,\\n                                                                           levo = Drevo(122),\\n                                                                           desno = Drevo(123))),\\n                                                desno = Drevo(31,\\n                                                              levo = Drevo(62,\\n                                                                           levo = Drevo(124),\\n                                                                           desno = Drevo(125)),\\n                                                              desno = Drevo(63,\\n                                                                            levo = Drevo(126),\\n                                                                            desno = Drevo(127)))))))\"]]", 
      "solution": "def drevoZaporednih(n, v=1):\n    if n == 0:\n        return Drevo()\n    else:\n        # v levem je\n        return Drevo(v, levo=drevoZaporednih(n - 1, v=2 * v),\n                     desno=drevoZaporednih(n - 1, v=2 * v + 1))", 
      "problem": 62, 
      "validation": "Check.equal('drevoZaporednih(1)', Drevo(1))\nCheck.equal('drevoZaporednih(2)', Drevo(1, levo=Drevo(2), desno=Drevo(3)))\nCheck.equal('drevoZaporednih(3)', Drevo(1, levo=Drevo(2, levo=Drevo(4), desno=Drevo(5)), desno=Drevo(3, levo=Drevo(6), desno=Drevo(7))))\nCheck.challenge(drevoZaporednih(7))"
    }
  }, 
  {
    "pk": 355, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "V seznamu imamo spravljen izpisek na\u0161ih telefonskih pogovorov.\nVsak element seznama je peterica `[leto,mesec,dan,ura,minuta]`, ki\nopisuje \u010das, ko smo za\u010deli nek pogovor. Sestavi funkcijo `zgovorenDan(klici)`,\nki sprejme tak\u0161en izpisek in vrne trojko `[leto, mesec, dan]`, ki\nopisuje najbolj *zgovoren* dan -- torej tistega, na katerega smo\nopravili najve\u010d pogovorov. \u010ce je tak\u0161nih dni ve\u010d, naj funkcija vrne\ntistega, ki se na izpisku pojavi prvi. Primer:\n\n     >>> zgovorenDan([[2011, 4, 21, 13, 53], [2011, 4, 16, 0, 35],\n        [2011, 4, 21, 2, 44], [2011, 4, 16, 9, 14], [2011, 4, 21, 13, 30],\n        [2011, 4, 16, 22, 56], [2011, 4, 19, 15, 56], [2011, 4, 20, 12, 23],\n        [2011, 4, 17, 17, 39], [2011, 4, 18, 9, 1], [2011, 4, 20, 12, 0],\n        [2011, 4, 18, 10, 40], [2011, 4, 19, 9, 53], [2011, 4, 18, 8, 5],\n        [2011, 4, 19, 3, 22], [2011, 4, 16, 4, 53], [2011, 4, 16, 12, 19],\n        [2011, 4, 18, 11, 17], [2011, 4, 17, 17, 59], [2011, 4, 19, 12, 13]])\n\n     [2011, 4, 16]\n     >>> zgovorenDan([[2011, 4, 19, 16, 12], [2011, 4, 20, 0, 21],\n        [2011, 4, 18, 19, 30], [2011, 4, 20, 4, 46], [2011, 4, 17, 8, 36],\n        [2011, 4, 16, 22, 54], [2011, 4, 17, 14, 56], [2011, 4, 16, 4, 4],\n        [2011, 4, 21, 4, 5], [2011, 4, 19, 10, 0], [2011, 4, 21, 21, 50],\n        [2011, 4, 17, 18, 1], [2011, 4, 16, 2, 53], [2011, 4, 16, 1, 12],\n        [2011, 4, 20, 12, 19], [2011, 4, 17, 11, 26], [2011, 4, 19, 1, 20],\n        [2011, 4, 20, 14, 58], [2011, 4, 19, 4, 33], [2011, 4, 20, 3, 1]])\n\n     [2011, 4, 20]", 
      "timestamp": "2012-04-16 12:58:39", 
      "challenge": "[]", 
      "solution": "def zgovorenDan(klici):\n    # seznam dni, ko smo klicali\n    klici = [cas[:3] for cas in klici]\n\n    maxKlicev = 0  # st. klicev na najbolj zgovoren dan\n    for dan in klici:\n        kKlicev = klici.count(dan)\n        if kKlicev > maxKlicev:\n            maxKlicev = kKlicev\n            rezultat = dan\n    return None if maxKlicev == 0 else rezultat", 
      "problem": 122, 
      "validation": "Check.equal('zgovorenDan([[2011, 4, 21, 13, 53], [2011, 4, 16, 0, 35], [2011, 4, 21, 2, 44], [2011, 4, 16, 9, 14], [2011, 4, 21, 13, 30], [2011, 4, 16, 22, 56], [2011, 4, 19, 15, 56], [2011, 4, 20, 12, 23], [2011, 4, 17, 17, 39], [2011, 4, 18, 9, 1], [2011, 4, 20, 12, 0], [2011, 4, 18, 10, 40], [2011, 4, 19, 9, 53], [2011, 4, 18, 8, 5], [2011, 4, 19, 3, 22], [2011, 4, 16, 4, 53], [2011, 4, 16, 12, 19], [2011, 4, 18, 11, 17], [2011, 4, 17, 17, 59], [2011, 4, 19, 12, 13]])', [2011, 4, 16])\nCheck.equal('zgovorenDan([[2011, 4, 19, 16, 12], [2011, 4, 20, 0, 21], [2011, 4, 18, 19, 30], [2011, 4, 20, 4, 46], [2011, 4, 17, 8, 36], [2011, 4, 16, 22, 54], [2011, 4, 17, 14, 56], [2011, 4, 16, 4, 4], [2011, 4, 21, 4, 5], [2011, 4, 19, 10, 0], [2011, 4, 21, 21, 50], [2011, 4, 17, 18, 1], [2011, 4, 16, 2, 53], [2011, 4, 16, 1, 12], [2011, 4, 20, 12, 19], [2011, 4, 17, 11, 26], [2011, 4, 19, 1, 20], [2011, 4, 20, 14, 58], [2011, 4, 19, 4, 33], [2011, 4, 20, 3, 1]])', [2011, 4, 20])"
    }
  }, 
  {
    "pk": 375, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `tabela(ime_vhodne, ime_izhodne)`, ki bo podatke iz\nvhodne datoteke zapisala v obliki HTML tabele v izhodno datoteko.\n\nV vhodni datoteki so podatki shranjeni po vrsticah ter lo\u010deni z vejicami.\n\nNa primer, \u010de je v datoteki `tabela.txt` zapisano:\n\n    ena,dva,tri\n    17,52,49.4,6\n    abc,xyz\n\nbo po klicu `tabela('tabela.txt', 'tabela.html')` v datoteki `tabela.html`:\n\n    <table>\n      <tr>\n        <td>ena</td>\n        <td>dva</td>\n        <td>tri</td>\n      </tr>\n      <tr>\n        <td>17</td>\n        <td>52</td>\n        <td>49.4</td>\n        <td>6</td>\n      </tr>\n      <tr>\n        <td>abc</td>\n        <td>xyz</td>\n      </tr>\n    </table>", 
      "timestamp": "2012-05-13 11:53:18", 
      "challenge": "[]", 
      "solution": "def tabela(ime_vhodne, ime_izhodne):\n    with open(ime_vhodne) as vhodna:\n        with open(ime_izhodne, 'w') as izhodna:\n            print('<table>', file=izhodna)\n            for vrstica in vhodna:\n                print('  <tr>', file=izhodna)\n                podatki = vrstica.strip().split(',')\n                for podatek in podatki:\n                    print('    <td>{0}</td>'.format(podatek), file=izhodna)\n                print('  </tr>', file=izhodna)\n            print('</table>', file=izhodna)", 
      "problem": 131, 
      "validation": "in_example = [\"ena,dva,tri\",\n               \"17,52,49.4,6\",\n               \"abc,xyz\"]\nout_example = [\"<table>\",\n                \"  <tr>\",\n                \"    <td>ena</td>\",\n                \"    <td>dva</td>\",\n                \"    <td>tri</td>\",\n                \"  </tr>\",\n                \"  <tr>\",\n                \"    <td>17</td>\",\n                \"    <td>52</td>\",\n                \"    <td>49.4</td>\",\n                \"    <td>6</td>\",\n                \"  </tr>\",\n                \"  <tr>\",\n                \"    <td>abc</td>\",\n                \"    <td>xyz</td>\",\n                \"  </tr>\",\n                \"</table>\"]\n\n\nwith Check.in_out_file(in_example, out_example) as (fi, fo):\n    tabela(fi, fo)"
    }
  }, 
  {
    "pk": 702, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Napi\u0161ite funkcijo `tezaImena(ime)`, ki vrne vsoto \u0161tevk vsote \u0161tevk ...\nvsote \u0161tevk vsote polo\u017eajev znakov imena v slovenski abecedi.", 
      "timestamp": "2012-06-10 01:11:13", 
      "challenge": "[]", 
      "solution": "def vsotaStevk(x):\n    if x<10:\n        return x\n    else:\n        return vsotaStevk( sum( int(c) for c in str(x)) )\n    \ndef tezaImena( ime ):\n    return vsotaStevk( sum( crkePoVrsti( ime ) ) )", 
      "problem": 228, 
      "validation": "Check.equal('tezaImena( \"Martin Krpan\" )', 7 )"
    }
  }, 
  {
    "pk": 449, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavi metodo `vecmanj(seznam)`, ki vrne najve\u010dje in najmanj\u0161e \u0161tevilo\nglasov, ki jih je stare\u0161ina imel tekom glasovanja. Glasove vrnite v obliki\nnabora z dvema elementoma `(minimum, maksimum)`.", 
      "timestamp": "2012-04-16 12:30:20", 
      "challenge": "[]", 
      "solution": "def vecmanj(seznam):\n    s=stanje(seznam)\n    return (min(s), max(s))", 
      "problem": 150, 
      "validation": "Check.equal('vecmanj([1, 2, -3, 1])', (0, 3))\nCheck.equal('vecmanj([1, -5, -2, 3, 4])', (-6, 1))"
    }
  }, 
  {
    "pk": 655, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Janeza sedaj zanima, \u010de bi morda njegov zaslu\u017eek bil ve\u010dji, \u010de bi\nprej nehal igrati. Sestavi funkcijo `kolikoMax(zasluzki)`, ki poi\u0161\u010de maksimalni mo\u017eni\nzaslu\u017eek, \u010de Janez ne igra do konca (torej, \u010de se po dolo\u010denem\n\u0161tevilu korakov ustavi). Kot argument metoda sprejme seznam rezultatov stav.\nPrimer:\n\n     >>> kolikoMax([1, 1, -1, -1, 1])\n     2", 
      "timestamp": "2012-04-16 13:36:02", 
      "challenge": "[]", 
      "solution": "def kolikoMax(zasluzki):\n    maxZasluzek = 0\n    for j in range(len(zasluzki)):\n        if sum(zasluzki[0:j+1])>maxZasluzek:\n            maxZasluzek = sum(zasluzki[0:j+1])\n    return maxZasluzek\n\n# nalogo lahko re\u0161imo s pomo\u010djo izpeljanih seznamov\n\ndef kolikoMax(zasluzki):\n    return max([sum(zasluzki[:i]) for i in range(len(zasluzki)+1)])", 
      "problem": 213, 
      "validation": "Check.equal('kolikoMax([1, 1, -1, -1, 1])', 2)\nCheck.equal('kolikoMax([-1, -1, -1, 1, 1, -1, -1, -1, -1, -1])', 0)\nCheck.equal('kolikoMax([-1, 1, -1, -1, 1, 1, -1, 1, 1, 1])', 2)"
    }
  }, 
  {
    "pk": 698, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Na datoteki imamo zapisane podatke o posameznih udarcih v obliki polarnih koordinat.\r\nV vsaki vrstici sta zapisani celi \u0161tevili `r` in `f`, lo\u010deni s presledkom.\r\nNapi\u0161ite metodo `datotekaPolozajev(vhod, izhod)`, ki naj datoteko prebere in v tvori novo datoteko tako,\r\nda je v vsaki vrstici\r\nzapisan njen trenutni polo\u017eaj (v obliki decimalnih \u0161tevil, zaokro\u017eenih na 3 decimalna mesta)\r\nin lo\u010denih s presledkom. Za\u010detni polo\u017eaj naj bo v to\u010dki `(0,0)`.", 
      "timestamp": "2012-06-10 01:21:03", 
      "challenge": "[]", 
      "solution": "from math import *\r\n\r\ndef datotekaPolozajev(vhod, izhod):\r\n    x,y=0,0\r\n    with open(vhod) as f:\r\n        with open(izhod, \"w\") as g:\r\n            vrstice = f.readlines()\r\n            for vrstica in vrstice:\r\n                polarnekoordinate = vrstica.strip('\\n').split(' ')\r\n                r = int(polarnekoordinate[0])\r\n                fi = int(polarnekoordinate[1])\r\n                x += r * cos(fi * pi / 180)\r\n                y += r * sin(fi * pi / 180)\r\n                print(\"{0:.3f}\".format(x),\"{0:.3f}\".format(y),file=g)\r\n    return (x,y)", 
      "problem": 221, 
      "validation": "_makefile1(\"_3d.in\")\r\n_makefile2(\"_3do.out\")\r\ndatotekaPolozajev(\"_3d.in\",\"_3d.out\")\r\nif not _istedatoteke(\"_3d.out\", \"_3do.out\"):\r\n    Check.error(\"Izhodna datoteka je napa\u010dna\")\r\n_removefiles(\"_3d.in\", \"_3do.out\",\"_3d.out\")"
    }
  }, 
  {
    "pk": 758, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `razsiriNabore(x, nabori)`, ki sprejme mno\u017eico\nnaborov `nabori` in vrne mno\u017eico teh naborov, na za\u010detku raz\u0161irjenih z\nelementom `x`.", 
      "timestamp": "2012-07-12 12:56:54", 
      "challenge": "[]", 
      "solution": "def razsiriNabore(x, nabori):\n    return {razsiriNabor(x, nabor) for nabor in nabori}", 
      "problem": 241, 
      "validation": "Check.equal(\"razsiriNabore(3, {(), (2,)})\", {(3,), (3, 2)})\nCheck.equal(\"razsiriNabore(3, {()})\", {(3,)})\nCheck.equal(\"razsiriNabore(3, set())\", set())\nCheck.equal(\"razsiriNabore(3, {(1, 2), (4, 5)})\", {(3, 1, 2), (3, 4, 5)})"
    }
  }, 
  {
    "pk": 212, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavi funkcijo `mozne_poteze(t,i,j)`, ki sprejme delno izpolnjeni\nSudoku `t` in indeksa `(i,j)` ter vrne mno\u017eico \u0161tevil, ki bi jih\nlahko vpisali v polje `t[i][j]`, ne da bi kr\u0161ili pravila igre. \u010ce je\npolje `t[u][v]` \u017ee izpolnjeno, naj funkcija vrne prazno mno\u017eico.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"(0, 0)\", \"[]\"], [\"(0, 1)\", \"[]\"], [\"(0, 2)\", \"[1, 2, 4]\"], [\"(0, 3)\", \"[2, 6]\"], [\"(0, 4)\", \"[]\"], [\"(0, 5)\", \"[2, 4, 6, 8]\"], [\"(0, 6)\", \"[1, 4, 8, 9]\"], [\"(0, 7)\", \"[1, 2, 4, 9]\"], [\"(0, 8)\", \"[2, 4, 8]\"], [\"(1, 0)\", \"[]\"], [\"(1, 1)\", \"[2, 4, 7]\"], [\"(1, 2)\", \"[2, 4, 7]\"], [\"(1, 3)\", \"[]\"], [\"(1, 4)\", \"[]\"], [\"(1, 5)\", \"[]\"], [\"(1, 6)\", \"[3, 4, 7, 8]\"], [\"(1, 7)\", \"[2, 3, 4]\"], [\"(1, 8)\", \"[2, 4, 7, 8]\"], [\"(2, 0)\", \"[1, 2]\"], [\"(2, 1)\", \"[]\"], [\"(2, 2)\", \"[]\"], [\"(2, 3)\", \"[2, 3]\"], [\"(2, 4)\", \"[3, 4]\"], [\"(2, 5)\", \"[2, 4]\"], [\"(2, 6)\", \"[1, 3, 4, 5, 7]\"], [\"(2, 7)\", \"[]\"], [\"(2, 8)\", \"[2, 4, 7]\"], [\"(3, 0)\", \"[]\"], [\"(3, 1)\", \"[1, 2, 5]\"], [\"(3, 2)\", \"[1, 2, 5, 9]\"], [\"(3, 3)\", \"[5, 7, 9]\"], [\"(3, 4)\", \"[]\"], [\"(3, 5)\", \"[1, 4, 7]\"], [\"(3, 6)\", \"[4, 5, 7, 9]\"], [\"(3, 7)\", \"[2, 4, 5, 9]\"], [\"(3, 8)\", \"[]\"], [\"(4, 0)\", \"[]\"], [\"(4, 1)\", \"[2, 5]\"], [\"(4, 2)\", \"[2, 5, 6, 9]\"], [\"(4, 3)\", \"[]\"], [\"(4, 4)\", \"[5]\"], [\"(4, 5)\", \"[]\"], [\"(4, 6)\", \"[5, 7, 9]\"], [\"(4, 7)\", \"[2, 5, 9]\"], [\"(4, 8)\", \"[]\"], [\"(5, 0)\", \"[]\"], [\"(5, 1)\", \"[1, 5]\"], [\"(5, 2)\", \"[1, 3, 5, 9]\"], [\"(5, 3)\", \"[5, 9]\"], [\"(5, 4)\", \"[]\"], [\"(5, 5)\", \"[1, 4]\"], [\"(5, 6)\", \"[4, 5, 8, 9]\"], [\"(5, 7)\", \"[4, 5, 9]\"], [\"(5, 8)\", \"[]\"], [\"(6, 0)\", \"[1, 3, 9]\"], [\"(6, 1)\", \"[]\"], [\"(6, 2)\", \"[1, 3, 4, 5, 7, 9]\"], [\"(6, 3)\", \"[3, 5, 7]\"], [\"(6, 4)\", \"[3, 5]\"], [\"(6, 5)\", \"[7]\"], [\"(6, 6)\", \"[]\"], [\"(6, 7)\", \"[]\"], [\"(6, 8)\", \"[4]\"], [\"(7, 0)\", \"[2, 3]\"], [\"(7, 1)\", \"[2, 7, 8]\"], [\"(7, 2)\", \"[2, 3, 7]\"], [\"(7, 3)\", \"[]\"], [\"(7, 4)\", \"[]\"], [\"(7, 5)\", \"[]\"], [\"(7, 6)\", \"[3, 6]\"], [\"(7, 7)\", \"[3]\"], [\"(7, 8)\", \"[]\"], [\"(8, 0)\", \"[1, 2, 3]\"], [\"(8, 1)\", \"[1, 2, 4, 5]\"], [\"(8, 2)\", \"[1, 2, 3, 4, 5]\"], [\"(8, 3)\", \"[2, 3, 5, 6]\"], [\"(8, 4)\", \"[]\"], [\"(8, 5)\", \"[2, 6]\"], [\"(8, 6)\", \"[1, 3, 4, 6]\"], [\"(8, 7)\", \"[]\"], [\"(8, 8)\", \"[]\"]]", 
      "solution": "def mozne_poteze(t,i,j):\n    if t[i][j] is not None:\n        return set()\n    else:\n        prepovedani_vrstica = {t[k][j] for k in range(9) if t[k][j] is not None}\n        prepovedani_stolpec = {t[i][k] for k in range(9) if t[i][k] is not None}\n        prepovedani_3x3 = {t[k][m] for k in range(3 * (i//3), 3 * (i//3) + 3)\n                                   for m in range(3 * (j//3), 3 * (j//3) + 3)\n                                   if t[k][m] is not None}\n        return set(range(1,10)) - prepovedani_vrstica - prepovedani_stolpec - prepovedani_3x3", 
      "problem": 63, 
      "validation": "Check.equal(\"\"\"mozne_poteze(\n    [[ 5  , 3  ,None,  None, 7  ,None,  None,None,None],\n     [ 6  ,None,None,   1  , 9  , 5  ,  None,None,None],\n     [None, 9  , 8  ,  None,None,None,  None, 6  ,None],\n     \n     [ 8  ,None,None,  None, 6  ,None,  None,None, 3  ],\n     [ 4  ,None,None,   8  ,None, 3  ,  None,None, 1  ],\n     [ 7  ,None,None,  None, 2  ,None,  None,None, 6  ],\n      \n     [None, 6  ,None,  None,None,None,   2  , 8  ,None],\n     [None,None,None,   4  , 1  , 9  ,  None,None, 5  ],\n     [None,None,None,  None, 8  ,None,  None, 7  , 9  ]], 0, 2)\"\"\", {1,2,4})\n\nCheck.equal(\"\"\"mozne_poteze(\n    [[ 5  , 3  ,None,  None, 7  ,None,  None,None,None],\n     [ 6  ,None,None,   1  , 9  , 5  ,  None,None,None],\n     [None, 9  , 8  ,  None,None,None,  None, 6  ,None],\n     \n     [ 8  ,None,None,  None, 6  ,None,  None,None, 3  ],\n     [ 4  ,None,None,   8  ,None, 3  ,  None,None, 1  ],\n     [ 7  ,None,None,  None, 2  ,None,  None,None, 6  ],\n      \n     [None, 6  ,None,  None,None,None,   2  , 8  ,None],\n     [None,None,None,   4  , 1  , 9  ,  None,None, 5  ],\n     [None,None,None,  None, 8  ,None,  None, 7  , 9  ]], 0, 0)\"\"\", set())\n\nCheck.equal(\"\"\"mozne_poteze(\n    [[ 5  , 3  ,None,  None, 7  ,None,  None,None,None],\n     [ 6  ,None,None,   1  , 9  , 5  ,  None,None,None],\n     [None, 9  , 8  ,  None,None,None,  None, 6  ,None],\n     \n     [ 8  ,None,None,  None, 6  ,None,  None,None, 3  ],\n     [ 4  ,None,None,   8  ,None, 3  ,  None,None, 1  ],\n     [ 7  ,None,None,  None, 2  ,None,  None,None, 6  ],\n      \n     [None, 6  ,None,  None,None,None,   2  , 8  ,None],\n     [None,None,None,   4  , 1  , 9  ,  None,None, 5  ],\n     [None,None,None,  None, 8  ,None,  None, 7  , 9  ]], 4, 7)\"\"\", {2,5,9})\n\nfor i in range(9):\n    for j in range(9):\n        Check.challenge(mozne_poteze(\n            [[ 5  , 3  ,None,  None, 7  ,None,  None,None,None],\n             [ 6  ,None,None,   1  , 9  , 5  ,  None,None,None],\n             [None, 9  , 8  ,  None,None,None,  None, 6  ,None],\n             \n             [ 8  ,None,None,  None, 6  ,None,  None,None, 3  ],\n             [ 4  ,None,None,   8  ,None, 3  ,  None,None, 1  ],\n             [ 7  ,None,None,  None, 2  ,None,  None,None, 6  ],\n             \n             [None, 6  ,None,  None,None,None,   2  , 8  ,None],\n             [None,None,None,   4  , 1  , 9  ,  None,None, 5  ],\n             [None,None,None,  None, 8  ,None,  None, 7  , 9  ]], i,j), (i,j))"
    }
  }, 
  {
    "pk": 917, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite metodo `naloga2b(self, x)`, kot je zapisano v navodilih.", 
      "timestamp": "2013-02-04 07:49:04", 
      "challenge": "[]", 
      "solution": "class Drevo(Drevo):\n    def naloga2b(self, x):\n        if self.prazno:\n            self.vsebina = x\n            self.prazno = False\n            self.levo = Drevo()\n            self.desno = Drevo()\n        else:\n            y = self.vsebina\n            if x > y:\n                self.vsebina = x\n                self.levo.naloga2b(y)\n            else:\n                self.levo.naloga2b(x)", 
      "problem": 311, 
      "validation": "Check.run([\"d = Drevo(7, levo=Drevo(6, levo=Drevo(5), desno=Drevo(4)), desno=Drevo(3, levo=Drevo(2)))\",\n           \"d.naloga2b(1)\",\n           \"v = d.vsebine()\",\n           \"n = d.naloga2a()\"], {'v': [1, 2, 3, 4, 5, 6, 7], 'n': True})\nCheck.run([\"d = Drevo(7, levo=Drevo(6, levo=Drevo(5), desno=Drevo(4)), desno=Drevo(3, levo=Drevo(2)))\",\n           \"d.naloga2b(8)\",\n           \"v = d.vsebine()\",\n           \"n = d.naloga2a()\"], {'v': [2, 3, 4, 5, 6, 7, 8], 'n': True})\nCheck.run([\"d = Drevo(7, levo=Drevo(6, levo=Drevo(5), desno=Drevo(4)), desno=Drevo(2, levo=Drevo(1)))\",\n           \"d.naloga2b(3)\",\n           \"v = d.vsebine()\",\n           \"n = d.naloga2a()\"], {'v': [1, 2, 3, 4, 5, 6, 7], 'n': True})"
    }
  }, 
  {
    "pk": 453, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `predstavnik(m, k, o)`, ki vrne najmanj\u0161e \u0161tevilo v\nmno\u017eici `m`, katerega ostanek pri deljenju s `k` je enak `o`. To \u0161tevilo\nimenujemo predstavnik. \u010ce takega \u0161tevila ni, naj funkcija vrne `None`.", 
      "timestamp": "2012-05-04 11:25:27", 
      "challenge": "[]", 
      "solution": "def predstavnik(mnozica, k, o):\n    predstavniki = {x for x in mnozica if x % k == o}\n    if predstavniki:\n        return min(predstavniki)\n    else:\n        return None", 
      "problem": 151, 
      "validation": "Check.equal('predstavnik({1, 2, 12, 7, 5, 9, 15}, 4, 3)', 7)\nCheck.equal('predstavnik({0, 2, 4}, 5, 1)', None)\nCheck.equal('predstavnik({-10, 5, 7, 3, 10}, 6, 2)', -10)"
    }
  }, 
  {
    "pk": 457, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavi funkcijo `nizi2(vhod, izhod)`, ki izpi\u0161e vse nize iz vhodne\ndatoteke na izhodno datoteko. Nizi se lahko za\u010dnejo in kon\u010dajo na\nrazli\u010dnih vrsticah. \u010ce se niz razteza \u010dez ve\u010d vrstic, naj izhodni niz\nvsebuje tudi znake za novo vrstico. \u0160e vedno naj ostale nize izpi\u0161e\nvsakega v svojo vrstico. Predpostavi, da nimamo praznih nizov.\n\nPrimer: \u010ce je v vhodni datoteki besedilo\n    V \"tej\" vrstici je \"en zelo zelo\n    dolg niz\", ki se kon\u010da v \"drugi\" vrsti.\npotem mora program v izhodno datoteko zapisati\n    tej\n    en zelo zelo\n    dolg niz\n    drugi", 
      "timestamp": "2012-05-13 08:42:51", 
      "challenge": "[]", 
      "solution": "def nizi2(vhod, izhod):\n    with open(vhod) as fv, open(izhod, \"w\") as fi:\n        vNizu = False\n        niz = \"\"\n        for vrstica in fv:\n            for z in vrstica:\n                if z == '\"':\n                    vNizu = not vNizu\n                    if not vNizu and len(niz) > 0:\n                        print(niz, file=fi)\n                        niz = \"\"\n                elif vNizu:\n                    niz += z", 
      "problem": 152, 
      "validation": "_makefile1(\"_test1.txt\")\nnizi2(\"_test1.txt\",\"_test2.txt\")\n_makefile2(\"_test3.txt\")\nif not _istedatoteke(\"_test2.txt\",\"_test3.txt\",\"_test1.txt\"):\n    Check.error(\"Izhodna datoteka je napa\u010dna\")\n_removefiles(\"_test1.txt\",\"_test2.txt\",\"_test3.txt\")"
    }
  }, 
  {
    "pk": 509, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `preberi(imeDatoteke)`, ki vrstice datoteke\r\npretvori v ustrezen seznam trojic. Na primer, iz zgornje datoteke bi\r\ndobili seznam:\r\n\r\n    [(\"avtomati\u010dno brisalo ritke\", 231, 10), (\"ljubezen\", 0, 1),\r\n     (\"ortopedsko oblikovana duda\", 15, 7)]`", 
      "timestamp": "2012-06-06 14:35:55", 
      "challenge": "[]", 
      "solution": "def preberi(imeDatoteke):\r\n    seznam = []\r\n    with open(imeDatoteke) as f:\r\n        for vrstica in f:\r\n            seznam.append(pretvori(vrstica))\r\n    return seznam", 
      "problem": 165, 
      "validation": "with open(\"_seznam.txt\", \"w\") as f:\r\n    print(\"avtomati\u010dno brisalo ritke,231,10\", file=f)\r\n    print(\"ljubezen,0,1\", file=f)\r\n    print(\"ortopedsko oblikovana duda,15,7\", file=f)\r\nseznam = preberi(\"_seznam.txt\")\r\npravi = [(\"avtomati\u010dno brisalo ritke\", 231, 10), (\"ljubezen\", 0, 1), (\"ortopedsko oblikovana duda\", 15, 7)]\r\nif seznam != pravi:\r\n    Check.error(\"Pri primeru iz navodil funkcija vrne\\n  {0}\\nnamesto\\n  {1}.\".format(seznam, pravi))\r\nos.remove(\"_seznam.txt\")"
    }
  }, 
  {
    "pk": 461, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Ladja pride pred i-ti most ob naklju\u010dnem \u010dasu v njegovem\r\nenournem ciklu. Sestavi funkcijo `kolikoCakam(mostovi, i, cas)`, ki sprejme\r\nseznam odpiralnih \u010dasov mostov in \u010das, ob katerem ladja pride do i-tega\r\nmosta, ter vrne, koliko minut bo morala po\u010dakati, da se i-ti most odpre.\r\nPredpostavi\u0161 lahko, da je 1 <= i <= len(mostovi). Prvi element seznama\r\nustreza mostu \u0161t. 1.\r\n", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "def kolikoCakam(mostovi, i, cas):\r\n    return cakam(mostovi[i-1], cas)\r\n", 
      "problem": 153, 
      "validation": "Check.equal('kolikoCakam([59, 30, 17, 45], 3, 17)',0)\r\nCheck.equal('kolikoCakam([59, 30, 17, 45], 1, 17)',0)\r\nCheck.equal('kolikoCakam([59, 30, 17, 45], 1, 59)',0)\r\nCheck.equal('kolikoCakam([59, 30, 17, 45], 2, 35)',25)\r\nCheck.equal('kolikoCakam([59, 30, 17, 45], 4, 46)',14)"
    }
  }, 
  {
    "pk": 686, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `uporabi(cikli, x)`, ki vrne sliko elementa `x` s\npermutacijo, predstavljeno s seznamom ciklov `cikli`.", 
      "timestamp": "2012-06-10 18:18:09", 
      "challenge": "[]", 
      "solution": "def uporabi(cikli, x):\n    for cikel in cikli:\n        if x in cikel:\n            indeks = cikel.index(x)\n            return cikel[(indeks + 1) % len(cikel)]", 
      "problem": 223, 
      "validation": "Check.equal('uporabi([[1, 4], [2, 5, 3]], 1)', 4)\nCheck.equal('uporabi([[1, 4], [2, 5, 3]], 2)', 5)\nCheck.equal('uporabi([[1, 4], [2, 5, 3]], 3)', 2)\nCheck.equal('uporabi([[1, 4], [2, 5, 3]], 4)', 1)\nCheck.equal('uporabi([[1, 4], [2, 5, 3]], 5)', 3)"
    }
  }, 
  {
    "pk": 885, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "\u010ce igralec pride na polje _Go To Jail_, mora v je\u010do, iz katere lahko\npride tako, da vr\u017ee par enakih kock. Matriki `verjetnosti` popravite\nverjetnosti za polji _Go To Jail_ in _In Jail_.", 
      "timestamp": "2012-12-21 10:24:50", 
      "challenge": "[]", 
      "solution": "# ce pridemo na polje \"Go To Jail\", moramo v jeco\nverjetnosti[\"Go To Jail\", ] <- 0\nverjetnosti[\"Go To Jail\", \"In Jail\"] <- 1\n\n# iz jece pridemo le z metom dveh enakih\nverjetnosti[\"In Jail\", \"In Jail\"] <- 5 / 6\nverjetnosti[\"In Jail\", seq(13, 23, 2)] <- 1 / 36", 
      "problem": 293, 
      "validation": "if(any(verjetnosti[\"Go To Jail\", -41] > 0))\n  check$error(\"S polja Go To Jail se ne gre nujno v je\u010do.\")\ncheck$equal(verjetnosti[\"In Jail\", \"States Avenue\"], 0)\ncheck$equal(verjetnosti[\"In Jail\", \"New York Avenue\"], 0)"
    }
  }, 
  {
    "pk": 682, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `brezVrstice(mat, i)`, ki vrne matriko, ki jo\ndobimo, \u010de matriki `mat` odstranimo `i`-to vrstico.\nPri tem pazite na indekse, saj ima prva matrika v vrstici v Pythonu\nindeks 0, druga 1 in tako naprej.\n\nPozor: va\u0161a funkcija matrike `mat` ne sme spreminjati. \u010ce \u017eelite, si\nlahko pomagate z zgoraj definirano funkcijo `kopiraj(mat)`, ki ustvari\nkopijo matrike `mat`, ki jo lahko poljubno spreminjate.", 
      "timestamp": "2012-06-10 10:06:08", 
      "challenge": "[[\"([[0, 1, 8], [1, 8, 10], [8, 10, 13]], 1)\", \"[[1, 8, 10], [8, 10, 13]]\"], [\"([[0, 1, 8], [1, 8, 10], [8, 10, 13]], 2)\", \"[[0, 1, 8], [8, 10, 13]]\"], [\"([[0, 1, 8], [1, 8, 10], [8, 10, 13]], 3)\", \"[[0, 1, 8], [1, 8, 10]]\"], [\"([[0, 1, 8, 10], [1, 8, 10, 13], [8, 10, 13, 6], [10, 13, 6, 12]], 1)\", \"[[1, 8, 10, 13], [8, 10, 13, 6], [10, 13, 6, 12]]\"], [\"([[0, 1, 8, 10], [1, 8, 10, 13], [8, 10, 13, 6], [10, 13, 6, 12]], 2)\", \"[[0, 1, 8, 10], [8, 10, 13, 6], [10, 13, 6, 12]]\"], [\"([[0, 1, 8, 10], [1, 8, 10, 13], [8, 10, 13, 6], [10, 13, 6, 12]], 3)\", \"[[0, 1, 8, 10], [1, 8, 10, 13], [10, 13, 6, 12]]\"], [\"([[0, 1, 8, 10], [1, 8, 10, 13], [8, 10, 13, 6], [10, 13, 6, 12]], 4)\", \"[[0, 1, 8, 10], [1, 8, 10, 13], [8, 10, 13, 6]]\"], [\"([[0, 1, 8, 10, 13], [1, 8, 10, 13, 6], [8, 10, 13, 6, 12], [10, 13, 6, 12, 3], [13, 6, 12, 3, 2]], 1)\", \"[[1, 8, 10, 13, 6], [8, 10, 13, 6, 12], [10, 13, 6, 12, 3], [13, 6, 12, 3, 2]]\"], [\"([[0, 1, 8, 10, 13], [1, 8, 10, 13, 6], [8, 10, 13, 6, 12], [10, 13, 6, 12, 3], [13, 6, 12, 3, 2]], 2)\", \"[[0, 1, 8, 10, 13], [8, 10, 13, 6, 12], [10, 13, 6, 12, 3], [13, 6, 12, 3, 2]]\"], [\"([[0, 1, 8, 10, 13], [1, 8, 10, 13, 6], [8, 10, 13, 6, 12], [10, 13, 6, 12, 3], [13, 6, 12, 3, 2]], 3)\", \"[[0, 1, 8, 10, 13], [1, 8, 10, 13, 6], [10, 13, 6, 12, 3], [13, 6, 12, 3, 2]]\"], [\"([[0, 1, 8, 10, 13], [1, 8, 10, 13, 6], [8, 10, 13, 6, 12], [10, 13, 6, 12, 3], [13, 6, 12, 3, 2]], 4)\", \"[[0, 1, 8, 10, 13], [1, 8, 10, 13, 6], [8, 10, 13, 6, 12], [13, 6, 12, 3, 2]]\"], [\"([[0, 1, 8, 10, 13], [1, 8, 10, 13, 6], [8, 10, 13, 6, 12], [10, 13, 6, 12, 3], [13, 6, 12, 3, 2]], 5)\", \"[[0, 1, 8, 10, 13], [1, 8, 10, 13, 6], [8, 10, 13, 6, 12], [10, 13, 6, 12, 3]]\"], [\"([[0, 1, 8, 10, 13, 6], [1, 8, 10, 13, 6, 12], [8, 10, 13, 6, 12, 3], [10, 13, 6, 12, 3, 2], [13, 6, 12, 3, 2, 15], [6, 12, 3, 2, 15, 14]], 1)\", \"[[1, 8, 10, 13, 6, 12], [8, 10, 13, 6, 12, 3], [10, 13, 6, 12, 3, 2], [13, 6, 12, 3, 2, 15], [6, 12, 3, 2, 15, 14]]\"], [\"([[0, 1, 8, 10, 13, 6], [1, 8, 10, 13, 6, 12], [8, 10, 13, 6, 12, 3], [10, 13, 6, 12, 3, 2], [13, 6, 12, 3, 2, 15], [6, 12, 3, 2, 15, 14]], 2)\", \"[[0, 1, 8, 10, 13, 6], [8, 10, 13, 6, 12, 3], [10, 13, 6, 12, 3, 2], [13, 6, 12, 3, 2, 15], [6, 12, 3, 2, 15, 14]]\"], [\"([[0, 1, 8, 10, 13, 6], [1, 8, 10, 13, 6, 12], [8, 10, 13, 6, 12, 3], [10, 13, 6, 12, 3, 2], [13, 6, 12, 3, 2, 15], [6, 12, 3, 2, 15, 14]], 3)\", \"[[0, 1, 8, 10, 13, 6], [1, 8, 10, 13, 6, 12], [10, 13, 6, 12, 3, 2], [13, 6, 12, 3, 2, 15], [6, 12, 3, 2, 15, 14]]\"], [\"([[0, 1, 8, 10, 13, 6], [1, 8, 10, 13, 6, 12], [8, 10, 13, 6, 12, 3], [10, 13, 6, 12, 3, 2], [13, 6, 12, 3, 2, 15], [6, 12, 3, 2, 15, 14]], 4)\", \"[[0, 1, 8, 10, 13, 6], [1, 8, 10, 13, 6, 12], [8, 10, 13, 6, 12, 3], [13, 6, 12, 3, 2, 15], [6, 12, 3, 2, 15, 14]]\"], [\"([[0, 1, 8, 10, 13, 6], [1, 8, 10, 13, 6, 12], [8, 10, 13, 6, 12, 3], [10, 13, 6, 12, 3, 2], [13, 6, 12, 3, 2, 15], [6, 12, 3, 2, 15, 14]], 5)\", \"[[0, 1, 8, 10, 13, 6], [1, 8, 10, 13, 6, 12], [8, 10, 13, 6, 12, 3], [10, 13, 6, 12, 3, 2], [6, 12, 3, 2, 15, 14]]\"], [\"([[0, 1, 8, 10, 13, 6], [1, 8, 10, 13, 6, 12], [8, 10, 13, 6, 12, 3], [10, 13, 6, 12, 3, 2], [13, 6, 12, 3, 2, 15], [6, 12, 3, 2, 15, 14]], 6)\", \"[[0, 1, 8, 10, 13, 6], [1, 8, 10, 13, 6, 12], [8, 10, 13, 6, 12, 3], [10, 13, 6, 12, 3, 2], [13, 6, 12, 3, 2, 15]]\"]]", 
      "solution": "def brezVrstice(mat, i):\n    return mat[:i - 1] + mat[i:]", 
      "problem": 220, 
      "validation": "Check.equal('brezVrstice([[9, 8, 7], [6, 5, 4], [3, 2, 1]], 1)', [[6, 5, 4], [3, 2, 1]])\nCheck.equal('brezVrstice([[9, 8, 7], [6, 5, 4], [3, 2, 1]], 2)', [[9, 8, 7], [3, 2, 1]])\nCheck.equal('brezVrstice([[9, 8, 7], [6, 5, 4], [3, 2, 1]], 3)', [[9, 8, 7], [6, 5, 4]])\nCheck.run(['brezVrstice(mat, 1)'], {\"mat\": [[9, 8, 7], [6, 5, 4], [3, 2, 1]]}, env={\"mat\": [[9, 8, 7], [6, 5, 4], [3, 2, 1]]})\nfor n in range(3, 7):\n    mat = [[(i + j) ** 3 % 17 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        Check.challenge(brezVrstice(mat, i + 1), (mat, i + 1))"
    }
  }, 
  {
    "pk": 465, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavi funkcijo `padci(vrednosti)` , ki iz danega seznama vrednosti delnice po dnevih\nsestavi nov seznam dvigov in padcev delnice.\nPrimer:\n\n     >>> padci([100, 95, 105, 100, 110])\n     [-5, 10, -5, 10]", 
      "timestamp": "2012-04-16 12:56:47", 
      "challenge": "[]", 
      "solution": "def padci(vrednosti):\n    return [vrednosti[i+1]-vrednosti[i] for i in range(len(vrednosti)-1)]", 
      "problem": 154, 
      "validation": "Check.equal('padci([100, 95, 105, 100, 110])', [-5, 10, -5, 10])\nCheck.equal('padci([30, 27, 36, 48, 54, 41, 26, 12, 8, 8, -3])', [-3, 9, 12, 6, -13, -15, -14, -4, 0, -11])"
    }
  }, 
  {
    "pk": 863, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `sredine(v, k)`, ki vrne vektor aritmeti\u010dnih sredin\n`k` zaporednih \u010dlenov vektorja `v`.\nTorej, za $v = (v_1, v_2, \\dots, v_n)$ je rezultat enak\n$$\n  (\\frac{v_1 + v_2 + \\dots + v_k}{k},\n   \\frac{v_2 + v_3 + \\dots + v_{k + 1}}{k},\n   \\dots,\n   \\frac{v_{n - k + 1} + v_{n - k + 2} + \\dots + v_n}{k})\n$$", 
      "timestamp": "2012-12-12 10:47:50", 
      "challenge": "[[\"c(-0.999990206550703, -0.536572918000435, 0.420167036826641, 0.99060735569487, 0.650287840157117, -0.287903316665065, -0.961397491879557, -0.750987246771676, 0.149877209662952, 0.912945250727628, 0.836655638536056, -0.00885130929040388, -0.846220404175171, -0.905578362006624, -0.132351750097773, 0.762558450479603, 0.956375928404503, 0.270905788307869, -0.663633884212968, -0.988031624092862, -0.404037645323065), 1\", \"-0.99999, -0.536573, 0.420167, 0.990607, 0.650288, -0.287903, -0.961397, -0.750987, 0.149877, 0.912945, 0.836656, -0.008851, -0.84622, -0.905578, -0.132352, 0.762558, 0.956376, 0.270906, -0.663634, -0.988032, -0.404038\"], [\"c(-0.536572918000435, 0.420167036826641, 0.99060735569487, 0.650287840157117, -0.287903316665065, -0.961397491879557, -0.750987246771676, 0.149877209662952, 0.912945250727628, 0.836655638536056, -0.00885130929040388, -0.846220404175171, -0.905578362006624, -0.132351750097773, 0.762558450479603, 0.956375928404503, 0.270905788307869, -0.663633884212968, -0.988031624092862, -0.404037645323065, 0.551426681241691), 2\", \"-0.058203, 0.705387, 0.820448, 0.181192, -0.62465, -0.856192, -0.300555, 0.531411, 0.8748, 0.413902, -0.427536, -0.875899, -0.518965, 0.315103, 0.859467, 0.613641, -0.196364, -0.825833, -0.696035, 0.073695\"], [\"c(0.420167036826641, 0.99060735569487, 0.650287840157117, -0.287903316665065, -0.961397491879557, -0.750987246771676, 0.149877209662952, 0.912945250727628, 0.836655638536056, -0.00885130929040388, -0.846220404175171, -0.905578362006624, -0.132351750097773, 0.762558450479603, 0.956375928404503, 0.270905788307869, -0.663633884212968, -0.988031624092862, -0.404037645323065, 0.551426681241691, 0.999911860107267), 3\", \"0.687021, 0.450997, -0.199671, -0.666763, -0.520836, 0.103945, 0.633159, 0.58025, -0.006139, -0.586883, -0.62805, -0.091791, 0.528861, 0.66328, 0.187883, -0.460253, -0.685234, -0.280214, 0.382434\"], [\"c(0.99060735569487, 0.650287840157117, -0.287903316665065, -0.961397491879557, -0.750987246771676, 0.149877209662952, 0.912945250727628, 0.836655638536056, -0.00885130929040388, -0.846220404175171, -0.905578362006624, -0.132351750097773, 0.762558450479603, 0.956375928404503, 0.270905788307869, -0.663633884212968, -0.988031624092862, -0.404037645323065, 0.551426681241691, 0.999911860107267, 0.529082686120024), 4\", \"0.097899, -0.3375, -0.462603, -0.162391, 0.287123, 0.472657, 0.223632, -0.230999, -0.47325, -0.280398, 0.170251, 0.464372, 0.331552, -0.106096, -0.446199, -0.376069, 0.039817, 0.419096\"], [\"c(0.650287840157117, -0.287903316665065, -0.961397491879557, -0.750987246771676, 0.149877209662952, 0.912945250727628, 0.836655638536056, -0.00885130929040388, -0.846220404175171, -0.905578362006624, -0.132351750097773, 0.762558450479603, 0.956375928404503, 0.270905788307869, -0.663633884212968, -0.988031624092862, -0.404037645323065, 0.551426681241691, 0.999911860107267, 0.529082686120024, -0.428182669496151), 5\", \"-0.240025, -0.187493, 0.037419, 0.227928, 0.208881, -0.00221, -0.211269, -0.226089, -0.033043, 0.190382, 0.238771, 0.067635, -0.165684, -0.246674, -0.100873, 0.13767, 0.24964\"], [\"c(-0.287903316665065, -0.961397491879557, -0.750987246771676, 0.149877209662952, 0.912945250727628, 0.836655638536056, -0.00885130929040388, -0.846220404175171, -0.905578362006624, -0.132351750097773, 0.762558450479603, 0.956375928404503, 0.270905788307869, -0.663633884212968, -0.988031624092862, -0.404037645323065, 0.551426681241691, 0.999911860107267, 0.529082686120024, -0.428182669496151, -0.991778853443116), 6\", \"-0.016802, 0.029707, 0.048903, 0.023138, -0.0239, -0.048965, -0.029011, 0.017615, 0.048046, 0.034304, -0.010977, -0.046166, -0.03891, 0.00412, 0.043362, 0.042737\"], [\"c(-0.961397491879557, -0.750987246771676, 0.149877209662952, 0.912945250727628, 0.836655638536056, -0.00885130929040388, -0.846220404175171, -0.905578362006624, -0.132351750097773, 0.762558450479603, 0.956375928404503, 0.270905788307869, -0.663633884212968, -0.988031624092862, -0.404037645323065, 0.551426681241691, 0.999911860107267, 0.529082686120024, -0.428182669496151, -0.991778853443116, -0.643538133356999), 7\", \"-0.095425, -0.087451, 0.000925, 0.088451, 0.094655, 0.013834, -0.079706, -0.099965, -0.028316, 0.069366, 0.103274, 0.042232, -0.057638, -0.104516, -0.055302\"], [\"c(-0.750987246771676, 0.149877209662952, 0.912945250727628, 0.836655638536056, -0.00885130929040388, -0.846220404175171, -0.905578362006624, -0.132351750097773, 0.762558450479603, 0.956375928404503, 0.270905788307869, -0.663633884212968, -0.988031624092862, -0.404037645323065, 0.551426681241691, 0.999911860107267, 0.529082686120024, -0.428182669496151, -0.991778853443116, -0.643538133356999, 0.296368578709385), 8\", \"-0.093064, 0.096129, 0.196942, 0.116687, -0.070849, -0.193247, -0.137974, 0.044151, 0.185684, 0.1565, -0.01657, -0.174405, -0.171893, -0.011343\"], [\"c(0.149877209662952, 0.912945250727628, 0.836655638536056, -0.00885130929040388, -0.846220404175171, -0.905578362006624, -0.132351750097773, 0.762558450479603, 0.956375928404503, 0.270905788307869, -0.663633884212968, -0.988031624092862, -0.404037645323065, 0.551426681241691, 0.999911860107267, 0.529082686120024, -0.428182669496151, -0.991778853443116, -0.643538133356999, 0.296368578709385, 0.963795386284088), 9\", \"0.191712, 0.20516, 0.029984, -0.172759, -0.216668, -0.061374, 0.150347, 0.22384, 0.091535, -0.124926, -0.226531, -0.119864, 0.097005\"], [\"c(0.912945250727628, 0.836655638536056, -0.00885130929040388, -0.846220404175171, -0.905578362006624, -0.132351750097773, 0.762558450479603, 0.956375928404503, 0.270905788307869, -0.663633884212968, -0.988031624092862, -0.404037645323065, 0.551426681241691, 0.999911860107267, 0.529082686120024, -0.428182669496151, -0.991778853443116, -0.643538133356999, 0.296368578709385, 0.963795386284088, 0.745113160479349), 10\", \"0.118281, -0.071817, -0.195886, -0.139859, 0.044755, 0.188221, 0.158638, -0.016796, -0.176788, -0.174241, -0.011498, 0.161816\"]]", 
      "solution": "sredine <- function(v, k){\n  n <- length(v)\n  delni <- rep(0, n - k + 1)\n  for(i in 1 : k) {\n    delni <- delni + v[i : (n - k + i)]\n  }\n  return(delni / k)\n}", 
      "problem": 281, 
      "validation": "check$equal(sredine(1 : 10, 3), 2 : 9)\ncheck$equal(sredine(1 : 10, 2), (0.5 + 1 : 9))\ncheck$equal(sredine(rep(4, 10), 4), rep(4, 7))\ncheck$equal(sredine((1 : 10) ^ 3, 5), c(45, 88, 155, 252, 385, 560))\nfor(i in 1 : 10) {\n  podatki <- list(v = sin((i + 10) : (i + 30)), k = i)\n  check$challenge(sredine(podatki$v, podatki$k), podatki)\n}"
    }
  }, 
  {
    "pk": 690, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `noveCene(ponudba, razprodaja)`, ki vrne slovar cen z\nupo\u0161tevanimi popusti. Pozor: na nekatere izdelke ni popusta, zato jih\nni v slovarju `razprodaja`.", 
      "timestamp": "2012-06-11 10:06:35", 
      "challenge": "[]", 
      "solution": "def noveCene(ponudba, razprodaja):\n    def znizanaCena(izdelek):\n        staraCena = ponudba[izdelek]\n        popust = razprodaja.get(izdelek, 0)\n        return staraCena * (1 - popust / 100)\n    return {izdelek: znizanaCena(izdelek) for izdelek in ponudba}", 
      "problem": 226, 
      "validation": "Check.equal(\"noveCene({'nogavice': 12, 'hla\u010de': 36, 'majica': 10}, {'nogavice': 50, 'hla\u010de': 75})\", {'nogavice': 6, 'hla\u010de': 9, 'majica': 10})\nCheck.equal(\"noveCene({'nogavice': 12, 'hla\u010de': 30, 'majica': 10}, {'nogavice': 25, 'hla\u010de': 75})\", {'nogavice': 9, 'hla\u010de': 7.5, 'majica': 10})"
    }
  }, 
  {
    "pk": 477, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavi funkcijo 'nakljucnaTocka', ki vrne naklju\u010dno to\u010dko v pravokotniku [a,b) x [c,d)\r\n(to\u010dko naj vrne kot nabor). \u0160tevila a, b, c in d naj sprejme kot \r\nargumente metode.\r\nPrimer:\r\n    >>> nakljucnaTocka(0,1,0,1)\r\n    (0.1429732365608365, 0.6141558734157921)", 
      "timestamp": "2012-03-27 09:17:25", 
      "challenge": "[]", 
      "solution": "def nakljucnaTocka(a, b, c, d):\r\n    return (nakljucno(a,b), nakljucno(c,d))", 
      "problem": 157, 
      "validation": "Check.equal('nakljucnaTocka(2,3,0,1)[0]<3 and nakljucnaTocka(2,3,0,1)[1]<1 and nakljucnaTocka(2,3,0,1)[0]>=2 and nakljucnaTocka(2,3,0,1)[1]>=0', True, \"Odgovor je napa\u010den\")"
    }
  }, 
  {
    "pk": 364, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `imamoSestavine(recept, shramba)`, ki preveri, ali\nimamo v shrambi dovolj sestavin za dani recept. Sestavine, ki jih imamo\nv shrambi, so predstavljene s slovarjem na enak na\u010din kot sestavine v\nreceptu.", 
      "timestamp": "2012-05-04 11:25:40", 
      "challenge": "[]", 
      "solution": "def imamoSestavine(recept, shramba):\n    for sestavina, kolicina in recept.items():\n        if shramba.get(sestavina, 0) < kolicina:\n            return False\n    return True", 
      "problem": 126, 
      "validation": "Check.equal(\"imamoSestavine({'jajca': 3, 'moka': 500}, {'moka': 1000, 'jajca': 6, 'sladkor': 1000, 'grah': 7})\",True)\nCheck.equal(\"imamoSestavine({'jajca': 3, 'moka': 500}, {'moka': 1000, 'sladkor': 1000})\",False)\nCheck.equal(\"imamoSestavine({'jajca': 3, 'moka': 500}, {'moka': 100, 'jajca': 2})\",False)\nCheck.equal(\"imamoSestavine({'jajca': 3, 'moka': 500}, {'moka': 600})\",False)"
    }
  }, 
  {
    "pk": 520, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Podnaloga (b)", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "def maksimum(b):\n    return True", 
      "problem": 169, 
      "validation": ""
    }
  }, 
  {
    "pk": 73, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `uredi_z_zlivanjem(a)`, ki z zlivanjem uredi tabelo `a`.\nFunkcija naj ne spreminja tabele `a`, temve\u010d naj vrne novo tabelo.", 
      "timestamp": "2012-10-24 09:22:27", 
      "challenge": "[]", 
      "solution": "def uredi_z_zlivanjem(a):\n    \"\"\"Uredi tabelo a z zlivanjem in vrne novo, urejeno tabelo.\"\"\"\n\n    def uredi(a, i, j):\n        \"\"\"Uredi podtabelo a[i:j] z zlivanjem, vrne novo tabelo.\"\"\"\n        if j - i < 2:\n            return a[i:j]\n        else:\n            b = uredi(a, i, (i + j) // 2)\n            c = uredi(a, (i + j) // 2, j)\n            return zlij(b, c)\n\n    return uredi(a, 0, len(a))", 
      "problem": 27, 
      "validation": "Check.equal(\"uredi_z_zlivanjem([1, 4, 5, 6, 7, 9, 2, 3, 8])\", [1,2,3,4,5,6,7,8,9])\nCheck.equal(\"uredi_z_zlivanjem([])\", [])\nCheck.equal(\"uredi_z_zlivanjem([0])\", [0])\nCheck.equal(\"uredi_z_zlivanjem([1, 0])\", [0,1])"
    }
  }, 
  {
    "pk": 534, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite metodo `povecajVzdolz(graf, pot)`, ki v danem grafu maksimalno\npove\u010da pretok vzdol\u017e poti `pot`.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "class Omrezje(Omrezje):\n    def povecajVzdolz(graf, pot):\n        sprememba = min(graf.tok[p][1] if smer else graf.tok[p][2] for p, smer in pot)\n        for p, smer in pot:\n            zacetek, kap, tok, konec = graf.tok[p]\n            if smer:\n                graf.tok[p] = (zacetek, kap - sprememba, tok + sprememba, konec)\n            else:\n                graf.tok[p] = (zacetek, kap + sprememba, tok - sprememba, konec)", 
      "problem": 175, 
      "validation": ""
    }
  }, 
  {
    "pk": 507, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `obrni(g)`, ki vrne slovar, ki predstavlja isti\ngraf kot `g`, le da vse povezave v njem ka\u017eejo v drugo smer.", 
      "timestamp": "2012-05-31 11:35:12", 
      "challenge": "[]", 
      "solution": "def obrni(g):\n    obrnjen = dict((v, set()) for v in g.keys())\n    for v, sosedi in g.items():\n        for w in sosedi:\n            obrnjen[w].add(v)\n    return obrnjen", 
      "problem": 164, 
      "validation": "Check.equal('obrni({1: {3}, 2: {1, 3}, 3: set()})', {1: {2}, 2: set(), 3: {1, 2}})\nCheck.equal('obrni({1: {3}, 2: set(), 3: set()})', {1: set(), 2: set(), 3: {1}})\nCheck.equal('obrni({1: {3, 2}, 2: {1}, 3: {1}})', {1: {2, 3}, 2: {1}, 3: {1}})"
    }
  }, 
  {
    "pk": 227, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `latovscina`, ki pretvori dano besedilo v latov\u0161\u010dino.\nFunkcija naj pravilno dela tudi za besede, ki se za\u010dnejo z veliko\nza\u010detnico.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"None\", \"apa\"], [\"None\", \"c\"], [\"None\", \"capaopogopoipicqepeipi\"], [\"None\", \"epeapakqsccgepeapasipimipis\"], [\"None\", \"cckepesepeckapaipimapamqipimsopom\"], [\"None\", \"sgcgepeepekopoipimckipiopoqkckmepek\"], [\"None\", \"epeepecapaopogscsopoepeapaopogggkopoqssopoopom\"], [\"None\", \"epeepekgsgipiapaepesapamsepeepekqapaqopoqmgepeipis\"], [\"None\", \"cepegoposipiapaapagsepeqkgqapaepeopoipiqsscepeipiepeepeipi\"], [\"None\", \"ipiepegscckqepeopokepecmepeapagkcipiepesipiipiggepeapac\"], [\"None\", \"capaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapa\"], [\"None\", \"copoipiipisipiapaepeepemqqqmipiapaopogcqkkqqapagopokgqapac\"], [\"None\", \"epegopogopomgcgopossopomsqapamgepeqskapaepescipigcipiepeipi\"], [\"None\", \"epemcssskmipigmipissipiipismapagqapakkcipigepeqggapaipis\"], [\"None\", \"epeipiepeapacipigepegkkipiqipikskipiepecsipicapagopoepeipigqepemcopom\"], [\"None\", \"cscopokcapaksepegepeqqipiapaqmmmqipiscgmgkepekgsapamepek\"], [\"None\", \"cgepesepeepeoposskopoqipisckqopoepesapagqapaopoapamapaepeqapagipiipikopom\"], [\"None\", \"qcsgipimkopoepekqcipiopomkkkmkkipiapaapacapaepeqoposepeepecqqipis\"], [\"None\", \"ipikkcopocksmapaoposapaggipiapagkkoposgopocipiopoopoqepeqopoqsqmepeipi\"], [\"None\", \"epegapaipimmmcopoqsopocskepeckapaipikkapaskcsipiapaksggepesgipiapac\"], [\"None\", \"capaopogopoipicqepeipiapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapa\"], [\"None\", \"ipimipiapamkapaepeqsccopocmipicapaapakepeapaapakcgggkmmapagmmkipimapac\"], [\"None\", \"cqopogmckgapacssapagqepesipiipigapagmepeopoqssgqmipiggepemopogapaepeipi\"], [\"None\", \"opocapasipigipiqoposcckcgmgapaepeipigqskkipiepeqmipiepeapassmoposqipiipis\"], [\"None\", \"epekipiqqapaqopomckgopomcepeapaepemepeopoopoopogqepessepemsapaqopoopommopoopogopom\"], [\"None\", \"qmopogmcopogoposqqipiapagkipiopoepeapaksmepeepeipiapamskskggmscipiapamepek\"], [\"None\", \"epeqcgcsqsapacepeqipiopoipikscsepekqmepecapaepesmcksopockepeapaopoipicgopom\"], [\"None\", \"qopoepeoposmgkmqapaqopoopocepeipiepekqscgsopoipioposipiopomopoepeopogipiapaapaipicipiipis\"], [\"None\", \"epeksqmapasapacepeapaoposapamipikqsepeepekopoapacqskapamgopoqkapaskopocqkapaepeipi\"], [\"None\", \"opoipiipimepeqsqipiipicmopokcepeepesapaepeepesgapacqepeepeopocssipimopommqapaepeapamapac\"], [\"None\", \"epeapakqsccgepeapasipimipisapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapa\"], [\"None\", \"kkapamcqkepeapagipikscapaqgopogopoipikgmqopocsapakcgscqkmopoqqmepeipiapac\"], [\"None\", \"cipiepeopoepeipiopomsepeopoapaksksqqcapakqepeqksmsipiipisipiskcgmgqepeopoipimmepeipi\"], [\"None\", \"gksepemopoopocqopokcksksepekopokopoqsqmepeoposopogapaepeapasipiapasepeepekkcapaqipis\"], [\"None\", \"qoposopommmqgggcopoqgapaepekipiqepemmmqepecsckgepeggkqgsgepeipiipiapakopom\"], [\"None\", \"epeapasscgsmipiepesmmcsapacopoipiskipigcipimepegapaepeqapagssgepeepekapasopomkmepek\"], [\"None\", \"ipiqqopogmopooposqapamqsepekopoipiqsgepeepeopokepeepeopogopoopoipimapagqmkmmapaqkapacopom\"], [\"None\", \"ccccqmipicgmcapassgqccskapacqkmgopoqcsepeepeipiepegepesgepekggapaccapaipis\"], [\"None\", \"epeipiopoipimcmipimmopoepeapaipikipigipimqopoapagopomgipigopomepesapaepecapaqopoqopocmsapagipiepeipi\"], [\"None\", \"kgsipiggqmsckipicgkopoipiopogapamepeopoapakepekqipikepeopoopoepegqcqopomqgepekipiqapac\"], [\"None\", \"cckepesepeckapaipimapamqipimsopomapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapa\"], [\"None\", \"epeipicqggapaopomsepeqskepeapaipimgsmgapagqopoipiepekmmopoksepekopokcopoipigcopogopoepeapac\"], [\"None\", \"ipisqepeqmapagapaksqepeoposccgapasssopocsepemopoipiopomqepeqmepecsmepecgkopogepeepeepeipi\"], [\"None\", \"capaapasgopoopomcapasepegckkkoposopoopoipiapakipicccmqapakepeapasqcipiscsqccepesapaepeipis\"], [\"None\", \"epeapaccopooposcccqggipimipimcgapaopokapamopoqgapakapaipiipiopoopoggopoepeqopokkqkgkkopoopom\"], [\"None\", \"gsipioposqipiepemmkqapammapaepeepegipiepeskapaipicipiqopokkepeepeepekkqsopokepecsopoepemkmepek\"], [\"None\", \"opomggmsopokopoipiopocapagapaksksgqsipicsmkapamapaipiqmsskgipiepemipiopoqsmgapasopom\"], [\"None\", \"cipikkepeipigopogipiggepeipiapaipisqcopoqipiopocepeqepeepeipiipikmcapacgssopoipimepesqgmapaopomipis\"], [\"None\", \"epeopogmopomepekmqmipiapakopomkqcmssoposipimkepeapakcqipiqcmkkccopoipigmkopoopogqepeipi\"], [\"None\", \"kapaqapaepecqmapaopogsmepeggmkgepeepecqqcsopomkepeepecmkapacopoopoepeipigipikepeipiqgmapaapac\"], [\"None\", \"sgcgepeepekopoipimckipiopoqkckmepekapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapa\"], [\"None\", \"cmqmsmcsgipiapammopoapaopoapaipiapaepegmckkapagmcapasipiopoipicopoipisqmkapacopoqsqgsapaapac\"], [\"None\", \"gapaepeapamipisgcskipiapaepeoposapaepemopoepecgapaqipiopoepeapamipimccepeqapaepecepeqsqqsqkapasqepeipi\"], [\"None\", \"kgipisapaipiepesqmipigqqipiepeksqksipiqepeipicmcmmssqmsepeipiapacgipikkmggepekmmipis\"], [\"None\", \"sgopockoposkepecipiapaipiapaipiqkgepecmipiapasgskkkepeepegipigopooposmipimopoopogmqipiqmepesopom\"], [\"None\", \"cmepekcapaepeepeepeipimkmapaipimccqipikgapaggmcqapakcmkcqmkepeipigsccopoipigcmipiapamepek\"], [\"None\", \"epeoposapaepegkcqapaipisepemcepeqipiipiepeipisapacksapaapaipiqmapaipikepeapakapaepeapaopossgkopokepeipigopoopom\"], [\"None\", \"ipiopoipikcapagepeqmqqopoqipicopogmqapakkapacmgopomcapamapaapagoposopoapaopoepeepeapaapaepecscccepeipis\"], [\"None\", \"oposskgsepeqgsgapascapaapaipiapaqapakgepeepeoposcopogopogqipiapaepeqepekmqsipimmkqopogcmepeepeipi\"], [\"None\", \"cggkepeipigcepeccipiepeopokmmipiqsssepemgcgopokopokmmcscipiopoapaqepeggapaapaapaepeopoqapaipiepeapac\"], [\"None\", \"epeepecapaopogscsopoepeapaopogggkopoqssopoopomapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapa\"], [\"None\", \"gmepessapagepekkgsgopoepeepeapaapamoposkkipiscqmopoapasqipissmopoepegggcsapagccepesepeopoqapac\"], [\"None\", \"kscepeepeepecgipigmipigssipicgipimgsapaepekscssipimopoqkapaipiepeapaipimsmgsepemsipiopoksipiepeipi\"], [\"None\", \"skkipimqopoipicmqcmsgcapamkapaapaipiqkmepeepeopocmcipigepeepeepeepegssqipiopoapacmkgggapaapaipis\"], [\"None\", \"ckgepeipiskkipiapaqmkqqqqkqgkqgipiopoapaepeopockapagapascqgmcqopogscepeepecqgmapaepecopom\"], [\"None\", \"epeipiipiapaapamcapaqqgepekipiapaipikepekckopokopoopoopomcepesgipigipikgoposipiopocopoopoqqmsmepeqsapamepek\"], [\"None\", \"gqkopomapaopoopokmgmmkopomcepeepegipiepekipimkkepeapamqipiqsepeopoqsmgopomepeipiipimggopoapaipiqkopom\"], [\"None\", \"mapakmqccqepeipigmapagapamcggqsgskkkapamcqscopoapagopogopokqccopogapasopoqkmapacqipis\"], [\"None\", \"sipiipimipiepeepeqgepekkapasscapaepeskgssopockgopoipiopomipiepeipiopomgsapasmopokqgmqipikqkapamepeipi\"], [\"None\", \"cipimgopomskskqcipicssipiopogkcmqcsipiepesssapaepeccqcqgapakmkapacgqapaepeipiipigssipiapac\"], [\"None\", \"epeepekgsgipiapaepesapamsepeepekqapaqopoqmgepeipisapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapa\"], [\"None\", \"gipiipisipikipiqepeipicgmcepeopogipiapaopogepekmapaqcapaapasqopoopoqsopokepeepeqapascopoepesapamsoposmgmapac\"], [\"None\", \"kepeipiopoopoopocepecipiapakopogsepeapaccgoposcapaopoepekkccipiepeqsapakcsksepecgepeepegggmqsmcapaepeipi\"], [\"None\", \"oposgopokgopoopoipiopogkapakcqqmcqopokqipiksopomipioposmsqapaepekepeapaepekopoepeopocepekqcepeepegapaipiipis\"], [\"None\", \"ccsgqkkapaepekkipimqmsepeepeapasmcapakgepegqsapamcopoepecapacggsopoqqmipiepeepegsmkipicggopom\"], [\"None\", \"copoqkqepeapasapacopoapaapacipiopogapagipiksckipicapaepeepekmipigipiepeopocccepeapaqipigqqopogepescapackmepek\"], [\"None\", \"epemkopoapasscsqmopomqkksipiqkcopogepemkqmscqipiepeskggqepeepekqcgapammepeccopomapakgopom\"], [\"None\", \"gsgepesqapackmapaopomapaqgapagopokopokksepekgcsepeccepegksepekopoepeipigepemqapaepeapagkcsksipiipis\"], [\"None\", \"koposepecepeopoapamksepesgsapakipiipikmepegqapaapacapakqkipiopocepegkcopogepekipiopoepegipiipiepeqepeipisopoapaepeipi\"], [\"None\", \"qipiqqcipiipiapaapaapaipicmkgcqqipigepeqqapaapaopoopoipiqmqapaqgepekkqgapaepeipiipiepeepegopoipigopoepeapamcmapac\"], [\"None\", \"cepegoposipiapaapagsepeqkgqapaepeopoipiqsscepeipiepeepeipiapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapa\"], [\"None\", \"coposopoapacapaepessscipiipigcepecapaipicgcoposqepeskapasmapakapagsopogcipiopokmepeopokgopoqkccapamipiapac\"], [\"None\", \"epeksmmmepeqscepekepeepekepeqqopoapamapasssipiqqapaepemepesqkepemsgkmkepeqmkepesopomsapagsipimepeipi\"], [\"None\", \"gopogkipiipiqmkkcopocopoopomgssgipiopoqepeipimssssgapagsapaopoqqsepekgmopoapamkgoposepekipiopoopoqipis\"], [\"None\", \"kgkapagapakkcgmqgcmapaepemcmcapammckapasopoipiqkcgqipiepeepeqcapagapaapaqapaapakgopoopogggmkopom\"], [\"None\", \"opomgapaopoksksipiopoqsipiqopoqepeqapaqkcssskmkqqmkapascepesopoopoopokkapamsopogepemmmapackmepek\"], [\"None\", \"capaqgqcapaskopoapakopogscgsmapamepegopoapagmsopokapakipiepegapagsgopoipiopoapaapakqqkepeopoopokipimopoipicopom\"], [\"None\", \"ckggcepekapaipiksepeapakgmksapakcsqgipigmepemapaopogqmgipiopoapackepegmipickipikepeapaqcgqmipiapaipis\"], [\"None\", \"epecmapacgcgopogapaepekcmipiepeopoopoqqepemopoopokqcepeipismapaapaggmgapakqapamgcipiipisopoqmcccopokipiepeipi\"], [\"None\", \"gapagcoposopokmcopoepegmepekmqggkqapasepeapacepemqmqepeepemccqipiapaepekcipikkgipiqcmqcipigapaqapac\"], [\"None\", \"ipiepegscckqepeopokepecmepeapagkcipiepesipiipiggepeapacapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapaapa\"], [\"None\", \"ksapakepesopoggopoepegkopoipiapaapaepeopomepeopoapasmsqkopoopoqipimopoepeqggepeipikqopomcgipiskqsksopocmepeapac\"], [\"None\", \"qcsmmepeapagkopoopoggqepeapacsepeipigepeqmkgqcsipicsckopomopoapaopoipisipiepekopocopogipiapaipikopocipiapaepeepeipi\"], [\"None\", \"ccggmopoipiopoapakapamgapaapacapamepecapaggcipicsgopoqskapamipigsipiksepeqmqmsssipiipimkoposgsepeepeipis\"], [\"None\", \"ckmepekkmapamcmmmmipioposipiopoipiipiqepeapaipigepecepeqqsgopokopoepeipiqsepekipigkgscgkscgopomccopoopom\"], [\"None\", \"epecipimgqopomgsipiepesgopokmmsipiccipiopoepeepeepekmcmssmcckapaqepeqopoipiqsipicipiepeckapaqopoqsapamepek\"], [\"None\", \"epesgqkopomipigepegapaopoapakopoqssepeipimapaepeepekgapaccsksmoposcqapaopomggkepeqipiqapaepeqskgepecipisopom\"], [\"None\", \"ipiapacapaapaopoapamqkipigckopoqapagopoepeopomqapagipigkgmgkapasapaapamopoapakkgkapaqapaipicsgkgsopooposkmipis\"], [\"None\", \"kipikipiqipigcsgqepeipigopocqcgkipiapamipiopoapagapacqgmgipimipiepekmapaggapaoposmcoposqcapacipimapakqepeipi\"], [\"None\", \"opogsopoapaapagopoggqqepeqapaipiepeepeopogapaapackapasepegcmopocipisipiepeepekepemopomepemepegkepemopomipiipiipigipiopoapaapac\"]]", 
      "solution": "def latovscina(besedilo):\n    def spremeni(m):\n        return m.group(0) + 'p' + m.group(0).lower()\n    return re.sub(r'[aeiou]', spremeni, besedilo, flags=re.IGNORECASE)", 
      "problem": 70, 
      "validation": "Check.equal(\"\"\"latovscina(\"Odojek\")\"\"\", \"Opodopojepek\")\nCheck.equal(\"\"\"latovscina(\"latovscina\")\"\"\", \"lapatopovscipinapa\")\nCheck.equal(\"\"\"latovscina(\"Trololo\")\"\"\", \"Tropolopolopo\")\n\nfor i in range(100):\n    Check.challenge(latovscina(\"\".join([chr(97 + 2 * int(j)) for j in str(i ** 30)])))"
    }
  }, 
  {
    "pk": 899, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Napi\u0161ite funkcijo `mozne_crke(stevilka)`, ki vrne mno\u017eico vseh \u010drk,\nki pripadajo dani \u0161tevilki med 2 in 9.\n\n    >>> mozne_crke(3)\n    {\"d\", \"e\", \"f\"}\n    >>> mozne_crke(7)\n    {\"p\", \"q\", \"r\", \"s\"}", 
      "timestamp": "2013-01-16 17:02:45", 
      "challenge": "[[\"2\", \"['a', 'b', 'c']\"], [\"3\", \"['d', 'e', 'f']\"], [\"4\", \"['g', 'h', 'i']\"], [\"5\", \"['j', 'k', 'l']\"], [\"6\", \"['m', 'n', 'o']\"], [\"7\", \"['p', 'q', 'r', 's']\"], [\"8\", \"['t', 'u', 'v']\"], [\"9\", \"['w', 'x', 'y', 'z']\"]]", 
      "solution": "crke = {}\nfor crka, st in stevilke.items():\n    crke[st] = crke.get(st, set()) | {crka}\n\ndef mozne_crke(stevilka):\n    return crke[stevilka]", 
      "problem": 308, 
      "validation": "Check.equal(\"mozne_crke(3)\", {\"d\", \"e\", \"f\"})\nCheck.equal(\"mozne_crke(7)\", {\"p\", \"q\", \"r\", \"s\"})\n\nfor st in range(2, 10):\n    Check.challenge(mozne_crke(st), st)"
    }
  }, 
  {
    "pk": 529, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Vpi\u0161ite vrednost funkcije `c` (definirane v datoteki) pri \u0161tevilu $2012$.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "1", 
      "problem": 174, 
      "validation": "x = eval(Check.current[\"solution\"])\nif x != 1:\n   Check.error(\"Vrednost je napa\u010dna.\")"
    }
  }, 
  {
    "pk": 18, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `gnile(sez)`, ki za parameter dobi seznam \u0161tevil,\nki predstavljajo gnile limone, in vrne niz, ki lepo pove, katere so\ngnile.\n\n    >>> gnile(([1, 3, 4, 5, 6, 7, 10])\n    Limone 1, 3, 4, 5, 6, 7 in 10 so gnile.\n    >>> gnile([1, 3, 5])\n    \"Limone 1, 3 in 5 so gnile.\"\n    >>> gnile([5])\n    \"Limona 5 je gnila.\"\n    >>> gnile([])\n    \"Nobena limona ni gnila.\"", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"None\", \"Nobena limona ni gnila.\"], [\"None\", \"Limona 1 je gnila.\"], [\"None\", \"Limoni 1 in 2 sta gnili.\"], [\"None\", \"Limone 1, 2 in 3 so gnile.\"], [\"None\", \"Limone 1, 2, 3 in 4 so gnile.\"], [\"None\", \"Limone 1, 2, 3, 4 in 5 so gnile.\"], [\"None\", \"Limone 1, 2, 3, 4, 5 in 6 so gnile.\"], [\"None\", \"Limone 1, 2, 3, 4, 5, 6 in 7 so gnile.\"], [\"None\", \"Limone 1, 2, 3, 4, 5, 6, 7 in 8 so gnile.\"]]", 
      "solution": "def gnile(sez):\n    n = len(sez)\n    if len(sez) == 0:\n        return \"Nobena limona ni gnila.\"\n    elif len(sez) == 1:\n        return \"Limona {0} je gnila.\".format(sez[0])\n    elif len(sez) == 2:\n        return \"Limoni {0} in {1} sta gnili.\".format(sez[0], sez[1])\n    else:\n        prve = \", \".join(str(i) for i in sez[:-1])\n        return \"Limone {0} in {1} so gnile.\".format(prve, sez[-1])", 
      "problem": 10, 
      "validation": "Check.equal('gnile([1, 3, 4, 5, 6, 7, 10])', 'Limone 1, 3, 4, 5, 6, 7 in 10 so gnile.')\nCheck.equal('gnile([1, 3, 5])', 'Limone 1, 3 in 5 so gnile.')\nCheck.equal('gnile([1, 5])', 'Limoni 1 in 5 sta gnili.')\nCheck.equal('gnile([5])', 'Limona 5 je gnila.')\nCheck.equal('gnile([])', 'Nobena limona ni gnila.')\nfor i in range(1, 10):\n    Check.challenge(gnile(list(range(1, i))))"
    }
  }, 
  {
    "pk": 523, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite metodo `naloga2b(self)`, kot je zapisano v navodilih.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "class Cikel(Cikel):\n    def naloga2b(self):\n        if self.prazen:\n            pass\n        else:\n            x = self\n            y = self.naslednji\n            while y != self:\n                z = y.naslednji\n                y.naslednji = x\n                x = y\n                y = z\n            self.naslednji = x", 
      "problem": 171, 
      "validation": "Check.run([\n    \"c = Cikel([10, 20, 30, 40])\",\n    \"c.naloga2b()\"\n    ], {\"c\" : Cikel([10, 40, 30, 20])}, clean=(lambda c: c.__repr__()))"
    }
  }, 
  {
    "pk": 526, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Vpi\u0161ite celo \u0161tevilo, a ne kateregakoli. \u010ce \u017eelite ugotoviti, katero je\npravo, berite opozorila, ki jih sporo\u010da Tomo.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "314", 
      "problem": 173, 
      "validation": "try:\n    x = int(Check.current[\"solution\"])\n    if x != 314:\n        if x != 42:\n            Check.error(\"\u0160tevilo, ki ste ga vpisali, je napa\u010dno. Mogo\u010de je pravi odgovor 42?\")\n        else:\n            Check.error(\"\u0160tevilo 42 ni odgovor na vsa vpra\u0161anja. Pravi odgovor je 314.\")\nexcept ValueError:\n    Check.error(\"Napisati morate \u0161tevilo.\")"
    }
  }, 
  {
    "pk": 298, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Program za izpis osemvrsti\u010dne smre\u010dice popravite tako, da na primer\nnamesto niza `\"*****\"` uporabite niz `5 * \"*\"`.", 
      "timestamp": "2013-02-25 00:45:43", 
      "challenge": "[]", 
      "solution": "print(1 * \"*\")\nprint(2 * \"*\")\nprint(3 * \"*\")\nprint(4 * \"*\")\nprint(5 * \"*\")\nprint(6 * \"*\")\nprint(7 * \"*\")\nprint(8 * \"*\")", 
      "problem": 97, 
      "validation": "def izpis(source):\n    import io, sys\n    old_stdout = sys.stdout\n    new_stdout = io.StringIO()\n    sys.stdout = new_stdout\n    exec(source)\n    sys.stdout = old_stdout\n    return new_stdout.getvalue()\n\ndef preveriSmrecico(smrecica, levi, desni, dovoljeni):\n    vrstice = smrecica.splitlines()\n    if len(vrstice) != 8:\n        Check.error(\"Smre\u010dica nima osmih vrstic.\")\n    for i in range(0, min(8, len(vrstice))):\n        vrstica = vrstice[i]\n        if not vrstica.startswith((levi[i] - 1) * \" \"):\n            Check.error(\"{0}. vrstica se ne za\u010dne na {1}. znaku.\".format(i + 1, levi[i]))\n        if len(vrstica.rstrip()) != desni[i]:\n            Check.error(\"{0}. vrstica se ne kon\u010da na {1}. znaku.\".format(i + 1, desni[i]))\n        znaki = vrstica.replace(\" \", \"\")\n        if len(znaki) != i + 1:\n            Check.error(\"{0}. vrstica ni sestavljena iz {0} znakov.\".format(i + 1))\n        if any(znak not in dovoljeni for znak in znaki):\n            Check.error(\"{0}. vrstica vsebuje nedovoljene znake.\".format(i + 1))\n    if len([znak for znak in dovoljeni if znak in smrecica]) > 1:\n        Check.error(\"Smre\u010dica je sestavljena iz razli\u010dnih dovoljenih znakov.\")\n\ndovoljeni = \"*.#$@oO+=\"\nsource=Check.current[\"solution\"]\npreveriSmrecico(izpis(source), 8 * [0], range(1, 9), \"*\")\nif \"**\" in re.sub(r'#.*', '', source):\n    Check.error(\"V programu nastopata dve zaporedni zvezdici.\")"
    }
  }, 
  {
    "pk": 310, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavi program, ki dani kot v radianih (realno \u0161tevilo) izpi\u0161e v\nstopinjah in minutah (kot celi \u0161tevili, za minute ne uporabi zaokro\u017eenja\nampak samo odre\u017ee decimalna mesta). Predpostavite, da je kot podan v\nspremenljivki `kot`. \n\nPrimer: za \n\n    kot = 2.185\n\nnaj program izpi\u0161e\n\n    2.185 radianov je 125 stopinj in 11 minut.", 
      "timestamp": "2013-02-25 04:08:28", 
      "challenge": "[]", 
      "solution": "import math\nstopinje = kot * 360 / (2*math.pi)\nminute = int((stopinje - int(stopinje))*60)\nstopinje = int(stopinje)\nprint(\"{0} radianov je {1} stopinj in {2} minut.\".format(kot, stopinje, minute))", 
      "problem": 100, 
      "validation": "import random \nimport math\n\nsource = \"import math\\n\"+Check.current[\"solution\"]\nd = dict()\nkot = random.random()*10\nd[\"kot\"] = kot\nstopinje = kot * 360 / (2*math.pi)\nstopinje, minute = int(stopinje), int((stopinje - int(stopinje))*60)\n(d, izpis) = izvedi(source, d)\nif izpis.strip() != \"{0} radianov je {1} stopinj in {2} minut.\".format(kot, stopinje, minute):\n    Check.error(\"Za kot {} je izpis napa\u010dne oblike: \".format(kot) + izpis.strip())"
    }
  }, 
  {
    "pk": 308, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavi program, ki bo izpisal prvih 10 \u010dlenov posplo\u0161enega\nFibonaccijevega zaporedja: $F_1 = a$, $F_2 = b$, $F_n = F_{n-1} + F_{n-2}$. \n\nPredpostavite, da sta prva dva \u010dlena zaporedja shranjena v spremenljivkah\n`a` in `b`. Nalogo poskusi re\u0161iti brez uporabe dodatnih spremenljivk (samo\nz `a` in `b`).\n\nPrimer: za\n\n    a = 1\n    b = 1\n\nnaj program izpi\u0161e\n\n    1\n    1\n    2\n    3\n    5\n    8\n    13\n    21\n    34\n    55\n\nSpremenljivk `a` in `b` ne rabite definirati.", 
      "timestamp": "2013-02-25 04:01:38", 
      "challenge": "[]", 
      "solution": "print(a)\nprint(b)\n(a,b) = (b,a+b)\nprint(b)\n(a,b) = (b,a+b)\nprint(b)\n(a,b) = (b,a+b)\nprint(b)\n(a,b) = (b,a+b)\nprint(b)\n(a,b) = (b,a+b)\nprint(b)\n(a,b) = (b,a+b)\nprint(b)\n(a,b) = (b,a+b)\nprint(b)\n(a,b) = (b,a+b)\nprint(b)", 
      "problem": 99, 
      "validation": "import random \nimport math\n\nd = dict()\na = random.randint(1,5)\nb = random.randint(a, 3*a)\nza, zb = a, b\nd[\"a\"] = a\nd[\"b\"] = b\npizpis = str(a)+\"\\n\"+str(b)\nfor i in range(8):\n    (a,b) = (b,a+b)\n    pizpis += \"\\n\" + str(b)\n\nsource=Check.current[\"solution\"]\n(d, izpis) = izvedi(source, d)\nif izpis.strip() != pizpis:\n    Check.error(\"Izpis za za\u010detna \u010dlena a = {0} in b = {1} je napa\u010dne oblike: \\n{2}\".format(za,zb, izpis.strip()))"
    }
  }, 
  {
    "pk": 694, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Napi\u0161ite funkcijo `seznamPolozajev(imeDatoteke, x, y)`, ki\npreberi datoteko in tvori seznam polo\u017eajev, ki opisujejo trenutno pot.\nZa\u010detna koordinata naj bo `(x,y)` in naj bo dodana seznamu.", 
      "timestamp": "2012-06-10 01:12:23", 
      "challenge": "[]", 
      "solution": "def seznamPolozajev( imeDatoteke, x, y ):\n    r=[]\n    r.append((x,y))\n    with open(imeDatoteke) as f:\n        vrstice = f.readlines()\n        for vrstica in vrstice:\n            vrstica = vrstica.strip('\\n')\n            if vrstica=='S':\n               y += 1\n            elif vrstica=='J':\n               y += -1\n            elif vrstica=='V':\n               x += 1\n            elif vrstica=='Z':\n               x += -1\n            r.append((x,y))\n    return r", 
      "problem": 229, 
      "validation": "_makefile1(\"_3b.in\")\nCheck.equal('seznamPolozajev(\"_3b.in\", 0, 0)', [(0, 0), (0, 1), (0, 2), (-1, 2), (-1, 1), (0, 1), (1, 1), (2, 1)])\n_removefiles(\"_3b.in\")"
    }
  }, 
  {
    "pk": 611, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavi funkcijo `jeSifra(slovar)`, ki ugotovi, ali `slovar` predstavlja\n\u0161ifro, torej ali je bijekcija \u010drk na neki abecedi.", 
      "timestamp": "2012-05-07 01:49:56", 
      "challenge": "[]", 
      "solution": "def jeSifra(slovar):\n    # Pogledamo, \u010de je mno\u017eica klju\u010dev slovarja enaka mno\u017eici vrednosti.\n    # Ker so klju\u010di v slovarju enoli\u010dni, je velikost mno\u017eice klju\u010dev enaka\n    # kar \u0161tevilu \u010drk v abecedi. \u010ce sta torej mno\u017eici klju\u010dev in vrednosti\n    # enaki, je slovar surjektiven in s tem tudi injektiven.\n    return set(slovar.keys()) == set(slovar.values())", 
      "problem": 202, 
      "validation": "Check.equal('jeSifra(nasa_sifra)', True)\nCheck.equal(\"jeSifra({'A': 'B', 'B': 'C', 'C': 'A'})\", True)\nCheck.equal(\"jeSifra({'A': 'B', 'B': 'B', 'C': 'A'})\", False)"
    }
  }, 
  {
    "pk": 537, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavi funkcijo `ploscina(n,a)`, ki sprejme \u0161tevili `n` in `a` ter vrne\nplo\u0161\u010dino pravilnega $n$-kotnika s stranico $a$.", 
      "timestamp": "2012-03-05 09:19:00", 
      "challenge": "[[\"None\", \"[0.43, 1.73, 3.9, 1.0, 4.0, 9.0, 1.72, 6.88, 15.48, 2.6, 10.39, 23.38, 3.63, 14.54, 32.71]\"]]", 
      "solution": "def ploscina(n,a):\n    return 0.25 * a * a * n / math.tan (math.pi/n)", 
      "problem": 176, 
      "validation": "Check.equal(\"\"\"ploscina(3,1)\"\"\", math.sqrt(3)/4)\nCheck.equal(\"\"\"ploscina(4,3)\"\"\", 9)\nCheck.equal(\"\"\"ploscina(5,2)\"\"\", 6.881909602355868)\n\nCheck.challenge([round(ploscina(n,a),2) for n in range(3,8) for a in range(1,4)])"
    }
  }, 
  {
    "pk": 540, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `polarnaRazdalja(r1, fi1, r2, fi2)`, ki vrne\nrazdaljo med to\u010dkama (`r1`, `fi1`) in (`r2`, `fi2`) v ravnini, pri\n\u010demer so koordinate v polarnem zapisu, koti pa so izra\u017eeni v stopinjah.\n\n    >>> polarnaRazdalja(1, 30, 4, 90)\n    3.60555127546", 
      "timestamp": "2012-03-04 16:51:44", 
      "challenge": "[[\"None\", \"50.0\"], [\"None\", \"50.0\"], [\"None\", \"49.9999\"], [\"None\", \"49.99931\"], [\"None\", \"49.997758\"], [\"None\", \"49.994765\"], [\"None\", \"49.989864\"], [\"None\", \"49.982621\"], [\"None\", \"49.972637\"], [\"None\", \"49.959555\"], [\"None\", \"49.943066\"], [\"None\", \"49.92291\"], [\"None\", \"49.898876\"], [\"None\", \"37.0\"], [\"None\", \"36.984444\"], [\"None\", \"36.964419\"], [\"None\", \"36.939709\"], [\"None\", \"36.990766\"], [\"None\", \"36.993076\"], [\"None\", \"36.99574\"], [\"None\", \"36.998127\"], [\"None\", \"36.999676\"], [\"None\", \"36.999901\"], [\"None\", \"36.998388\"], [\"None\", \"36.994803\"], [\"None\", \"36.988886\"], [\"None\", \"24.0\"], [\"None\", \"23.996633\"], [\"None\", \"23.990906\"], [\"None\", \"23.982519\"], [\"None\", \"23.971292\"], [\"None\", \"23.957172\"], [\"None\", \"23.940227\"], [\"None\", \"23.920654\"], [\"None\", \"23.972389\"], [\"None\", \"23.979298\"], [\"None\", \"23.985786\"], [\"None\", \"23.991376\"], [\"None\", \"23.995719\"], [\"None\", \"11.0\"], [\"None\", \"10.999985\"], [\"None\", \"10.999911\"], [\"None\", \"10.999233\"], [\"None\", \"10.997687\"], [\"None\", \"10.995292\"], [\"None\", \"10.99235\"], [\"None\", \"10.989448\"], [\"None\", \"10.987459\"], [\"None\", \"10.987545\"], [\"None\", \"10.991149\"], [\"None\", \"11.0\"], [\"None\", \"11.00846\"], [\"None\", \"2.0\"], [\"None\", \"2.006355\"], [\"None\", \"2.011482\"], [\"None\", \"2.013283\"], [\"None\", \"2.011238\"], [\"None\", \"2.006392\"], [\"None\", \"2.001386\"], [\"None\", \"2.000488\"], [\"None\", \"2.009558\"], [\"None\", \"2.035826\"], [\"None\", \"2.08737\"], [\"None\", \"2.172257\"], [\"None\", \"2.297516\"], [\"None\", \"15.0\"], [\"None\", \"15.00767\"], [\"None\", \"15.021036\"], [\"None\", \"15.037175\"], [\"None\", \"15.041086\"], [\"None\", \"15.041059\"], [\"None\", \"15.037594\"], [\"None\", \"15.031409\"], [\"None\", \"15.02344\"], [\"None\", \"15.014843\"], [\"None\", \"15.006995\"], [\"None\", \"15.001496\"], [\"None\", \"15.000167\"], [\"None\", \"28.0\"], [\"None\", \"28.000703\"], [\"None\", \"28.003047\"], [\"None\", \"28.00809\"], [\"None\", \"28.017007\"], [\"None\", \"28.031088\"], [\"None\", \"28.05173\"], [\"None\", \"28.112808\"], [\"None\", \"28.106848\"], [\"None\", \"28.096954\"], [\"None\", \"28.083947\"], [\"None\", \"28.06877\"], [\"None\", \"28.052488\"], [\"None\", \"41.0\"], [\"None\", \"41.001048\"], [\"None\", \"41.000863\"], [\"None\", \"41.000237\"], [\"None\", \"41.000043\"], [\"None\", \"41.001234\"], [\"None\", \"41.004847\"], [\"None\", \"41.011994\"], [\"None\", \"41.02387\"]]", 
      "solution": "import math\ndef polarnaRazdalja(r1, fi1, r2, fi2):\n    fi1 = math.radians(fi1)\n    fi2 = math.radians(fi2)\n    return ravninskaRazdalja(r1 * math.cos(fi1), r1 * math.sin(fi1),\n                             r2 * math.cos(fi2), r2 * math.sin(fi2))", 
      "problem": 177, 
      "validation": "Check.equal('polarnaRazdalja(1, 30, 4, 90)', 13 ** (1 / 2))\nCheck.equal('polarnaRazdalja(1, 0, 1, 90)', 2 ** (1 / 2))\nfor i in range(100):\n    Check.challenge(polarnaRazdalja(i - 50, i % 17, i % 13, i ** (1 / 2)))"
    }
  }, 
  {
    "pk": 544, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Napi\u0161ite funkcijo `kvadrat2`, ki kot parameter sprejme velikost kvadrata\nin vrne niz, ki izpi\u0161e poln kvadrat, sestavljen iz znaka `\"+\"`. \nNa primer, klic `print(kvadrat2(4))` naj izpi\u0161e\n\n    ++++\n    ++++\n    ++++\n    ++++", 
      "timestamp": "2012-03-05 11:51:28", 
      "challenge": "[[\"None\", \"['+\\\\n', '++\\\\n++\\\\n', '+++\\\\n+++\\\\n+++\\\\n', '++++\\\\n++++\\\\n++++\\\\n++++\\\\n', '+++++\\\\n+++++\\\\n+++++\\\\n+++++\\\\n+++++\\\\n', '++++++\\\\n++++++\\\\n++++++\\\\n++++++\\\\n++++++\\\\n++++++\\\\n', '+++++++\\\\n+++++++\\\\n+++++++\\\\n+++++++\\\\n+++++++\\\\n+++++++\\\\n+++++++\\\\n']\"]]", 
      "solution": "def kvadrat2(n):\n    vrstica = n * \"+\" + \"\\n\"\n    return n * vrstica", 
      "problem": 178, 
      "validation": "Check.equal(\"\"\"kvadrat2(4)\"\"\", \"++++\\n++++\\n++++\\n++++\\n\")\nCheck.challenge([kvadrat2(a) for a in range(1,8)])"
    }
  }, 
  {
    "pk": 555, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "S pomo\u010djo operacije `NeIn` sestavite funkcijo `Ne(a)`, ki vrne\nnegacijo `a`. Pri tem smete uporabiti samo funkcijo `NeIn` in\nnobenih drugih logi\u010dnih operacij.", 
      "timestamp": "2012-03-11 21:55:29", 
      "challenge": "[]", 
      "solution": "def Ne(a):\n    return NeIn(a, a)", 
      "problem": 184, 
      "validation": "Check.equal(\"Ne(False)\", True)\nCheck.equal(\"Ne(True)\", False)\n\nfor op in ['not', 'and', 'or', '|', '&']:\n    if op in re.sub(r'#.*', '', Check.current[\"solution\"]):\n        Check.error(\"V funkciji nastopa operacija '{0}'.\".format(op))"
    }
  }, 
  {
    "pk": 672, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Za\u010deli bomo s Kochovo krivuljo. Kochova krivulja ni\u010dtega reda velikosti\n`d` je preprosto daljica dol\u017eine `d`. Kochovo krivuljo prvega reda\ndobimo iz Kochove krivulje ni\u010dtega reda tako, da nad srednjo tretjino\ndaljice postavimo enakostrani\u010dni trikotnik, potem pa mu zbri\u0161emo\nstranico, ki sovpada z originalno daljico. Torej je videti nekako\ntakole:\n\n    ______  =>     /\\\n                __/  \\__\n\nSeveda v implementaciji ne ri\u0161emo trikotnika in nato bri\u0161emo stranico,\ntemve\u010d nari\u0161emo samo prvo tretjino daljice, nato \u017eelvo zavrtimo, itd:\n(> predstavlja za\u010detni in kon\u010dni polo\u017eaj \u017eelve)\n\n    >______>  =>     /\\\n                 >__/  \\__>\n\nS to operacijo lahko sedaj rekurzivno definiramo Kochovo krivuljo\npoljubnega reda:\n\nKochovo krivuljo n-tega reda dobimo tako, da na vsaki daljici, ki\nsestavlja Kochovo krivuljo (n-1)-tega reda naredimo zgornjo operacijo.\nNapi\u0161ite funkcijo `kochovaKrivulja(n, d)`, ki s pomo\u010djo \u017eelvje grafike\nnari\u0161e Kochovo krivuljo danega reda z dano za\u010detno velikostjo krivulje\nni\u010dtega reda, vrne pa naj dol\u017eino tako narisane krivulje. Na za\u010detku\nfunkcije spustite pero, na koncu pa ga dvignite.\n\nPrimer (va\u0161a funkcija mora krivuljo tudi narisati):\n\n    >>>kochovaKrivulja(0,81)\n    81\n    >>>kochovaKrivulja(1,81)\n    108\n    >>>kochovaKrivulja(4,81)\n    256", 
      "timestamp": "2012-05-27 23:52:28", 
      "challenge": "[]", 
      "solution": "def kochovaKrivulja(n, d):    \n    dolzina=0\n    T.pd() # Polo\u017eimo pero\n    if n==0:\n        dolzina=d\n        T.fd(d)\n    else:\n        # Kochova krivulja ni\u017ejega reda na prvi tretjini\n        dolzina+=kochovaKrivulja(n-1, d/3)\n        # Dve Kochovi krivulji ni\u017ejega reda na srednjem trikotniku\n        T.lt(60) # \u017delvo zavrtimo 60 stopinj v levo\n        dolzina+=kochovaKrivulja(n-1, d/3)\n        T.rt(120) # Druga polovica izbokline\n        dolzina+=kochovaKrivulja(n-1, d/3)\n        # Kochova krivulja ni\u017ejega reda na zadnji tretjini\n        T.lt(60)\n        dolzina+=kochovaKrivulja(n-1, d/3)\n    T.pu() # Dvignemo pero\n    return dolzina", 
      "problem": 217, 
      "validation": "pripravi()\nT.clear()\nT.goto(0,0)\nT.rt(T.heading()) # \u017delva naj gleda v desno\n\nCheck.equal(\"kochovaKrivulja(0,81)\", 81)\nif T.xcor() != 81 or T.heading() != 0:\n    Check.error(\"\u017delva ni v pravem polo\u017eaju pokoncu risanja!\")\nT.clear()\nT.goto(0,0)\nT.rt(T.heading()) # \u017delva naj gleda v desno\nCheck.equal(\"kochovaKrivulja(1,81)\", 108)\nif T.xcor() != 81 or T.heading() != 0:\n    Check.error(\"\u017delva ni v pravem polo\u017eaju pokoncu risanja!\")\nT.clear()\nT.goto(0,0)\nT.rt(T.heading()) # \u017delva naj gleda v desno\nCheck.equal(\"kochovaKrivulja(4,81)\", 256)\nT.update()\nif T.xcor() != 81 or T.heading() != 0:\n    Check.error(\"\u017delva ni v pravem polo\u017eaju pokoncu risanja!\")"
    }
  }, 
  {
    "pk": 548, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Napi\u0161i funkcijo `okvir2( niz, odmik)`, ki okoli besede `niz` naredi okvir,\nsestavljen iz znakov `+`. Prostor med besedo in okvirjem naj bo \u0161irok `odmik`\nznakov `.`. Privzeta vrednost parametra `odmik` naj bo `1`.  Npr. klic\n`print( okvir2( \"banana\", 2 ) )` naj izpi\u0161e\n\n     ++++++++++++\n     +..........+\n     +..........+\n     +..banana..+\n     +..........+\n     +..........+\n     ++++++++++++\n", 
      "timestamp": "2012-03-05 12:14:34", 
      "challenge": "[[\"None\", \"['+++++\\\\n+...+\\\\n+.x.+\\\\n+...+\\\\n+++++\\\\n', '++++++\\\\n+....+\\\\n+.xx.+\\\\n+....+\\\\n++++++\\\\n', '+++++++\\\\n+.....+\\\\n+.xxx.+\\\\n+.....+\\\\n+++++++\\\\n', '++++++++\\\\n+......+\\\\n+.xxxx.+\\\\n+......+\\\\n++++++++\\\\n', '+++++++++\\\\n+.......+\\\\n+.xxxxx.+\\\\n+.......+\\\\n+++++++++\\\\n', '++++++++++\\\\n+........+\\\\n+.xxxxxx.+\\\\n+........+\\\\n++++++++++\\\\n', '+++++++++++\\\\n+.........+\\\\n+.xxxxxxx.+\\\\n+.........+\\\\n+++++++++++\\\\n']\"], [\"None\", \"['+++\\\\n+x+\\\\n+++\\\\n', '+++++\\\\n+...+\\\\n+.x.+\\\\n+...+\\\\n+++++\\\\n', '+++++++\\\\n+.....+\\\\n+.....+\\\\n+..x..+\\\\n+.....+\\\\n+.....+\\\\n+++++++\\\\n', '++++\\\\n+xx+\\\\n++++\\\\n', '++++++\\\\n+....+\\\\n+.xx.+\\\\n+....+\\\\n++++++\\\\n', '++++++++\\\\n+......+\\\\n+......+\\\\n+..xx..+\\\\n+......+\\\\n+......+\\\\n++++++++\\\\n', '+++++\\\\n+xxx+\\\\n+++++\\\\n', '+++++++\\\\n+.....+\\\\n+.xxx.+\\\\n+.....+\\\\n+++++++\\\\n', '+++++++++\\\\n+.......+\\\\n+.......+\\\\n+..xxx..+\\\\n+.......+\\\\n+.......+\\\\n+++++++++\\\\n', '++++++\\\\n+xxxx+\\\\n++++++\\\\n', '++++++++\\\\n+......+\\\\n+.xxxx.+\\\\n+......+\\\\n++++++++\\\\n', '++++++++++\\\\n+........+\\\\n+........+\\\\n+..xxxx..+\\\\n+........+\\\\n+........+\\\\n++++++++++\\\\n', '+++++++\\\\n+xxxxx+\\\\n+++++++\\\\n', '+++++++++\\\\n+.......+\\\\n+.xxxxx.+\\\\n+.......+\\\\n+++++++++\\\\n', '+++++++++++\\\\n+.........+\\\\n+.........+\\\\n+..xxxxx..+\\\\n+.........+\\\\n+.........+\\\\n+++++++++++\\\\n', '++++++++\\\\n+xxxxxx+\\\\n++++++++\\\\n', '++++++++++\\\\n+........+\\\\n+.xxxxxx.+\\\\n+........+\\\\n++++++++++\\\\n', '++++++++++++\\\\n+..........+\\\\n+..........+\\\\n+..xxxxxx..+\\\\n+..........+\\\\n+..........+\\\\n++++++++++++\\\\n', '+++++++++\\\\n+xxxxxxx+\\\\n+++++++++\\\\n', '+++++++++++\\\\n+.........+\\\\n+.xxxxxxx.+\\\\n+.........+\\\\n+++++++++++\\\\n', '+++++++++++++\\\\n+...........+\\\\n+...........+\\\\n+..xxxxxxx..+\\\\n+...........+\\\\n+...........+\\\\n+++++++++++++\\\\n']\"]]", 
      "solution": "def okvir2( niz, odmik=1):\n    debelina=1\n    n = len(niz)+2*odmik+2*debelina\n    polna = n*\"+\"+\"\\n\"\n    prazna = debelina*\"+\"+(len(niz)+2*odmik)*\".\"+debelina*\"+\"+\"\\n\"\n    besedilna = debelina*\"+\"+odmik*\".\" + niz + odmik*\".\"+debelina*\"+\"+\"\\n\"\n    return debelina*polna+odmik*prazna+besedilna+odmik*prazna+debelina*polna", 
      "problem": 179, 
      "validation": "Check.equal(\"\"\"okvir2( \"banana\", 2 )\"\"\", \"++++++++++++\\n+..........+\\n+..........+\\n+..banana..+\\n+..........+\\n+..........+\\n++++++++++++\\n\")\nCheck.equal(\"\"\"okvir2( \"banana\" )\"\"\", \"++++++++++\\n+........+\\n+.banana.+\\n+........+\\n++++++++++\\n\" )\nCheck.equal(\"\"\"okvir2( \"a\" )\"\"\", \"+++++\\n+...+\\n+.a.+\\n+...+\\n+++++\\n\" )\n\nCheck.challenge([okvir2(a*\"x\") for a in range(1,8)])\nCheck.challenge([okvir2(a*\"x\",b) for a in range(1,8) for b in range(0,3)])"
    }
  }, 
  {
    "pk": 76, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavi funkcijo `ploscina(n,a)`, ki sprejme \u0161tevili `n` in `a` ter vrne\nplo\u0161\u010dino pravilnega $n$-kotnika s stranico $a$.", 
      "timestamp": "2012-11-05 16:40:33", 
      "challenge": "[[\"None\", \"[0.43, 1.73, 3.9, 1.0, 4.0, 9.0, 1.72, 6.88, 15.48, 2.6, 10.39, 23.38, 3.63, 14.54, 32.71]\"]]", 
      "solution": "def ploscina(n,a):\n    return 0.25 * a * a * n / math.tan (math.pi/n)", 
      "problem": 28, 
      "validation": "Check.equal(\"\"\"ploscina(3,1)\"\"\", math.sqrt(3)/4)\nCheck.equal(\"\"\"ploscina(4,3)\"\"\", 9)\nCheck.equal(\"\"\"ploscina(5,2)\"\"\", 6.881909602355868)\n\nCheck.challenge([round(ploscina(n,a),2) for n in range(3,8) for a in range(1,4)])"
    }
  }, 
  {
    "pk": 570, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavi funkcijo `kvadratnaEnacba(a, b, c)`, ki bo izra\u010dunala in vrnila\nvse re\u0161itve kvadratne ena\u010dbe $a x^2 + b x + c = 0$. Pazi na posebne\nprimere ($a = 0$, $b = 0$, $c = 0$). V primeru kompleksnih re\u0161itev naj\nfunkcija izra\u010duna tudi te. Kompleksno \u0161tevilo v Pythonu zapi\u0161emo kot\nnpr. `3+4j` ali pa sestavimo s `complex(3, 4)`.\n\nPrimeri:\n\n    >>> kvadratnaEnacba(0, 0, 0)\n    True\n    >>> kvadratnaEnacba(0, 0, 1)\n    False\n    >>> kvadratnaEnacba(0, 1, -2)\n    2.0\n    >>> kvadratnaEnacba(1, -4, 4)\n    (2.0, 2.0)\n    >>> kvadratnaEnacba(1, -4, 3)\n    (3.0, 1.0)\n    >>> kvadratnaEnacba(4, -4, 5)\n    ((0.5+1j), (0.5-1j))", 
      "timestamp": "2012-03-18 19:47:16", 
      "challenge": "[[\"None\", \"((0.25+1.520691j), (0.25-1.520691j))\"], [\"None\", \"(-0.5, 1.333333)\"], [\"None\", \"(-0.471008, 0.163316)\"], [\"None\", \"(-1.62228, 0.836565)\"], [\"None\", \"((0.214286-0.90068j), (0.214286+0.90068j))\"], [\"None\", \"(-0.949227, 2.28256)\"], [\"None\", \"(-1.177729, 1.344395)\"], [\"None\", \"(-0.559816, 0.89315)\"], [\"None\", \"(-1.507121, 0.840454)\"], [\"None\", \"((0.5-1.658312j), (0.5+1.658312j))\"], [\"None\", \"((-0.5-0.866025j), (-0.5+0.866025j))\"], [\"None\", \"((0.5-0.690849j), (0.5+0.690849j))\"], [\"None\", \"-1.0\"], [\"None\", \"(1.152969, -3.902969)\"], [\"None\", \"(-1.209693, 0.300602)\"], [\"None\", \"((-0.35+0.823104j), (-0.35-0.823104j))\"], [\"None\", \"(-0.5, 0.571429)\"], [\"None\", \"((-0.2-1.83303j), (-0.2+1.83303j))\"], [\"None\", \"(-1.43607, 1.293212)\"], [\"None\", \"((-0.28125-0.991664j), (-0.28125+0.991664j))\"], [\"None\", \"(0.716515, -1.116515)\"], [\"None\", \"((-0.35+0.988686j), (-0.35-0.988686j))\"], [\"None\", \"((1.5-1.443376j), (1.5+1.443376j))\"], [\"None\", \"((-0.058824-0.638987j), (-0.058824+0.638987j))\"], [\"None\", \"(0.428571, -2.0)\"], [\"None\", \"((0.166667-0.372678j), (0.166667+0.372678j))\"], [\"None\", \"(-0.238516, 0.838516)\"], [\"None\", \"(-0.678054, 0.553054)\"], [\"None\", \"((-0.078947-0.721168j), (-0.078947+0.721168j))\"], [\"None\", \"((-0.166667-2.511087j), (-0.166667+2.511087j))\"], [\"None\", \"(-1.102879, 0.388593)\"], [\"None\", \"False\"], [\"None\", \"((1+1.414214j), (1-1.414214j))\"], [\"None\", \"(2.078051, -1.203051)\"], [\"None\", \"((-0.090909-0.792527j), (-0.090909+0.792527j))\"], [\"None\", \"(-0.788854, 2.788854)\"], [\"None\", \"(10.0, 0.0)\"], [\"None\", \"((0.642857-1.516911j), (0.642857+1.516911j))\"], [\"None\", \"((-0.75-0.661438j), (-0.75+0.661438j))\"], [\"None\", \"(-2.302776, 1.302776)\"], [\"None\", \"((0.285714+0.958315j), (0.285714-0.958315j))\"], [\"None\", \"(-0.51975, 1.08225)\"], [\"None\", \"((0.5+1j), (0.5-1j))\"], [\"None\", \"((-0.4+1.113553j), (-0.4-1.113553j))\"], [\"None\", \"((-0.291667-1.189509j), (-0.291667+1.189509j))\"], [\"None\", \"(2.089454, -3.589454)\"], [\"None\", \"(1.057098, -0.945986)\"], [\"None\", \"((-0.026316-0.458076j), (-0.026316+0.458076j))\"], [\"None\", \"(3.422144, -2.922144)\"], [\"None\", \"(-0.939104, 0.728578)\"], [\"None\", \"((-0.142857+1.186661j), (-0.142857-1.186661j))\"], [\"None\", \"((0.1+0.506623j), (0.1-0.506623j))\"], [\"None\", \"((0.625+0.599479j), (0.625-0.599479j))\"], [\"None\", \"(1.261294, -0.594627)\"], [\"None\", \"(-1.549193j, 1.549193j)\"], [\"None\", \"((-0.294118+0.385732j), (-0.294118-0.385732j))\"], [\"None\", \"(0.890984, -2.057651)\"], [\"None\", \"((0.166667+0.414997j), (0.166667-0.414997j))\"], [\"None\", \"(1.489551, -1.918123)\"], [\"None\", \"((0.357143+0.294508j), (0.357143-0.294508j))\"], [\"None\", \"(1.864797, -1.69813)\"], [\"None\", \"((-1.25+0.433013j), (-1.25-0.433013j))\"], [\"None\", \"((-0.5-1.322876j), (-0.5+1.322876j))\"], [\"None\", \"(-1.418588, 0.751921)\"], [\"None\", \"((0.138889-0.190435j), (0.138889+0.190435j))\"], [\"None\", \"((-0.176471-0.451832j), (-0.176471+0.451832j))\"], [\"None\", \"(-1.036119, 0.457172)\"], [\"None\", \"(-1.646586, 0.546586)\"], [\"None\", \"(1.320377, 0.108194)\"], [\"None\", \"(-1.344031, 0.744031)\"], [\"None\", \"((0.25+0.48734j), (0.25-0.48734j))\"], [\"None\", \"((-0.035714-0.376273j), (-0.035714+0.376273j))\"], [\"None\", \"((0.9+1.670329j), (0.9-1.670329j))\"], [\"None\", \"(-1.095033, 0.913215)\"], [\"None\", \"((0.142857+1.124858j), (0.142857-1.124858j))\"], [\"None\", \"(-0.837247, 1.19439)\"], [\"None\", \"((-0.3125-0.681795j), (-0.3125+0.681795j))\"], [\"None\", \"((0.2-0.909212j), (0.2+0.909212j))\"], [\"None\", \"(0.666667, -1.0)\"], [\"None\", \"(-2.05784, 1.45784)\"], [\"None\", \"(1.25, -4.0)\"], [\"None\", \"((0.5-1.569804j), (0.5+1.569804j))\"], [\"None\", \"((-3+3.316625j), (-3-3.316625j))\"], [\"None\", \"(1.474546, 0.096882)\"], [\"None\", \"((-0.285714-1.064262j), (-0.285714+1.064262j))\"], [\"None\", \"(-1.362419, 0.576705)\"], [\"None\", \"(-0.709847, 1.584847)\"], [\"None\", \"(-1.366025, 0.366025)\"], [\"None\", \"(-1.924225, 1.299225)\"], [\"None\", \"((0.833333-0.986013j), (0.833333+0.986013j))\"], [\"None\", \"-2.166667\"], [\"None\", \"(-1.048473, 0.586934)\"], [\"None\", \"(-0.5, 4.0)\"], [\"None\", \"(-0.2, 1.0)\"], [\"None\", \"((-0.666667+1.490712j), (-0.666667-1.490712j))\"], [\"None\", \"((0.333333-0.471405j), (0.333333+0.471405j))\"], [\"None\", \"(7.109772, -2.109772)\"], [\"None\", \"((0.75+3.072051j), (0.75-3.072051j))\"], [\"None\", \"((0.214286-0.48969j), (0.214286+0.48969j))\"], [\"None\", \"(10.385165, -0.385165)\"], [\"None\", \"(-0.261204, 0.546918)\"]]", 
      "solution": "def kvadratnaEnacba(a, b, c):\n    if a==0:\n        if b==0:\n            return c==0\n        else:\n            return -c/b\n    else:\n        D=b**2 - 4*a*c\n        re=-b/(2*a)\n        if D > 0:\n            im=D**(1/2)/(2*a)\n            return re + im, re - im\n        elif D==0:\n            return re, re\n        else:\n            im=(-D)**(1/2)/(2*a)\n            return complex(re,im), complex(re,-im)", 
      "problem": 191, 
      "validation": "Check.equal(\"kvadratnaEnacba(0, 0, 0)\", True)\nCheck.equal(\"kvadratnaEnacba(0, 0, 1)\",  False)\nCheck.equal(\"kvadratnaEnacba(0, 1, -2)\", 2.0)\nCheck.equal(\"kvadratnaEnacba(1, -4, 4)\", (2.0, 2.0))\nCheck.equal(\"kvadratnaEnacba(1, -4, 3)\", (3.0, 1.0))\nCheck.equal(\"kvadratnaEnacba(4, -4, 5)\", ((0.5+1j), (0.5-1j)))\n\nrng=[11059013]\nfor i in range(100): rng.append((rng[-1]*1103515245+12345)%2**32)\npodatki = [(17-x%37,11-x%23,20-x%41) for x in rng]\nfor x in podatki:\n    Check.challenge(kvadratnaEnacba(*x))"
    }
  }, 
  {
    "pk": 196, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite metodo `stopnja`, ki vrne stopnjo polinoma.", 
      "timestamp": "2012-10-26 10:34:05", 
      "challenge": "[]", 
      "solution": "class Polinom(Polinom):\n    def stopnja(self):\n        return len(self.koef) - 1 if self.koef else -float(\"inf\")", 
      "problem": 55, 
      "validation": "Check.equal('Polinom([1, 2, 3]).stopnja()', 2)\nCheck.equal('Polinom([1]).stopnja()', 0)\nCheck.equal('Polinom([]).stopnja()', -float(\"inf\"))"
    }
  }, 
  {
    "pk": 552, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Logi\u010dni operator *ekvivalenca* ima naslednjo resni\u010dnostno tabelo\n(F predstavlja neresni\u010dno (False), T pa resni\u010dno (True) vrednost):\n\n    A  B | A<=>B\n    -----+------\n    F  F |   T\n    F  T |   F\n    T  F |   F\n    T  T |   T\n\nSestavite funkcijo `ekvivalenca(a,b)`, ki sprejme dve logi\u010dni vrednosti\nin vrne rezultat ekvivalence `a<=>b`.", 
      "timestamp": "2012-03-09 14:59:47", 
      "challenge": "[]", 
      "solution": "def ekvivalenca(a,b):\n    return (a and b) or not (a or b)", 
      "problem": 183, 
      "validation": "Check.equal(\"ekvivalenca(False,False)\", True)\nCheck.equal(\"ekvivalenca(False,True)\", False)\nCheck.equal(\"ekvivalenca(True,False)\", False)\nCheck.equal(\"ekvivalenca(True,True)\", True)"
    }
  }, 
  {
    "pk": 565, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Napi\u0161i funkcijo `dolzinaCollatz(n)`, ki vrne indeks ustavitve Collatzovega zaporedja z za\u010detnim \u010dlenom `n`.", 
      "timestamp": "2012-03-19 08:36:42", 
      "challenge": "[]", 
      "solution": "def dolzinaCollatz(n):\r\n    i = 0\r\n    while n>1:\r\n        n = collatz(n)\r\n        i += 1\r\n    return i", 
      "problem": 186, 
      "validation": "Check.equal('dolzinaCollatz(1)', 0)\r\nCheck.equal('dolzinaCollatz(2)', 1)\r\nCheck.equal('dolzinaCollatz(42)', 8)"
    }
  }, 
  {
    "pk": 333, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `prastevilo(n)`, ki vrne `n`-to pra\u0161tevilo.", 
      "timestamp": "2012-03-14 09:55:33", 
      "challenge": "[[\"None\", \"2\"], [\"None\", \"3\"], [\"None\", \"5\"], [\"None\", \"7\"], [\"None\", \"11\"], [\"None\", \"13\"], [\"None\", \"17\"], [\"None\", \"19\"], [\"None\", \"23\"], [\"None\", \"29\"], [\"None\", \"31\"], [\"None\", \"37\"], [\"None\", \"41\"], [\"None\", \"43\"], [\"None\", \"47\"], [\"None\", \"53\"], [\"None\", \"59\"], [\"None\", \"61\"], [\"None\", \"67\"], [\"None\", \"71\"], [\"None\", \"73\"], [\"None\", \"79\"], [\"None\", \"83\"], [\"None\", \"89\"], [\"None\", \"97\"], [\"None\", \"101\"], [\"None\", \"103\"], [\"None\", \"107\"], [\"None\", \"109\"], [\"None\", \"113\"], [\"None\", \"127\"], [\"None\", \"131\"], [\"None\", \"137\"], [\"None\", \"139\"], [\"None\", \"149\"], [\"None\", \"151\"], [\"None\", \"157\"], [\"None\", \"163\"], [\"None\", \"167\"]]", 
      "solution": "def prastevilo(n):\n    i = 1\n    kandidat = 2\n    while i < n:\n        kandidat += 1\n        if jePrastevilo(kandidat):\n            i += 1\n    return kandidat", 
      "problem": 112, 
      "validation": "Check.equal('prastevilo(1)', 2)\nCheck.equal('prastevilo(2)', 3)\nCheck.equal('prastevilo(3)', 5)\nCheck.equal('prastevilo(23)', 83)\nCheck.equal('prastevilo(42)', 181)\nCheck.equal('prastevilo(97)', 509)\nfor i in range(1, 40):\n    Check.challenge(prastevilo(i))"
    }
  }, 
  {
    "pk": 605, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `tocka(a, b, c, d)`, ki vrne naklju\u010dno to\u010dko na\r\npravokotniku $(a, b) \\\\times (c, d)$, predstavljeno z naborom dveh\r\nrealnih \u0161tevil.", 
      "timestamp": "2012-03-27 08:37:24", 
      "challenge": "[]", 
      "solution": "import random\r\n\r\ndef tocka(a, b, c, d):\r\n    return (realno(a, b), realno(c, d))", 
      "problem": 200, 
      "validation": "random.seed('a')\r\nif isinstance(tocka(1, 2, 3, 4)[0], float) and isinstance(tocka(1, 2, 3, 4)[1], float):\r\nCheck.equal('1.3 <= min([tocka(1.3, 7.8, -2.4, 5.3)[0] for i in range(1000)])', True, 'Va\u0161a funkcija vra\u010da to\u010dke levo od izbranega pravokotnika.')\r\nCheck.equal('-2.4 <= min([tocka(1.3, 7.8, -2.4, 5.3)[1] for i in range(1000)])', True, 'Va\u0161a funkcija vra\u010da to\u010dke pod izbranim pravokotnikom.')\r\nCheck.equal('max([tocka(1.3, 7.8, -2.4, 5.3)[0] for i in range(1000)]) <= 7.8', True, 'Va\u0161a funkcija vra\u010da to\u010dke desno od izbranega pravokotnika.')\r\nCheck.equal('max([tocka(1.3, 7.8, -2.4, 5.3)[1] for i in range(1000)]) <= 5.3', True, 'Va\u0161a funkcija vra\u010da to\u010dke nad izbranim pravokotnikom.')\r\nCheck.equal('len(set([map(round, tocka(0, 0, 1, 1)) for i in range(10000)])) > 9950', True, 'Va\u0161a funkcija ne vra\u010da naklju\u010dnih \u0161tevil')\r\nelse:\r\nCheck.equal('False', True, 'Va\u0161a funkcija ne vra\u010da parov realnih \u0161tevil.')"
    }
  }, 
  {
    "pk": 607, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `vPreseku(x, y, krogi)`, ki vrne True, \u010de to\u010dka\n$(x, y)$ le\u017ei v vseh krogih v danem seznamu `krogi`, in False\nsicer.", 
      "timestamp": "2012-03-30 12:21:55", 
      "challenge": "[]", 
      "solution": "def vPreseku(x, y, krogi):\n    for (xi, yi, ri) in krogi:\n        if (x - xi) ** 2 + (y - yi) ** 2 > ri**2:\n            return False\n    return True", 
      "problem": 201, 
      "validation": "Check.equal('vPreseku(2, 3, [])', True)\nCheck.equal('vPreseku(2, 2, [(2, 2, 3), (1, 1, 4), (2, 0, 3)])', True)\nCheck.equal('vPreseku(2, 5, [(2, 2, 3), (1, 1, 4), (2, 0, 3)])', False)\nCheck.equal('vPreseku(5, 3, [(2, 2, 3), (1, 1, 4), (2, 0, 3)])', False)"
    }
  }, 
  {
    "pk": 276, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Izra\u010dunajte \u0161e pribli\u017eek $$\\int_0^1 x^2 - \\sin(x) dx$$\r\nPazite na negativne vrednosti, ki jih zavzame funkcija.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "x <- runif(1000, 0, 1)\r\ny <- runif(1000, -0.25, 0.2) # y izberemo pribli\u017eno tak, da pokrije graf\r\n\r\ncurve(f, 0, 1, ylim = c(-0.5, 0.5))\r\nabline(h = 0, v = 0, col = \"gray\")\r\n\r\npozitivne <- 0 < y & y < f(x)\r\nnegativne <- 0 > y & y > f(x)\r\nostale <- !pozitivne & !negativne\r\npoints(x[pozitivne], y[pozitivne], col = \"green\", pch = \"+\")\r\npoints(x[negativne], y[negativne], col = \"red\", pch = \"-\")\r\npoints(x[ostale], y[ostale], col = \"blue\")\r\n\r\nrazmerje.tock <- (sum(pozitivne) - sum(negativne)) / 1000\r\nploscina <- 1 * 0.45\r\nrazmerje.tock * ploscina\r\nintegrate(f, 0, 1)", 
      "problem": 83, 
      "validation": ""
    }
  }, 
  {
    "pk": 678, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `obratna(rel)`, ki vrne obratno relacijo relacije\n`rel`. Relacija $S$ je obratna relacija relacije $R$, kadar velja $x S y$\nnatanko takrat, kadar velja $y R x$.", 
      "timestamp": "2012-06-10 10:06:12", 
      "challenge": "[[\"manjseAliEnako\", \"[(1, 1), (2, 1), (2, 2), (3, 1), (3, 2), (3, 3), (4, 1), (4, 2), (4, 3), (4, 4), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5), (6, 1), (6, 2), (6, 3), (6, 4), (6, 5), (6, 6), (7, 1), (7, 2), (7, 3), (7, 4), (7, 5), (7, 6), (7, 7), (8, 1), (8, 2), (8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8), (9, 1), (9, 2), (9, 3), (9, 4), (9, 5), (9, 6), (9, 7), (9, 8), (9, 9), (10, 1), (10, 2), (10, 3), (10, 4), (10, 5), (10, 6), (10, 7), (10, 8), (10, 9), (10, 10), (11, 1), (11, 2), (11, 3), (11, 4), (11, 5), (11, 6), (11, 7), (11, 8), (11, 9), (11, 10), (11, 11), (12, 1), (12, 2), (12, 3), (12, 4), (12, 5), (12, 6), (12, 7), (12, 8), (12, 9), (12, 10), (12, 11), (12, 12)]\"], [\"vecjeAliEnako\", \"[(1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (1, 10), (1, 11), (1, 12), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8), (2, 9), (2, 10), (2, 11), (2, 12), (3, 3), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (3, 10), (3, 11), (3, 12), (4, 4), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (4, 10), (4, 11), (4, 12), (5, 5), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 11), (5, 12), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10), (6, 11), (6, 12), (7, 7), (7, 8), (7, 9), (7, 10), (7, 11), (7, 12), (8, 8), (8, 9), (8, 10), (8, 11), (8, 12), (9, 9), (9, 10), (9, 11), (9, 12), (10, 10), (10, 11), (10, 12), (11, 11), (11, 12), (12, 12)]\"], [\"deli\", \"[(1, 1), (2, 1), (2, 2), (3, 1), (3, 3), (4, 1), (4, 2), (4, 4), (5, 1), (5, 5), (6, 1), (6, 2), (6, 3), (6, 6), (7, 1), (7, 7), (8, 1), (8, 2), (8, 4), (8, 8), (9, 1), (9, 3), (9, 9), (10, 1), (10, 2), (10, 5), (10, 10), (11, 1), (11, 11), (12, 1), (12, 2), (12, 3), (12, 4), (12, 6), (12, 12)]\"], [\"istiOstanek\", \"[(1, 1), (1, 3), (1, 5), (1, 7), (1, 9), (1, 11), (2, 2), (2, 4), (2, 6), (2, 8), (2, 10), (2, 12), (3, 1), (3, 3), (3, 5), (3, 7), (3, 9), (3, 11), (4, 2), (4, 4), (4, 6), (4, 8), (4, 10), (4, 12), (5, 1), (5, 3), (5, 5), (5, 7), (5, 9), (5, 11), (6, 2), (6, 4), (6, 6), (6, 8), (6, 10), (6, 12), (7, 1), (7, 3), (7, 5), (7, 7), (7, 9), (7, 11), (8, 2), (8, 4), (8, 6), (8, 8), (8, 10), (8, 12), (9, 1), (9, 3), (9, 5), (9, 7), (9, 9), (9, 11), (10, 2), (10, 4), (10, 6), (10, 8), (10, 10), (10, 12), (11, 1), (11, 3), (11, 5), (11, 7), (11, 9), (11, 11), (12, 2), (12, 4), (12, 6), (12, 8), (12, 10), (12, 12)]\"]]", 
      "solution": "def obratna(rel):\n    return {(y, x) for (x, y) in rel}", 
      "problem": 222, 
      "validation": "Check.equal('obratna(enako)', enako)\nCheck.equal('obratna(manjse)', vecje)\nCheck.equal('obratna(vecje)', manjse)\nCheck.challenge(obratna(manjseAliEnako), \"manjseAliEnako\")\nCheck.challenge(obratna(vecjeAliEnako), \"vecjeAliEnako\")\nCheck.challenge(obratna(deli), \"deli\")\nCheck.challenge(obratna(istiOstanek), \"istiOstanek\")"
    }
  }, 
  {
    "pk": 325, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Interval $[a, b]$ je mno\u017eica vseh \u0161tevil, ki so ve\u010dja ali enaka $a$\nin manj\u0161a ali enaka $b$. Torej je interval [3, 2] dobro definiran\n(in seveda prazna mno\u017eica).\n\nPopravi svojo metodo `presekIntervalov` (in je poimenuj `presekIntervalov1`),\nki naj vrne pravilen rezultat tudi za intervale tak\u0161ne oblike.\n\nNamig: lahko se zgodi, da va\u0161a metoda \u017ee deluje pravilno.", 
      "timestamp": "2012-03-12 09:54:57", 
      "challenge": "[[\"(19, 5, 21, 3)\", \"False\"], [\"(14, 16, 16, 14)\", \"False\"], [\"(10, 3, 14, 8)\", \"False\"], [\"(4, 14, 14, 6)\", \"False\"], [\"(0, 17, 13, 14)\", \"(13, 14)\"], [\"(20, 14, 13, 7)\", \"False\"], [\"(17, 9, 7, 4)\", \"False\"], [\"(17, 22, 2, 12)\", \"False\"], [\"(12, 18, 7, 1)\", \"False\"], [\"(10, 18, 15, 18)\", \"(15, 18)\"], [\"(18, 4, 9, 12)\", \"False\"], [\"(5, 13, 2, 5)\", \"(5, 5)\"], [\"(14, 7, 4, 5)\", \"False\"], [\"(4, 0, 15, 21)\", \"False\"], [\"(11, 22, 14, 16)\", \"(14, 16)\"], [\"(22, 16, 16, 11)\", \"False\"], [\"(7, 1, 7, 10)\", \"False\"], [\"(17, 18, 15, 13)\", \"False\"], [\"(6, 18, 17, 22)\", \"(17, 18)\"], [\"(9, 12, 13, 9)\", \"False\"], [\"(19, 6, 22, 22)\", \"False\"], [\"(4, 5, 14, 22)\", \"False\"], [\"(11, 1, 12, 11)\", \"False\"], [\"(20, 4, 13, 14)\", \"False\"], [\"(10, 9, 0, 22)\", \"False\"], [\"(0, 8, 6, 21)\", \"(6, 8)\"], [\"(2, 15, 13, 16)\", \"(13, 15)\"], [\"(21, 21, 10, 17)\", \"False\"], [\"(19, 21, 0, 8)\", \"False\"], [\"(18, 9, 3, 10)\", \"False\"], [\"(7, 14, 21, 4)\", \"False\"], [\"(19, 15, 3, 22)\", \"False\"], [\"(19, 16, 10, 21)\", \"False\"], [\"(11, 2, 18, 10)\", \"False\"], [\"(2, 3, 14, 6)\", \"False\"], [\"(6, 22, 19, 11)\", \"False\"], [\"(6, 16, 13, 14)\", \"(13, 14)\"], [\"(0, 22, 5, 15)\", \"(5, 15)\"], [\"(12, 19, 14, 20)\", \"(14, 19)\"], [\"(13, 9, 21, 20)\", \"False\"], [\"(2, 10, 2, 16)\", \"(2, 10)\"], [\"(8, 8, 21, 1)\", \"False\"], [\"(16, 13, 8, 1)\", \"False\"], [\"(3, 1, 2, 5)\", \"False\"], [\"(6, 16, 0, 8)\", \"(6, 8)\"], [\"(5, 13, 6, 9)\", \"(6, 9)\"], [\"(4, 0, 19, 7)\", \"False\"], [\"(19, 16, 15, 6)\", \"False\"], [\"(3, 4, 0, 15)\", \"(3, 4)\"], [\"(13, 0, 2, 2)\", \"False\"]]", 
      "solution": "def presekIntervalov1(a1, b1, a2, b2):\n    a3 = max(a1, a2)\n    b3 = min(b1, b2)\n    if a3 > b3:\n        return False\n    else:\n        return (a3, b3)", 
      "problem": 108, 
      "validation": "rng=[1287631]\nfor i in range(200): rng.append((rng[-1]*1103515245+12345)%2**32)\nrng=[(x//2**16)%23 for x in rng]\n\npodatki = [tuple(rng[4*i:4*(i+1)]) for i in range(50)]\n\nfor x in podatki:\n    Check.challenge(presekIntervalov1(*x), x)"
    }
  }, 
  {
    "pk": 322, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavi funkcijo `trikotnik(a,b,c)`, ki dobi za parametre tri realna\n\u0161tevila ter preveri, ali obstaja neizrojeni trikotnik s takimi dol\u017einami\nstranic. \u010ce obstaja, naj vrne dvojico `(plo\u0161\u010dina, obseg)`, sicer pa naj\nvrne `False`. Primer:\n\n    >>> trikotnik(3, 4, 8)\n    False\n    >>> trikotnik(3, 4, 5)\n    (6.0, 12)", 
      "timestamp": "2012-03-14 13:37:08", 
      "challenge": "[[\"(37, 12, 2)\", \"False\"], [\"(36, 3, 11)\", \"False\"], [\"(32, 1, 17)\", \"False\"], [\"(26, 9, 6)\", \"False\"], [\"(1, 14, 16)\", \"False\"], [\"(29, 0, 19)\", \"False\"], [\"(25, 7, 4)\", \"False\"], [\"(8, 0, 10)\", \"False\"], [\"(36, 14, 16)\", \"False\"], [\"(17, 11, 10)\", \"(52.306787, 38)\"], [\"(37, 15, 9)\", \"False\"], [\"(32, 6, 0)\", \"False\"], [\"(39, 11, 13)\", \"False\"], [\"(9, 4, 7)\", \"(13.416408, 20)\"], [\"(30, 9, 6)\", \"False\"], [\"(21, 8, 3)\", \"False\"], [\"(28, 6, 9)\", \"False\"], [\"(31, 0, 3)\", \"False\"], [\"(41, 12, 15)\", \"False\"], [\"(8, 7, 17)\", \"False\"], [\"(32, 14, 14)\", \"False\"], [\"(2, 5, 17)\", \"False\"], [\"(6, 6, 17)\", \"False\"], [\"(29, 8, 13)\", \"False\"], [\"(5, 6, 6)\", \"(13.63589, 17)\"], [\"(37, 0, 12)\", \"False\"], [\"(14, 2, 13)\", \"(11.659224, 29)\"], [\"(30, 8, 2)\", \"False\"], [\"(33, 7, 5)\", \"False\"], [\"(6, 16, 3)\", \"False\"], [\"(26, 8, 1)\", \"False\"], [\"(30, 6, 20)\", \"False\"], [\"(40, 11, 11)\", \"False\"], [\"(10, 9, 7)\", \"(30.594117, 26)\"], [\"(37, 11, 3)\", \"False\"], [\"(35, 16, 7)\", \"False\"], [\"(1, 16, 0)\", \"False\"], [\"(8, 4, 8)\", \"(15.491933, 20)\"], [\"(35, 8, 5)\", \"False\"], [\"(34, 5, 11)\", \"False\"], [\"(14, 16, 17)\", \"(104.323715, 47)\"], [\"(22, 12, 15)\", \"(85.284451, 49)\"], [\"(30, 9, 10)\", \"False\"], [\"(29, 12, 15)\", \"False\"], [\"(6, 2, 17)\", \"False\"], [\"(24, 12, 9)\", \"False\"], [\"(29, 4, 7)\", \"False\"], [\"(16, 10, 13)\", \"(64.918699, 39)\"], [\"(26, 6, 19)\", \"False\"], [\"(2, 9, 10)\", \"(8.181534, 21)\"], [\"(30, 0, 6)\", \"False\"]]", 
      "solution": "def trikotnik(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    else:\n        obseg = a + b + c\n        s = obseg / 2\n        ploscina = (s * (s - a) * (s - b) * (s - c))**(1/2)\n        return (ploscina,obseg)", 
      "problem": 106, 
      "validation": "Check.equal(\"trikotnik(3,4,8)\", False)\nCheck.equal(\"trikotnik(8,4,3)\", False)\nCheck.equal(\"trikotnik(3,8,3)\", False)\nCheck.equal(\"trikotnik(4,8,4)\", False)\nCheck.equal(\"trikotnik(3,4,5)\", (6.0, 12))\n\nrng=[98765]\nfor i in range(50): rng.append((rng[-1]*1103515245+12345)%2**32)\npodatki = [(x%43,x%17,x%21) for x in rng]\n\nfor x in podatki:\n    Check.challenge(trikotnik(*x), x)"
    }
  }, 
  {
    "pk": 619, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `naloziCSV(ime)`, ki kot parameter dobi ime datoteke,\r\nv kateri se nahajajo vrstice z vejico lo\u010denimi vrednostimi (kot v\r\nprej\u0161nji nalogi), vrne pa seznam naborov, za vsako vrstico enega.", 
      "timestamp": "2012-05-16 14:30:14", 
      "challenge": "[]", 
      "solution": "def naloziCSV(ime):\r\n    f=open(ime)\r\n    rezultat=[]\r\n    for vrstica in f:\r\n        rezultat.append(nabor(vrstica.strip('\\n')))\r\n    f.close()\r\n    return rezultat", 
      "problem": 204, 
      "validation": "def _makefile0(ime):\r\n    with open(ime, \"w\") as f:\r\n        print(\"Janez Novak,1,3,3,2,0\", file=f)\r\n        print(\"Micka Kovaceva,0,3,2,3\", file=f)\r\n        print(\"Miha Prazni\", file=f)\r\n        print(\"Peter Klepec,1,0,1,2,1,3\", file=f)\r\n \r\ndef _removefiles(*ime):\r\n    import os\r\n    for i in ime: os.remove(i)\r\n\r\n_makefile0(\"_test.csv\")\r\nCheck.equal('naloziCSV(\"_test.csv\")',\r\n            [(\"Janez Novak\", 1, 3, 3, 2, 0),\r\n             (\"Micka Kovaceva\", 0, 3, 2, 3),\r\n             (\"Miha Prazni\",),\r\n             (\"Peter Klepec\", 1, 0, 1, 2, 1, 3)\r\n             ])\r\n_removefiles(\"_test.csv\")"
    }
  }, 
  {
    "pk": 319, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavi funkcijo `kompozitum(f1, f2, ...)`, ki za parametre dobi\npoljubno \u0161tevilo funkcij, in vrne kompozitum teh funkcij. Na primer:\n\n    >>> f = kompozitum(sin, sqrt, len)\n    >>> f('besedilo')\n    0.308071742363\n    >>> g = kompozitum(sqrt, sinus, sqrt, len)\n    >>> g('besedilo')\n    0.222138061474\n    >>> stStevk = kompozitum(len, str, abs)\n    >>> stStevk(623)\n    3\n    >>> stStevk(-60173)\n    5", 
      "timestamp": "2012-05-20 21:49:30", 
      "challenge": "[]", 
      "solution": "def kompozitum(*funkcije):\n    f = lambda x: x\n    for g in funkcije[::-1]:\n        f = kompozitum2(g, f)\n    return f", 
      "problem": 104, 
      "validation": "from math import sin, sqrt\nCheck.equal('kompozitum(sin, sqrt, len)(\"besedilo\")',0.3080717, env={'sin': sin, 'sqrt': sqrt})\nCheck.equal('kompozitum(len, str, abs)(623)',3)\nCheck.equal('kompozitum(len, str, abs)(-60173)',5)"
    }
  }, 
  {
    "pk": 314, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavi funkcijo `fibonacci(k, a1, a2, ..., an)`, ki izra\u010duna seznam\nprvih `k` \u010dlenov zaporedja reda `n` z za\u010detnimi \u010dleni `a1`, `a2`, \u2026, `an`.\n\n    >>> fibonacci(2, 1, 3, 5)\n    [1, 3]\n    >>> fibonacci(10, 1, 3, 5, 8)\n    [1, 3, 5, 8, 17, 33, 63, 121, 234, 451]", 
      "timestamp": "2012-05-21 13:03:48", 
      "challenge": "[]", 
      "solution": "def fibonacci(k, *zacetni):\n    red = len(zacetni)\n    if k <= red:\n        return list(zacetni[:k])\n    zacetni = list(zacetni)\n    for i in range(red, k):\n        zacetni.append(sum(zacetni[-red:]))\n    return zacetni\n\n#\n# izpeljani seznami\n#\n#def fibonacci(k, *zacetni):\n#    return [fib(i,*zacetni) for i in range(1,k+1) ]\n#", 
      "problem": 102, 
      "validation": "Check.equal('fibonacci(2, 1, 3, 5)',[1, 3])\nCheck.equal('fibonacci(10, 1, 3, 5, 8)',[1, 3, 5, 8, 17, 33, 63, 121, 234, 451])"
    }
  }, 
  {
    "pk": 615, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavi funkcijo `podseznam(seznam, zacetek, dolzina)`, ki vrne\r\npodseznam danega seznama z danim za\u010detkom in dol\u017eino.\r\n\u010ce je seznam prazen ali pa je za\u010detek neveljaven, naj funkcija vrne\r\nprazen seznam.\r\nPrimer: `podseznam(['a','b','c','d','e'], 1, 3)` vrne `['b','c','d']`\r\n", 
      "timestamp": "2012-03-27 08:50:37", 
      "challenge": "[]", 
      "solution": "def podseznam(seznam, i, dolzina):\r\n    d=len(seznam)\r\n    if i<0 or i>=d or dolzina < 0:\r\n        return []\r\n    return seznam[i:i+dolzina]", 
      "problem": 203, 
      "validation": "Check.equal('podseznam([1, 2, 3, 4, 5], 1, 3)', [2, 3, 4])\r\nCheck.equal('podseznam([1, 2, 3, 4], 5, 1)', [])\r\nCheck.equal('podseznam([1, 2, 3, 4], 0, 4)', [1, 2, 3, 4])\r\nCheck.equal('podseznam([], 0, 1)', [])\r\nCheck.equal('podseznam([1, 2], -1, 0)', [])\r\nCheck.equal('podseznam([1, 2, 3], 1, -1)', [])"
    }
  }, 
  {
    "pk": 589, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Pravimo, da je beseda skoraj palindrom, \u010de ji je treba zbrisati natanko\neno \u010drko, da bi postala palindrom. Primer je beseda 'kolo', ki ji\nmoramo zbrisati \u010drko 'k', pa postane palindrom 'olo'.\n\nSestavite funkcijo `skorajPalindrom(niz)`, ki preveri, ali je `niz`\nskoraj palindrom. Vse znake (tudi presledke) v besedi obravnavamo enako.", 
      "timestamp": "2012-03-22 11:22:41", 
      "challenge": "[[\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"True\"]]", 
      "solution": "def skorajPalindrom(niz):\n    # za vsak i poskusimo izpustiti \u010drko na i-tem mestu\n    for i in range(len(niz)):\n        # \u010de smo dobili palindrom, kon\u010damo\n        if palindrom(niz[:i] + niz[i + 1:]):\n            return True\n    # \u010de je zanka pri\u0161la do konca, palindroma nismo na\u0161li\n    return False", 
      "problem": 196, 
      "validation": "Check.equal('skorajPalindrom(\"pericare\u017eerackirep\")', True)\nCheck.equal('skorajPalindrom(\"neragdodaren\")', True)\nCheck.equal('skorajPalindrom(\"osemtermeso\")', False)\nfor i in range(100):\n    Check.challenge(skorajPalindrom(str(i)))"
    }
  }, 
  {
    "pk": 593, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `vsebujePoKosih(niz, podniz)`, ki vrne `True`, \u010de in\nsamo \u010de je mogo\u010de `niz` dobiti tako, da v `podniz` na poljubnih mestih\nvstavljamo dodatne znake. (Povedano druga\u010de, \u010de `niz` vsebuje vse znake\niz niza `podniz` v ustreznem vrstnem redu.)\n\nIz besede 'ROLA' lahko na primer z vrivanjem znakov dobimo besedo\n'pRikOLicA'. Med velikimi in malimi tiskanimi \u010drkami strogo lo\u010dujemo.", 
      "timestamp": "2012-03-26 12:24:13", 
      "challenge": "[[\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"]]", 
      "solution": "def vsebujePoKosih(niz, podniz):\n    # v spremenljivki m hranimo indeks znaka v malem nizu, ki ga i\u0161\u010demo\n    m = 0\n    for z in niz:\n        # \u010de smo na\u0161li znak na indeksu m, i\u0161\u010demo naslednjega\n        if podniz[m] == z: m += 1\n        # \u010de smo na\u0161li vse znake v malem nizu, kon\u010damo\n        if m == len(podniz): return True\n    # \u010de se zanka kon\u010da, vseh znakov nismo na\u0161li\n    return False", 
      "problem": 197, 
      "validation": "Check.equal(\"vsebujePoKosih('milnica drazi vaso kozo', 'mladi voz')\", True)\nCheck.equal(\"vsebujePoKosih('otorinolaringolog', 'torino')\", True)\nCheck.equal(\"vsebujePoKosih('otorinolaringolog', 'milano')\", False)\nCheck.equal(\"vsebujePoKosih('otorinolaringolog', 'trololo')\", True)\nfor i in range(50):\n    for j in range(20):\n        Check.challenge(vsebujePoKosih(str(i), str(j)))"
    }
  }, 
  {
    "pk": 595, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `stanja(spremembe)`, ki iz danega seznama\nprilivov in odlivov ustvari seznam vmesnih stanj na ra\u010dunu.\nPrivzemite, da je na za\u010detku stanje na ra\u010dunu 0.", 
      "timestamp": "2012-04-24 14:27:15", 
      "challenge": "[]", 
      "solution": "def stanja(spremembe):\n    stanje = 0\n    stanja = [0]\n    for sprememba in spremembe:\n        stanje += sprememba\n        stanja.append(stanje)\n    return stanja\n\n# nalogo lahko re\u0161imo s pomo\u010djo izpeljanih seznamov\ndef stanja(spremembe):\n    return [sum(spremembe[:i]) for i in range(len(spremembe)+1)]", 
      "problem": 198, 
      "validation": "Check.equal('stanja([1, 2, 3])', [0, 1, 3, 6])\nCheck.equal('stanja([1, -5, -20, 30])', [0, 1, -4, -24, 6])\nCheck.equal('stanja([0])', [0, 0])\nCheck.equal('stanja([10, -5, 20, -6])', [0, 10, 5, 25, 19])"
    }
  }, 
  {
    "pk": 903, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `stevilo_dolgih_vrstic(ime_datoteke)`, ki vrne \u0161tevilo\nvseh vrstic v datoteki z danim imenom, ki so dolge vsaj 11 znakov\n(pri tem je enajsti lahko tudi znak `\"\\n\"` za novo vrstico).", 
      "timestamp": "2013-01-16 17:44:13", 
      "challenge": "[]", 
      "solution": "def stevilo_dolgih_vrstic(ime_datoteke):\n    with open(ime_datoteke) as f:\n        return len([vrs for vrs in f if len(vrs) >= 11])", 
      "problem": 307, 
      "validation": "Check.equal(\"stevilo_dolgih_vrstic('test1.txt')\", 6)\nCheck.equal(\"stevilo_dolgih_vrstic('test2.txt')\", 5)"
    }
  }, 
  {
    "pk": 600, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `slike(permutacija, x, n)`, vrne pa seznam slik\n\u0161tevila `x`, \u010de uporabimo permutacijo `n`-krat.", 
      "timestamp": "2012-05-07 01:21:59", 
      "challenge": "[]", 
      "solution": "def slike(permutacija, x, n):\n    # Funkcijo definiramo rekurzivno. \u010ce je n > 0, naredimo sliko y, nato\n    # pa dodamo \u0161e seznam n - 1 slik elementa y.\n    if n == 0:\n        return []\n    else:\n        y = permutacija[x]\n        ostale = slike(permutacija, y, n - 1)\n        return [y] + ostale\n    \ndef slike_nerekurzivno(permutacija, x, n):\n    r=[]\n    for i in range(n):\n        x = permutacija[x]\n        r.append(x)\n    return r", 
      "problem": 199, 
      "validation": "Check.equal('slike({1: 3, 2: 4, 3: 2, 4: 1}, 1, 3)', [3, 2, 4])\nCheck.equal('slike({1: 3, 2: 4, 3: 2, 4: 1}, 2, 6)', [4, 1, 3, 2, 4, 1])\nCheck.equal('slike({1: 3, 2: 4, 3: 2, 4: 1}, 3, 1)', [2])\nCheck.equal('slike({1: 3, 2: 4, 3: 2, 4: 1}, 4, 0)', [])"
    }
  }, 
  {
    "pk": 623, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Pri klasi\u010dni definiciji verjetnosti nastopajo naslednji pojmi:\r\n\r\n1) Vsi izidi \t\r\n\r\n2) Ugodni izidi \t\r\n\r\n3) Sigma algebra \t\r\n\r\n4) Bernoullijevo zaporedje \t\r\n\r\n5) Dol\u017eina intervala\r\n\r\n6) Fibonaccijevo zaporedje\r\n\r\n7) Nemogo\u010d dogodek\r\n\r\n8) Zadetek\r\n\r\n\r\nSestavite funkcijo naloga14, ki kot rezultat vrne mno\u017eico pravilnih\r\nodgovorov (teh je lahko od 0 do 8, \u010de noben odgovor ni pravilen, naj\r\nfunkcija vrne prazno mno\u017eico)", 
      "timestamp": "2012-03-27 08:51:36", 
      "challenge": "[]", 
      "solution": "def naloga14():\r\n    return {1,2}", 
      "problem": 205, 
      "validation": "pass\r\n#Check.equal('md5(str(naloga14()).encode()).hexdigest()', '190cda75e2bd9dc669b09abe9f1131c5', \"Odgovor je napa\u010den\")"
    }
  }, 
  {
    "pk": 627, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavi funkcijo `minmax(seznam)`, ki poi\u0161\u010de dneva, ko je bil vodostaj\r\nnajvi\u0161ji oz. najni\u017eji in ju vrne v obliki nabora. Privzemi, da je na\r\nza\u010detku vodostaj 0 (glede na neko referen\u010dno oznako).", 
      "timestamp": "2012-03-27 08:52:31", 
      "challenge": "[]", 
      "solution": "def minmax(s):\r\n    s = [0] + stanja(s)\r\n    mini = s.index(min(s))\r\n    maksi = s.index(max(s))\r\n    return (mini, maksi)", 
      "problem": 206, 
      "validation": "Check.equal('minmax([1, 2, 3])', (0, 3))\r\nCheck.equal('minmax([1, -5, -20, 30])', (3, 4))\r\nCheck.equal('minmax([10, -5, 20, -6])', (0, 3))\r\n\r\npass"
    }
  }, 
  {
    "pk": 343, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `desno(s, k)`, ki iz seznama `s` sestavi in vrne\r\nnov seznam, ki predstavlja kro\u017eni pomik prvotnega seznama v desno za\r\n`k` mest.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "def desno(s, k):\r\n    return s[-k:] + s[:-k]", 
      "problem": 117, 
      "validation": "Check.equal('desno([1, 2, 3, 4, 5, 6, 7], 3)', [5, 6, 7, 1, 2, 3, 4])\r\nCheck.equal('desno([1, 2, 3, 4, 5, 6, 7], 1)', [7, 1, 2, 3, 4, 5, 6])\r\nCheck.equal('desno([1, 2, 3, 4, 5, 6, 7], 0)', [1, 2, 3, 4, 5, 6, 7])"
    }
  }, 
  {
    "pk": 631, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavi funkcijo `kjenajvisji(slovar)`, ki kot parameter dobi slovar\r\nzasedenosti in poi\u0161\u010de polo\u017eaj najvi\u0161jega \u010dloveka. \u010ce je takih ve\u010d, naj\r\nvrne seznam vseh polo\u017eajev.", 
      "timestamp": "2012-03-27 08:52:49", 
      "challenge": "[]", 
      "solution": "def kjenajvisji(s):\r\n    max_visina = max(s.values())\r\n    return [(x, y) for (x, y), v in s.items() if v == max_visina]", 
      "problem": 207, 
      "validation": "Check.equal('kjenajvisji({(1, 2): 17.5, (3, 4): 16.5})', [(1, 2)])\r\nCheck.equal('kjenajvisji({(1, 2): 17.5, (30, 40): 18.5})', [(30, 40)])"
    }
  }, 
  {
    "pk": 345, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `pomnozi(s, n)`, ki iz seznama `s` sestavi in vrne\r\nnov seznam, v katerem je za vsakim elementom vrinjenih \u0161e `n - 1`\r\nnjegovih kopij.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "def pomnozi(s, n):\r\n    pomnozen = []\r\n    for x in s:\r\n        pomnozen += n * [x]\r\n    return pomnozen", 
      "problem": 118, 
      "validation": "Check.equal('pomnozi([1, 2, 3], 3)', [1, 1, 1, 2, 2, 2, 3, 3, 3])\r\nCheck.equal('pomnozi([1, 2, 3], 0)', [])\r\nCheck.equal('pomnozi([1, True, 3.5, 7, [1, 2], 3 - 2j], 2)', [1, 1, True, True, 3.5, 3.5, 7, 7, [1, 2], [1, 2], (3-2j), (3-2j)])"
    }
  }, 
  {
    "pk": 177, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `vstopna(f)`, ki sprejme vektor `f`, ki predstavlja\r\nkoeficiente funkcionala, ter vrne indeks vstopne nebazne spremenljivke.\r\nVstopno spremenljivko dolo\u010dite tako, da poi\u0161\u010dete nebazno spremenljivko,\r\nki ima v funkcionalu najve\u010dji pozitiven koeficient.\r\n\u010ce take spremenljivke ni, naj funkcija vrne `NA`.", 
      "timestamp": "2012-10-23 12:58:06", 
      "challenge": "[[\"NA\", \"14\"], [\"NA\", \"7\"], [\"NA\", \"11\"], [\"NA\", \"2\"], [\"NA\", \"4\"], [\"NA\", \"17\"], [\"NA\", \"11\"], [\"NA\", \"1\"], [\"NA\", \"19\"], [\"NA\", \"19\"], [\"NA\", \"3\"], [\"NA\", \"8\"], [\"NA\", \"18\"], [\"NA\", \"1\"], [\"NA\", \"11\"], [\"NA\", \"6\"], [\"NA\", \"6\"], [\"NA\", \"13\"], [\"NA\", \"10\"], [\"NA\", \"7\"], [\"NA\", \"18\"], [\"NA\", \"20\"], [\"NA\", \"14\"], [\"NA\", \"4\"], [\"NA\", \"NA\"], [\"NA\", \"9\"], [\"NA\", \"11\"], [\"NA\", \"5\"], [\"NA\", \"15\"], [\"NA\", \"12\"], [\"NA\", \"11\"], [\"NA\", \"3\"], [\"NA\", \"1\"], [\"NA\", \"3\"], [\"NA\", \"18\"], [\"NA\", \"14\"], [\"NA\", \"7\"], [\"NA\", \"5\"], [\"NA\", \"6\"], [\"NA\", \"17\"], [\"NA\", \"10\"], [\"NA\", \"15\"], [\"NA\", \"11\"], [\"NA\", \"20\"], [\"NA\", \"20\"], [\"NA\", \"7\"], [\"NA\", \"13\"], [\"NA\", \"16\"], [\"NA\", \"4\"], [\"NA\", \"18\"], [\"NA\", \"2\"], [\"NA\", \"19\"], [\"NA\", \"19\"], [\"NA\", \"19\"], [\"NA\", \"3\"], [\"NA\", \"20\"], [\"NA\", \"17\"], [\"NA\", \"14\"], [\"NA\", \"16\"], [\"NA\", \"15\"], [\"NA\", \"6\"], [\"NA\", \"13\"], [\"NA\", \"9\"], [\"NA\", \"12\"], [\"NA\", \"18\"], [\"NA\", \"20\"], [\"NA\", \"20\"], [\"NA\", \"10\"], [\"NA\", \"NA\"], [\"NA\", \"16\"], [\"NA\", \"14\"], [\"NA\", \"18\"], [\"NA\", \"2\"], [\"NA\", \"8\"], [\"NA\", \"12\"], [\"NA\", \"13\"], [\"NA\", \"1\"], [\"NA\", \"3\"], [\"NA\", \"4\"], [\"NA\", \"14\"], [\"NA\", \"7\"], [\"NA\", \"5\"], [\"NA\", \"6\"], [\"NA\", \"17\"], [\"NA\", \"8\"], [\"NA\", \"12\"], [\"NA\", \"18\"], [\"NA\", \"20\"], [\"NA\", \"20\"], [\"NA\", \"10\"], [\"NA\", \"15\"], [\"NA\", \"16\"], [\"NA\", \"19\"], [\"NA\", \"19\"], [\"NA\", \"2\"], [\"NA\", \"8\"], [\"NA\", \"12\"], [\"NA\", \"2\"], [\"NA\", \"3\"], [\"NA\", \"9\"]]", 
      "solution": "vstopna <- function(f) {\r\n  if(all(f <= 0)) {\r\n    return(NA)\r\n  } else {\r\n    return(which.max(f))\r\n  }\r\n}", 
      "problem": 54, 
      "validation": "check$equal(vstopna(c(1, -7, 3, 5)), 4)\r\ncheck$equal(vstopna(c(1, 7, -3, 5)), 2)\r\ncheck$equal(vstopna(c(1, -7, -3, -5)), 1)\r\ncheck$equal(vstopna(c(-1, -7, -3, -5)), NA)\r\ncheck$equal(vstopna(slovar.2$f), 2)\r\ncheck$equal(vstopna(slovar.3$f), 1)\r\nfor (i in 1 : 100) {\r\n  check$challenge(vstopna(round(sin(i * (1 : 20)), 5)))\r\n}"
    }
  }, 
  {
    "pk": 639, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "S katerimi ukazi ustvarimo prazen nabor?\r\n\r\n1) p={}\r\n\r\n2) p=(,)\r\n\r\n3) p=()\r\n\r\n4) p={,}\r\n\r\n5) p=set()\r\n\r\n6) p=tuple()\r\n\r\n7) p=dict()\r\n\r\nSestavite funkcijo naloga14, ki kot rezultat vrne mno\u017eico pravilnih\r\nodgovorov (teh je lahko od 0 do 7, \u010de noben odgovor ni pravilen, naj\r\nfunkcija vrne prazno mno\u017eico)", 
      "timestamp": "2012-03-27 08:53:12", 
      "challenge": "[]", 
      "solution": "def naloga14():\r\n    return {3,6}", 
      "problem": 209, 
      "validation": "Check.equal('md5(str(naloga14()).encode()).hexdigest()', '75d34c54a7d0d1f7d8b543a9c84b8f4d', \"Odgovor je napa\u010den\")"
    }
  }, 
  {
    "pk": 635, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `koliko(niz, datoteka)`, ki na izhodno datoteko z\nimenom `datoteka` za vsako ime zapi\u0161e, kolikokrat se pojavi v nizu `niz`.\n\u010ce je niz enak `\"Jaka,Luka,Miha,Luka\"`, naj se v izhodno datoteko izpi\u0161e\n\n    Jaka 1\n    Luka 2\n    Miha 1\n\nVrstni red izpisa ni pomemben.", 
      "timestamp": "2012-05-14 06:30:42", 
      "challenge": "[]", 
      "solution": "def koliko(niz, datoteka):\n    imena = niz.split(',')\n    enkrat_imena = set(imena)\n    with open(datoteka, 'w') as f:\n        for ime in enkrat_imena:\n            print(ime, kolikokratSePojavi(niz, ime), file=f)", 
      "problem": 208, 
      "validation": "def _makefile2(ime):\n    with open(ime, \"w\") as f:\n        print(\"Miha 3\", file=f)\n        print(\"Luka 2\", file=f)\n        print(\"Jaka 1\", file=f)\n\n\ndef _istevseenodatoteke(ena,dva):\n    with open(ena) as f1, open(dva) as f2:\n        vrste1 = [l.strip() for l in f1.readlines()]\n        vrste1.sort()\n        vrste2 = [l.strip() for l in f2.readlines()]\n        vrste2.sort()\n        if vrste1 == vrste2:\n            return True\n        else:\n            print(\"Izhodna datoteka vsebuje naslednje vrstice: \")\n            print(vrste1)\n            print(\"Morala pa bi vsebovati naslednje vrstice: \")\n            print(vrste2)\n\ndef _removefiles(*ime):\n    import os\n    for i in ime: os.remove(i)\n\n_makefile2(\"_test2.csv\")\nkoliko(\"Jaka,Luka,Miha,Luka,Miha,Miha\",\"_test1.csv\")\nif not _istevseenodatoteke(\"_test1.csv\", \"_test2.csv\"):\n    Check.error(\"Izhodna datoteka je napa\u010dna\")\n_removefiles(\"_test1.csv\",\"_test2.csv\")"
    }
  }, 
  {
    "pk": 651, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavi funkcijo 'dodaj', ki kot parameter dobi slovar s spremenljivkami in\r\nnabor (ime, vrednost). \u010ce spremenljivka v slovarju \u017ee obstaja, naj\r\nfunkcija vrne False, sicer pa naj spremenljivko doda v slovar in vrne\r\nTrue.", 
      "timestamp": "2012-03-27 08:57:32", 
      "challenge": "[]", 
      "solution": "def dodaj(slovar, nabor):\r\n    (i, v) = nabor\r\n    if i in slovar:\r\n        return False\r\n    else:\r\n        slovar[i] = v\r\n        return True", 
      "problem": 212, 
      "validation": "d = {'a': 1, 'b': 3}\r\nCheck.equal('dodaj({\"a\": 1, \"b\": 3}, (\"a\", 0))', False)\r\nCheck.equal('dodaj({\"a\": 1, \"b\": 3}, (\"c\", 0))', True)"
    }
  }, 
  {
    "pk": 647, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `kalorijeNaDan(datoteka)`, ki kot parameter dobi ime\nvhodne datoteke in vrne seznam kalorij, ki jih je Tina pou\u017eila za vsak\ndan: za vsako vrstico naj torej se\u0161teje vse kalorije.", 
      "timestamp": "2012-05-14 06:35:19", 
      "challenge": "[]", 
      "solution": "def kalorijeNaDan(datoteka):\n    zneski = []\n    with open(datoteka) as f:\n        for vrstica in f:\n            zneski.append(sum(vrniKalorije(vrstica)))\n    return zneski", 
      "problem": 211, 
      "validation": "def _makefile2(ime):\n    with open(ime, \"w\") as f:\n        print(\"2,35,18,5,78\", file=f)\n        print(\"13,20\", file=f)\n        print(\"8\", file=f)\n        print(\"15,84,2,4,5,16,78,44,21\", file=f)\n        print(\"10,5,50,40\", file=f)\n    \ndef _removefiles(*ime):\n    import os\n    for i in ime: os.remove(i)\n\n_makefile2(\"_3b.in\")\nCheck.equal('kalorijeNaDan(\"_3b.in\")', [138, 33, 8, 269, 105])\n_removefiles(\"_3b.in\")"
    }
  }, 
  {
    "pk": 341, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `poudari_besede(naslov)`, ki vrne naslov, v katerem\nso vse besede, ozna\u010dene z znakoma `*`, zapisane z velikimi \u010drkami.\n\n_Na primer_: klic `poudari_besede(\"Zadnja *novica* danes!\")` naj vrne\nniz `\"Zadnja NOVICA danes!\"`.", 
      "timestamp": "2012-03-22 11:22:54", 
      "challenge": "[]", 
      "solution": "def poudari_besede(naslov):\n    poudarjen = ''\n    poudarjaj = False\n    for z in naslov:\n        if z == \"*\":\n            poudarjaj = not poudarjaj\n        elif poudarjaj:\n            poudarjen += z.upper()\n        else:\n            poudarjen += z\n    return poudarjen", 
      "problem": 116, 
      "validation": "Check.equal(\"poudari_besede('Zadnja *novica* danes!!!')\", 'Zadnja NOVICA danes!!!')\nCheck.equal(\"poudari_besede('Zadnja novica *danes!!!')\", 'Zadnja novica DANES!!!')\nCheck.equal(\"poudari_besede('Z*v*e*z*d*i*c*e* *v*s*e*p*o*v*s*o*d*')\", 'ZVeZdIcE VsEpOvSoD')"
    }
  }, 
  {
    "pk": 718, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Logaritemski povratek delnice je definiran kot logaritem kvocienta\r\nvrednosti delnice za dva zaporedna dneva trgovanja. Sestavite funkcijo\r\n`povratek(vrednosti)`, ki kot parameter sprejme seznam vrednosti delnice\r\nin vrne (za en element kraj\u0161i) seznam logaritemskih povratkov. \u010ce je\r\npodani seznam prazen ali ima dol\u017eino ena, naj funkcija vrne prazen\r\nseznam.", 
      "timestamp": "2012-06-10 22:42:01", 
      "challenge": "[]", 
      "solution": "from math import log\r\n\r\ndef povratek(vrednosti):\r\n    povratki=[]\r\n    for i in range(1,len(vrednosti)):\r\n        povratki.append(log(vrednosti[i]/vrednosti[i-1]))\r\n    return povratki", 
      "problem": 225, 
      "validation": "Check.equal(\"povratek([])\", [])\r\nCheck.equal(\"povratek([12.3])\", [])\r\nCheck.equal(\"povratek([58.38, 62.42, 63.64, 61.43])\", [0.0669123714166646, 0.019356466626952767, -0.0353438882937501])\r\nCheck.equal(\"povratek([91.92, 91.67, 94.25, 92.66, 91.46, 94.26, 92.6, 90.0, 86.66])\", [-0.002723461566816037, 0.027755654354435888, -0.01701394633961787, -0.013035161758593193, 0.03015520326567577, -0.017767779843451202, -0.028479471321868573, -0.0378172540185017])"
    }
  }, 
  {
    "pk": 742, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `vSlovar(seznam)`, ki iz seznama (ne nujno razli\u010dnih)\nizdelkov sestavi slovar, v katerem so klju\u010di imena izdelkov, vrednosti\npa \u0161tevilo pojavitev posameznega izdelka v seznamu. Funkcija naj vrne\nta slovar. \u010ce je seznam prazen, naj funkcija vrne prazen slovar.", 
      "timestamp": "2012-07-12 11:25:09", 
      "challenge": "[[\"None\", \"[('banane', 1), ('kruh', 5), ('mleko', 3), ('moka', 2)]\"], [\"None\", \"[('banane', 1), ('kruh', 7), ('mleko', 4), ('moka', 3)]\"], [\"None\", \"[('banane', 1), ('kruh', 9), ('mleko', 5), ('moka', 4)]\"], [\"None\", \"[('banane', 1), ('kruh', 11), ('mleko', 6), ('moka', 5)]\"], [\"None\", \"[('banane', 1), ('kruh', 13), ('mleko', 7), ('moka', 6)]\"], [\"None\", \"[('banane', 1), ('kruh', 15), ('mleko', 8), ('moka', 7)]\"], [\"None\", \"[('banane', 1), ('kruh', 10), ('mleko', 9), ('moka', 1)]\"], [\"None\", \"[('banane', 1), ('kruh', 12), ('mleko', 10), ('moka', 2)]\"], [\"None\", \"[('banane', 1), ('kruh', 14), ('mleko', 11), ('moka', 3)]\"], [\"None\", \"[('banane', 1), ('kruh', 16), ('mleko', 12), ('moka', 4)]\"], [\"None\", \"[('banane', 1), ('kruh', 18), ('mleko', 13), ('moka', 5)]\"], [\"None\", \"[('banane', 1), ('kruh', 20), ('mleko', 14), ('moka', 6)]\"], [\"None\", \"[('banane', 1), ('kruh', 22), ('mleko', 15), ('moka', 7)]\"], [\"None\", \"[('banane', 1), ('kruh', 17), ('mleko', 16), ('moka', 1)]\"], [\"None\", \"[('banane', 1), ('kruh', 19), ('mleko', 17), ('moka', 2)]\"], [\"None\", \"[('banane', 1), ('kruh', 5), ('mleko', 2), ('moka', 3)]\"], [\"None\", \"[('banane', 1), ('kruh', 7), ('mleko', 3), ('moka', 4)]\"], [\"None\", \"[('banane', 1), ('kruh', 9), ('mleko', 4), ('moka', 5)]\"], [\"None\", \"[('banane', 1), ('kruh', 11), ('mleko', 5), ('moka', 6)]\"], [\"None\", \"[('banane', 1), ('kruh', 13), ('mleko', 6), ('moka', 7)]\"], [\"None\", \"[('banane', 1), ('kruh', 8), ('mleko', 7), ('moka', 1)]\"], [\"None\", \"[('banane', 1), ('kruh', 10), ('mleko', 8), ('moka', 2)]\"], [\"None\", \"[('banane', 1), ('kruh', 12), ('mleko', 9), ('moka', 3)]\"], [\"None\", \"[('banane', 1), ('kruh', 14), ('mleko', 10), ('moka', 4)]\"], [\"None\", \"[('banane', 1), ('kruh', 16), ('mleko', 11), ('moka', 5)]\"], [\"None\", \"[('banane', 1), ('kruh', 18), ('mleko', 12), ('moka', 6)]\"], [\"None\", \"[('banane', 1), ('kruh', 20), ('mleko', 13), ('moka', 7)]\"], [\"None\", \"[('banane', 1), ('kruh', 15), ('mleko', 14), ('moka', 1)]\"], [\"None\", \"[('banane', 1), ('kruh', 17), ('mleko', 15), ('moka', 2)]\"]]", 
      "solution": "def vSlovar(seznam):\n    slovar={}\n    for izdelek in seznam:\n        slovar[izdelek]=slovar.get(izdelek,0)+1\n    return slovar", 
      "problem": 239, 
      "validation": "Check.equal(\"vSlovar([])\", {})\nCheck.equal(\"vSlovar(['moka','kruh','moka','moka','mleko','kruh'])\", {'kruh': 2, 'moka': 3, 'mleko': 1})\nCheck.equal(\"vSlovar(['moka']*30+['kruh','moka']*10+['moka','mleko','kruh'])\", {'kruh': 11, 'moka': 41, 'mleko': 1})\n\nfor i in range(1,30):\n    Check.challenge(vSlovar(['moka','kruh']*(1+i%7)+['mleko','kruh']*(2+i%16)+['banane']))"
    }
  }, 
  {
    "pk": 667, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `gcd(m, n)`, ki izra\u010duna najve\u010dji skupni delitelj\n\u0161tevil `m` in `n`.\nNalogo re\u0161ite z rekurzijo, torej brez uporabe zank `for` oziroma `while`.", 
      "timestamp": "2012-05-21 12:50:45", 
      "challenge": "[]", 
      "solution": "def gcd(m, n):\n    if n == 0:\n        return m\n    else:\n        return gcd(n, m % n)", 
      "problem": 216, 
      "validation": "if \"for\" in Check.current['solution']:\n    Check.error(\"Re\u0161itev vsebuje zanko for.\")\nelif \"while\" in Check.current['solution']:\n    Check.error(\"Re\u0161itev vsebuje zanko while.\")\nCheck.equal(\"\"\"gcd(31, 6)\"\"\", 1)\nCheck.equal(\"\"\"gcd(315, 0)\"\"\", 315)\nCheck.equal(\"\"\"gcd(80, 1240)\"\"\", 40)\nCheck.equal(\"\"\"gcd(124, 80)\"\"\", 4)"
    }
  }, 
  {
    "pk": 88, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "V spremenljivko `zenska.posadka` shranite podrazporeditev s podatki\no vseh \u017eenskah v posadki.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"NA\", \"0, 3, 0, 20\"]]", 
      "solution": "zenska.posadka <- Titanic[\"Crew\", \"Female\", , ]", 
      "problem": 34, 
      "validation": "check$equal(zenska.posadka[, \"Yes\"], c(0, 20))\ncheck$equal(zenska.posadka[, \"No\"], c(0, 3))\ncheck$challenge(toString(zenska.posadka))"
    }
  }, 
  {
    "pk": 880, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite metodo `naloga2b(self)`, kot je zapisano v navodilih.", 
      "timestamp": "2012-12-10 13:29:25", 
      "challenge": "[]", 
      "solution": "class IskalnoDrevo(IskalnoDrevo):\n    def maksi(self):\n        if self.prazno:\n            return None\n        elif self.desno.prazno:\n            return self.vsebina\n        else:\n            return self.desno.maksi()\n\n    def naloga2b(self):\n        if self.prazno:\n            return None\n        maxl = self.levo.maksi()\n        minr = self.desno.naloga2a()\n        if minr is None or maxl is None:\n            return minr\n        elif maxl is None:\n            return minr\n        elif minr is None:\n            return maxl\n        else:\n            dl = abs(self.vsebina - maxl)\n            dr = abs(self.vsebina - minr)\n            if dl == dr:\n                return (maxl, minr)\n            elif dl < dr:\n                return maxl\n            else:\n                return minr", 
      "problem": 294, 
      "validation": "Check.equal(\"IskalnoDrevo([6, 2, 1, 4, 3, 5, 8, 7, 9]).naloga2b()\", (5, 7)) \nCheck.equal(\"IskalnoDrevo([5, 8, 7, 9]).naloga2b()\", 7) \nCheck.equal(\"IskalnoDrevo([4, 3, 5, 8]).naloga2b()\", (3, 5)) \nCheck.equal(\"IskalnoDrevo([5, 7, 4, 8]).naloga2b()\", 4) \nCheck.equal(\"IskalnoDrevo([1, 3, 5, 8]).naloga2b()\", 3)\nCheck.equal(\"IskalnoDrevo([1]).naloga2b()\", None)"
    }
  }, 
  {
    "pk": 722, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `kdoSovrazi(omrezje, oseba)`, ki vrne mno\u017eico oseb,\nki v danem omre\u017eju sovra\u017eijo dano osebo.", 
      "timestamp": "2012-06-11 11:01:07", 
      "challenge": "[]", 
      "solution": "def kdoSovrazi(omrezje, oseba):\n    return {sovrag for sovrag, sovrazniki in omrezje.items()\n            if oseba in sovrazniki}", 
      "problem": 230, 
      "validation": "Check.equal(\"kdoSovrazi(primerOmrezja1, 'Zoran')\", {\"\u017diga\", \"Ugo\"})\nCheck.equal(\"kdoSovrazi(primerOmrezja1, 'Vesna')\", {\"\u017diga\", \"Zoran\", \"Tina\"})\nCheck.equal(\"kdoSovrazi(primerOmrezja1, '\u017diga')\", {\"Ugo\"})\nCheck.equal(\"kdoSovrazi(primerOmrezja2, 'Darko')\", {\"Evgen\", \"Cvetka\"})\nCheck.equal(\"kdoSovrazi(primerOmrezja2, 'Cvetka')\", set())\nCheck.equal(\"kdoSovrazi(primerOmrezja2, 'Betka')\", {\"Filip\", \"Evgen\", \"Cvetka\"})"
    }
  }, 
  {
    "pk": 884, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite metodo `naloga4b(t)`, kot je zapisano v navodilih.", 
      "timestamp": "2012-12-10 14:11:53", 
      "challenge": "[]", 
      "solution": "def naloga4b(t, odmik=0):\n    if len(t) <= odmik:\n        return []\n    else:\n        k = t.index(max(t[odmik:]))\n        t = naloga4a(t, k)\n        t = naloga4a(t, odmik)\n        return [k, odmik] + naloga4b(t, odmik=odmik + 1)", 
      "problem": 295, 
      "validation": "for t in [[], [1], [1, 0], [9, 7, 5, 3], [3, 5, 7, 9], [7, 6, 3, 4, 5, 2, 1]]:\n    Check.run([\n        \"t = {0}\".format(t),\n        \"for k in naloga4b(t):\",\n        \"    t = naloga4a(t, k)\",\n    ], {\"t\": sorted(t)[::-1]})"
    }
  }, 
  {
    "pk": 204, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Dodajte metodo `steviloListov(self)`, ki vrne \u0161tevilo listov v drevesu.", 
      "timestamp": "2012-11-22 12:11:41", 
      "challenge": "[[\"None\", \"1\"], [\"None\", \"1\"], [\"None\", \"2\"], [\"None\", \"3\"], [\"None\", \"5\"], [\"None\", \"8\"], [\"None\", \"13\"], [\"None\", \"21\"], [\"None\", \"34\"], [\"None\", \"55\"], [\"None\", \"89\"], [\"None\", \"144\"], [\"None\", \"233\"], [\"None\", \"377\"], [\"None\", \"610\"], [\"None\", \"987\"], [\"None\", \"1597\"], [\"None\", \"2584\"], [\"None\", \"4181\"]]", 
      "solution": "class Drevo(Drevo):\r\n    def steviloListov(self):\r\n        if self.prazno:\r\n            return 0\r\n        elif self.levo.prazno and self.desno.prazno:\r\n            return 1\r\n        else:\r\n            return self.levo.steviloListov() + self.desno.steviloListov()", 
      "problem": 60, 
      "validation": "Check.equal('Drevo().steviloListov()', 0)\r\nCheck.equal('Drevo(3).steviloListov()', 1)\r\nCheck.equal('Drevo(5, levo=Drevo(4, desno=Drevo(2)), desno=Drevo(3, levo=Drevo(4), desno=Drevo(4))).steviloListov()', 3)\r\n_drevesa = [Drevo(), Drevo()]\r\nfor i in range(1, 20):\r\n    _drevesa.append(Drevo(i, levo=_drevesa[-1], desno=_drevesa[-2]))\r\n    Check.challenge(_drevesa[-1].steviloListov())"
    }
  }, 
  {
    "pk": 70, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `obrestuj(stanja)`, ki sprejme vektor stanj na\nposameznih ra\u010dunih in vrne vektor stanj po obra\u010dunanih obrestih.\nNa pozitivna stanja obra\u010dunajte 5%, na negativna pa 10% obresti.", 
      "timestamp": "2012-10-22 11:42:36", 
      "challenge": "[]", 
      "solution": "obrestuj <- function(stanja) {\n  stanja[stanja > 0] <- stanja[stanja > 0] * 1.05\n  stanja[stanja < 0] <- stanja[stanja < 0] * 1.10\n  return(stanja)\n}", 
      "problem": 23, 
      "validation": "check$equal(obrestuj(c(200, -500, 10, 70)), c(210, -550, 10.5, 73.5))\ncheck$equal(obrestuj(c(200, -50, 10, 700)), c(210, -55, 10.5, 735))"
    }
  }, 
  {
    "pk": 706, 
    "model": "tomo.part", 
    "fields": {
      "_order": 1, 
      "description": "Pri enostavnem obrestovanju s fiksno letno obrestno mero $r$ se\r\nvedno obrestuje samo glavnica, ne pa tudi obresti. Tako je vrednost\r\nna ra\u010dunu pri glavnici $A_0$ po $n$ mesecih podana s formulo\r\n$$A = A_0*(1+m*n),$$\r\nkjer je $m$ pripadajo\u010da mese\u010dna obrestna mera.\r\n\r\nSestavite funkcijo `vrednost(A0, r, n)`, ki izra\u010duna vrednost denarja\r\nna ra\u010dunu, \u010de polo\u017eimo na za\u010detku vrednost $A_0$, obrestuje se po letni\r\nobrestni meri $r$ in je na ra\u010dunu $n$ mesecev, pri \u010demer gre za enostavno\r\nobrestovanje.\r\n\r\nPrimeri:\r\n\r\n    >>> vrednost(100, 10, 0)\r\n    100.0\r\n    >>> vrednost(100, 12, 1)\r\n    101.0\r\n    >>> vrednost(100, 10, 12)\r\n    110", 
      "timestamp": "2012-06-09 22:21:06", 
      "challenge": "[[\"(2345, 8.135646577844163, 13)\", \"2551.679322\"], [\"(9934, 8.514242941905412, 34)\", \"12330.447199\"], [\"(1135, 6.295240863159901, 59)\", \"1486.30067\"], [\"(7628, 4.660416896679251, 48)\", \"9049.986404\"], [\"(8917, 3.7347400482442845, 9)\", \"9166.770078\"], [\"(8490, 9.237067144727964, 18)\", \"9666.340501\"], [\"(3083, 5.0200911506694625, 51)\", \"3740.769993\"], [\"(5224, 9.59005714047218, 4)\", \"5390.994862\"], [\"(2001, 17.04358544361328, 1)\", \"2029.420179\"], [\"(8726, 11.9609551515499, 10)\", \"9595.760789\"], [\"(839, 8.526021871424712, 39)\", \"1071.483301\"], [\"(5780, 9.079508290405004, 28)\", \"7004.523018\"], [\"(6189, 12.355660294183425, 41)\", \"8801.697037\"], [\"(6722, 12.245537806322742, 6)\", \"7133.572526\"], [\"(9139, 18.685308923108032, 43)\", \"15258.080537\"], [\"(4832, 2.892390459913164, 32)\", \"5204.694152\"], [\"(5161, 1.3353982472476513, 57)\", \"5488.369542\"], [\"(2366, 16.198261346740452, 26)\", \"3196.376871\"], [\"(6943, 6.222922812890802, 39)\", \"8347.186975\"], [\"(3052, 9.733493792206142, 20)\", \"3547.110384\"], [\"(7461, 1.5812452499270204, 41)\", \"7864.087086\"], [\"(4266, 15.369663393994148, 34)\", \"6123.731214\"], [\"(4251, 7.454182535198449, 59)\", \"5808.980056\"], [\"(3896, 14.771783270354936, 52)\", \"6389.87093\"], [\"(5489, 4.891024528168203, 17)\", \"5869.330143\"], [\"(1158, 5.612848194938995, 18)\", \"1255.495173\"], [\"(6023, 5.39594668719893, 7)\", \"6212.58209\"], [\"(2068, 7.385075020403733, 4)\", \"2118.907784\"], [\"(1229, 15.129116788797463, 41)\", \"1864.284222\"], [\"(7906, 15.723673155814238, 22)\", \"10185.041599\"], [\"(2419, 3.8851474458617483, 19)\", \"2567.804385\"], [\"(1568, 12.220899888189772, 28)\", \"2015.121991\"], [\"(9033, 9.866814343718636, 33)\", \"11483.990684\"], [\"(7470, 6.305204992449606, 50)\", \"9432.495054\"], [\"(7855, 15.905394037746305, 3)\", \"8167.342175\"], [\"(6796, 11.650310369878781, 4)\", \"7059.918364\"], [\"(9365, 16.15710780067204, 29)\", \"13021.690102\"], [\"(4362, 16.129252991576767, 58)\", \"7762.530408\"], [\"(3115, 3.441233475301475, 19)\", \"3284.724503\"], [\"(1832, 13.952325724259067, 52)\", \"2939.628631\"], [\"(6401, 4.082472999345116, 37)\", \"7206.733881\"], [\"(3542, 4.982242252701348, 18)\", \"3806.706531\"], [\"(3959, 1.872284659844043, 27)\", \"4125.778437\"], [\"(8788, 14.772980326504893, 44)\", \"13548.248207\"], [\"(5149, 19.25386306837334, 13)\", \"6222.996527\"], [\"(7698, 1.08518063627586, 54)\", \"8073.917424\"], [\"(4115, 14.628460564107725, 3)\", \"4265.490288\"], [\"(8336, 15.876995479274148, 4)\", \"8777.168781\"], [\"(5705, 7.011488248194395, 9)\", \"6005.004053\"], [\"(9438, 12.110501688982131, 6)\", \"10009.494575\"], [\"(8111, 1.4381692067084464, 27)\", \"8373.462285\"], [\"(3436, 19.33986956385397, 0)\", \"3436.0\"], [\"(4773, 0.3935733891219559, 53)\", \"4855.968222\"], [\"(2282, 16.855474632623263, 42)\", \"3628.246759\"], [\"(6043, 17.56011999501401, 27)\", \"8430.605615\"], [\"(8424, 10.66561572692254, 56)\", \"12616.866855\"], [\"(1937, 14.232962354717847, 17)\", \"2327.564348\"], [\"(6294, 8.406453156442609, 58)\", \"8851.327115\"], [\"(5047, 14.453554639161492, 35)\", \"7174.623466\"], [\"(8132, 19.58177180864371, 32)\", \"12378.372489\"], [\"(941, 6.346657797882354, 13)\", \"1005.698887\"], [\"(9154, 14.468397446598237, 46)\", \"14231.008892\"], [\"(2403, 11.586290301663011, 23)\", \"2936.635566\"], [\"(1776, 1.0378878711285302, 12)\", \"1794.432889\"], [\"(9001, 0.8421206412250654, 29)\", \"9184.181591\"], [\"(2414, 15.516344185844876, 10)\", \"2726.137124\"], [\"(5471, 19.373641967752675, 55)\", \"10329.021447\"], [\"(9372, 16.544372685751885, 16)\", \"11439.384811\"], [\"(1573, 1.9125014303586345, 1)\", \"1575.506971\"], [\"(9018, 17.615399201804554, 18)\", \"11400.83505\"], [\"(3211, 11.49131624543764, 59)\", \"5025.181976\"], [\"(1512, 6.779531477468054, 12)\", \"1614.506516\"], [\"(8177, 3.890535320093252, 5)\", \"8309.55378\"], [\"(3846, 9.891058871168742, 50)\", \"5431.042184\"], [\"(1959, 19.006182273771064, 35)\", \"3044.96574\"], [\"(5540, 6.9158941346787115, 24)\", \"6306.28107\"], [\"(2493, 16.963335501414576, 25)\", \"3374.033238\"], [\"(5938, 13.318837951447692, 6)\", \"6333.436299\"], [\"(6003, 12.330289663063585, 51)\", \"9148.795976\"], [\"(2048, 5.2739915706191685, 40)\", \"2408.037825\"], [\"(1129, 2.8615213737451444, 37)\", \"1228.611944\"], [\"(5918, 0.9926069543752682, 30)\", \"6064.856199\"], [\"(351, 14.756256995616404, 19)\", \"433.007898\"], [\"(2972, 5.724616805575949, 56)\", \"3765.966187\"], [\"(1701, 11.239134120437335, 37)\", \"2290.464487\"], [\"(1178, 6.9313301474693025, 46)\", \"1490.995765\"], [\"(3963, 3.188687395808318, 43)\", \"4415.817525\"], [\"(5640, 6.259217924910464, 24)\", \"6346.039782\"], [\"(5569, 19.67251933922635, 33)\", \"8581.797156\"], [\"(6550, 12.908738672146564, 46)\", \"9791.169135\"], [\"(1223, 9.723176494060437, 55)\", \"1768.024556\"], [\"(3364, 2.551086421311635, 56)\", \"3764.486554\"], [\"(7373, 18.882614419419227, 17)\", \"9345.304812\"], [\"(6930, 0.6142656743641496, 10)\", \"6965.473843\"], [\"(611, 9.794127497570297, 7)\", \"645.907903\"], [\"(1904, 19.957050715492606, 16)\", \"2410.642994\"], [\"(57, 16.712650140551244, 9)\", \"64.144658\"], [\"(4046, 9.517762970014315, 14)\", \"4495.270138\"], [\"(8479, 0.5074192909859547, 55)\", \"8676.193708\"], [\"(7164, 11.823314527220264, 32)\", \"9422.726007\"], [\"(3109, 10.725253517983138, 9)\", \"3359.086099\"]]", 
      "solution": "def vrednost(A0, r, n):\r\n    m=obrestnaMera(r)\r\n    return A0*(1+m*n)", 
      "problem": 224, 
      "validation": "Check.equal(\"vrednost(100,10,0)\", 100)\r\nCheck.equal(\"vrednost(100,12,1)\", 101)\r\nCheck.equal(\"vrednost(100,10,12)\", 110)\r\n\r\n_rng=[63112345]\r\nfor i in range(300): _rng.append((_rng[-1]*1103515245+12345)%2**32)\r\n_m=max(_rng)/20\r\n_rng=[(x%10000,y/_m,z%60) for x,y,z in zip(_rng, _rng[100:], _rng[200:])]\r\n\r\nfor v in _rng:\r\n    Check.challenge(vrednost(*v),v)"
    }
  }, 
  {
    "pk": 205, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Dodajte metodo `minimum(self)`, ki vrne najmanj\u0161e \u0161tevilo v drevesu.\r\n\u010ce je drevo prazno, naj metoda vrne `None`.", 
      "timestamp": "2012-11-22 12:11:41", 
      "challenge": "[[\"None\", \"1\"], [\"None\", \"1\"], [\"None\", \"1\"], [\"None\", \"1\"], [\"None\", \"1\"], [\"None\", \"1\"], [\"None\", \"1\"], [\"None\", \"1\"], [\"None\", \"1\"], [\"None\", \"1\"], [\"None\", \"1\"], [\"None\", \"1\"], [\"None\", \"1\"], [\"None\", \"1\"], [\"None\", \"1\"], [\"None\", \"1\"], [\"None\", \"1\"], [\"None\", \"1\"], [\"None\", \"1\"]]", 
      "solution": "class Drevo(Drevo):\r\n    def minimum(self):\r\n        if self.prazno:\r\n            return\r\n        else:\r\n            levi_minimum = self.levo.minimum() or float(\"inf\")\r\n            desni_minimum = self.desno.minimum() or float(\"inf\")\r\n            return min(self.vsebina, levi_minimum, desni_minimum)", 
      "problem": 60, 
      "validation": "Check.equal('Drevo().minimum()', None)\r\nCheck.equal('Drevo(3).minimum()', 3)\r\nCheck.equal('Drevo(5, levo=Drevo(4, desno=Drevo(2)), desno=Drevo(3, levo=Drevo(4), desno=Drevo(4))).minimum()', 2)\r\n_drevesa = [Drevo(), Drevo()]\r\nfor i in range(1, 20):\r\n    _drevesa.append(Drevo(i, levo=_drevesa[-1], desno=_drevesa[-2]))\r\n    Check.challenge(_drevesa[-1].minimum())"
    }
  }, 
  {
    "pk": 751, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `okrajsajVse(niz)`, ki na nizu toliko \u010dasa bri\u0161e\npojavitve sosednjih enakih znakov, dokler se niz ne spreminja ve\u010d.\nPomagajte si s funkcijo iz prej\u0161nje naloge.", 
      "timestamp": "2012-07-12 08:25:27", 
      "challenge": "[]", 
      "solution": "def okrajsajVse(niz):\n    okrajsan = okrajsajDva(niz)\n    while okrajsan != niz:\n        okrajsan, niz = okrajsajDva(okrajsan), okrajsan\n    return okrajsan", 
      "problem": 236, 
      "validation": "Check.equal(\"okrajsajVse('oddih')\", \"oih\")\nCheck.equal(\"okrajsajVse('aabbcc')\", \"\")\nCheck.equal(\"okrajsajVse('www.yahoo.com')\", \"w.yah.com\")\nCheck.equal(\"okrajsajVse('abcde')\", \"abcde\")\nCheck.equal(\"okrajsajVse('abcdeedcba')\", \"\")"
    }
  }, 
  {
    "pk": 230, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `html2text(vhod, izhod)`, ki sprejme ime vhodne in\nizhodne datoteke. Funkcija iz vhodne HTML datoteke izlu\u0161\u010di besedilo\nbrez zna\u010dk in ga shrani na izhodno datoteko.\n\nSe pravi, da iz vsebine zna\u010dke `<body>...</body>` odstrani zna\u010dke in\nrezultat zapi\u0161e na izhodno datoteko.\n\nOpomba: naloga ni opremljena s testi, zato bo Tomo sprejel tudi\nnapa\u010dne re\u0161itve.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "def html2text(vhod, izhod):\n    znacka = re.compile(\n                        r'<(\\w+)'  # oklepaj in ime zna\u010dke\n                        r'.*?>'    # potencialni argumenti ter zaklepaj\n                        r'(.*?)'   # vsebina zna\u010dke\n                        r'</\\1>',  # konec zna\u010dke s tem imenom\n                        flags=re.DOTALL\n                       ) #\n    with open(vhod) as f:\n        txt = f.read()\n    while znacka.search(txt):\n        txt = znacka.sub(r'\\2', txt)\n    with open(izhod, 'w') as g:\n        g.write(txt)", 
      "problem": 71, 
      "validation": ""
    }
  }, 
  {
    "pk": 896, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Na avtobusno postajo eden za drugim prihajajo avtobusi,\r\nrazmak med njimi pa je enakomerno razporejen na intervalu $[a, b]$.\r\nPrvi avtobus na postajo pripelje ob \u010dasu $0$,\r\nvi pa na postajo pridete ob \u010dasu $t$.\r\nKoliko \u010dasa morate \u010dakati, da pripelje prvi avtobus?\r\n\r\nSestavite funkcijo `cas.cakanja(a, b, t, k = 1000)`,\r\nki z metodo Monte Carlo v `k` poskusih oceni\r\n\u010das \u010dakanja pri danih parametrih `a`, `b` in `t`.", 
      "timestamp": "2013-02-11 12:07:58", 
      "challenge": "[]", 
      "solution": "cas.cakanja <- function(a, b, t, k = 1000) {\r\n  poskus <- function() {\r\n    # povpre\u010den razmak je (b - a) / 2,\r\n    # zato v povpre\u010dju \u010dakamo na 2 * t / (b - a) avtobusov.\r\n    st.avtobusov <- 2 * ceiling(t / (b - a))\r\n    razmaki <- runif(st.avtobusov)\r\n    # \u010de po pri\u010dakovanem \u0161tevilu avtobusov \u0161e vedno ni avtobusa,\r\n    # \u010dakamo \u0161e naprej ter pove\u010dujemo \u010das \u010dakanja.\r\n    repeat {\r\n      razmaki <- runif(st.avtobusov)\r\n      cas.do.zadnjega <- sum(razmaki)\r\n      if(t < cas.do.zadnjega)\r\n        break\r\n      else\r\n        t <- t - cas.do.zadnjega\r\n    }\r\n    prihodi <- cumsum(razmaki)\r\n    return(min(prihodi[prihodi > t]) - t)\r\n  }\r\n  return(mean(replicate(k, poskus())))\r\n}", 
      "problem": 309, 
      "validation": ""
    }
  }, 
  {
    "pk": 652, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavi funkcijo 'preberiSpremenljivke', ki kot parameter dobi naravno \r\n\u0161tevilo n, nato pa uporabnika n-krat vpra\u0161a po imenu spremenljivke \r\nin vrednosti. Funkcija naj vrne slovar, v katerem so klju\u010di imena \r\nspremenljivk, ki jih je vnesel uporabnik, njihove vrednosti pa \r\nvrednosti ustreznih spremenljivk.", 
      "timestamp": "2012-03-27 08:57:32", 
      "challenge": "[]", 
      "solution": "def preberiSpremenljivke(n):\r\n    d = dict()\r\n    for i in range(n):\r\n        ime = input()\r\n        vrednost = input()\r\n        d[ime]  = vrednost\r\n    return d", 
      "problem": 212, 
      "validation": "_makefile1('2c.in')\r\nold_stdin = sys.stdin\r\nsys.stdin = open('2c.in')\r\n\r\n\r\nd = preberiSpremenljivke(3)\r\nCheck.equal(\"len({0}.keys())\".format(str(d)), 3)\r\nCheck.equal(str(d['a']), 0)\r\nCheck.equal(str(d['b']), 1)\r\nCheck.equal(str(d['c']), 2)\r\nsys.stdin = old_stdin"
    }
  }, 
  {
    "pk": 786, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `staEnakiOznaki(tablice)`, ki vrne `True`, kadar v\nseznamu `tablice` obstajata dve tablici, ki imata enak del oznake za\nzvezdico. \u010ce takih dveh tablic ni, naj funkcija vrne `False`.\nPri tej nalogi si lahko pomagate z re\u0161itvijo naslednje podnaloge.", 
      "timestamp": "2012-09-05 11:43:24", 
      "challenge": "[]", 
      "solution": "def staEnakiOznaki(tablice):\n    return enakiOznaki(tablice) is not None\n\ndef staEnakiOznaki(tablice):\n    oznake = set()\n    for tablica in tablice:\n        _, oznaka = razbij(tablica)\n        if oznaka in oznake:\n            return True\n        else:\n            oznake.add(oznaka)\n    return False", 
      "problem": 250, 
      "validation": "Check.equal(\"\"\"staEnakiOznaki([\"MB*56-TR2\", \"LJ*AB-124\", \"KR*B25-13\"])\"\"\", False)\nCheck.equal(\"\"\"staEnakiOznaki([\"MB*56-TR2\", \"LJ*AB-124\", \"KR*AB-124\"])\"\"\", True)\nCheck.equal(\"\"\"staEnakiOznaki([\"MB*56-TR2\", \"LJ*AB-124\", \"KR*56-TR2\"])\"\"\", True)\nCheck.equal(\"\"\"staEnakiOznaki([\"LJ*AB-124\", \"LJ*BC-124\", \"LJ*CD-124\"])\"\"\", False)\nCheck.equal(\"\"\"staEnakiOznaki([])\"\"\", False)"
    }
  }, 
  {
    "pk": 838, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite metodo `__eq__` za primerjanje polinomov.", 
      "timestamp": "2012-10-26 10:34:05", 
      "challenge": "[]", 
      "solution": "class Polinom(Polinom):\n    def __eq__(self, other):\n        return self.koef == other.koef", 
      "problem": 55, 
      "validation": "Check.equal('Polinom([1, 2, 3]) == Polinom([1, 2, 3, 0, 0])', True)\nCheck.equal('Polinom([1, 2, 3]) != Polinom([0, 1, 2, 3])', True)\nCheck.equal('Polinom([1, 2, 3]) == Polinom([3, 2, 1])', False)"
    }
  }, 
  {
    "pk": 782, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `p(x, m)`, ki vrne najmanj\u0161e nenegativno \u0161tevilo `k`,\nza katero velja $f^k(x) > m$.\n\nPredpostavite lahko, da so vhodni podatki smiselni.", 
      "timestamp": "2012-09-05 11:43:14", 
      "challenge": "[[\"None\", \"10\"], [\"None\", \"23\"], [\"None\", \"21\"], [\"None\", \"23\"], [\"None\", \"23\"], [\"None\", \"23\"], [\"None\", \"25\"], [\"None\", \"21\"], [\"None\", \"23\"], [\"None\", \"23\"], [\"None\", \"22\"], [\"None\", \"24\"], [\"None\", \"21\"], [\"None\", \"23\"], [\"None\", \"23\"], [\"None\", \"23\"], [\"None\", \"24\"], [\"None\", \"22\"], [\"None\", \"22\"], [\"None\", \"24\"], [\"None\", \"22\"], [\"None\", \"23\"], [\"None\", \"23\"], [\"None\", \"23\"], [\"None\", \"22\"], [\"None\", \"23\"], [\"None\", \"23\"], [\"None\", \"22\"], [\"None\", \"22\"], [\"None\", \"23\"], [\"None\", \"23\"], [\"None\", \"24\"], [\"None\", \"23\"], [\"None\", \"23\"], [\"None\", \"23\"], [\"None\", \"22\"], [\"None\", \"23\"], [\"None\", \"19\"], [\"None\", \"23\"], [\"None\", \"24\"], [\"None\", \"21\"], [\"None\", \"20\"], [\"None\", \"24\"], [\"None\", \"23\"], [\"None\", \"24\"], [\"None\", \"23\"], [\"None\", \"23\"], [\"None\", \"21\"], [\"None\", \"21\"], [\"None\", \"23\"], [\"None\", \"23\"]]", 
      "solution": "def p(x,m):\n    k=0\n    while fk(x,k) <= m:\n        k += 1\n    return k", 
      "problem": 249, 
      "validation": "Check.equal(\"p(1,20)\",2)\nCheck.equal(\"p(-1,20)\",1)\nCheck.equal(\"p(10,200)\",2)\nCheck.equal(\"p(1,2000)\",5)\nCheck.equal(\"p(3,2000000)\",8)\n\n_rng=[9911]\nfor i in range(50): _rng.append((_rng[-1]*1103515245+12345)%2**32)\nfor i in _rng:\n    Check.challenge(p(1+i%35,i**2))"
    }
  }, 
  {
    "pk": 549, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Napi\u0161i funkcijo `okvir3( niz, odmik, debelina)`, ki okoli besede `niz`\nnaredi okvir, sestavljen iz znakov `+`. Okvir naj bo \u0161irok `debelina` znakov.\nProstor med besedo in okvirjem naj bo \u0161irok `odmik` znakov `.`. Privzeta\nvrednost parametrov `odmik` in `debelina` naj bo `1`.  Npr. klic\n`print( okvir3( \"banana\", 2, 2 ) )` naj izpi\u0161e\n\n     ++++++++++++++\n     ++++++++++++++\n     ++..........++\n     ++..........++\n     ++..banana..++\n     ++..........++\n     ++..........++\n     ++++++++++++++\n     ++++++++++++++", 
      "timestamp": "2012-03-05 12:14:35", 
      "challenge": "[[\"None\", \"['+++++\\\\n+...+\\\\n+.x.+\\\\n+...+\\\\n+++++\\\\n', '++++++\\\\n+....+\\\\n+.xx.+\\\\n+....+\\\\n++++++\\\\n', '+++++++\\\\n+.....+\\\\n+.xxx.+\\\\n+.....+\\\\n+++++++\\\\n', '++++++++\\\\n+......+\\\\n+.xxxx.+\\\\n+......+\\\\n++++++++\\\\n', '+++++++++\\\\n+.......+\\\\n+.xxxxx.+\\\\n+.......+\\\\n+++++++++\\\\n', '++++++++++\\\\n+........+\\\\n+.xxxxxx.+\\\\n+........+\\\\n++++++++++\\\\n', '+++++++++++\\\\n+.........+\\\\n+.xxxxxxx.+\\\\n+.........+\\\\n+++++++++++\\\\n']\"], [\"None\", \"['+++\\\\n+x+\\\\n+++\\\\n', '+++++\\\\n+...+\\\\n+.x.+\\\\n+...+\\\\n+++++\\\\n', '+++++++\\\\n+.....+\\\\n+.....+\\\\n+..x..+\\\\n+.....+\\\\n+.....+\\\\n+++++++\\\\n', '++++\\\\n+xx+\\\\n++++\\\\n', '++++++\\\\n+....+\\\\n+.xx.+\\\\n+....+\\\\n++++++\\\\n', '++++++++\\\\n+......+\\\\n+......+\\\\n+..xx..+\\\\n+......+\\\\n+......+\\\\n++++++++\\\\n', '+++++\\\\n+xxx+\\\\n+++++\\\\n', '+++++++\\\\n+.....+\\\\n+.xxx.+\\\\n+.....+\\\\n+++++++\\\\n', '+++++++++\\\\n+.......+\\\\n+.......+\\\\n+..xxx..+\\\\n+.......+\\\\n+.......+\\\\n+++++++++\\\\n', '++++++\\\\n+xxxx+\\\\n++++++\\\\n', '++++++++\\\\n+......+\\\\n+.xxxx.+\\\\n+......+\\\\n++++++++\\\\n', '++++++++++\\\\n+........+\\\\n+........+\\\\n+..xxxx..+\\\\n+........+\\\\n+........+\\\\n++++++++++\\\\n', '+++++++\\\\n+xxxxx+\\\\n+++++++\\\\n', '+++++++++\\\\n+.......+\\\\n+.xxxxx.+\\\\n+.......+\\\\n+++++++++\\\\n', '+++++++++++\\\\n+.........+\\\\n+.........+\\\\n+..xxxxx..+\\\\n+.........+\\\\n+.........+\\\\n+++++++++++\\\\n', '++++++++\\\\n+xxxxxx+\\\\n++++++++\\\\n', '++++++++++\\\\n+........+\\\\n+.xxxxxx.+\\\\n+........+\\\\n++++++++++\\\\n', '++++++++++++\\\\n+..........+\\\\n+..........+\\\\n+..xxxxxx..+\\\\n+..........+\\\\n+..........+\\\\n++++++++++++\\\\n', '+++++++++\\\\n+xxxxxxx+\\\\n+++++++++\\\\n', '+++++++++++\\\\n+.........+\\\\n+.xxxxxxx.+\\\\n+.........+\\\\n+++++++++++\\\\n', '+++++++++++++\\\\n+...........+\\\\n+...........+\\\\n+..xxxxxxx..+\\\\n+...........+\\\\n+...........+\\\\n+++++++++++++\\\\n']\"], [\"None\", \"['x\\\\n', '+++\\\\n+x+\\\\n+++\\\\n', '+++++\\\\n+++++\\\\n++x++\\\\n+++++\\\\n+++++\\\\n', '...\\\\n.x.\\\\n...\\\\n', '+++++\\\\n+...+\\\\n+.x.+\\\\n+...+\\\\n+++++\\\\n', '+++++++\\\\n+++++++\\\\n++...++\\\\n++.x.++\\\\n++...++\\\\n+++++++\\\\n+++++++\\\\n', '.....\\\\n.....\\\\n..x..\\\\n.....\\\\n.....\\\\n', '+++++++\\\\n+.....+\\\\n+.....+\\\\n+..x..+\\\\n+.....+\\\\n+.....+\\\\n+++++++\\\\n', '+++++++++\\\\n+++++++++\\\\n++.....++\\\\n++.....++\\\\n++..x..++\\\\n++.....++\\\\n++.....++\\\\n+++++++++\\\\n+++++++++\\\\n', 'xx\\\\n', '++++\\\\n+xx+\\\\n++++\\\\n', '++++++\\\\n++++++\\\\n++xx++\\\\n++++++\\\\n++++++\\\\n', '....\\\\n.xx.\\\\n....\\\\n', '++++++\\\\n+....+\\\\n+.xx.+\\\\n+....+\\\\n++++++\\\\n', '++++++++\\\\n++++++++\\\\n++....++\\\\n++.xx.++\\\\n++....++\\\\n++++++++\\\\n++++++++\\\\n', '......\\\\n......\\\\n..xx..\\\\n......\\\\n......\\\\n', '++++++++\\\\n+......+\\\\n+......+\\\\n+..xx..+\\\\n+......+\\\\n+......+\\\\n++++++++\\\\n', '++++++++++\\\\n++++++++++\\\\n++......++\\\\n++......++\\\\n++..xx..++\\\\n++......++\\\\n++......++\\\\n++++++++++\\\\n++++++++++\\\\n', 'xxx\\\\n', '+++++\\\\n+xxx+\\\\n+++++\\\\n', '+++++++\\\\n+++++++\\\\n++xxx++\\\\n+++++++\\\\n+++++++\\\\n', '.....\\\\n.xxx.\\\\n.....\\\\n', '+++++++\\\\n+.....+\\\\n+.xxx.+\\\\n+.....+\\\\n+++++++\\\\n', '+++++++++\\\\n+++++++++\\\\n++.....++\\\\n++.xxx.++\\\\n++.....++\\\\n+++++++++\\\\n+++++++++\\\\n', '.......\\\\n.......\\\\n..xxx..\\\\n.......\\\\n.......\\\\n', '+++++++++\\\\n+.......+\\\\n+.......+\\\\n+..xxx..+\\\\n+.......+\\\\n+.......+\\\\n+++++++++\\\\n', '+++++++++++\\\\n+++++++++++\\\\n++.......++\\\\n++.......++\\\\n++..xxx..++\\\\n++.......++\\\\n++.......++\\\\n+++++++++++\\\\n+++++++++++\\\\n', 'xxxx\\\\n', '++++++\\\\n+xxxx+\\\\n++++++\\\\n', '++++++++\\\\n++++++++\\\\n++xxxx++\\\\n++++++++\\\\n++++++++\\\\n', '......\\\\n.xxxx.\\\\n......\\\\n', '++++++++\\\\n+......+\\\\n+.xxxx.+\\\\n+......+\\\\n++++++++\\\\n', '++++++++++\\\\n++++++++++\\\\n++......++\\\\n++.xxxx.++\\\\n++......++\\\\n++++++++++\\\\n++++++++++\\\\n', '........\\\\n........\\\\n..xxxx..\\\\n........\\\\n........\\\\n', '++++++++++\\\\n+........+\\\\n+........+\\\\n+..xxxx..+\\\\n+........+\\\\n+........+\\\\n++++++++++\\\\n', '++++++++++++\\\\n++++++++++++\\\\n++........++\\\\n++........++\\\\n++..xxxx..++\\\\n++........++\\\\n++........++\\\\n++++++++++++\\\\n++++++++++++\\\\n', 'xxxxx\\\\n', '+++++++\\\\n+xxxxx+\\\\n+++++++\\\\n', '+++++++++\\\\n+++++++++\\\\n++xxxxx++\\\\n+++++++++\\\\n+++++++++\\\\n', '.......\\\\n.xxxxx.\\\\n.......\\\\n', '+++++++++\\\\n+.......+\\\\n+.xxxxx.+\\\\n+.......+\\\\n+++++++++\\\\n', '+++++++++++\\\\n+++++++++++\\\\n++.......++\\\\n++.xxxxx.++\\\\n++.......++\\\\n+++++++++++\\\\n+++++++++++\\\\n', '.........\\\\n.........\\\\n..xxxxx..\\\\n.........\\\\n.........\\\\n', '+++++++++++\\\\n+.........+\\\\n+.........+\\\\n+..xxxxx..+\\\\n+.........+\\\\n+.........+\\\\n+++++++++++\\\\n', '+++++++++++++\\\\n+++++++++++++\\\\n++.........++\\\\n++.........++\\\\n++..xxxxx..++\\\\n++.........++\\\\n++.........++\\\\n+++++++++++++\\\\n+++++++++++++\\\\n', 'xxxxxx\\\\n', '++++++++\\\\n+xxxxxx+\\\\n++++++++\\\\n', '++++++++++\\\\n++++++++++\\\\n++xxxxxx++\\\\n++++++++++\\\\n++++++++++\\\\n', '........\\\\n.xxxxxx.\\\\n........\\\\n', '++++++++++\\\\n+........+\\\\n+.xxxxxx.+\\\\n+........+\\\\n++++++++++\\\\n', '++++++++++++\\\\n++++++++++++\\\\n++........++\\\\n++.xxxxxx.++\\\\n++........++\\\\n++++++++++++\\\\n++++++++++++\\\\n', '..........\\\\n..........\\\\n..xxxxxx..\\\\n..........\\\\n..........\\\\n', '++++++++++++\\\\n+..........+\\\\n+..........+\\\\n+..xxxxxx..+\\\\n+..........+\\\\n+..........+\\\\n++++++++++++\\\\n', '++++++++++++++\\\\n++++++++++++++\\\\n++..........++\\\\n++..........++\\\\n++..xxxxxx..++\\\\n++..........++\\\\n++..........++\\\\n++++++++++++++\\\\n++++++++++++++\\\\n', 'xxxxxxx\\\\n', '+++++++++\\\\n+xxxxxxx+\\\\n+++++++++\\\\n', '+++++++++++\\\\n+++++++++++\\\\n++xxxxxxx++\\\\n+++++++++++\\\\n+++++++++++\\\\n', '.........\\\\n.xxxxxxx.\\\\n.........\\\\n', '+++++++++++\\\\n+.........+\\\\n+.xxxxxxx.+\\\\n+.........+\\\\n+++++++++++\\\\n', '+++++++++++++\\\\n+++++++++++++\\\\n++.........++\\\\n++.xxxxxxx.++\\\\n++.........++\\\\n+++++++++++++\\\\n+++++++++++++\\\\n', '...........\\\\n...........\\\\n..xxxxxxx..\\\\n...........\\\\n...........\\\\n', '+++++++++++++\\\\n+...........+\\\\n+...........+\\\\n+..xxxxxxx..+\\\\n+...........+\\\\n+...........+\\\\n+++++++++++++\\\\n', '+++++++++++++++\\\\n+++++++++++++++\\\\n++...........++\\\\n++...........++\\\\n++..xxxxxxx..++\\\\n++...........++\\\\n++...........++\\\\n+++++++++++++++\\\\n+++++++++++++++\\\\n']\"]]", 
      "solution": "def okvir3( niz, odmik=1, debelina=1):\n    n = len(niz)+2*odmik+2*debelina\n    polna = n*\"+\"+\"\\n\"\n    prazna = debelina*\"+\"+(len(niz)+2*odmik)*\".\"+debelina*\"+\"+\"\\n\"\n    besedilna = debelina*\"+\"+odmik*\".\" + niz + odmik*\".\"+debelina*\"+\"+\"\\n\"\n    return debelina*polna+odmik*prazna+besedilna+odmik*prazna+debelina*polna", 
      "problem": 179, 
      "validation": "Check.equal(\"\"\"okvir3( \"banana\", 2, 2 )\"\"\", \"++++++++++++++\\n++++++++++++++\\n++..........++\\n++..........++\\n++..banana..++\\n++..........++\\n++..........++\\n++++++++++++++\\n++++++++++++++\\n\" )\nCheck.equal(\"\"\"okvir3( \"banana\", 2 )\"\"\", \"++++++++++++\\n+..........+\\n+..........+\\n+..banana..+\\n+..........+\\n+..........+\\n++++++++++++\\n\")\nCheck.equal(\"\"\"okvir3( \"banana\" )\"\"\", \"++++++++++\\n+........+\\n+.banana.+\\n+........+\\n++++++++++\\n\" )\n\nCheck.challenge([okvir3(a*\"x\") for a in range(1,8)])\nCheck.challenge([okvir3(a*\"x\",b) for a in range(1,8) for b in range(0,3)])\nCheck.challenge([okvir3(a*\"x\",b,c) for a in range(1,8) for b in range(0,3) for c in range(0,3)])"
    }
  }, 
  {
    "pk": 877, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `verjetnost.vrnitve(dolzina, poskusi = 100)`, ki v\ndanem \u0161tevilu poskusov z metodo Monte Carlo oceni verjetnost, da bo\nnaklju\u010dni sprehod dane dol\u017eine v ravnini na neki to\u010dki obiskal izhodi\u0161\u010de.", 
      "timestamp": "2012-12-07 20:37:16", 
      "challenge": "[]", 
      "solution": "verjetnost.vrnitve <- function(dolzina, poskusi = 100) {\n  vrnitev <- function(sprehod) {\n    any(apply(sprehod == c(0, 0), 1, all))\n  }\n  sum(replicate(poskusi, vrnitev(nakljucni.sprehod(dolzina)))) / poskusi\n}", 
      "problem": 292, 
      "validation": ""
    }
  }, 
  {
    "pk": 731, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Kot smo povedali na za\u010detku, vrsta za $\\ln(1+x)$ konvergira samo za\n$|x|<1$ oz. za $0<1+x<2$. Sestavite funkcijo `normaliziraj(y)`,\nki za vrednost $y>0$ vrne par `(z,k)`, da velja $0,1<z<1,9$ in $y=10^k z$.\nPri tem je za $y<0,1$ vrednost `k`, ki jo vrne funkcija, seveda negativna.", 
      "timestamp": "2012-07-12 10:29:15", 
      "challenge": "[]", 
      "solution": "def normaliziraj(y):\n    k=0\n    while y<=0.1:\n        k-=1\n        y*=10\n    while y>=1.9:\n        k+=1\n        y/=10\n    return (y,k)", 
      "problem": 234, 
      "validation": "Check.equal(\"normaliziraj(1)\", (1,0))\nCheck.equal(\"normaliziraj(0.1)\", (1,-1))\nCheck.equal(\"normaliziraj(1.9)\", (0.19,1))\nCheck.equal(\"normaliziraj(0.002)\", (0.2,-2))\nCheck.equal(\"normaliziraj(12345)\", (1.2345,4))\n\n##_rng=[1736]\n##for i in range(100): _rng.append((_rng[-1]*1103515245+12345)%2**32)\n##_m=max(_rng)/2000\n##_rng=[x/_m for x in _rng]\n##\n##for x in _rng:\n##    Check.challenge(normaliziraj(x),x)"
    }
  }, 
  {
    "pk": 553, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Logi\u010dni operator *ekskluzivni ali* ima naslednjo resni\u010dnostno tabelo\n(F predstavlja neresni\u010dno (False), T pa resni\u010dno (True) vrednost):\n\n    A  B | A XOR B\n    -----+--------\n    F  F |    F\n    F  T |    T\n    T  F |    T\n    T  T |    F\n\nSestavite funkcijo `xor(a,b)`, ki sprejme dve logi\u010dni vrednosti\nin vrne rezultat ekskluzivnega ali `a XOR b`.\n\nNamig: lahko si pomaga\u0161 z ekvivalenco.", 
      "timestamp": "2012-03-09 14:59:47", 
      "challenge": "[]", 
      "solution": "def xor(a,b):\n    return not ekvivalenca(a,b)", 
      "problem": 183, 
      "validation": "Check.equal(\"xor(False,False)\", False)\nCheck.equal(\"xor(False,True)\", True)\nCheck.equal(\"xor(True,False)\", True)\nCheck.equal(\"xor(True,True)\", False)"
    }
  }, 
  {
    "pk": 81, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `pascal(n)`, ki vrne simetri\u010dno Pascalovo matriko\ndimenzije `n` \u00d7 `n`.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"NA\", \"1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 66, 78, 91, 105, 120, 136, 153, 171, 190, 210, 1, 4, 10, 20, 35, 56, 84, 120, 165, 220, 286, 364, 455, 560, 680, 816, 969, 1140, 1330, 1540, 1, 5, 15, 35, 70, 126, 210, 330, 495, 715, 1001, 1365, 1820, 2380, 3060, 3876, 4845, 5985, 7315, 8855, 1, 6, 21, 56, 126, 252, 462, 792, 1287, 2002, 3003, 4368, 6188, 8568, 11628, 15504, 20349, 26334, 33649, 42504, 1, 7, 28, 84, 210, 462, 924, 1716, 3003, 5005, 8008, 12376, 18564, 27132, 38760, 54264, 74613, 100947, 134596, 177100, 1, 8, 36, 120, 330, 792, 1716, 3432, 6435, 11440, 19448, 31824, 50388, 77520, 116280, 170544, 245157, 346104, 480700, 657800, 1, 9, 45, 165, 495, 1287, 3003, 6435, 12870, 24310, 43758, 75582, 125970, 203490, 319770, 490314, 735471, 1081575, 1562275, 2220075, 1, 10, 55, 220, 715, 2002, 5005, 11440, 24310, 48620, 92378, 167960, 293930, 497420, 817190, 1307504, 2042975, 3124550, 4686825, 6906900, 1, 11, 66, 286, 1001, 3003, 8008, 19448, 43758, 92378, 184756, 352716, 646646, 1144066, 1961256, 3268760, 5311735, 8436285, 13123110, 20030010, 1, 12, 78, 364, 1365, 4368, 12376, 31824, 75582, 167960, 352716, 705432, 1352078, 2496144, 4457400, 7726160, 13037895, 21474180, 34597290, 54627300, 1, 13, 91, 455, 1820, 6188, 18564, 50388, 125970, 293930, 646646, 1352078, 2704156, 5200300, 9657700, 17383860, 30421755, 51895935, 86493225, 141120525, 1, 14, 105, 560, 2380, 8568, 27132, 77520, 203490, 497420, 1144066, 2496144, 5200300, 10400600, 20058300, 37442160, 67863915, 119759850, 206253075, 347373600, 1, 15, 120, 680, 3060, 11628, 38760, 116280, 319770, 817190, 1961256, 4457400, 9657700, 20058300, 40116600, 77558760, 145422675, 265182525, 471435600, 818809200, 1, 16, 136, 816, 3876, 15504, 54264, 170544, 490314, 1307504, 3268760, 7726160, 17383860, 37442160, 77558760, 155117520, 300540195, 565722720, 1037158320, 1855967520, 1, 17, 153, 969, 4845, 20349, 74613, 245157, 735471, 2042975, 5311735, 13037895, 30421755, 67863915, 145422675, 300540195, 601080390, 1166803110, 2203961430, 4059928950, 1, 18, 171, 1140, 5985, 26334, 100947, 346104, 1081575, 3124550, 8436285, 21474180, 51895935, 119759850, 265182525, 565722720, 1166803110, 2333606220, 4537567650, 8597496600, 1, 19, 190, 1330, 7315, 33649, 134596, 480700, 1562275, 4686825, 13123110, 34597290, 86493225, 206253075, 471435600, 1037158320, 2203961430, 4537567650, 9075135300, 17672631900, 1, 20, 210, 1540, 8855, 42504, 177100, 657800, 2220075, 6906900, 20030010, 54627300, 141120525, 347373600, 818809200, 1855967520, 4059928950, 8597496600, 17672631900, 35345263800\"]]", 
      "solution": "pascal <- function(n) {\n    outer(1 : n, 1 : n, function(i, j) choose(i + j - 2, i - 1))\n}", 
      "problem": 33, 
      "validation": "check$equal(dim(pascal(123)), c(123, 123))\ncheck$equal(pascal(3), matrix(c(1, 1, 1, 1, 2, 3, 1, 3, 6), 3))\ncheck$challenge(toString(pascal(20)))"
    }
  }, 
  {
    "pk": 202, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "**Rekonstrukcija najkraj\u0161e poti v Floyd-Warshallovem algoritmu**\n\nPogosto \u017eelimo poleg cene najcenej\u0161e poti izvedeti tudi pot samo.\nV ta namen priredimo Floyd-Warshallov algoritem. Da bomo lahko\nrekonstruirali najcenej\u0161e poti, si moramo za vsak `(i,j)` v\nfunkciji `floyd_warshall` zapomniti, pri katerem `k` je `d[i][j]`\nzasedel minimalno vrednost. V ta namen naredimo \u0161e tabelo `p`,\nv kateri nastavimo `p[i][j] = k` vsaki\u010d, ko nastavimo `d[i][j]`\nna `d[i][k] + d[k][j]`. Tabela `p` je na za\u010detku inicializirana\ntakole:\n\n* \u010de je `g[i][j] == inf` ali `i == j`, potem je `p[i][j] = None`,\n* sicer je `p[i][j] == j`.\n\nPomen tabele `p` bo po kon\u010danem algoritmu naslednji:\n\n* \u010de je `p[i][j] == None`, bodisi ni povezave med `i` in `j` bodisi je `i == j`,\n* sicer je `p[i][j]` tako vozli\u0161\u010de `k`, da preko njega vodi najcenej\u0161a pot med `i` in `j`.\n\nIz matrike cen najcenej\u0161ih poti `d` in matrike `p` lahko rekonstruiramo najcenej\u0161o\npot od `i` do `j` z naslednjim algoritmom:\n\n* \u010ce je `d[i][j] == inf`, vrni `None`, ker `i` in `j` nista povezana.\n* Naj bo `k = p[i][j]`.\n* \u010ce je `k` enak `None` ali `j`, vrni prazen seznam.\n* Sicer naj bosta `s` in `t` najkrajsi poti od `i` do `k` ter od `k` do `j`.\n* Vrni seznam `s + t`.\n* Na za\u010detek tako pridobljenega seznama je treba dodati \u0161e `i`.\n\nSestavi *dve* funkciji:\n\n1. `floyd_warshall_poti(g)`, ki sprejme graf `g` podan z matriko razdalj,\n   in vrne par `(d,p)`, kjer je `d` matrika najcenej\u0161ih poti, kot v obi\u010dajnem\n   Floyd-Warshallovem algoritmu in `p` matrika za rekonstrukcijo poti.\n\n2. `najkraj\u0161a_pot((d,p),i,j)`, ki sprejme par `(d,p)`, ki smo ga dobili s\n   funkcijo `floyd_warshall_poti(g)` ter vozli\u0161\u010di `i` in `j`. Funkcija vrne\n   seznam vozli\u0161\u010d, ki tvorijo najcenej\u0161o pot od `i` do `j`, ali `None`, \u010de\n   vozli\u0161\u010di `i` in `j` nista povezani.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"None\", \"[0]\"], [\"None\", \"[0]\"], [\"None\", \"None\"], [\"None\", \"[17, 13, 9, 5, 1, 0]\"], [\"None\", \"[17]\"], [\"None\", \"[0]\"], [\"None\", \"None\"], [\"None\", \"None\"], [\"None\", \"None\"], [\"None\", \"None\"], [\"None\", \"None\"], [\"None\", \"[17, 13, 9, 5, 1, 0]\"], [\"None\", \"[17]\"], [\"None\", \"None\"], [\"None\", \"None\"], [\"None\", \"None\"], [\"None\", \"None\"], [\"None\", \"[34, 30, 26, 22, 18, 14, 10, 6, 2, 1, 0]\"], [\"None\", \"[34, 30, 26, 22, 18, 17]\"], [\"None\", \"[34]\"], [\"None\", \"None\"], [\"None\", \"None\"], [\"None\", \"None\"], [\"None\", \"[51, 47, 43, 39, 35, 31, 27, 23, 19, 15, 11, 7, 3, 2, 1, 0]\"], [\"None\", \"[51, 47, 43, 39, 35, 31, 27, 23, 19, 18, 17]\"], [\"None\", \"[51, 47, 43, 39, 35, 34]\"], [\"None\", \"[51]\"], [\"None\", \"None\"], [\"None\", \"None\"], [\"None\", \"[68, 64, 60, 56, 52, 48, 44, 40, 36, 32, 28, 24, 20, 16, 12, 8, 4, 0]\"], [\"None\", \"[68, 64, 60, 56, 52, 48, 44, 40, 36, 32, 28, 24, 20, 19, 18, 17]\"], [\"None\", \"[68, 64, 60, 56, 52, 48, 44, 40, 36, 35, 34]\"], [\"None\", \"[68, 64, 60, 56, 52, 51]\"], [\"None\", \"[68]\"], [\"None\", \"None\"], [\"None\", \"[85, 81, 77, 73, 69, 65, 61, 57, 53, 49, 45, 41, 37, 33, 29, 25, 21, 17, 13, 9, 5, 1, 0]\"], [\"None\", \"[85, 81, 77, 73, 69, 65, 61, 57, 53, 49, 45, 41, 37, 33, 29, 25, 21, 17]\"], [\"None\", \"[85, 81, 77, 73, 69, 65, 61, 57, 53, 49, 45, 41, 37, 36, 35, 34]\"], [\"None\", \"[85, 81, 77, 73, 69, 65, 61, 57, 53, 52, 51]\"], [\"None\", \"[85, 81, 77, 73, 69, 68]\"], [\"None\", \"[85]\"]]", 
      "solution": "def floyd_warshall_poti(g):\n    n = len(g)\n    d = g[:]\n    p = [[(None if i == j or g[i][j] == inf else j) for j in range(n)] for i in range(n)]\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                if d[i][k] + d[k][j] < d[i][j]:\n                    d[i][j] = d[i][k] + d[k][j]\n                    p[i][j] = k\n    return (d,p)\n\ndef najkrajsa_pot(dp,i,j):\n    (d,p) = dp\n    def pot(i,j):\n        if d[i][j] == inf: return None\n        else:\n            k = p[i][j]\n            if k is None: return []\n            elif k == j or k == i: return [k]\n            else:\n                s = pot(i,k)\n                if s is None: return None\n                t = pot(k,j)\n                if t is None: return None\n                return s + t\n\n    s = pot(i,j)\n    return ([i] + s if s is not None else None)", 
      "problem": 59, 
      "validation": "Check.equal(\"\"\"floyd_warshall_poti([[0,4,2,inf], [inf,0,inf,3], [inf,1,0,5], [inf,1,1,0]])\"\"\",\n            ([[0, 3, 2, 6], [inf, 0, 4, 3], [inf, 1, 0, 4], [inf, 1, 1, 0]],\n             [[None, 2, 2, 2], [None, None, 3, 3], [None, 1, None, 1], [None, 1, 2, None]]))\n\nCheck.equal(\"\"\"najkrajsa_pot(floyd_warshall_poti([[0,4,2,inf], [inf,0,inf,3], [inf,1,0,5], [inf,1,1,0]]), 0, 0)\"\"\",\n            [0])\n\nCheck.equal(\"\"\"najkrajsa_pot(floyd_warshall_poti([[0,4,2,inf], [inf,0,inf,3], [inf,1,0,5], [inf,1,1,0]]), 3, 3)\"\"\",\n            [3])\n\nCheck.equal(\"\"\"najkrajsa_pot(floyd_warshall_poti([[0,4,2,inf], [inf,0,inf,3], [inf,1,0,5], [inf,1,1,0]]), 0, 3)\"\"\",\n            [0, 2, 1, 3])\n\nCheck.equal(\"\"\"najkrajsa_pot(floyd_warshall_poti([[0,4,2,inf], [inf,0,inf,3], [inf,1,0,5], [inf,1,1,0]]), 1, 0)\"\"\",\n            None)\n\nfor n in [5,20,100]:\n    dp = floyd_warshall_poti([[(0 if i == j else (1 if (i-j) in [1,4] else inf)) for j in range(n)] for i in range(n)])\n    for i in range(0,n,17):\n        for j in range(0,n,17):\n            Check.challenge(najkrajsa_pot(dp, i,j))"
    }
  }, 
  {
    "pk": 864, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `utezene.sredine(v, w)`, ki vrne vektor\n(z vektorjem `w`) ute\u017eenih aritmeti\u010dnih sredin zaporednih \u010dlenov\nvektorja `v`.\nTorej, za vektor $v = (v_1, v_2, \\dots, v_n)$ in ute\u017ei\n$w = (w_1, \\dots, w_k)$ je rezultat enak\n$$\n  (\\frac{w_1 v_1 + w_2 v_2 + \\dots + w_k v_k}{W},\n   \\frac{w_1 v_2 + w_2 v_3 + \\dots + w_k v_{k + 1}}{W},\n   \\dots,\n   \\frac{w_1 v_{n - k + 1} + w_2 v_{n - k + 2} + \\dots + w_k v_n}{W}),\n$$\nkjer je $W = w_1 + \\dots + w_k$.", 
      "timestamp": "2012-12-12 10:47:50", 
      "challenge": "[[\"c(-0.999990206550703, -0.536572918000435, 0.420167036826641, 0.99060735569487, 0.650287840157117, -0.287903316665065, -0.961397491879557, -0.750987246771676, 0.149877209662952, 0.912945250727628, 0.836655638536056, -0.00885130929040388, -0.846220404175171, -0.905578362006624, -0.132351750097773, 0.762558450479603, 0.956375928404503, 0.270905788307869, -0.663633884212968, -0.988031624092862, -0.404037645323065), 1:4\", \"0.314979, 0.587673, 0.320063, -0.241812, -0.581366, -0.386415, 0.163804, 0.563423, 0.445033, -0.082518, -0.534202, -0.494743, -0.00042, 0.49429, 0.534552, 0.083349, -0.444484, -0.563661\"], [\"c(-0.536572918000435, 0.420167036826641, 0.99060735569487, 0.650287840157117, -0.287903316665065, -0.961397491879557, -0.750987246771676, 0.149877209662952, 0.912945250727628, 0.836655638536056, -0.00885130929040388, -0.846220404175171, -0.905578362006624, -0.132351750097773, 0.762558450479603, 0.956375928404503, 0.270905788307869, -0.663633884212968, -0.988031624092862, -0.404037645323065, 0.551426681241691), 2:5\", \"0.528659, 0.355271, -0.144752, -0.51169, -0.408183, 0.070606, 0.48448, 0.452925, 0.004954, -0.447573, -0.488603, -0.080414, 0.401707, 0.5145, 0.154264, -0.347802, -0.5301, -0.225027\"], [\"c(0.420167036826641, 0.99060735569487, 0.650287840157117, -0.287903316665065, -0.961397491879557, -0.750987246771676, 0.149877209662952, 0.912945250727628, 0.836655638536056, -0.00885130929040388, -0.846220404175171, -0.905578362006624, -0.132351750097773, 0.762558450479603, 0.956375928404503, 0.270905788307869, -0.663633884212968, -0.988031624092862, -0.404037645323065, 0.551426681241691, 0.999911860107267), 3:6\", \"0.374831, -0.090829, -0.472981, -0.420276, 0.018829, 0.440623, 0.45731, 0.053549, -0.399445, -0.485191, -0.124855, 0.350273, 0.503361, 0.193661, -0.294089, -0.511456, -0.258592, 0.23202\"], [\"c(0.99060735569487, 0.650287840157117, -0.287903316665065, -0.961397491879557, -0.750987246771676, 0.149877209662952, 0.912945250727628, 0.836655638536056, -0.00885130929040388, -0.846220404175171, -0.905578362006624, -0.132351750097773, 0.762558450479603, 0.956375928404503, 0.270905788307869, -0.663633884212968, -0.988031624092862, -0.404037645323065, 0.551426681241691, 0.999911860107267, 0.529082686120024), 4:7\", \"-0.056515, -0.448348, -0.427972, -0.01412, 0.412714, 0.4601, 0.084473, -0.368818, -0.48302, -0.153135, 0.317541, 0.496272, 0.218732, -0.259909, -0.499591, -0.279951, 0.197074, 0.492911\"], [\"c(0.650287840157117, -0.287903316665065, -0.961397491879557, -0.750987246771676, 0.149877209662952, 0.912945250727628, 0.836655638536056, -0.00885130929040388, -0.846220404175171, -0.905578362006624, -0.132351750097773, 0.762558450479603, 0.956375928404503, 0.270905788307869, -0.663633884212968, -0.988031624092862, -0.404037645323065, 0.551426681241691, 0.999911860107267, 0.529082686120024, -0.428182669496151), 5:8\", \"-0.431295, -0.4333, -0.036931, 0.393392, 0.462032, 0.105882, -0.347615, -0.481517, -0.172714, 0.294881, 0.491364, 0.236089, -0.236245, -0.491377, -0.294739, 0.172881, 0.481554, 0.347489\"], [\"c(-0.287903316665065, -0.961397491879557, -0.750987246771676, 0.149877209662952, 0.912945250727628, 0.836655638536056, -0.00885130929040388, -0.846220404175171, -0.905578362006624, -0.132351750097773, 0.762558450479603, 0.956375928404503, 0.270905788307869, -0.663633884212968, -0.988031624092862, -0.404037645323065, 0.551426681241691, 0.999911860107267, 0.529082686120024, -0.428182669496151, -0.991778853443116), 6:9\", \"-0.437207, -0.053659, 0.379223, 0.463449, 0.121582, -0.332066, -0.480415, -0.187072, 0.278264, 0.487765, 0.248817, -0.218892, -0.485353, -0.305583, 0.155139, 0.473227, 0.356232, -0.088281\"], [\"c(-0.961397491879557, -0.750987246771676, 0.149877209662952, 0.912945250727628, 0.836655638536056, -0.00885130929040388, -0.846220404175171, -0.905578362006624, -0.132351750097773, 0.762558450479603, 0.956375928404503, 0.270905788307869, -0.663633884212968, -0.988031624092862, -0.404037645323065, 0.551426681241691, 0.999911860107267, 0.529082686120024, -0.428182669496151, -0.991778853443116, -0.643538133356999), 7:10\", \"-0.066451, 0.368387, 0.464532, 0.133588, -0.320176, -0.479572, -0.198051, 0.265557, 0.485013, 0.258551, -0.205622, -0.480747, -0.313875, 0.141572, 0.466858, 0.362918, -0.074688, -0.443626\"], [\"c(-0.750987246771676, 0.149877209662952, 0.912945250727628, 0.836655638536056, -0.00885130929040388, -0.846220404175171, -0.905578362006624, -0.132351750097773, 0.762558450479603, 0.956375928404503, 0.270905788307869, -0.663633884212968, -0.988031624092862, -0.404037645323065, 0.551426681241691, 0.999911860107267, 0.529082686120024, -0.428182669496151, -0.991778853443116, -0.643538133356999, 0.296368578709385), 8:11\", \"0.359833, 0.465387, 0.143066, -0.310789, -0.478906, -0.20672, 0.255524, 0.48284, 0.266235, -0.195145, -0.47711, -0.320422, 0.130861, 0.461831, 0.368196, -0.063957, -0.437308, -0.4086\"], [\"c(0.149877209662952, 0.912945250727628, 0.836655638536056, -0.00885130929040388, -0.846220404175171, -0.905578362006624, -0.132351750097773, 0.762558450479603, 0.956375928404503, 0.270905788307869, -0.663633884212968, -0.988031624092862, -0.404037645323065, 0.551426681241691, 0.999911860107267, 0.529082686120024, -0.428182669496151, -0.991778853443116, -0.643538133356999, 0.296368578709385, 0.963795386284088), 9:12\", \"0.46608, 0.150739, -0.30319, -0.478368, -0.213737, 0.247403, 0.481082, 0.272456, -0.186665, -0.474166, -0.325722, 0.12219, 0.457761, 0.372468, -0.05527, -0.432193, -0.41176, -0.012757\"], [\"c(0.912945250727628, 0.836655638536056, -0.00885130929040388, -0.846220404175171, -0.905578362006624, -0.132351750097773, 0.762558450479603, 0.956375928404503, 0.270905788307869, -0.663633884212968, -0.988031624092862, -0.404037645323065, 0.551426681241691, 0.999911860107267, 0.529082686120024, -0.428182669496151, -0.991778853443116, -0.643538133356999, 0.296368578709385, 0.963795386284088, 0.745113160479349), 10:13\", \"0.157078, -0.296912, -0.477923, -0.219533, 0.240694, 0.479629, 0.277595, -0.179659, -0.471734, -0.3301, 0.115027, 0.454399, 0.375998, -0.048093, -0.427968, -0.414371, -0.019803, 0.392971\"]]", 
      "solution": "utezene.sredine <- function(v, w){\n  n <- length(v)\n  k <- length(w)\n  delni <- rep(0, n - k + 1)\n  for(i in 1 : k) {\n    delni <- delni + w[i] * v[i : (n - k + i)]\n  }\n  return(delni / sum(w))\n}", 
      "problem": 281, 
      "validation": "check$equal(utezene.sredine(1 : 10, c(1, 1)), 0.5 + 1 : 9)\ncheck$equal(utezene.sredine(1 : 10, c(1, 2, 1, 2)), c(4, 5.5, 7 , 8.5, 10, 11.5, 13) / 1.5)\ncheck$equal(utezene.sredine(rep(4, 10), 1 : 4), rep(4, 7))\nfor(i in 1 : 10) {\n  podatki <- list(v = sin((i + 10) : (i + 30)), w = i : (i + 3))\n  check$challenge(utezene.sredine(podatki$v, podatki$w), podatki)\n}"
    }
  }, 
  {
    "pk": 556, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "S pomo\u010djo operacije `NeIn` in funkcije `Ne` sestavite funkcijo\n`Ali(a, b)`, ki vrne rezultat $a \\lor b$. Pri tem smete uporabiti\nsamo funkciji `NeIn` in `Ne` in nobenih drugih logi\u010dnih operacij.", 
      "timestamp": "2012-03-11 21:55:29", 
      "challenge": "[]", 
      "solution": "def Ali(a, b):\n    return NeIn(Ne(a), Ne(b))", 
      "problem": 184, 
      "validation": "Check.equal(\"Ali(False, False)\", False)\nCheck.equal(\"Ali(False, True)\", True)\nCheck.equal(\"Ali(True, False)\", True)\nCheck.equal(\"Ali(True, True)\", True)\n\nfor op in ['not', 'and', 'or', '|', '&']:\n    if op in re.sub(r'#.*', '', Check.current[\"solution\"]):\n        Check.error(\"V funkciji nastopa operacija '{0}'.\".format(op))"
    }
  }, 
  {
    "pk": 648, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite metodo `vsotaKalorij(vhod, izhod)`, ki kot argumente dobi dve\ndatoteki: vhodno (kamor Tina zapisuje svoje podatke) in izhodno. Na\nizhodno datoteko naj za vsako vrstico v vhodni datoteki izpi\u0161e vsoto\nkalori\u010dnih vrednosti hrane tistega dne. \u0160tevila v izhodni datoteki naj\nbodo vsako v svoji vrstici.", 
      "timestamp": "2012-05-14 06:35:19", 
      "challenge": "[]", 
      "solution": "def vsotaKalorij(vhod, izhod):\n    with open(vhod) as f:\n        with open(izhod, \"w\") as g: \n            for vrstica in f:\n                print(sum(vrniKalorije(vrstica)), file = g)", 
      "problem": 211, 
      "validation": "def _makefile2(ime):\n    with open(ime, \"w\") as f:\n        print(\"2,35,18,5,78\", file=f)\n        print(\"13,20\", file=f)\n        print(\"8\", file=f)\n        print(\"15,84,2,4,5,16,78,44,21\", file=f)\n        print(\"10,5,50,40\", file=f)\n\ndef _makefile3(ime):\n    with open(ime, \"w\") as f:\n        print(\"138\", file=f)\n        print(\"33\", file=f)\n        print(\"8\", file=f)\n        print(\"269\", file=f)\n        print(\"105\", file=f)\n\ndef _istevseenodatoteke(ena,dva):\n    with open(ena) as f1, open(dva) as f2:\n        vrste1 = [l.strip() for l in f1.readlines()]\n        vrste1.sort()\n        vrste2 = [l.strip() for l in f2.readlines()]\n        vrste2.sort()\n        if vrste1 == vrste2:\n            return True\n        else:\n            print(\"Izhodna datoteka vsebuje naslednje vrstice: \")\n            print(vrste1)\n            print(\"Morala pa bi vsebovati naslednje vrstice: \")\n            print(vrste2)\n   \ndef _removefiles(*ime):\n    import os\n    for i in ime: os.remove(i)\n\n_makefile2(\"_3c.in\")\n_makefile3(\"_3co.out\")\nvsotaKalorij(\"_3c.in\", \"_3c.out\")\nif not _istevseenodatoteke(\"_3c.out\", \"_3co.out\"):\n    Check.error(\"Izhodna datoteka je napa\u010dna\")\n_removefiles(\"_3c.in\", \"_3c.out\", \"_3co.out\")"
    }
  }, 
  {
    "pk": 22, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `zaokrozi(stevilo)`, ki dano \u0161tevilo zaokro\u017ei na \n0,5 natan\u010dno.\n\n_Namig:_ uporabite funkcijo `round` in manj\u0161i trik.", 
      "timestamp": "2012-10-22 10:27:37", 
      "challenge": "[]", 
      "solution": "zaokrozi <- function(x) {\n  round(2 * x) / 2\n}", 
      "problem": 16, 
      "validation": "check$equal(zaokrozi(13.3), 13.5)\ncheck$equal(zaokrozi(13.6), 13.5)\ncheck$equal(zaokrozi(13.8), 14)\ncheck$equal(zaokrozi(-13.8), -14)\ncheck$equal(zaokrozi(-13.6), -13.5)"
    }
  }, 
  {
    "pk": 566, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Napi\u0161i funkcijo `maxCollatz(n)`, ki poi\u0161\u010de najve\u010dji \u010dlen Collatzovega zaporedja z za\u010detnim \u010dlenom `n`.", 
      "timestamp": "2012-03-19 08:36:42", 
      "challenge": "[]", 
      "solution": "def maxCollatz(n):\r\n    m = n\r\n    while n>1:\r\n        n = collatz(n)\r\n        m = max(m, n)\r\n    return m", 
      "problem": 186, 
      "validation": "Check.equal('maxCollatz(1)', 1)\r\nCheck.equal('maxCollatz(2)', 2)\r\nCheck.equal('maxCollatz(42)', 64)"
    }
  }, 
  {
    "pk": 612, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavi funkcijo `inverz(sifra)`, ki vrne inverz dane \u0161ifre, \u010de ta\nobstaja. V nasprotnem primeru funkcija vrne `None`.", 
      "timestamp": "2012-05-07 01:49:56", 
      "challenge": "[]", 
      "solution": "def inverz(sifra):\n    if not jeSifra(sifra):\n        return None\n    inv = {}\n    for k, v in sifra.items():\n        inv[v]=k\n    return inv", 
      "problem": 202, 
      "validation": "Check.equal(\"inverz({'A': 'B', 'B': 'C', 'C': 'A'})\", {'A': 'C', 'B': 'A', 'C': 'B'})\nCheck.equal(\"inverz({'A': 'B', 'B': 'B', 'C': 'A'})\", None)\nCheck.equal(\"inverz(nasa_sifra)\", {'\u010c': 'T', 'A': 'J', 'C': 'D', 'B': 'I', 'E': 'F', 'D': '\u017d', 'G': 'U', 'F': 'H', 'I': 'K', 'H': 'L', 'K': '\u010c', 'J': 'P', 'M': 'B', 'L': 'R', 'O': 'A', 'N': 'V', 'P': 'G', 'S': '\u0160', 'R': 'O', 'U': 'M', 'T': 'S', 'V': 'E', 'Z': 'C', '\u0160': 'N', '\u017d': 'Z'})"
    }
  }, 
  {
    "pk": 27, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `collatz(n)`, ki izra\u010duna dol\u017eino Collatzovega\r\nzaporedja, ki se za\u010dne s \u0161tevilom `n`.", 
      "timestamp": "2012-10-22 10:22:31", 
      "challenge": "[]", 
      "solution": "collatz <- function(n) {\r\n  dolzina <- 0\r\n  while(n != 1) {\r\n    if(n %% 2 == 0) {\r\n      n <- n / 2\r\n    } else {\r\n      n <- 3 * n + 1\r\n    }\r\n    dolzina <- dolzina + 1\r\n  }\r\n  return(dolzina)\r\n}", 
      "problem": 17, 
      "validation": "check$equal(collatz(5), 5)\r\ncheck$equal(collatz(10), 6)\r\ncheck$equal(collatz(27), 111)"
    }
  }, 
  {
    "pk": 126, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "V spremenljivko `moskost` shranite vektor, v katerem so shranjena\nrazmerja med mo\u0161kimi in \u017eenskami po posameznih razredih in\nstarostih.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"NA\", \"5, 0.846154, 1.548387, NaN, 1.215278, 1.806452, 2.8, 37.478261\"]]", 
      "solution": "moski <- apply(Titanic[, \"Male\", , ], c(1, 2), sum)\nzenske <- apply(Titanic[, \"Female\", , ], c(1, 2), sum)\nmoskost <- moski / zenske", 
      "problem": 45, 
      "validation": "check$equal(moskost[\"1st\", \"Child\"], 5)\ncheck$equal(moskost[\"3rd\", \"Adult\"], 2.8)\ncheck$challenge(toString(round(moskost, 6)))"
    }
  }, 
  {
    "pk": 770, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `prepis(a, vhod, izhod)`, ki prebere tekstovno\ndatoteko `vhod` ter pre\u0161teje \u0161tevilo znakov `a` v vsaki vrstici in doda\nto \u0161tevilo v oklepaju na konec vsake vrstice.\n\n\u010ce je npr. v eni vrstici zapisano `Banane so rumene.`, bo v tej vrstici\npo klicu `prepis(\"n\", vhod, izhod)` v novi datoteki pisalo\n`Banane so rumene. (3)`", 
      "timestamp": "2012-09-05 09:34:51", 
      "challenge": "[]", 
      "solution": "def prepis(a,vhod,izhod):\n    with open(vhod) as f:\n        with open(izhod,'w') as g:\n            for vrstica in f:\n                v = vrstica.strip('\\n')\n                print(v,\" (\",prestej(a,v),\")\", sep='', file=g)", 
      "problem": 247, 
      "validation": "_d=\"\"\"ena (1)\\nbanana (2)\\nse (0)\\nena (1)\\nbanana (2)\\nin en kup n-jev!! (3)\"\"\"\nwith open(\"_test.2\",\"w\") as _f:\n    _f.write(_d)\n\nprepis('n','_test.1','_test.1o')\nif not _istedatoteke('_test.1o','_test.2'):\n    Check.error('Izhodna datoteka je napa\u010dna.')"
    }
  }, 
  {
    "pk": 178, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `izstopna(A, b, vst)`, ki sprejme matriko\r\nkoeficientov `A` in vektor `b` iz danega slovarja ter indeks `vst` vstopne\r\nnebazne spremenljivke, vrne pa indeks izstopne bazne spremenljivke.\r\n\r\nIzstopno spremenljivko dolo\u010dite tako, da poi\u0161\u010dete pripadajo\u010do omejitev,\r\nki najbolj omejuje vstopno spremenljivko. (Nenegativni koeficienti v\r\nmatriki `A` spremenljivke ne omejujejo).\r\n\r\n\u010ce je problem neomejen, vrnite napako z ukazom `stop(\"Problem je neomejen\")`.\r\n\u010ce problem nima re\u0161itve, vrnite napako z ukazom `stop(\"Problem nima resitve\")`.", 
      "timestamp": "2012-10-23 12:58:06", 
      "challenge
      "solution": "izstopna <- function(A, b, vst) {\r\n  omejitve <- - b / A[, vst]\r\n  omejitve[A[, vst] >= 0] <- Inf\r\n  if(all(omejitve == Inf)) {\r\n    stop(\"Problem je neomejen\")\r\n  } else if(min(omejitve) < 0) {\r\n    stop(\"Problem nima resitve\")\r\n  } else {\r\n    return(which.min(omejitve))\r\n  }\r\n}", 
      "problem": 54, 
      "validation": "check$equal(izstopna(slovar.2$A, slovar.2$b, 1), 1)\r\ncheck$equal(izstopna(slovar.2$A, slovar.2$b, 2), 3)\r\ncheck$equal(izstopna(slovar.3$A, slovar.3$b, 2), 3)\r\ncheck$equal(izstopna(slovar.3$A, slovar.3$b, 3), 2)\r\ncheck$equal(izstopna(slovar.4$A, slovar.4$b, 1), 2)\r\ncheck$equal(izstopna(slovar.3$A, -slovar.3$b, 3), exception = \"Problem nima resitve\")\r\ncheck$equal(izstopna(-slovar.3$A, slovar.3$b, 1), exception = \"Problem je neomejen\")\r\ncheck$equal(izstopna(matrix(c(0, -1, -1), nrow = 3), c(0, 0, 1), 1), 2)\r\ncheck$equal(izstopna(matrix(c(0, 1, -1), nrow = 3), c(0, 0, 1), 1), 3)\r\n\r\nfor (i in 1 : 15) {\r\n  for (j in 1 : 15) {\r\n    check$challenge(izstopna(round(matrix(sin(i * (1 : 300)), 15), 5),\r\n                             round(abs(cos(i * (1 : 15))), 5), j))\r\n  }\r\n}"
    }
  }, 
  {
    "pk": 129, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "V spremenljivko `razmerje.spolov` shranite matriko, v katerem je za\nvsako barvo las in o\u010di zapisano razmerje med \u017eenskami in mo\u0161kimi s\ns tema dvema barvama las in o\u010di.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"NA\", \"1.125, 1.245283, 1.6, 1.333333, 0.818182, 0.68, 0.7, 2.133333, 0.5, 1.16, 1, 1, 0.666667, 0.933333, 1, 1\"]]", 
      "solution": "razmerje.spolov <- HairEyeColor[, , \"Female\"] / HairEyeColor[, , \"Male\"]", 
      "problem": 46, 
      "validation": "check$equal(razmerje.spolov[\"Brown\", \"Blue\"], 0.68)\ncheck$equal(razmerje.spolov[\"Red\", \"Green\"], 1)\ncheck$challenge(toString(round(razmerje.spolov, 6)))"
    }
  }, 
  {
    "pk": 836, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `newton(f, g, x0, eps)`, ki iz za\u010detnega pribli\u017eka `x0`\nz Newtonovim algoritmom poi\u0161\u010de ni\u010dlo funkcije `f` z odvodom `g`.\nAlgoritem ustavite, ko se vrednost funkcije `f` v pribli\u017eku od ni\u010dle\nrazlikuje za manj kot `eps`, katerega privzeta vrednost naj bo `1e-6`.\n\n    > newton(function(x) x ^ 2 - 4 * x - 5, function(x) 2 * x - 4, 0)\n    [1] -1\n    > newton(sin, cos, 3)\n    [1] 3.141593\n    > newton(sin, cos, 3, eps = 0.001)\n    [1] 3.142547\n    > newton(function(x) exp(x) - 3, exp, 3)\n    [1] 1.098612", 
      "timestamp": "2012-10-30 10:21:31", 
      "challenge": "[]", 
      "solution": "newton <- function(f, g, x0, eps = 1e-6) {\n  x <- x0\n  while(abs(f(x)) >= eps) {\n    x <- x - f(x) / g(x)\n  }\n  return(x)\n}", 
      "problem": 270, 
      "validation": "check$equal(newton(function(x) x ^ 2 - 4, function(x) 2 * x, -1, eps = 1e-8), -2)\ncheck$equal(newton(sin, cos, 3, eps = 1e-8), pi)\ncheck$equal(newton(function(x) exp(x) - 3, exp, 3, eps = 1e-8), log(3))"
    }
  }, 
  {
    "pk": 499, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "\u0160tevilo je _popolnoma nepopolno_, kadar je njegova nepopolnost ve\u010dja od\nnjega samega.\n\nSestavite funkcijo `popolnomaNepopolno(n)`, ki vrne prvo popolnoma\nnepopolno \u0161tevilo, ve\u010dje ali enako `n`.", 
      "timestamp": "2012-06-04 08:46:52", 
      "challenge": "[[\"None\", \"180\"], [\"None\", \"180\"], [\"None\", \"180\"], [\"None\", \"180\"], [\"None\", \"180\"], [\"None\", \"180\"], [\"None\", \"180\"], [\"None\", \"180\"], [\"None\", \"180\"], [\"None\", \"180\"], [\"None\", \"180\"], [\"None\", \"180\"], [\"None\", \"180\"], [\"None\", \"180\"], [\"None\", \"180\"], [\"None\", \"180\"], [\"None\", \"180\"], [\"None\", \"180\"], [\"None\", \"240\"], [\"None\", \"240\"], [\"None\", \"240\"], [\"None\", \"240\"], [\"None\", \"240\"], [\"None\", \"240\"], [\"None\", \"360\"], [\"None\", \"360\"], [\"None\", \"360\"], [\"None\", \"360\"], [\"None\", \"360\"], [\"None\", \"360\"], [\"None\", \"360\"], [\"None\", \"360\"], [\"None\", \"360\"], [\"None\", \"360\"], [\"None\", \"360\"], [\"None\", \"360\"], [\"None\", \"420\"], [\"None\", \"420\"], [\"None\", \"420\"], [\"None\", \"420\"], [\"None\", \"420\"], [\"None\", \"420\"], [\"None\", \"480\"], [\"None\", \"480\"], [\"None\", \"480\"], [\"None\", \"480\"], [\"None\", \"480\"], [\"None\", \"480\"], [\"None\", \"504\"], [\"None\", \"504\"], [\"None\", \"504\"], [\"None\", \"540\"], [\"None\", \"540\"], [\"None\", \"540\"], [\"None\", \"600\"], [\"None\", \"600\"], [\"None\", \"600\"], [\"None\", \"600\"], [\"None\", \"600\"], [\"None\", \"600\"], [\"None\", \"660\"], [\"None\", \"660\"], [\"None\", \"660\"], [\"None\", \"660\"], [\"None\", \"660\"], [\"None\", \"660\"], [\"None\", \"720\"], [\"None\", \"720\"], [\"None\", \"720\"], [\"None\", \"720\"], [\"None\", \"720\"], [\"None\", \"720\"], [\"None\", \"780\"], [\"None\", \"780\"], [\"None\", \"780\"], [\"None\", \"780\"], [\"None\", \"780\"], [\"None\", \"780\"], [\"None\", \"840\"], [\"None\", \"840\"], [\"None\", \"840\"], [\"None\", \"840\"], [\"None\", \"840\"], [\"None\", \"840\"], [\"None\", \"900\"], [\"None\", \"900\"], [\"None\", \"900\"], [\"None\", \"900\"], [\"None\", \"900\"], [\"None\", \"900\"], [\"None\", \"960\"], [\"None\", \"960\"], [\"None\", \"960\"], [\"None\", \"960\"], [\"None\", \"960\"], [\"None\", \"960\"], [\"None\", \"1008\"], [\"None\", \"1008\"], [\"None\", \"1008\"], [\"None\", \"1008\"]]", 
      "solution": "def popolnomaNepopolno(n):\n    while(nepopolnost(n) <= n):\n        n += 1\n    return n", 
      "problem": 162, 
      "validation": "Check.equal('popolnomaNepopolno(42)', 180)\nCheck.equal('popolnomaNepopolno(181)', 240)\nCheck.equal('popolnomaNepopolno(241)', 360)\nCheck.equal('popolnomaNepopolno(361)', 420)\nfor i in range(1, 1000, 10):\n    Check.challenge(popolnomaNepopolno(i))"
    }
  }, 
  {
    "pk": 31, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `vsebuje(niz1, niz2)`, ki za parametra dobi dva niza\nter vrne `True`, \u010de in samo \u010de je mogo\u010de prvi niz dobiti tako, da v\ndrugi niz na poljubnih mestih vstavljamo dodatne znake. (povedano\ndruga\u010de, \u010de prvi niz vsebuje vse znake iz drugega niza v ustreznem\nvrstnem redu).\n\nIz besede 'ROLA' lahko na primer z vrivanjem znakov dobimo besedo\n'pRikOLicA'. Med velikimi in malimi tiskanimi \u010drkami strogo lo\u010dujemo.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"]]", 
      "solution": "def vsebuje(niz1, niz2):\n    # v spremenljivki m hranimo indeks znaka v malem nizu, ki ga i\u0161\u010demo\n    m = 0\n    for z in niz1:\n        # \u010de smo na\u0161li znak na indeksu m, i\u0161\u010demo naslednjega\n        if niz2[m] == z: m += 1\n        # \u010de smo na\u0161li vse znake v malem nizu, kon\u010damo\n        if m == len(niz2): return True\n    # \u010de se zanka kon\u010da, vseh znakov nismo na\u0161li\n    return False", 
      "problem": 18, 
      "validation": "Check.equal(\"vsebuje('milnica drazi vaso kozo', 'mladi voz')\", True)\nCheck.equal(\"vsebuje('klobasa', 'klasa')\", True)\nCheck.equal(\"vsebuje('klobasa','salo')\", False)\nfor i in range(50):\n    for j in range(20):\n        Check.challenge(vsebuje(str(i), str(j)))"
    }
  }, 
  {
    "pk": 326, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavi funkcijo `pravokotnika(a1x, a1y, b1x, b1y, a2x, a2y, b2x, b2y)`,\nki bo izra\u010dunala obseg in povr\u0161ino unije dveh pravokotnikov. Stranice\npravokotnikov so vzporedne koordinatnima osema. Vsak pravokotnik je\npodan s koordinatami (katerihkoli) dveh nasprotnih si ogli\u0161\u010d.\n\nPrimer:\n\n    >>> pravokotnika(1, 1, 5, 5, 6, 8, 8, 3)\n    (30, 26)\n    >>> pravokotnika(1, 1, 5, 5, 4, 8, 8, 3)\n    (28, 34)", 
      "timestamp": "2012-03-12 09:54:57", 
      "challenge": "[[\"(9, 15, 11, 2, 9, 16, 18, 5)\", \"(46, 105)\"], [\"(10, 11, 14, 10, 10, 12, 4, 5)\", \"(34, 46)\"], [\"(16, 3, 5, 8, 2, 14, 19, 16)\", \"(70, 89)\"], [\"(3, 15, 12, 4, 16, 19, 11, 0)\", \"(64, 183)\"], [\"(7, 4, 1, 4, 17, 19, 16, 13)\", \"(26, 6)\"], [\"(8, 4, 3, 10, 15, 19, 13, 11)\", \"(42, 46)\"], [\"(17, 8, 13, 2, 13, 19, 2, 17)\", \"(46, 46)\"], [\"(19, 19, 10, 11, 7, 12, 12, 7)\", \"(48, 95)\"], [\"(5, 18, 8, 1, 8, 9, 3, 19)\", \"(46, 74)\"], [\"(3, 19, 19, 9, 13, 19, 16, 1)\", \"(68, 184)\"], [\"(1, 7, 9, 11, 17, 10, 9, 8)\", \"(40, 48)\"], [\"(12, 5, 6, 13, 18, 16, 18, 1)\", \"(58, 48)\"], [\"(10, 8, 12, 19, 16, 4, 9, 17)\", \"(44, 95)\"], [\"(4, 2, 18, 1, 19, 14, 17, 5)\", \"(52, 32)\"], [\"(1, 13, 11, 5, 4, 15, 8, 5)\", \"(40, 88)\"], [\"(14, 3, 6, 0, 13, 8, 3, 14)\", \"(54, 84)\"], [\"(14, 12, 13, 16, 0, 8, 15, 17)\", \"(48, 135)\"], [\"(2, 13, 16, 17, 2, 5, 12, 17)\", \"(52, 136)\"], [\"(16, 1, 5, 6, 6, 6, 3, 10)\", \"(44, 67)\"], [\"(10, 2, 16, 7, 9, 0, 2, 2)\", \"(40, 44)\"], [\"(6, 19, 3, 3, 9, 7, 17, 6)\", \"(56, 56)\"], [\"(13, 5, 5, 2, 5, 3, 1, 0)\", \"(34, 36)\"], [\"(15, 8, 1, 17, 6, 14, 10, 12)\", \"(46, 126)\"], [\"(15, 10, 17, 15, 13, 19, 11, 10)\", \"(36, 28)\"], [\"(13, 4, 18, 4, 10, 19, 15, 0)\", \"(54, 95)\"], [\"(18, 10, 17, 10, 1, 18, 19, 6)\", \"(60, 216)\"], [\"(13, 14, 5, 2, 16, 8, 5, 0)\", \"(50, 136)\"], [\"(2, 18, 6, 18, 6, 2, 1, 1)\", \"(20, 5)\"], [\"(16, 17, 6, 15, 12, 1, 5, 19)\", \"(58, 134)\"], [\"(12, 4, 8, 15, 1, 16, 0, 4)\", \"(56, 56)\"], [\"(2, 7, 14, 14, 1, 8, 12, 5)\", \"(44, 107)\"], [\"(6, 11, 13, 2, 7, 9, 14, 3)\", \"(34, 69)\"], [\"(10, 12, 18, 17, 13, 16, 10, 12)\", \"(26, 40)\"], [\"(4, 18, 9, 8, 5, 5, 6, 8)\", \"(36, 53)\"], [\"(3, 6, 5, 7, 12, 9, 11, 19)\", \"(28, 12)\"], [\"(19, 1, 7, 6, 1, 3, 0, 4)\", \"(38, 61)\"], [\"(8, 17, 4, 9, 13, 9, 12, 14)\", \"(36, 37)\"], [\"(5, 9, 6, 17, 6, 11, 3, 12)\", \"(22, 10)\"], [\"(7, 8, 4, 19, 14, 0, 1, 14)\", \"(64, 197)\"], [\"(10, 11, 12, 10, 15, 2, 5, 4)\", \"(30, 22)\"], [\"(17, 10, 15, 6, 7, 12, 14, 16)\", \"(34, 36)\"], [\"(4, 1, 2, 2, 19, 8, 13, 19)\", \"(40, 68)\"], [\"(3, 1, 8, 9, 2, 1, 12, 15)\", \"(48, 140)\"], [\"(10, 10, 12, 2, 17, 7, 3, 8)\", \"(44, 28)\"], [\"(9, 13, 18, 19, 7, 5, 11, 0)\", \"(48, 74)\"], [\"(12, 14, 16, 11, 5, 4, 14, 1)\", \"(38, 39)\"], [\"(6, 0, 13, 5, 17, 19, 19, 12)\", \"(42, 49)\"], [\"(0, 10, 15, 15, 4, 13, 19, 14)\", \"(48, 79)\"], [\"(9, 6, 3, 17, 18, 7, 1, 6)\", \"(56, 77)\"], [\"(14, 15, 18, 1, 15, 1, 8, 10)\", \"(48, 110)\"]]", 
      "solution": "def pravokotnika(ax1, ay1, bx1, by1, ax2, ay2, bx2, by2):\n    if ax1 > bx1: ax1, bx1 = bx1, ax1\n    if ay1 > by1: ay1, by1 = by1, ay1\n    if ax2 > bx2: ax2, bx2 = bx2, ax2\n    if ay2 > by2: ay2, by2 = by2, ay2\n\n    ax3 = max(ax1, ax2)\n    ay3 = max(ay1, ay2)\n    bx3 = min(bx1, bx2)\n    by3 = min(by1, by2)\n\n    obseg = 2 * (bx1 - ax1 + by1 - ay1 + bx2 - ax2 + by2 - ay2)\n    ploscina = (bx1 - ax1) * (by1 - ay1) + (bx2 - ax2) * (by2 - ay2)\n\n    if ax3 <= bx3 and ay3 <= by3:\n        obseg -= 2 * (bx3 - ax3 + by3 - ay3)\n        ploscina -= (bx3 - ax3) * (by3 - ay3)\n\n    return obseg, ploscina", 
      "problem": 108, 
      "validation": "Check.equal(\"pravokotnika(1, 1, 5, 5, 6, 8, 8, 3)\",(30, 26))\nCheck.equal(\"pravokotnika(1, 1, 5, 5, 4, 8, 8, 3)\",(28, 34))\n\nrng=[631491]\nfor i in range(400): rng.append((rng[-1]*1103515245+12345)%2**32)\nrng=[(x//2**16)%20 for x in rng]\n\npodatki = [tuple(rng[8*i:8*(i+1)]) for i in range(50)]\n\nfor x in podatki:\n    Check.challenge(pravokotnika(*x), x)"
    }
  }, 
  {
    "pk": 514, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Podnaloga (c)", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "class Permutacija(Permutacija):\n\n    def inverz(self):\n        return Permutacija([2,1,0])", 
      "problem": 166, 
      "validation": "Check.equal(\"\"\"Permutacija([2,1,0])(Permutacija([2,1,0])(0))\"\"\", 0)\nCheck.equal(\"\"\"Permutacija([2,1,0])(Permutacija([2,1,0])(1))\"\"\", 1)\nCheck.equal(\"\"\"Permutacija([2,1,0])(Permutacija([2,1,0])(2))\"\"\", 2)"
    }
  }, 
  {
    "pk": 14, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `pari(d)`, ki sprejme slovar zaljubljenih\nin vrne _mno\u017eico_ vseh parov, ki so sre\u010dno ljubljeni. Vsak\npar naj se pojavi samo enkrat in sicer tako, da je sta zaljubljenca\nna\u0161teta po abecedi. Na primer, \u010de sta Ana in Bine zaljubljena,\ndodamo par `('Ana','Bine')`.", 
      "timestamp": "2012-10-11 12:16:47", 
      "challenge": "[[\"None\", \"[('Bine', 'Davorka'), ('Bine', 'Eva')]\"]]", 
      "solution": "def pari(d):\n    return {tuple(sorted((x, y))) for x in d for y in d[x] if x in d[y]}", 
      "problem": 9, 
      "validation": "Check.equal(\"\"\"pari({'Ana' : {'Bine','Cene'},\n                     'Bine' : set(),\n                     'Cene' : {'Bine', 'Ana'},\n                     'Davorka' : {'Davorka'},\n                     'Eva' : {'Bine'}})\\n\"\"\",\n            {('Ana', 'Cene'), ('Davorka', 'Davorka')})\nCheck.equal(\"pari({})\", set())\nCheck.challenge(pari({'Ana' : {'Bine'},\n                      'Bine' : {'Eva', 'Davorka'},\n                      'Cene' : {'Bine', 'Ana'},\n                      'Davorka' : {'Bine'},\n                      'Eva' : {'Bine'}}))"
    }
  }, 
  {
    "pk": 811, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `uporabi(mat, v)`, ki matriko `mat` uporabi na\nvektorju `v`. Vektor je predstavljen kot seznam \u0161tevil.", 
      "timestamp": "2012-10-01 12:27:45", 
      "challenge": "[[\"None\", \"[1456, 1756, 2056, 2356, 2656, 2956, 3256, 3556]\"]]", 
      "solution": "def uporabi(mat, v):\n    m, n = len(mat), len(mat[0])\n    return [sum(mat[i][j] * v[j] for j in range(n)) for i in range(m)]", 
      "problem": 254, 
      "validation": "Check.equal('uporabi([[1, 3], [2, 4]], [5, 6])', [23, 34])\nCheck.equal('uporabi([[1], [5]], [5])', [5, 25])\nCheck.equal('uporabi([[1, 3, 6], [2, 4, 8]], [0, 1, 0])', [3, 4])\nCheck.challenge(uporabi(_mat, [16 - i for i in range(10)]))"
    }
  }, 
  {
    "pk": 117, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `involucija(d)`, ki preveri, ali slovar `d`\npredstavlja involucijo, se pravi, da velja `d[d[k]] == k` za vse klju\u010de `k` v `d`.", 
      "timestamp": "2012-11-05 17:03:08", 
      "challenge": "[[\"None\", \"True\"]]", 
      "solution": "def involucija(d):\n    return all(d[d[k]] == k for k in d)", 
      "problem": 43, 
      "validation": "Check.equal(\"involucija({1:2, 2:1, 3:4, 4:3})\", True)\nCheck.equal(\"involucija({1:2, 2:3, 3:1, 4:5, 5:4})\", False)\nCheck.equal(\"involucija({1:1, 'a':1, 1:'a'})\", True)\n_nn = 100\n_lst1 = [i for i in range(2*_nn)]\nCheck.challenge(involucija({i:_lst1[(i + _nn) % (2*_nn)] for i in range(2*_nn)}\n))"
    }
  }, 
  {
    "pk": 766, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `p(x, m)`, ki vrne najmanj\u0161e nenegativno \u0161tevilo `k`,\nza katero velja $f^k(x) > m$.\n\nPredpostavite lahko, da so vhodni podatki smiselni.", 
      "timestamp": "2012-09-05 09:34:47", 
      "challenge": "[[\"None\", \"10\"], [\"None\", \"23\"], [\"None\", \"21\"], [\"None\", \"23\"], [\"None\", \"23\"], [\"None\", \"23\"], [\"None\", \"25\"], [\"None\", \"21\"], [\"None\", \"23\"], [\"None\", \"23\"], [\"None\", \"22\"], [\"None\", \"24\"], [\"None\", \"21\"], [\"None\", \"23\"], [\"None\", \"23\"], [\"None\", \"23\"], [\"None\", \"24\"], [\"None\", \"22\"], [\"None\", \"22\"], [\"None\", \"24\"], [\"None\", \"22\"], [\"None\", \"23\"], [\"None\", \"23\"], [\"None\", \"23\"], [\"None\", \"22\"], [\"None\", \"23\"], [\"None\", \"23\"], [\"None\", \"22\"], [\"None\", \"22\"], [\"None\", \"23\"], [\"None\", \"23\"], [\"None\", \"24\"], [\"None\", \"23\"], [\"None\", \"23\"], [\"None\", \"23\"], [\"None\", \"22\"], [\"None\", \"23\"], [\"None\", \"19\"], [\"None\", \"23\"], [\"None\", \"24\"], [\"None\", \"21\"], [\"None\", \"20\"], [\"None\", \"24\"], [\"None\", \"23\"], [\"None\", \"24\"], [\"None\", \"23\"], [\"None\", \"23\"], [\"None\", \"21\"], [\"None\", \"21\"], [\"None\", \"23\"], [\"None\", \"23\"]]", 
      "solution": "def p(x,m):\n    k=0\n    while fk(x,k) <= m:\n        k += 1\n    return k", 
      "problem": 245, 
      "validation": "Check.equal(\"p(1,20)\",2)\nCheck.equal(\"p(-1,20)\",1)\nCheck.equal(\"p(10,200)\",2)\nCheck.equal(\"p(1,2000)\",5)\nCheck.equal(\"p(3,2000000)\",8)\n\n_rng=[9911]\nfor i in range(50): _rng.append((_rng[-1]*1103515245+12345)%2**32)\nfor i in _rng:\n    Check.challenge(p(1+i%35,i**2))"
    }
  }, 
  {
    "pk": 680, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `simetricna(rel)`, ki vrne `True`, kadar je relacija\n`rel` simetri\u010dna.", 
      "timestamp": "2012-06-10 10:06:12", 
      "challenge": "[[\"0\", \"True\"], [\"1\", \"True\"], [\"8\", \"False\"], [\"13\", \"False\"], [\"8\", \"False\"], [\"13\", \"False\"], [\"6\", \"False\"], [\"7\", \"False\"], [\"8\", \"False\"], [\"1\", \"True\"], [\"6\", \"False\"], [\"1\", \"True\"], [\"6\", \"False\"], [\"13\", \"False\"], [\"0\", \"True\"], [\"1\", \"True\"], [\"8\", \"False\"], [\"13\", \"False\"], [\"8\", \"False\"], [\"13\", \"False\"], [\"6\", \"False\"], [\"7\", \"False\"], [\"8\", \"False\"], [\"1\", \"True\"], [\"6\", \"False\"], [\"1\", \"True\"], [\"6\", \"False\"], [\"13\", \"False\"], [\"0\", \"True\"], [\"1\", \"True\"], [\"8\", \"False\"], [\"13\", \"False\"], [\"8\", \"False\"], [\"13\", \"False\"], [\"6\", \"False\"], [\"7\", \"False\"], [\"8\", \"False\"], [\"1\", \"True\"], [\"6\", \"False\"], [\"1\", \"True\"], [\"6\", \"False\"], [\"13\", \"False\"], [\"0\", \"True\"], [\"1\", \"True\"], [\"8\", \"False\"], [\"13\", \"False\"], [\"8\", \"False\"], [\"13\", \"False\"], [\"6\", \"False\"], [\"7\", \"False\"]]", 
      "solution": "def simetricna(rel):\n    return all((y, x) in rel for (x, y) in rel)", 
      "problem": 222, 
      "validation": "Check.equal('simetricna(enako)', True)\nCheck.equal('simetricna(vecje)', False)\nCheck.equal('simetricna(deli)', False)\nCheck.equal('simetricna(istiOstanek)', True)\nfor k in range(50):\n    n = k ** 3 % 14\n    Check.challenge(simetricna({(i, j) for i in range(n) for j in range(n)\n                                if i ** n % 7 == j ** (n + 1) % 7}), n)"
    }
  }, 
  {
    "pk": 104, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `vsota_stevk(n)`, ki vrne vsoto \u0161tevk danega \u0161tevila.", 
      "timestamp": "2012-11-05 01:06:47", 
      "challenge": "[[\"None\", \"[2, 12, 18, 17, 24, 27, 14, 27, 27, 20, 12, 36, 26, 33, 27, 14, 27, 18, 38, 30, 18, 26, 24, 45, 14, 36, 18, 20, 21, 18, 17, 24, 27, 23, 18, 27, 29, 21, 27, 26, 24, 18, 32, 36, 18, 29, 21, 27, 35, 15, 27, 32, 27, 36, 38, 30, 27, 35, 42, 27, 14, 27, 36, 29, 30, 27, 26, 33, 45, 32, 27, 27, 20, 30, 27, 17, 33, 36, 32, 36, 27, 29, 30, 36, 26, 33, 36, 32, 27, 45, 29, 21, 27, 26, 24, 27, 41, 36, 36, 20]\"]]", 
      "solution": "def vsota_stevk(n):\r\n    v = 0\r\n    while n > 0:\r\n        v = v + n % 10\r\n        n = n // 10\r\n    return v", 
      "problem": 29, 
      "validation": "Check.equal(\"vsota_stevk(123)\", 6)\r\nCheck.equal(\"vsota_stevk(1230)\", 6)\r\nCheck.equal(\"vsota_stevk(1000)\", 1)\r\nCheck.equal(\"vsota_stevk(0)\", 0)\r\nCheck.equal(\"vsota_stevk(219384729318479218347928347892179832475932847593428573)\", 279)\r\n\r\nCheck.challenge([vsota_stevk(n*n*n + n*n) for n in range(100,200)])"
    }
  }, 
  {
    "pk": 715, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Na za\u010detku smo omenili, da vrsta za eksponentno funkcijo konvergira\nhitreje, \u010de je $|x|<1$. Sestavite funkcijo `normaliziraj(x)`, ki poi\u0161\u010de\ntako naravno \u0161tevilo $m$, da je $2^{m-1} \\leq |x| < 2^m$. Funkcija naj\nvrne par `(y,m)`, kjer je $y=x/2^m$.", 
      "timestamp": "2012-06-11 15:40:13", 
      "challenge
      "solution": "def normaliziraj(x):\n    s=1 if x>0 else -1\n    x*=s\n    m=0\n    while x>=1:\n        x/=2\n        m+=1\n    return (x*s, m)", 
      "problem": 227, 
      "validation": "Check.equal(\"normaliziraj(.5)\", (0.5, 0))\nCheck.equal(\"normaliziraj(1)\", (0.5, 1))\nCheck.equal(\"normaliziraj(3)\", (0.75, 2))\nCheck.equal(\"normaliziraj(-4)\", (-0.5, 3))\nCheck.equal(\"normaliziraj(298)\", (0.58203125, 9))\nCheck.equal(\"normaliziraj(-298)\", (-0.58203125, 9))\n\n_rng=[761239101]\nfor _i in range(100): _rng.append((_rng[-1]*1103515245+12345)%2**32)\nfor _x in _rng:\n    _v = (_x%1000-500)/717\n    Check.challenge(normaliziraj(_v),_v)"
    }
  }, 
  {
    "pk": 191, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite \u0161e generator `deli`, ki po\u010dne isto, kot iterator `Deli`.", 
      "timestamp": "2012-11-07 13:43:55", 
      "challenge": "[[\"0\", \"['0']\"], [\"1\", \"['1']\"], [\"8\", \"['8']\"], [\" 7\", \"['7']\"], [\"64\", \"['64']\"], [\"1 5\", \"['1', '5']\"], [\" 16\", \"['16']\"], [\"343\", \"['343']\"], [\"51 \", \"['51']\"], [\"7 9\", \"['7', '9']\"], [\"1000\", \"['1000']\"], [\"1331\", \"['1331']\"], [\"17 8\", \"['17', '8']\"], [\" 197\", \"['197']\"], [\" 744\", \"['744']\"], [\"3375\", \"['3375']\"], [\"4096\", \"['4096']\"], [\"4913\", \"['4913']\"], [\"583 \", \"['583']\"], [\"6859\", \"['6859']\"], [\"8000\", \"['8000']\"], [\"9 61\", \"['9', '61']\"], [\"10648\", \"['10648']\"], [\"1 167\", \"['1', '167']\"], [\"138 4\", \"['138', '4']\"], [\"156 5\", \"['156', '5']\"], [\"17576\", \"['17576']\"], [\"19683\", \"['19683']\"], [\" 195 \", \"['195']\"], [\" 4389\", \"['4389']\"], [\" 7000\", \"['7000']\"], [\" 9791\", \"['9791']\"], [\"3 768\", \"['3', '768']\"], [\"35937\", \"['35937']\"], [\"39304\", \"['39304']\"], [\"4 875\", \"['4', '875']\"], [\"46656\", \"['46656']\"], [\"50653\", \"['50653']\"], [\"5487 \", \"['5487']\"], [\"59319\", \"['59319']\"], [\"64000\", \"['64000']\"], [\"689 1\", \"['689', '1']\"], [\"74088\", \"['74088']\"], [\"79507\", \"['79507']\"], [\"85184\", \"['85184']\"], [\"911 5\", \"['911', '5']\"], [\"97336\", \"['97336']\"], [\"1038 3\", \"['1038', '3']\"], [\"11059 \", \"['11059']\"], [\"117649\", \"['117649']\"], [\"1 5000\", \"['1', '5000']\"], [\"13 651\", \"['13', '651']\"], [\"140608\", \"['140608']\"], [\"148877\", \"['148877']\"], [\"157464\", \"['157464']\"], [\"166375\", \"['166375']\"], [\"175616\", \"['175616']\"], [\"185193\", \"['185193']\"], [\"19511 \", \"['19511']\"], [\" 05379\", \"['05379']\"], [\" 16000\", \"['16000']\"], [\"  6981\", \"['6981']\"], [\" 383 8\", \"['383', '8']\"], [\" 50047\", \"['50047']\"], [\" 6 144\", \"['6', '144']\"], [\" 746 5\", \"['746', '5']\"], [\" 87496\", \"['87496']\"], [\"300763\", \"['300763']\"], [\"31443 \", \"['31443']\"], [\"3 8509\", \"['3', '8509']\"], [\"343000\", \"['343000']\"], [\"357911\", \"['357911']\"], [\"373 48\", \"['373', '48']\"], [\"389017\", \"['389017']\"], [\"405  4\", \"['405', '4']\"], [\"4 1875\", \"['4', '1875']\"], [\"438976\", \"['438976']\"], [\"456533\", \"['456533']\"], [\"47455 \", \"['47455']\"], [\"493039\", \"['493039']\"], [\"51 000\", \"['51', '000']\"], [\"531441\", \"['531441']\"], [\"551368\", \"['551368']\"], [\"571787\", \"['571787']\"], [\"59 704\", \"['59', '704']\"], [\"6141 5\", \"['6141', '5']\"], [\"636056\", \"['636056']\"], [\"658503\", \"['658503']\"], [\"68147 \", \"['68147']\"], [\"704969\", \"['704969']\"], [\"7 9000\", \"['7', '9000']\"], [\"753571\", \"['753571']\"], [\"778688\", \"['778688']\"], [\"804357\", \"['804357']\"], [\"830584\", \"['830584']\"], [\"857375\", \"['857375']\"], [\"884736\", \"['884736']\"], [\"91 673\", \"['91', '673']\"], [\"94119 \", \"['94119']\"], [\"970 99\", \"['970', '99']\"]]", 
      "solution": "def deli(stavek):\n    besede = stavek.split()\n    while besede:\n        yield besede.pop(0)", 
      "problem": 58, 
      "validation": "Check.equal(\"list(deli('Kdor to bere, je osel!'))\", ['Kdor', 'to', 'bere,', 'je', 'osel!'])\nCheck.equal(\"list(deli(' Kdor to bere, je osel ! '))\", ['Kdor', 'to', 'bere,', 'je', 'osel', '!'])\nfor i in range(100):\n    niz = str(i ** 3).replace('2', ' ')\n    Check.challenge(list(deli(niz)), niz)"
    }
  }, 
  {
    "pk": 164, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Definirajte metodo  `__repr__`, ki predstavi ulomek v obliki `\"st/im\"`.", 
      "timestamp": "2012-10-24 13:43:41", 
      "challenge": "[]", 
      "solution": "class Ulomek(Ulomek):\n    def __repr__(self):\n        return \"{0}/{1}\".format(self.st, self.im)", 
      "problem": 50, 
      "validation": "Check.equal('Ulomek(20, 6).st', 10)\nCheck.equal('Ulomek(20, 6).im', 3)\nCheck.equal('Ulomek(40, -60).im', 3)\nCheck.equal('Ulomek(40, -60).st', -2)"
    }
  }, 
  {
    "pk": 334, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `naslednjePrastevilo(n)`, ki vrne prvo pra\u0161tevilo,\nstrogo ve\u010dje od \u0161tevila `n`.", 
      "timestamp": "2012-03-14 09:55:33", 
      "challenge": "[[\"None\", \"53\"], [\"None\", \"53\"], [\"None\", \"53\"], [\"None\", \"59\"], [\"None\", \"59\"], [\"None\", \"59\"], [\"None\", \"59\"], [\"None\", \"59\"], [\"None\", \"59\"], [\"None\", \"61\"], [\"None\", \"61\"], [\"None\", \"67\"], [\"None\", \"67\"], [\"None\", \"67\"], [\"None\", \"67\"], [\"None\", \"67\"], [\"None\", \"67\"], [\"None\", \"71\"], [\"None\", \"71\"], [\"None\", \"71\"], [\"None\", \"71\"], [\"None\", \"73\"], [\"None\", \"73\"], [\"None\", \"79\"], [\"None\", \"79\"], [\"None\", \"79\"], [\"None\", \"79\"], [\"None\", \"79\"], [\"None\", \"79\"], [\"None\", \"83\"], [\"None\", \"83\"], [\"None\", \"83\"], [\"None\", \"83\"], [\"None\", \"89\"], [\"None\", \"89\"], [\"None\", \"89\"], [\"None\", \"89\"], [\"None\", \"89\"], [\"None\", \"89\"], [\"None\", \"97\"], [\"None\", \"97\"], [\"None\", \"97\"], [\"None\", \"97\"], [\"None\", \"97\"], [\"None\", \"97\"], [\"None\", \"97\"], [\"None\", \"97\"], [\"None\", \"101\"], [\"None\", \"101\"], [\"None\", \"101\"]]", 
      "solution": "def naslednjePrastevilo(n):\n    kandidat = n + 1\n    while not jePrastevilo(kandidat):\n        kandidat += 1\n    return kandidat", 
      "problem": 112, 
      "validation": "Check.equal('naslednjePrastevilo(1)', 2)\nCheck.equal('naslednjePrastevilo(2)', 3)\nCheck.equal('naslednjePrastevilo(3)', 5)\nCheck.equal('naslednjePrastevilo(23)', 29)\nCheck.equal('naslednjePrastevilo(42)', 43)\nCheck.equal('naslednjePrastevilo(97)', 101)\nfor i in range(50, 100):\n    Check.challenge(naslednjePrastevilo(i))"
    }
  }, 
  {
    "pk": 217, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Razpredelnici dodajte \u0161e stolpec `ocena.mase`, v katerem je zapisana\r\nocena telesne mase, predstavljena z nizom. Ta naj bo:\r\n\r\n* `\"znizana\"`, \u010de je indeks telesne mase strogo manj\u0161i od 18,5,\r\n* `\"normalna\"`, \u010de je indeks telesne mase med 18,5 in strogo manj\u0161i od 25,\r\n* `\"zvisana\"`, \u010de je indeks telesne mase med 25 in strogo manj\u0161i 30,\r\n* `\"debelost\"`, \u010de je indeks telesne mase ve\u010dji ali enak 30.\r\n\r\nNamig: `mapply`.", 
      "timestamp": "2012-11-19 13:43:16", 
      "challenge": "[]", 
      "solution": "ocena <- function(visina, masa) {\r\n    itm <- masa / (visina / 100)^2\r\n    if (itm < 18.5) \"znizana\"\r\n    else if (itm < 25) \"normalna\"\r\n    else if (itm < 30) \"zvisana\"\r\n    else \"debelost\"\r\n}\r\npodatki$ocena.mase <- mapply(ocena, podatki$visina, podatki$masa)", 
      "problem": 65, 
      "validation": ".itmm2 <- podatki$visina / sqrt(podatki$masa) \r\nif(!identical(.itmm2 > 23.24953, podatki$ocena.mase == \"znizana\"))\r\n  check$error(\"Ocene mase so nastavljene napa\u010dno za zni\u017eane mase.\")\r\nif(!identical(20 < .itmm2 & .itmm2 <= 23.24953, podatki$ocena.mase == \"normalna\"))\r\n  check$error(\"Ocene mase so nastavljene napa\u010dno za normalne mase.\")\r\nif(!identical(18.25742 < .itmm2 & .itmm2 <= 20, podatki$ocena.mase == \"zvisana\"))\r\n  check$error(\"Ocene mase so nastavljene napa\u010dno za zvi\u0161ane mase.\")\r\nif(!identical(.itmm2 <= 18.25742, podatki$ocena.mase == \"debelost\"))\r\n  check$error(\"Ocene mase so nastavljene napa\u010dno za debelost.\")"
    }
  }, 
  {
    "pk": 668, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `cantor(n)`, ki vrne niz z `n`-tim pribli\u017ekom\n[Cantorjeve mno\u017eice](http://sl.wikipedia.org/wiki/Cantorjeva_mno\u017eica).\n\n    >>> cantor(0)\n    \"*\"\n    >>> cantor(1)\n    \"* *\"\n    >>> cantor(2)\n    \"* *   * *\"\n    >>> cantor(3)\n    \"* *   * *         * *   * *\"", 
      "timestamp": "2012-05-21 12:50:45", 
      "challenge": "[]", 
      "solution": "def cantor(n):\n    if n == 0:\n        return \"*\"\n    else:\n        manjsi = cantor(n - 1)\n        return manjsi + len(manjsi) * \" \" + manjsi", 
      "problem": 216, 
      "validation": "Check.equal(\"cantor(1)\", \"* *\")\nCheck.equal(\"cantor(2)\", \"* *   * *\")\nCheck.equal(\"cantor(3)\", \"* *   * *         * *   * *\")"
    }
  }, 
  {
    "pk": 711, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `sinus(x,n)`, ki se\u0161teje prvih $n$ \u010dlenov Taylorjeve\nvrste za funkcijo $\\sin(x)$. Pri tem si lahko pomagate s prej\u0161njo\npodnalogo.", 
      "timestamp": "2012-06-11 11:49:29", 
      "challenge": "[[\"(0.08650519031141869, 2)\", \"0.086397\"], [\"(0.12456747404844293, 3)\", \"0.124246\"], [\"(0.1695501730103806, 3)\", \"0.168739\"], [\"(0.22145328719723184, 4)\", \"0.219648\"], [\"(0.28027681660899656, 4)\", \"0.276622\"], [\"(0.34602076124567477, 5)\", \"0.339157\"], [\"(0.41868512110726647, 5)\", \"0.406559\"], [\"(0.4982698961937717, 6)\", \"0.477907\"], [\"(0.5847750865051903, 6)\", \"0.552012\"], [\"(0.6782006920415224, 7)\", \"0.627393\"], [\"(0.7785467128027681, 7)\", \"0.702246\"], [\"(0.8858131487889274, 8)\", \"0.77443\"], [\"(1.0, 8)\", \"0.841471\"], [\"(1.1211072664359862, 9)\", \"0.900582\"], [\"(1.2491349480968859, 9)\", \"0.948711\"], [\"(1.384083044982699, 10)\", \"0.98262\"], [\"(1.5259515570934257, 10)\", \"0.998995\"], [\"(1.6747404844290659, 11)\", \"0.994603\"], [\"(1.8304498269896197, 11)\", \"0.966479\"], [\"(1.9930795847750868, 12)\", \"0.912156\"], [\"(2.1626297577854676, 12)\", \"0.829919\"], [\"(2.339100346020761, 13)\", \"0.71909\"], [\"(2.5224913494809686, 13)\", \"0.580303\"], [\"(2.71280276816609, 14)\", \"0.415771\"], [\"(2.9100346020761245, 14)\", \"0.229494\"]]", 
      "solution": "def sinus(x, n):\n    return sum(clen(x,i+1) for i in range(n))", 
      "problem": 219, 
      "validation": "Check.equal(\"sinus(0,4)\", 0)\nCheck.equal(\"sinus(pi,20)\", 0)\nCheck.equal(\"sinus(pi/4,2)\", 0.7046526512091675)\nCheck.equal(\"sinus(pi/4,5)\", 1/2**.5)\n\nfor i in range(5,30):\n    v=((i/17)**2,i//2)\n    Check.challenge(sinus(*v),v)"
    }
  }, 
  {
    "pk": 338, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `hitri(tek)`, ki sprejme niz, ki predstavlja\nzaporedje korakov in skokov v ravnini, in vrne to\u010dko, v kateri se\ntek kon\u010da.\n\nTek po ravnini se za\u010dne v izhodi\u0161\u010du, predstavimo pa ga, tako kot\nsprehod, z nizem, sestavljenim iz \u010drk `S`, `J`, `V` ali `Z`, odvisno\nod smeri (sever, jug, vzhod, zahod).\n\nPoleg tega lahko tek vsebuje tudi \u0161tevke od `1` do `9`, ki povedo,\nkoliko dolg naj bo naslednji korak. Tako niz `5S` pomeni skok\nna sever, dolg 5 korakov. Privzamete lahko, da zaporednih \u0161tevk v\nnizu ni, ter da se na ostale znake v nizu ne oziramo.", 
      "timestamp": "2012-03-22 11:22:49", 
      "challenge": "[]", 
      "solution": "def hitri(tek):\n    x = y = 0\n    dolzina = 1\n    for korak in tek:\n        if korak == 'S':\n            y += dolzina\n        elif korak == 'J':\n            y -= dolzina\n        elif korak == 'V':\n            x += dolzina\n        elif korak == 'Z':\n            x -= dolzina\n        if korak in '123456789':\n            dolzina = int(korak)\n        else:\n            dolzina = 1\n    return (x, y)", 
      "problem": 114, 
      "validation": "Check.equal('hitri(\"5S2V3S4V\")', (6, 8))\nCheck.equal('hitri(\"JJS2JS2ZSZ\")', (-3, -1))\nCheck.equal('hitri(\"1S2J3Z4V\")', (1, -1))"
    }
  }, 
  {
    "pk": 255, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite metodo `__add__` za se\u0161tevanje polinomov.\n*Pozor:* pri se\u0161tevanju se lahko zgodi, da se nekateri za\u010detni\nkoeficienti pokraj\u0161ajo: $(x^3 + 2 x + 7) + (- x^3 - 2 x + 10) = 17$", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"None\", \"[2]\"], [\"None\", \"[2, 2]\"], [\"None\", \"[2, 5, 3]\"], [\"None\", \"[2, 5, 3, 4]\"], [\"None\", \"[2, 5, 8, 4, 5]\"], [\"None\", \"[2, 5, 8, 4, 5, 6]\"], [\"None\", \"[2, 5, 8, 11, 5, 6, 7]\"], [\"None\", \"[2, 5, 8, 11, 5, 6, 7, 8]\"], [\"None\", \"[2, 5, 8, 11, 14, 6, 7, 8, 9]\"], [\"None\", \"[2, 5, 8, 11, 14, 6, 7, 8, 9, 10]\"], [\"None\", \"[2, 5, 8, 11, 14, 17, 7, 8, 9, 10, 11]\"], [\"None\", \"[2, 5, 8, 11, 14, 17, 7, 8, 9, 10, 11, 12]\"], [\"None\", \"[2, 5, 8, 11, 14, 17, 20, 8, 9, 10, 11, 12, 13]\"], [\"None\", \"[2, 5, 8, 11, 14, 17, 20, 8, 9, 10, 11, 12, 13, 14]\"], [\"None\", \"[2, 5, 8, 11, 14, 17, 20, 23, 9, 10, 11, 12, 13, 14, 15]\"], [\"None\", \"[2, 5, 8, 11, 14, 17, 20, 23, 9, 10, 11, 12, 13, 14, 15, 16]\"], [\"None\", \"[2, 5, 8, 11, 14, 17, 20, 23, 26, 10, 11, 12, 13, 14, 15, 16, 17]\"], [\"None\", \"[2, 5, 8, 11, 14, 17, 20, 23, 26, 10, 11, 12, 13, 14, 15, 16, 17, 18]\"], [\"None\", \"[2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 11, 12, 13, 14, 15, 16, 17, 18, 19]\"], [\"None\", \"[2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\"], [\"None\", \"[2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\"], [\"None\", \"[2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]\"], [\"None\", \"[2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]\"], [\"None\", \"[2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]\"], [\"None\", \"[2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35, 38, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]\"], [\"None\", \"[2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35, 38, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]\"], [\"None\", \"[2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35, 38, 41, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]\"], [\"None\", \"[2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35, 38, 41, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]\"]]", 
      "solution": "# def __add__(self, other):\n#     # predpostavimo, da ima levi polinom vsaj toliko \u010dlenov kot desni\n#     if len(self.koef) < len(other.koef): return other + self\n#     # nato vzamemo levi polinom in kosoma pri\u0161tevamo desnega\n#     koef_vsote = self.koef\n#     for n, a in enumerate(other.koef):\n#         koef_vsote[n] += a\n#     return Polinom(koef_vsote)", 
      "problem": 74, 
      "validation": "Check.equal('(Polinom([1, 2, 3]) + Polinom([4, 5])).koef', [5, 7, 3])\nCheck.equal('(Polinom([1, 2, 3]) + Polinom([-1, -2])).koef', [0, 0, 3])\nCheck.equal('(Polinom([1, 2, 3]) + Polinom([0, 0, -3])).koef', [1, 2])\n\nfor i in range(2, 30):\n    Check.challenge((Polinom(list(range(1, i))) + Polinom(list(range(1, i, 2)))).koef)"
    }
  }, 
  {
    "pk": 860, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Napi\u0161ite funkcijo `hitri_sudoku(t)`, ki se obna\u0161a tako kot funkcija\n`sudoku`, le da naj deluje \u010dim hitreje.", 
      "timestamp": "2012-11-19 10:14:29", 
      "challenge": "[]", 
      "solution": "# Uporabimo \u017ee obstoje\u010do re\u0161itev.\nhitri_sudoku = sudoku", 
      "problem": 280, 
      "validation": "Check.equal(\"\"\"hitri_sudoku(\n    [[ 5  , 3  ,None,  None, 7  ,None,  None,None,None],\n     [ 6  ,None,None,   1  , 9  , 5  ,  None,None,None],\n     [None, 9  , 8  ,  None,None,None,  None, 6  ,None],\n     \n     [ 8  ,None,None,  None, 6  ,None,  None,None, 3  ],\n     [ 4  ,None,None,   8  ,None, 3  ,  None,None, 1  ],\n     [ 7  ,None,None,  None, 2  ,None,  None,None, 6  ],\n      \n     [None, 6  ,None,  None,None,None,   2  , 8  ,None],\n     [None,None,None,   4  , 1  , 9  ,  None,None, 5  ],\n     [None,None,None,  None, 8  ,None,  None, 7  , 9  ]])\"\"\",\n    [[5, 3, 4, 6, 7, 8, 9, 1, 2],\n     [6, 7, 2, 1, 9, 5, 3, 4, 8],\n     [1, 9, 8, 3, 4, 2, 5, 6, 7],\n     [8, 5, 9, 7, 6, 1, 4, 2, 3],\n     [4, 2, 6, 8, 5, 3, 7, 9, 1],\n     [7, 1, 3, 9, 2, 4, 8, 5, 6],\n     [9, 6, 1, 5, 3, 7, 2, 8, 4],\n     [2, 8, 7, 4, 1, 9, 6, 3, 5],\n     [3, 4, 5, 2, 8, 6, 1, 7, 9]])\n\nCheck.equal(\"\"\"hitri_sudoku(\n    [[ 5  , 4  ,None,  None, 7  ,None,  None,None,None],\n     [ 6  ,None,None,   1  , 9  , 5  ,  None,None,None],\n     [None, 9  , 8  ,  None,None,None,  None, 6  ,None],\n      \n     [ 8  ,None,None,  None, 6  ,None,  None,None, 3  ],\n     [ 4  ,None,None,   8  ,None, 3  ,  None,None, 1  ],\n     [ 7  ,None,None,  None, 2  ,None,  None,None, 6  ],\n     \n     [None, 6  ,None,  None,None,None,   2  , 8  ,None],\n     [None,None,None,   4  , 1  , 9  ,  None,None, 5  ],\n     [None,None,None,  None, 8  ,None,  None, 7  , 9  ]])\"\"\", \n   None)"
    }
  }, 
  {
    "pk": 743, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `naZalogi(nakup, datoteka)`, ki preveri, ali imamo\nv skladi\u0161\u010du na voljo vse izdelke, ki jih potrebujemo za nakup. Pri tem\nje spremenljivka `nakup` slovar, v katerem so klju\u010di izdelki, vrednosti\npa koli\u010dine, ki jih potrebujemo (realna \u0161tevila). Datoteka tako kot\nprej vsebuje izdelke, enega na vrstico. Funkcija naj vrne `True` ali\n`False`.", 
      "timestamp": "2012-07-12 11:25:09", 
      "challenge": "[]", 
      "solution": "def naZalogi(nakup, datoteka):\n    skladisce=vSlovar(preberi(datoteka))\n    for izdelek,kolicina in nakup.items():\n        if kolicina > skladisce.get(izdelek, 0):\n            return False\n    return True", 
      "problem": 239, 
      "validation": "Check.equal(\"naZalogi({'moka, 1kg': 2, 'kruh': .5}, '_test.1')\", True)\nCheck.equal(\"naZalogi({'moka, 1kg': 4, 'kruh': .5}, '_test.1')\", False)\nCheck.equal(\"naZalogi({'moka, 1kg': 1, 'kruh': 4}, '_test.1')\", False)\nCheck.equal(\"naZalogi({'moka, 1kg': 3, 'kruh': 0}, '_test.1')\", True)\nCheck.equal(\"naZalogi({'moka, 1kg': 1, 'kruh': 1}, '_test.0')\", False)"
    }
  }, 
  {
    "pk": 855, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `simetricna.razlika(x, y)`, ki za dani mno\u017eici `x`\nin `y` vrne njuno [simetri\u010dno razliko](http://sl.wikipedia.org/wiki/Razlika_mno%C5%BEic).", 
      "timestamp": "2012-11-11 21:43:17", 
      "challenge": "[]", 
      "solution": "simetricna.razlika <- function(x, y){\n  return(setdiff(union(x, y), intersect(x, y)))\n}", 
      "problem": 279, 
      "validation": "check$equal(simetricna.razlika(1 : 18, 3 : 15), c(1, 2, 16, 17, 18))\ncheck$equal(simetricna.razlika(1 : 5, 3 : 10), c(1, 2, 6, 7, 8, 9, 10))  \ncheck$equal(simetricna.razlika(1 : 5, 1 : 6), 6)"
    }
  }, 
  {
    "pk": 695, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Dan je seznam celo\u0161tevilskih tock v ravnini.\nNapi\u0161ite funkcijo `minPravokotnik(tocke)`, ki vrne nabor `(xmin,ymin,xmax,ymax)`\nkjer sta `(xmin,ymin)` in `(xmax,ymax)` nasprotni ogli\u0161\u010di najmanj\u0161ega pravokotnika,\nizven katerega ne le\u017ei nobena to\u010dka danega seznama. Pravokotnik je lahko tudi\nizrojen v daljico ali to\u010dko.", 
      "timestamp": "2012-06-10 01:12:23", 
      "challenge": "[]", 
      "solution": "def minPravokotnik(tocke):\n    if tocke==[]:\n        return None\n    else:\n        (xmin,ymin)=tocke[0]\n        (xmax,ymax)=tocke[0]\n        for (x,y) in tocke[1:]:\n            if x<xmin:\n                xmin = x\n            elif x>xmax:\n                xmax = x\n            if y<ymin:\n                ymin = y\n            elif y>ymax:\n                ymax = y\n        return (xmin,ymin,xmax,ymax)", 
      "problem": 229, 
      "validation": "Check.equal(\"\"\"minPravokotnik([(1,2)])\"\"\", (1,2,1,2))\nCheck.equal(\"\"\"minPravokotnik([])\"\"\", None)\nCheck.equal(\"\"\"minPravokotnik([(1,2),(3,4),(-2,-1),(-6,-5)])\"\"\", (-6,-5,3,4,))"
    }
  }, 
  {
    "pk": 223, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite metodo `poVrsti(self)`, ki vrne generator, ki na\u0161teje vse\npodatke v drevesu od najmanj\u0161ega do najve\u010djega.", 
      "timestamp": "2012-11-29 12:43:28", 
      "challenge": "[[\"None\", \"[1, 4, 7, 13, 16, 25, 28, 31, 37, 40, 43, 52, 55, 61, 67, 73, 76, 79, 85, 88, 91, 97, 100, 103, 112, 115, 121, 127, 133, 136, 145, 148, 151, 157, 160, 163, 172, 175, 181, 187, 193, 196, 205, 208, 211, 217, 220, 223, 229, 232, 235, 241, 247, 253, 256, 265, 268, 271, 277, 280, 283, 292, 295]\"], [\"None\", \"[4, 13, 52, 61, 67, 79, 85, 100, 148, 151, 163, 193, 196, 229, 265, 292, 337, 340, 343, 355, 373, 379, 388, 397, 421, 427, 436, 481, 487, 511, 529, 532, 535, 553, 571, 580, 628, 676, 679, 715, 745, 757, 772, 820, 823, 829, 841, 847, 868, 895, 901, 907, 916, 925, 931, 979, 991, 1003, 1012, 1033, 1060, 1075, 1105, 1108, 1117, 1129, 1156, 1177, 1183]\"], [\"None\", \"[4, 25, 28, 79, 100, 112, 133, 151, 208, 220, 232, 280, 301, 304, 307, 316, 328, 436, 460, 556, 571, 604, 631, 637, 652, 679, 685, 712, 781, 787, 793, 829, 841, 868, 943, 952, 976, 1045, 1057, 1096, 1111, 1117, 1192, 1195, 1204, 1261, 1267, 1279, 1300, 1303, 1327, 1432, 1435, 1504, 1555, 1576, 1672, 1705, 1708, 1729, 1747, 1780, 1813, 1816, 1840, 1879, 1888, 1891, 1897, 1948, 1960, 1963, 1975, 2029, 2056, 2068, 2083, 2104, 2140, 2179, 2215, 2221, 2272, 2296, 2323, 2329, 2353, 2365, 2377, 2404, 2473, 2488, 2536, 2548, 2620, 2692]\"], [\"None\", \"[4, 61, 196, 265, 388, 529, 580, 772, 841, 847, 901, 979, 1003, 1156, 1183, 1279, 1348, 1393, 1540, 1573, 1627, 1681, 1687, 1711, 1732, 1915, 2095, 2116, 2305, 2308, 2317, 2329, 2467, 2485, 2500, 2551, 2629, 2692, 2779, 3076, 3079, 3157, 3223, 3268, 3307, 3331, 3391, 3433, 3460, 3613, 3652, 3763, 3937, 3943, 3955, 3979, 3997, 4021, 4036, 4129, 4135, 4153, 4171, 4228, 4345, 4420, 4429, 4525, 4612, 4675, 4777]\"]]", 
      "solution": "class IskalnoDrevo(IskalnoDrevo):\n\n    def poVrsti(self):\n        if not self.prazno:\n            for n in self.levo.poVrsti(): yield n\n            yield self.vsebina\n            for n in self.desno.poVrsti(): yield n", 
      "problem": 67, 
      "validation": "Check.equal(\"\"\"list(IskalnoDrevo([1, 8, 3, 7, 9, 2, 4, 5, 6]).poVrsti())\"\"\", [1, 2, 3, 4, 5, 6, 7, 8, 9])\n\nfor i in range(1, 5):\n    Check.challenge(list(IskalnoDrevo({(3 * (n + 4) ** 7 + 4) % (300 * i ** 2) for n in range(100)}).poVrsti()))"
    }
  }, 
  {
    "pk": 36, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `cikel(permutacija, x)`, ki vrne celoten cikel, ki\nse za\u010dne s \u0161tevilom `x`.\n\n     >>> cikel([3, 2, 1], 1)\n     [1, 3]\n     >>> cikel([3, 2, 1], 2)\n     [2]", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"None\", \"[3, 97]\"], [\"None\", \"[4, 96]\"], [\"None\", \"[5, 95]\"], [\"None\", \"[6, 94]\"], [\"None\", \"[7, 93]\"], [\"None\", \"[8, 92]\"], [\"None\", \"[9, 91]\"], [\"None\", \"[10, 90]\"], [\"None\", \"[11, 89]\"], [\"None\", \"[12, 88]\"], [\"None\", \"[13, 87]\"], [\"None\", \"[14, 86]\"], [\"None\", \"[15, 85]\"], [\"None\", \"[16, 84]\"], [\"None\", \"[17, 83]\"], [\"None\", \"[18, 82]\"], [\"None\", \"[19, 81]\"], [\"None\", \"[20, 80]\"], [\"None\", \"[21, 79]\"], [\"None\", \"[22, 78]\"], [\"None\", \"[23, 77]\"], [\"None\", \"[24, 76]\"], [\"None\", \"[25, 75]\"], [\"None\", \"[26, 74]\"], [\"None\", \"[27, 73]\"], [\"None\", \"[28, 72]\"], [\"None\", \"[29, 71]\"], [\"None\", \"[30, 70]\"], [\"None\", \"[31, 69]\"], [\"None\", \"[32, 68]\"], [\"None\", \"[33, 67]\"], [\"None\", \"[34, 66]\"], [\"None\", \"[35, 65]\"], [\"None\", \"[36, 64]\"], [\"None\", \"[37, 63]\"], [\"None\", \"[38, 62]\"], [\"None\", \"[39, 61]\"], [\"None\", \"[40, 60]\"], [\"None\", \"[41, 59]\"], [\"None\", \"[42, 58]\"], [\"None\", \"[43, 57]\"], [\"None\", \"[44, 56]\"], [\"None\", \"[45, 55]\"], [\"None\", \"[46, 54]\"], [\"None\", \"[47, 53]\"], [\"None\", \"[48, 52]\"], [\"None\", \"[49, 51]\"], [\"None\", \"[50]\"], [\"None\", \"[51, 49]\"], [\"None\", \"[52, 48]\"], [\"None\", \"[53, 47]\"], [\"None\", \"[54, 46]\"], [\"None\", \"[55, 45]\"], [\"None\", \"[56, 44]\"], [\"None\", \"[57, 43]\"], [\"None\", \"[58, 42]\"], [\"None\", \"[59, 41]\"]]", 
      "solution": "def cikel(permutacija, x):\n    cikel = [x]\n    y = slika(permutacija, x)\n    while y != x:\n        cikel.append(y)\n        y = slika(permutacija, y)\n    return cikel", 
      "problem": 19, 
      "validation": "Check.equal('cikel([3, 4, 2, 1], 1)', [1, 3, 2, 4])\nCheck.equal('cikel([3, 2, 1], 1)', [1, 3])\nCheck.equal('cikel([3, 2, 1], 2)', [2])\nCheck.equal('cikel([3, 2, 1], 3)', [3, 1])\nfor i in range(3, 60):\n    Check.challenge(cikel([100 - k for k in range(1, 100)], i))"
    }
  }, 
  {
    "pk": 266, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Dodajte metodo `minimum(self)`, ki vrne najmanj\u0161e \u0161tevilo v drevesu.\n\u010ce je drevo prazno, naj metoda vrne `None`.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"None\", \"1\"], [\"None\", \"1\"], [\"None\", \"1\"], [\"None\", \"1\"], [\"None\", \"1\"], [\"None\", \"1\"], [\"None\", \"1\"], [\"None\", \"1\"], [\"None\", \"1\"], [\"None\", \"1\"], [\"None\", \"1\"], [\"None\", \"1\"], [\"None\", \"1\"], [\"None\", \"1\"], [\"None\", \"1\"], [\"None\", \"1\"], [\"None\", \"1\"], [\"None\", \"1\"], [\"None\", \"1\"]]", 
      "solution": "class Drevo(Drevo):\n    def minimum(self):\n        if self.prazno:\n            return\n        else:\n            levi_minimum = self.levo.minimum() or float(\"inf\")\n            desni_minimum = self.desno.minimum() or float(\"inf\")\n            return min(self.vsebina, levi_minimum, desni_minimum)", 
      "problem": 79, 
      "validation": "Check.equal('Drevo().minimum()', None)\nCheck.equal('Drevo(3).minimum()', 3)\nCheck.equal('Drevo(5, levo=Drevo(4, desno=Drevo(2)), desno=Drevo(3, levo=Drevo(4), desno=Drevo(4))).minimum()', 2)\n_drevesa = [Drevo(), Drevo()]\nfor i in range(1, 20):\n    _drevesa.append(Drevo(i, levo=_drevesa[-1], desno=_drevesa[-2]))\n    Check.challenge(_drevesa[-1].minimum())"
    }
  }, 
  {
    "pk": 778, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `staEnakiOznaki(tablice)`, ki vrne `True`, kadar v\nseznamu `tablice` obstajata dve tablici, ki imata enak del oznake za\nzvezdico. \u010ce takih dveh tablic ni, naj funkcija vrne `False`.\nPri tej nalogi si lahko pomagate z re\u0161itvijo naslednje podnaloge.", 
      "timestamp": "2012-09-05 09:34:40", 
      "challenge": "[]", 
      "solution": "def staEnakiOznaki(tablice):\n    return enakiOznaki(tablice) is not None\n\ndef staEnakiOznaki(tablice):\n    oznake = set()\n    for tablica in tablice:\n        _, oznaka = razbij(tablica)\n        if oznaka in oznake:\n            return True\n        else:\n            oznake.add(oznaka)\n    return False", 
      "problem": 248, 
      "validation": "Check.equal(\"\"\"staEnakiOznaki([\"MB*56-TR2\", \"LJ*AB-124\", \"KR*B25-13\"])\"\"\", False)\nCheck.equal(\"\"\"staEnakiOznaki([\"MB*56-TR2\", \"LJ*AB-124\", \"KR*AB-124\"])\"\"\", True)\nCheck.equal(\"\"\"staEnakiOznaki([\"MB*56-TR2\", \"LJ*AB-124\", \"KR*56-TR2\"])\"\"\", True)\nCheck.equal(\"\"\"staEnakiOznaki([\"LJ*AB-124\", \"LJ*BC-124\", \"LJ*CD-124\"])\"\"\", False)\nCheck.equal(\"\"\"staEnakiOznaki([])\"\"\", False)"
    }
  }, 
  {
    "pk": 246, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Definirajte metodo  `__repr__`, ki predstavi ulomek v\nobliki `\"st/im\"`.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "# def __repr__(self):\n#     return \"{0}/{1}\".format(self.st, self.im)", 
      "problem": 73, 
      "validation": "Check.equal('Ulomek(20, 6).st', 10)\nCheck.equal('Ulomek(20, 6).im', 3)\nCheck.equal('Ulomek(40, -60).im', 3)\nCheck.equal('Ulomek(40, -60).st', -2)"
    }
  }, 
  {
    "pk": 719, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Iz logaritemskih povratkov lahko razberemo, ali je vrednost delnice\r\nnara\u0161\u010dala ali padala. Sestavite funkcijo `trend(povratki)`, ki sprejme\r\nseznam logaritemskih povratkov in vrne niz `pozitiven trend`, \u010de je\r\nv seznamu ve\u010d pozitivnih vrednosti kot negativnih, sicer pa naj vrne\r\n`negativen trend`. Vrednosti 0 \u0161tejte k negativnim.", 
      "timestamp": "2012-06-10 22:42:01", 
      "challenge": "[[\"[3.2056052547210943, -0.2852227363964195, 0.9688588522217492, 4.214568336942039, 3.95499981210658, 1.1534546545837863, -2.238271028082562, -0.5537399425723892, 3.917893665417022, 2.7329235531273444]\", \"pozitiven trend\"], [\"[-2.664007394373346, 3.626664887984372, 0.9213261643782094, -1.0306690735530242, -0.8492715481434958, -1.5979507104839348, 1.5398080751675671, -0.9815343008627977, 1.7358394073142165, 2.0984373354701766]\", \"negativen trend\"], [\"[1.202281670148034, -1.8312281523968466, 4.364408735048661, 3.481286387082365, -3.0817311842992483, -1.4388974685474905, -2.4996957919111336, -2.5046924239057757, -3.1709543150192525, -1.0499584693249338]\", \"negativen trend\"], [\"[-4.991106428596883, -3.467431572737849, -1.7076109635520793, 0.8676255959124157, -1.4399021389403481, -1.6841945459552456, 3.7446210813911716, -3.9794681351890557, 2.23149222628542, -0.9773349380740282]\", \"negativen trend\"], [\"[1.032259997129266, -2.713023420183128, 2.7677439335850966, -2.2748288727032233, 2.46602415586667, 3.1173261201253553, -1.541008035185158, -4.260533972632706, 4.266042404310932, 2.7209044673110956]\", \"pozitiven trend\"], [\"[-2.8856958087541242, 1.9835782106092417, -4.336352070505607, -3.1263303236622093, 1.0874039074561104, 2.9220251990318005, 4.37371327970876, -3.323078599736385, 4.836214335141154, 3.2292850894803298]\", \"pozitiven trend\"], [\"[2.5928473055185366, 0.11073308710044305, -2.0175660725566744, 0.7166654675715387, -4.641706383648873, 3.7465508748335026, 4.350886874537901, -3.3472014078975603, 0.38135450253176373, 4.44641491889046]\", \"pozitiven trend\"], [\"[4.902539569864961, 0.05657174123619946, -3.898226339990762, 3.3970072938979214, 0.12211685858959864, 2.0476163445002475, 2.241084718679774, 2.3186116694789103, 4.754362524805996, 3.8782700257017204]\", \"pozitiven trend\"], [\"[4.469651628853228, -0.8046153074228091, -4.63492000047959, -0.2949279594855838, 2.5069047218667873, -1.623954677177557, -1.2364697152571789, 2.725510443194435, -1.6926131042159724, -2.6248558307465877]\", \"negativen trend\"], [\"[-3.362167369571159, 0.7326688381224207, -1.4218588412507702, 0.23664854037760197, -0.5005161317797802, 4.740554190910769, 3.335984470849283, 4.784592627828404, 0.30127140419012477, 1.7056904144925529]\", \"pozitiven trend\"], [\"[-0.26964718581978175, -1.3828840924580166, -4.234843134077092, 0.006780251690892136, -2.1362828464523083, -3.8006892622998385, 0.8619864082739417, 3.7170412164459403, 2.790149983696521, -3.144728252552828]\", \"negativen trend\"], [\"[-0.6088015851126354, -0.7068702811954521, 4.4402800096672905, 1.052656392020186, 1.1907908580691808, -4.210768280714996, 4.698319889977096, -0.20722126623396964, 3.8733969828832766, -2.853738545713307]\", \"negativen trend\"], [\"[-1.680134319396143, -0.5275173155971808, 4.609710531307401, 2.68459288102993, 1.9432160497524302, 2.032620977350989, 4.907431243526954, -0.6190630573188507, 2.8666720172132614, -2.2424181038596003]\", \"pozitiven trend\"], [\"[-1.1489586377108192, -2.958448582019995, -3.128371571427019, -4.421421575888371, 2.7920806924934594, 4.928941734446534, 1.7693305461439213, 3.192819770207837, 1.913734126842427, -4.047564699867146]\", \"negativen trend\"], [\"[0.8735259647325684, -3.1433074358684205, -3.2954955764683813, 2.0681939912494203, -1.8166664141134206, -1.760955740901831, -0.24423689995801023, 1.860123230520232, 4.4298462062342505, 3.0862476836873007]\", \"negativen trend\"], [\"[0.8584133203943614, -0.9607430294469594, 0.7220748010499287, 4.130244514826538, -4.09813610181796, -2.1506850987523367, 4.055807829136086, -1.956431315381359, 2.5162683150511587, -0.9832203188358939]\", \"negativen trend\"], [\"[-3.681846292912975, 3.794966490906944, 2.9052973870305268, -2.6675779737620524, -3.8927297310606104, -2.7849729476529843, 1.9060225740407404, -0.5352669406289783, -0.012580106190083207, 4.2030208800181885]\", \"negativen trend\"], [\"[-4.329143506225968, -1.9240461298838474, -2.528209022755609, 2.2923455293871635, 3.995498169810066, -4.131775171734843, 1.4308054310176468, -1.9491186615407465, -3.2995409593762854, 0.625131972502623]\", \"negativen trend\"], [\"[3.1119045353359187, -4.942889062493486, 2.138830911856153, -0.15449854105064453, -1.4574945883833759, 4.850724534068904, 3.1566824576617503, 1.0942582993765866, 0.5039246491489626, 0.6653204046446577]\", \"pozitiven trend\"], [\"[3.6130254311915824, 1.6148783027045592, -2.2187943922165245, 1.3545520622305682, -4.169157576171937, -1.6627295036730168, 0.9578353507975219, 0.25257578510143563, -2.9914636689079317, -3.1401010814355477]\", \"negativen trend\"], [\"[1.4115740775786847, 1.4072131162705634, 0.004790179934890837, -4.508732593717788, -2.2142043616707197, 2.9717872528225406, 1.5243932659843376, -2.0361437533351445, 1.6232335594193454, -4.876316230170897]\", \"pozitiven trend\"], [\"[-1.8657398603740116, -4.106995148281217, 1.3733838342685063, -2.637649655933773, -1.9042984256088693, -0.3971496287445966, 1.534431491819337, -2.519186661191964, 4.465628778109407, 3.3719701000530407]\", \"negativen trend\"], [\"[1.0994553823847975, 2.130181660942571, 2.447337352241453, -1.266532939584923, 3.058757146171974, -3.7522389698920096, 1.4778322375390784, -3.0907902438965174, 4.158740363250034, -3.7407719756661546]\", \"pozitiven trend\"], [\"[-0.02719875717036313, -1.0501818484575054, 1.6493395473917705, -0.6727087487619086, -1.756738464646661, -0.29478789392642835, 1.2330544480211856, -1.4481236187917634, 2.5320498297313367, -0.7900562173790515]\", \"negativen trend\"], [\"[-2.0758653988805342, 1.4429760441234052, 0.6318585827830443, 2.57024186415524, -0.9383588476928404, -3.509988094797806, -2.914688997519194, -3.057598274629325, -3.838523828622157, 0.21921408626415584]\", \"negativen trend\"], [\"[3.398105619275041, 1.7309462080612095, -0.13265563433016858, 4.517760014187818, -3.761339912203206, -4.470564598415809, -0.3305004726174987, 1.6324157470217893, 4.150908062830986, 0.9991058229237408]\", \"pozitiven trend\"], [\"[-2.336129912311677, 1.655701837221348, 0.6327967909780421, -3.8404962547636154, 3.0294371595075766, 4.829745780327693, -0.8080628985551357, -1.6902522090318572, 1.4477457892907148, -1.463226401523321]\", \"negativen trend\"], [\"[3.221932390622447, 4.059998166481831, 1.2200038018147321, -3.67375109007292, 1.2368657004558719, -3.356945998222338, -4.757498368984241, 3.7808562879683105, -4.5716464881467465, -0.9078954759814515]\", \"negativen trend\"], [\"[-4.384346176262909, 3.598400400678802, -1.009369323816634, -0.6843685916668729, -4.94719176252888, -0.2522517751905733, -4.820120684539415, 0.7547195489722416, -3.141289009081869, -2.00169517687622]\", \"negativen trend\"], [\"[-1.3727613022978837, -0.355247452468495, 2.6564026539049923, -2.306220556065762, -3.2058720840832464, -2.4855719098945954, 4.5981537577972045, -2.8851623340324006, -2.880010063804523, 5.0]\", \"negativen trend\"], [\"[-3.7156796532507057, 2.2707247883138875, 2.7673267275318487, 0.5553600666593921, 4.109489766758331, -3.551781695576609, -2.5381880323677803, -4.793769397835888, -1.7961330770489186, -4.593291687588333]\", \"negativen trend\"], [\"[-2.58285112310858, 1.8695419173379717, -0.19706360874942952, 0.49544162942729475, -4.249555002162076, -4.637189052755487, -0.875055643399306, -0.40925049089751475, 2.4300935434344453, -3.2545227553011005]\", \"negativen trend\"], [\"[-4.4125684454574445, 3.1924420571641186, 0.16012892218587194, 2.9853052888746046, -0.4764493908352465, 0.48156614856511215, 4.237633435384277, 0.629697724024405, 2.1193421737444496, -2.258142731463538]\", \"pozitiven trend\"], [\"[1.7709248702741798, -0.44739052246557076, -2.178890474646677, -1.0619389658405294, 3.3113398686365194, 0.3396337644456411, 0.9106112981682246, -4.18082515883101, -2.7082445773692494, -3.558511163719892]\", \"negativen trend\"], [\"[-4.555110064449673, 2.4029327199099715, -4.691574506775185, -0.31446037841237917, -4.656746614819689, -3.8643887382770963, 3.6555129872210994, -4.794781048681067, -1.2377028726010733, -4.346156135588484]\", \"negativen trend\"], [\"[4.111005691814473, -0.556261737531881, -1.463928567015754, 2.393807505562192, 4.464585823534097, 2.2468472392883223, -2.118180150866469, 0.9618398269039181, -3.302264467746796, 1.7136617509879652]\", \"pozitiven trend\"], [\"[-1.9219703548500315, 0.6038654154342442, -1.6518551677836601, -2.1490088958029587, 2.3495001942917018, -2.4259761246808997, -0.0367083272879265, -1.3557465208039208, -2.3356341860686887, -4.204190933793603]\", \"negativen trend\"], [\"[-0.8229351703072725, -0.3753094541130677, 3.694016924651905, 0.6287415674258083, -0.665854366158019, -4.452225662149945, -4.41507443948649, -1.9112214900873163, -1.8599112735225236, 0.2679300085236447]\", \"negativen trend\"], [\"[4.870900093255326, -0.6049782560528953, -0.6822516512962791, -1.6242461046568142, 0.10080261923229106, -1.868610424072585, -2.279072785078762, -0.24678531939213677, -3.4374240569381724, 4.926484601254591]\", \"negativen trend\"], [\"[-4.105084477132367, -4.432088158889608, 1.6804178161312713, 1.938518657194698, -2.467007058055526, 1.8672918033529733, 0.3775431056899885, -2.9460599491479615, 0.805931666541083, 4.299308624442171]\", \"pozitiven trend\"], [\"[2.131120928899266, -4.92239696064016, 2.0370280976861714, -4.877766175162522, -1.1162714364336659, 0.7996699958440638, -2.312928225726137, 1.0607737520317233, 0.5902312411459132, -3.737808527930839]\", \"negativen trend\"], [\"[0.12358332654711202, -1.9352492504345697, 2.5662338430877387, 2.1087503819692675, 0.11888377021220098, -3.33356936943665, -3.6028326967594424, 0.2805766083550658, -3.4107846897390335, -1.077611434535798]\", \"negativen trend\"], [\"[3.6192609711930412, 3.005665584322573, 1.5104549261140647, -4.405500931965966, -1.1569425189897493, 0.32806926748536114, -4.5296811640483785, -0.33760945889310534, -3.3628302679812814, -3.9031700817247064]\", \"negativen trend\"], [\"[-3.1153862111993993, -0.2808898669252837, 3.783397617480226, -0.28956124706058883, -4.7437561385983, 4.405486693892879, -3.820592707290502, -1.5304658635488653, -3.4647997325895625, -3.588517139953675]\", \"negativen trend\"], [\"[-2.8645936801182, 2.914910806806965, -4.018302422467735, 2.212653522707239, 1.1912681048631475, 4.936799049899927, 1.545578624344401, 1.0357217308396693, -4.736313709368154, -3.9476683806861836]\", \"pozitiven trend\"], [\"[-1.8087853693145988, 4.2664945172840785, -3.6870401500531633, 0.6786541353272932, 1.1900438821255603, 3.785108652816813, 2.210890677833971, -3.3006347568924403, 3.7793039234138153, -4.603276417584522]\", \"pozitiven trend\"], [\"[0.08058384738924129, 3.269015872267781, 2.2217300648787903, 0.9238409695687935, 3.816695469751263, 3.079381294332755, -1.3009448436308353, 0.021919751089246375, -0.03870477391813676, 4.041256367047403]\", \"pozitiven trend\"], [\"[0.014544506092402543, 0.3945228987439213, -1.2749220667493768, 2.639767639762038, -2.4319275390776522, 2.4137343002473903, 4.3056364894851935, -1.138977781085404, 1.5988208284076082, 1.7914103969466906]\", \"pozitiven trend\"], [\"[-3.745357834710422, 0.011234395166519029, 0.11760884195341514, 1.3845859928816884, 1.1412676815524012, -1.7333889774061513, 0.5546064083942142, 0.7174515452280605, 1.1392085948538808, 4.3274587227005625]\", \"pozitiven trend\"], [\"[-0.4645807073307058, -0.6733239276167566, 3.8730446901454076, -3.030311330146313, 3.798668513354139, -2.482094382241186, -4.857724145949933, -4.087712735290776, 2.6878989066327, -4.372418059924908]\", \"negativen trend\"]]", 
      "solution": "def trend(povratki):\r\n    p=0\r\n    n=0\r\n    for x in povratki:\r\n        if x>0:\r\n            p+=1\r\n        else:\r\n            n+=1\r\n    if p>n:\r\n        return 'pozitiven trend'\r\n    else:\r\n        return 'negativen trend'", 
      "problem": 225, 
      "validation": "Check.equal(\"trend([])\", 'negativen trend')\r\nCheck.equal(\"trend([1,-1,1,-1])\", 'negativen trend')\r\nCheck.equal(\"trend([1.0,-.3,.4,.2,1.0,-1.2])\", 'pozitiven trend')\r\nCheck.equal(\"trend([-1.0,.3,-.4,-.2,-1.0,-1.2])\", 'negativen trend')\r\n\r\n_rng=[1287631]\r\nfor i in range(500): _rng.append((_rng[-1]*1103515245+12345)%2**32)\r\n_m=max(_rng)/10\r\n_rng=[x/_m-5 for x in _rng[1:]]\r\nfor i in range(50):\r\n    Check.challenge(trend(_rng[10*i:10*i+10]), _rng[10*i:10*i+10])"
    }
  }, 
  {
    "pk": 886, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "\u010ce igralec pride na eno od polj _Community chest_, izvle\u010de eno od\n16 kartic. Od teh jih 14 ne vpliva na premikanje figuric, ostali dve\npa sta:\n\n1. Pojdi na polje _Go_\n2. Pojdi v je\u010do\n\n\u010ce igralec pride na eno od polj _Chance_, izvle\u010de eno od 16 kartic.\nOd teh jih 7 ne vpliva na premikanje figuric, ostale pa so:\n\n1. Pojdi na polje _Go_\n2. Pojdi v je\u010do\n3. Pojdi na polje _Illinois Ave_\n4. Pojdi do naslednje storitve (vodovod, elektrika).\n5. Pojdi do naslednje \u017eelezni\u0161ke postaje\n6. Pojdi na polje _St. Charles Place_\n7. Pojdi nazaj tri polja\n8. Pojdi na polje _Reading Railroad_\n9. Pojdi na polje _Boardwalk_\n\nV matriki `verjetnosti` ustrezno popravite verjetnosti.", 
      "timestamp": "2012-12-21 10:24:50", 
      "challenge": "[[\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0.027778\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.166667\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.027778\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0.027778\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.166667\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.027778\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0.0625\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0.024306\"], [\"NA\", \"0.048611\"], [\"NA\", \"0.072917\"], [\"NA\", \"0.097222\"], [\"NA\", \"0.121528\"], [\"NA\", \"0.145833\"], [\"NA\", \"0.121528\"], [\"NA\", \"0.097222\"], [\"NA\", \"0.072917\"], [\"NA\", \"0.048611\"], [\"NA\", \"0.024306\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0.0625\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0.027778\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.166667\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.027778\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0.027778\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.166667\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.027778\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0.027778\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.166667\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.027778\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0.027778\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.166667\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.027778\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0.0625\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0.0625\"], [\"NA\", \"0.0625\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0.012153\"], [\"NA\", \"0.024306\"], [\"NA\", \"0.098958\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.060764\"], [\"NA\", \"0.072917\"], [\"NA\", \"0.123264\"], [\"NA\", \"0.048611\"], [\"NA\", \"0.036458\"], [\"NA\", \"0.024306\"], [\"NA\", \"0.012153\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0.0625\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0.0625\"], [\"NA\", \"0.0625\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0.027778\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.166667\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.027778\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0.027778\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.166667\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.027778\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0.027778\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.166667\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.027778\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0.027778\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.166667\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.027778\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0.027778\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.166667\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.027778\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0.027778\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.166667\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.027778\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0.027778\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.166667\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.027778\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0.027778\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.166667\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.027778\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0.027778\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.166667\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.027778\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0.0625\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0.024306\"], [\"NA\", \"0.048611\"], [\"NA\", \"0.072917\"], [\"NA\", \"0.097222\"], [\"NA\", \"0.121528\"], [\"NA\", \"0.145833\"], [\"NA\", \"0.121528\"], [\"NA\", \"0.097222\"], [\"NA\", \"0.072917\"], [\"NA\", \"0.048611\"], [\"NA\", \"0.024306\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0.0625\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0.027778\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.166667\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.027778\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0.027778\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.166667\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.027778\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0.027778\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.166667\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.027778\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0.027778\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.166667\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.027778\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0.0625\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0.0625\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0.0625\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0.0625\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0.074653\"], [\"NA\", \"0.086806\"], [\"NA\", \"0.036458\"], [\"NA\", \"0.048611\"], [\"NA\", \"0.123264\"], [\"NA\", \"0.072917\"], [\"NA\", \"0.060764\"], [\"NA\", \"0.048611\"], [\"NA\", \"0.036458\"], [\"NA\", \"0.024306\"], [\"NA\", \"0.012153\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0.0625\"], [\"NA\", \"0.0625\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0.027778\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.166667\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.027778\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0.027778\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.166667\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.027778\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0.027778\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.166667\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.027778\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0.027778\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.166667\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.027778\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0.027778\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.166667\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.027778\"], [\"NA\", \"0\"], [\"NA\", \"0.027778\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0.027778\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.166667\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.055556\"], [\"NA\", \"0\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.027778\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0.027778\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.166667\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.083333\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"1\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.027778\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0.027778\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.166667\"], [\"NA\", \"0.138889\"], [\"NA\", \"0\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.027778\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0.027778\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.166667\"], [\"NA\", \"0\"], [\"NA\", \"0.208333\"], [\"NA\", \"0.121528\"], [\"NA\", \"0.097222\"], [\"NA\", \"0.072917\"], [\"NA\", \"0.048611\"], [\"NA\", \"0.024306\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0.024306\"], [\"NA\", \"0.048611\"], [\"NA\", \"0.072917\"], [\"NA\", \"0.097222\"], [\"NA\", \"0.121528\"], [\"NA\", \"0.0625\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.166667\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.027778\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0.027778\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.111111\"], [\"NA\", \"0\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.166667\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.027778\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0.027778\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.083333\"], [\"NA\", \"0\"], [\"NA\", \"0.098958\"], [\"NA\", \"0.048611\"], [\"NA\", \"0.060764\"], [\"NA\", \"0.072917\"], [\"NA\", \"0.060764\"], [\"NA\", \"0.173611\"], [\"NA\", \"0.036458\"], [\"NA\", \"0.024306\"], [\"NA\", \"0.012153\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0.0625\"], [\"NA\", \"0.0625\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0.0625\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0.0625\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0.012153\"], [\"NA\", \"0.086806\"], [\"NA\", \"0.0625\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.166667\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.027778\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0.027778\"], [\"NA\", \"0\"], [\"NA\", \"0.027778\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.166667\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.027778\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0.027778\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.166667\"], [\"NA\", \"0.138889\"], [\"NA\", \"0.111111\"], [\"NA\", \"0.083333\"], [\"NA\", \"0.055556\"], [\"NA\", \"0.027778\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0.027778\"], [\"NA\", \"0\"], [\"NA\", \"0.027778\"], [\"NA\", \"0\"], [\"NA\", \"0.027778\"], [\"NA\", \"0\"], [\"NA\", \"0.027778\"], [\"NA\", \"0\"], [\"NA\", \"0.027778\"], [\"NA\", \"0\"], [\"NA\", \"0.027778\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0\"], [\"NA\", \"0.833333\"]]", 
      "solution": "# polozaji polj \"Community Chest\" in \"Chance\"\ncommunity.chest <- (1 : 41)[colnames(verjetnosti) == \"Community Chest\"]\nchance <- (1 : 41)[colnames(verjetnosti) == \"Chance\"]\n\n# ce pridemo na polje \"Community Chest\", z verjetnostjo 14/16 mecemo kocko\nverjetnosti[community.chest, ] <- 14 / 16 * verjetnosti[community.chest, ]\n# na nekatera polja pridemo z metom kocke ali s kartico\ncc.kartice <- c(\"Go\", \"In Jail\")\nfor (p in cc.kartice)\n  verjetnosti[community.chest, p] <- verjetnosti[community.chest, p] + 1 / 16\n\n# ce pridemo na polje \"Chance\", z verjetnostjo 7/16 mecemo kocko\nverjetnosti[chance, ] <- 7 / 16 * verjetnosti[chance, ]\n\n# na nekatera polja pridemo z metom kocke ali s kartico\nchance.kartice <- c(\"Go\", \"In Jail\", \"Illinois Avenue\", \"St. Charles Place\", \"Reading Railroad\", \"Boardwalk\")\nfor (p in chance.kartice)\n  verjetnosti[chance, p] <- verjetnosti[chance, p] + 1 / 16\n\n# pojdi do naslednje storitve moramo napisati rocno\nverjetnosti[8, 13] <- verjetnosti[8, 13] + 1 / 16\nverjetnosti[23, 29] <- verjetnosti[23, 29] + 1 / 16\nverjetnosti[37, 13] <- verjetnosti[37, 13] + 1 / 16\n\n# pojdi do naslednje zelezniske postaje moramo napisati rocno\nverjetnosti[8, 16] <- verjetnosti[8, 16] + 1 / 16\nverjetnosti[23, 26] <- verjetnosti[23, 26] + 1 / 16\nverjetnosti[37, 6] <- verjetnosti[37, 6] + 1 / 16\n\n# pojdi nazaj tri polja\nverjetnosti[8, 5] <- verjetnosti[8, 5] + 1 / 16\nverjetnosti[23, 20] <- verjetnosti[23, 20] + 1 / 16\nverjetnosti[37, 34] <- verjetnosti[37, 34] + 1 / 16", 
      "problem": 293, 
      "validation": "verj <-\n  structure(c(0, 0, 0.062, 0, 0, 0, 0, 0.062, 0, 0, 0, 0, 0, 0, \n              0, 0, 0, 0.062, 0, 0, 0, 0, 0.062, 0, 0, 0, 0, 0, 0.028, 0.056, \n              0, 0.111, 0.139, 0.208, 0.139, 0.111, 0.099, 0.056, 0.028, 0, \n              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n              0, 0, 0, 0, 0, 0, 0, 0, 0, 0.028, 0, 0.083, 0.111, 0.122, 0.167, \n              0.139, 0.049, 0.083, 0.056, 0.028, 0, 0.028, 0, 0, 0, 0, 0, 0, \n              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n              0, 0, 0, 0.056, 0.083, 0.097, 0.139, 0.167, 0.061, 0.111, 0.083, \n              0.056, 0, 0.056, 0.028, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.028, 0.056, \n              0.073, 0.111, 0.139, 0.073, 0.139, 0.111, 0.083, 0, 0.083, 0.056, \n              0.024, 0, 0, 0, 0, 0.062, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.028, 0.049, 0.083, 0.111, \n              0.061, 0.167, 0.139, 0.111, 0, 0.111, 0.083, 0.049, 0.028, 0, \n              0, 0, 0.062, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.062, \n              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.024, 0.056, 0.083, 0.174, 0.139, \n              0.167, 0.139, 0, 0.139, 0.111, 0.073, 0.056, 0.028, 0, 0, 0, \n              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n              0, 0, 0, 0, 0, 0.028, 0.056, 0.036, 0.111, 0.139, 0.167, 0, 0.167, \n              0.139, 0.097, 0.083, 0.056, 0.028, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.028, \n              0.024, 0.083, 0.111, 0.139, 0, 0.139, 0.167, 0.122, 0.111, 0.083, \n              0.056, 0.028, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.012, 0.056, 0.083, 0.111, \n              0, 0.111, 0.139, 0.146, 0.139, 0.111, 0.083, 0.056, 0.012, 0, \n              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n              0, 0, 0, 0, 0, 0, 0, 0.028, 0.056, 0.083, 0, 0.083, 0.111, 0.122, \n              0.167, 0.139, 0.111, 0.083, 0.024, 0.028, 0, 0, 0, 0, 0, 0, 0, \n              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n              0, 0.028, 0.056, 0, 0.056, 0.083, 0.097, 0.139, 0.167, 0.139, \n              0.111, 0.099, 0.056, 0.028, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n              0, 0.062, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.062, 0, 0, \n              0.028, 0, 0.028, 0.056, 0.073, 0.111, 0.139, 0.167, 0.139, 0.111, \n              0.083, 0.056, 0.028, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.062, 0, 0, 0, 0.028, 0, 0.028, \n              0.049, 0.083, 0.111, 0.139, 0.167, 0.061, 0.111, 0.083, 0.056, \n              0.028, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.024, 0.056, 0.083, 0.111, \n              0.139, 0.073, 0.139, 0.111, 0.083, 0.056, 0.028, 0, 0, 0, 0, \n              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n              0, 0, 0.028, 0, 0, 0, 0.028, 0.056, 0.083, 0.111, 0.123, 0.167, \n              0.139, 0.111, 0.083, 0.056, 0.028, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n              0, 0.028, 0.056, 0.083, 0.049, 0.139, 0.167, 0.139, 0.111, 0.083, \n              0.056, 0.028, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n              0, 0, 0, 0, 0, 0, 0, 0, 0, 0.028, 0, 0, 0, 0, 0, 0.028, 0.056, \n              0.036, 0.111, 0.139, 0.167, 0.139, 0.111, 0.083, 0.056, 0.028, \n              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.028, 0.024, 0.083, 0.111, 0.139, \n              0.167, 0.139, 0.111, 0.083, 0.056, 0.028, 0, 0, 0, 0, 0, 0, 0, \n              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.028, 0, 0, \n              0, 0, 0, 0, 0, 0.012, 0.056, 0.083, 0.111, 0.139, 0.167, 0.139, \n              0.111, 0.083, 0.056, 0.024, 0, 0, 0, 0, 0.062, 0, 0, 0, 0, 0, \n              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n              0.028, 0.056, 0.083, 0.111, 0.139, 0.167, 0.139, 0.111, 0.083, \n              0.049, 0.028, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n              0, 0, 0, 0, 0, 0.028, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.028, 0.056, \n              0.083, 0.111, 0.139, 0.167, 0.139, 0.111, 0.073, 0.056, 0.028, \n              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.028, 0.056, 0.083, 0.111, 0.139, \n              0.167, 0.139, 0.097, 0.083, 0.056, 0.028, 0, 0, 0, 0, 0, 0, 0, \n              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.028, 0, 0, 0, 0, 0, 0, \n              0, 0, 0, 0, 0, 0.028, 0.056, 0.083, 0.111, 0.139, 0.167, 0.122, \n              0.111, 0.083, 0.056, 0.028, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.062, 0, 0, 0, \n              0, 0.028, 0.056, 0.083, 0.111, 0.139, 0.146, 0.139, 0.111, 0.083, \n              0.056, 0.075, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.062, 0, \n              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.028, 0.056, \n              0.083, 0.111, 0.122, 0.167, 0.139, 0.111, 0.083, 0.087, 0.028, \n              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.028, 0.056, 0.083, 0.097, 0.139, \n              0.167, 0.139, 0.111, 0.036, 0.056, 0.028, 0, 0, 0, 0, 0, 0, 0, \n              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n              0, 0, 0, 0.028, 0.056, 0.073, 0.111, 0.139, 0.167, 0.139, 0.049, \n              0.083, 0.056, 0.028, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.028, 0.049, \n              0.083, 0.111, 0.139, 0.167, 0.123, 0.111, 0.083, 0.056, 0.028, \n              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.024, 0.056, 0.083, 0.111, 0.139, \n              0.073, 0.139, 0.111, 0.083, 0.056, 0.028, 0, 0, 0, 0, 0, 0, 0, \n              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n              0, 0, 0, 0.028, 0.056, 0.083, 0.111, 0.061, 0.167, 0.139, 0.111, \n              0.083, 0.056, 0.028, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.028, 0.056, \n              0.083, 0.049, 0.139, 0.167, 0.139, 0.111, 0.083, 0.056, 0.028, \n              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.028, 0.056, 0.036, 0.111, 0.139, \n              0.167, 0.139, 0.111, 0.083, 0.056, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n              0, 0, 0.028, 0.024, 0.083, 0.111, 0.139, 0.167, 0.139, 0.111, \n              0.083, 0, 0.028, 0, 0, 0, 0, 0.062, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.012, 0.056, \n              0.083, 0.111, 0.139, 0.167, 0.139, 0.111, 0, 0.056, 0.028, 0, \n              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n              0, 0, 0, 0, 0, 0, 0, 0, 0, 0.028, 0.056, 0.083, 0.111, 0.139, \n              0.167, 0.139, 0, 0.083, 0.056, 0.024, 0, 0, 0, 0, 0, 0, 0, 0, \n              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n              0, 0, 0.028, 0.056, 0.083, 0.111, 0.139, 0.167, 0, 0.111, 0.083, \n              0.049, 0.028, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.028, 0.056, 0.083, \n              0.111, 0.139, 0, 0.139, 0.111, 0.073, 0.056, 0.028, 0, 0, 0, \n              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n              0, 0, 0, 0, 0, 0, 0, 0.028, 0.056, 0.083, 0.111, 0, 0.167, 0.139, \n              0.097, 0.083, 0.056, 0.012, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n              0.062, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.062, 0, 0, \n              0, 0, 0.028, 0.056, 0.083, 0, 0.139, 0.167, 0.122, 0.111, 0.083, \n              0.087, 0.028, 0, 0, 0, 0, 0, 0.062, 0, 0, 0, 0, 0.062, 0, 0, \n              0, 0, 0, 0, 0, 0, 0, 0.062, 0, 0, 0, 0, 0.062, 0, 0, 0, 0, 0, \n              0, 0, 1, 0, 0, 0.062, 0, 0, 0.062, 0, 0, 0, 0.833), .Dim = c(41L, \n                                                                           41L))\n\nnapake <- 0\nfor(i in 1 : 41) {\n  if(napake > 10) break\n  for(j in 1 : 41) {\n    if(napake > 10) break\n    if(round(verjetnosti[i, j], 3) != verj[i, j]) {\n      check$error(\"Verjetnost pomika %s -> %s je pribli\u017eno %.3f namesto %.3f.\",\n                  imena.polj[i], imena.polj[j], verjetnosti[i, j], verj[i, j])\n      napake <- napake + 1\n    }\n  }\n}\n\nfor(i in 1 : 41)\n  for(j in 1 : 41)\n    check$challenge(verjetnosti[i, j])"
    }
  }, 
  {
    "pk": 478, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavi funkcijo 'nadGrafom', ki kot parametra dobi funkcijo f in to\u010dko (x,y), vrne\r\npa naj True, \u010de to\u010dka le\u017ei nad grafom funkcije in False sicer.\r\nPrimer:\r\n    >>> nadGrafom(math.cos, (0,2))\r\n    True", 
      "timestamp": "2012-03-27 09:17:25", 
      "challenge": "[]", 
      "solution": "def nadGrafom(f, t):\r\n    (x,y) = t\r\n    if y > f(x): \r\n        return True\r\n    return False\r\n\r\nimport math", 
      "problem": 157, 
      "validation": "import math\r\n\r\nCheck.equal('nadGrafom(math.sin, (1, 0.3))', False, \"Odgovor je napa\u010den\")\r\nCheck.equal('nadGrafom(math.sin, (1, 1))', True, \"Odgovor je napa\u010den\")"
    }
  }, 
  {
    "pk": 7, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `vektorskaRazdalja(v1, v2)`, ki vrne razdaljo med\nvektorjema `v1` in `v2`, podanima s seznamom komponent.\n\n    >>> vektorskaRazdalja([0, 0, 1], [2, 1, 3])\n    3", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"None\", \"50.0\"], [\"None\", \"69.310894\"], [\"None\", \"83.186537\"], [\"None\", \"96.124919\"], [\"None\", \"103.053384\"], [\"None\", \"110.544109\"], [\"None\", \"116.893114\"], [\"None\", \"130.904545\"], [\"None\", \"133.176575\"], [\"None\", \"130.919823\"], [\"None\", \"134.313067\"], [\"None\", \"140.655608\"], [\"None\", \"139.6424\"], [\"None\", \"141.689802\"], [\"None\", \"143.387587\"], [\"None\", \"172.973986\"], [\"None\", \"145.89037\"], [\"None\", \"155.344778\"], [\"None\", \"147.43134\"], [\"None\", \"152.184099\"], [\"None\", \"148.256534\"], [\"None\", \"148.47222\"], [\"None\", \"148.593405\"], [\"None\", \"162.234398\"], [\"None\", \"170.587221\"], [\"None\", \"148.660687\"], [\"None\", \"190.682983\"], [\"None\", \"153.179633\"], [\"None\", \"148.848917\"], [\"None\", \"149.063745\"], [\"None\", \"149.398795\"], [\"None\", \"224.997778\"], [\"None\", \"150.532389\"], [\"None\", \"151.380316\"], [\"None\", \"152.446712\"], [\"None\", \"181.262241\"], [\"None\", \"155.319027\"], [\"None\", \"157.162336\"], [\"None\", \"159.298462\"], [\"None\", \"171.3476\"], [\"None\", \"164.49924\"], [\"None\", \"167.582815\"], [\"None\", \"170.997076\"], [\"None\", \"176.748409\"], [\"None\", \"183.303028\"], [\"None\", \"183.248465\"], [\"None\", \"188.0\"], [\"None\", \"206.53329\"], [\"None\", \"225.743217\"], [\"None\", \"213.775583\"], [\"None\", \"210.23796\"], [\"None\", \"216.573313\"], [\"None\", \"268.082077\"], [\"None\", \"241.122376\"], [\"None\", \"237.318352\"], [\"None\", \"242.948554\"], [\"None\", \"252.515346\"], [\"None\", \"260.49952\"], [\"None\", \"268.730348\"], [\"None\", \"275.463246\"], [\"None\", \"285.902081\"], [\"None\", \"294.828764\"], [\"None\", \"300.219919\"], [\"None\", \"360.44417\"], [\"None\", \"322.893171\"], [\"None\", \"332.655978\"], [\"None\", \"342.613485\"], [\"None\", \"349.662695\"], [\"None\", \"363.092275\"], [\"None\", \"373.604069\"], [\"None\", \"384.291556\"], [\"None\", \"398.055273\"], [\"None\", \"406.177301\"], [\"None\", \"417.367943\"], [\"None\", \"418.090899\"], [\"None\", \"436.064215\"], [\"None\", \"451.889367\"], [\"None\", \"463.702491\"], [\"None\", \"524.930472\"], [\"None\", \"459.390901\"], [\"None\", \"487.220689\"], [\"None\", \"512.409992\"], [\"None\", \"524.938092\"], [\"None\", \"532.578633\"], [\"None\", \"550.399855\"], [\"None\", \"563.329389\"], [\"None\", \"576.388758\"], [\"None\", \"573.843184\"], [\"None\", \"602.889708\"], [\"None\", \"605.722709\"], [\"None\", \"629.888879\"], [\"None\", \"637.827563\"], [\"None\", \"657.373562\"], [\"None\", \"671.294272\"], [\"None\", \"685.332036\"], [\"None\", \"624.05128\"], [\"None\", \"713.753459\"], [\"None\", \"704.048294\"], [\"None\", \"730.531313\"]]", 
      "solution": "def vektorskaRazdalja(v1, v2):\n    return (sum((x1 - x2) ** 2 for (x1, x2) in zip(v1, v2))) ** (1 / 2)", 
      "problem": 4, 
      "validation": "Check.equal('vektorskaRazdalja([0, 0, 1], [2, 1, 3])', 3)\nCheck.equal('vektorskaRazdalja([0], [3])', 3)\nCheck.equal('vektorskaRazdalja([1, 2], [3, 4])', 8 ** (1 / 2))\nfor i in range(1, 100):\n    Check.challenge(vektorskaRazdalja(\n        [(k ** 13) % i for k in range(1, i + 1)],\n        [50 - (k ** 13) % i for k in range(1, i + 1)]\n    ))"
    }
  }, 
  {
    "pk": 77, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `prestopno(n)`, ki vrne `True`, \u010de je leto `n`\nprestopno, sicer pa vrne `False`.", 
      "timestamp": "2012-11-05 16:40:33", 
      "challenge": "[[\"None\", \"[False, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False]\"]]", 
      "solution": "def prestopno(n):\n    return (n % 400 == 0) or (n % 4 == 0 and n % 100 != 0)", 
      "problem": 28, 
      "validation": "Check.equal(\"prestopno(2011)\", False)\nCheck.equal(\"prestopno(2000)\", True)\nCheck.equal(\"prestopno(1900)\", False)\nCheck.equal(\"prestopno(2004)\", True)\n\nCheck.challenge([prestopno(n) for n in range(1500, 2000)])"
    }
  }, 
  {
    "pk": 10, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "\u0160tevilo je *simetri\u010dno nepopolno*, kadar je njegova nepopolnost enaka\nnepopolnosti \u0161tevila, obrnjenega na glavo.\nNa primer, vsa palindromna \u0161tevila so simetri\u010dno nepopolna, prav tako\npa je nepopolno \u0161tevilo 24, saj je njegova nepopolnost enaka\n$|24 - (1 + 2 + 3 + 4 + 6 + 8 + 12)| = 12$, kar je prav tako\nnepopolnost \u0161tevila 42.\n\nSestavite funkcijo `simetricnoNepopolna(n)`, ki vrne seznam vseh\nsimetri\u010dno nepopolnih \u0161tevil med 1 in `n`.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"None\", \"[1]\"], [\"None\", \"[1, 2]\"], [\"None\", \"[1, 2, 3]\"], [\"None\", \"[1, 2, 3, 4]\"], [\"None\", \"[1, 2, 3, 4, 5]\"], [\"None\", \"[1, 2, 3, 4, 5, 6]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33, 42]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33, 42]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33, 42, 44]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33, 42, 44, 45]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33, 42, 44, 45]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33, 42, 44, 45]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33, 42, 44, 45]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33, 42, 44, 45]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33, 42, 44, 45]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33, 42, 44, 45]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33, 42, 44, 45]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33, 42, 44, 45]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33, 42, 44, 45, 54]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33, 42, 44, 45, 54, 55]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33, 42, 44, 45, 54, 55]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33, 42, 44, 45, 54, 55]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33, 42, 44, 45, 54, 55]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33, 42, 44, 45, 54, 55]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33, 42, 44, 45, 54, 55]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33, 42, 44, 45, 54, 55]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33, 42, 44, 45, 54, 55]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33, 42, 44, 45, 54, 55]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33, 42, 44, 45, 54, 55]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33, 42, 44, 45, 54, 55]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33, 42, 44, 45, 54, 55, 66]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33, 42, 44, 45, 54, 55, 66]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33, 42, 44, 45, 54, 55, 66]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33, 42, 44, 45, 54, 55, 66]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33, 42, 44, 45, 54, 55, 66]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33, 42, 44, 45, 54, 55, 66]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33, 42, 44, 45, 54, 55, 66]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33, 42, 44, 45, 54, 55, 66]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33, 42, 44, 45, 54, 55, 66]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33, 42, 44, 45, 54, 55, 66]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33, 42, 44, 45, 54, 55, 66]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33, 42, 44, 45, 54, 55, 66, 77]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33, 42, 44, 45, 54, 55, 66, 77]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33, 42, 44, 45, 54, 55, 66, 77]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33, 42, 44, 45, 54, 55, 66, 77]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33, 42, 44, 45, 54, 55, 66, 77]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33, 42, 44, 45, 54, 55, 66, 77]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33, 42, 44, 45, 54, 55, 66, 77]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33, 42, 44, 45, 54, 55, 66, 77]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33, 42, 44, 45, 54, 55, 66, 77]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33, 42, 44, 45, 54, 55, 66, 77]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33, 42, 44, 45, 54, 55, 66, 77]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33, 42, 44, 45, 54, 55, 66, 77, 88]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33, 42, 44, 45, 54, 55, 66, 77, 88]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33, 42, 44, 45, 54, 55, 66, 77, 88]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33, 42, 44, 45, 54, 55, 66, 77, 88]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33, 42, 44, 45, 54, 55, 66, 77, 88]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33, 42, 44, 45, 54, 55, 66, 77, 88]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33, 42, 44, 45, 54, 55, 66, 77, 88]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33, 42, 44, 45, 54, 55, 66, 77, 88]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33, 42, 44, 45, 54, 55, 66, 77, 88]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33, 42, 44, 45, 54, 55, 66, 77, 88]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33, 42, 44, 45, 54, 55, 66, 77, 88]\"], [\"None\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33, 42, 44, 45, 54, 55, 66, 77, 88, 99]\"]]", 
      "solution": "def simetricnoNepopolna(n):\n    def simetricnoNepopolno(i):\n        return nepopolnost(i) == nepopolnost(int(str(i)[::-1]))\n    return [i for i in range(1, n + 1) if simetricnoNepopolno(i)]", 
      "problem": 8, 
      "validation": "Check.equal('simetricnoNepopolna(19)', [1, 2, 3, 4, 5, 6, 7, 8, 9, 11])\nCheck.equal('simetricnoNepopolna(28)', [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24])\nCheck.equal('simetricnoNepopolna(42)', [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33, 42])\nfor i in range(1, 100):\n    Check.challenge(simetricnoNepopolna(i))"
    }
  }, 
  {
    "pk": 108, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `uporabi(mat, v)`, ki matriko `mat` uporabi na\nvektorju `v`. Vektor je predstavljen kot seznam \u0161tevil.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"None\", \"[1456, 1756, 2056, 2356, 2656, 2956, 3256, 3556]\"]]", 
      "solution": "def uporabi(mat, v):\n    m, n = len(mat), len(mat[0])\n    return [sum(mat[i][j] * v[j] for j in range(n)) for i in range(m)]", 
      "problem": 41, 
      "validation": "Check.equal('uporabi([[1, 3], [2, 4]], [5, 6])', [23, 34])\nCheck.equal('uporabi([[1], [5]], [5])', [5, 25])\nCheck.equal('uporabi([[1, 3, 6], [2, 4, 8]], [0, 1, 0])', [3, 4])\nCheck.challenge(uporabi(_mat, [16 - i for i in range(10)]))"
    }
  }, 
  {
    "pk": 851, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Zapi\u0161ite funkcijo `harmonicna(n)`, ki vrne vektor delnih vsot \n$\\sum_{i = 1}^m \\frac{1}{i}$ za `m = 1, 2, ..., n`.", 
      "timestamp": "2012-11-14 09:09:32", 
      "challenge": "[]", 
      "solution": "harmonicna <- function(n){\n  cumsum(1 / (1 : n))\n}", 
      "problem": 276, 
      "validation": "check$equal(harmonicna(5), c(1.000000, 1.500000, 1.833333, 2.083333, 2.283333))\ncheck$equal(harmonicna(10), c(1.000000, 1.500000, 1.833333, 2.083333, 2.283333,\n                              2.450000, 2.592857, 2.717857, 2.828968, 2.928968))"
    }
  }, 
  {
    "pk": 616, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavi funkcijo `povprecja(seznam, m)`, ki iz danega seznama dol\u017eine\r\nN sestavi seznam dol\u017eine N-m+1, ki sestoji iz teko\u010dih povpre\u010dij\r\nzaporednih podseznamov dol\u017eine m. Funkcija kot parametra dobi seznam\r\nin \u017eeleno dol\u017eino podseznamov, vrne pa ustrezen seznam. \u010ce je dol\u017eina\r\nseznama manj\u0161a kot zahtevana dol\u017eina podseznamov, naj funkcija vrne\r\nprazen seznam.\r\nPrimer: `povprecja([1, 2, 3, 4, 5, 6], 3)` vrne `[2.0, 3.0, 4.0, 5.0]`.", 
      "timestamp": "2012-03-27 08:50:37", 
      "challenge": "[]", 
      "solution": "def povprecja(seznam, m):\r\n    N=len(seznam)\r\n    return [povprecje(podseznam(seznam,i,m)) for i in range(N-m+1)]\r\n", 
      "problem": 203, 
      "validation": "Check.equal('povprecja([1, 2, 3, 4, 5, 6], 3)', [2, 3, 4, 5])\r\nCheck.equal('povprecja([1, 2, 3, 4, 5, 6], 1)', [1, 2, 3, 4, 5, 6])\r\nCheck.equal('povprecja([], 1)', [])"
    }
  }, 
  {
    "pk": 458, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Popravi funkcijo `nizi2` tako, da ne upo\u0161teva narekovajev, pred\nkaterimi se nahaja znak '\\'. Funkciji naj bo ime `nizi3`.", 
      "timestamp": "2012-05-13 08:42:51", 
      "challenge": "[]", 
      "solution": "def nizi3(vhod, izhod):\n    with open(vhod) as fv, open(izhod, \"w\") as fi:\n        vNizu = False\n        niz = \"\"\n        for vrstica in fv:\n            for z in vrstica:\n                if z == \"\\\\\":\n                    ignoriraj = True\n                if z == '\"' and not ignoriraj:\n                    vNizu = not vNizu\n                    if not vNizu and len(niz) > 0:\n                        print(niz, file=fi)\n                        niz = \"\"\n                else:\n                    if vNizu:\n                        if ignoriraj:\n                            niz += \"\\\\\"\n                        niz += z\n                    ignoriraj = False", 
      "problem": 152, 
      "validation": "# _makefile1(\"_test1.txt\")\n# nizi3(\"_test1.txt\",\"_test2.txt\")\n# _makefile3(\"_test3.txt\")\n# if not _istedatoteke(\"_test2.txt\",\"_test3.txt\",\"_test1.txt\"):\n#     Check.error(\"Izhodna datoteka je napa\u010dna\")\n# _removefiles(\"_test1.txt\",\"_test2.txt\",\"_test3.txt\")"
    }
  }, 
  {
    "pk": 64, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `alterniraj(v)`, ki vrne vektor, ki ima na lihih mestih\nenake vrednosti kot `v`, na sodih pa nasprotne.\nTorej, `alterniraj` na vektorju `2, 5, 1, 7` vrne vektor `2, -5, 1, -7`.\nFunkcija lahko pri vektorjih lihih dol\u017ein javlja napako.", 
      "timestamp": "2012-10-22 10:43:59", 
      "challenge": "[]", 
      "solution": "alterniraj <- function(v) {\n    return(v * c(1, -1))\n}", 
      "problem": 21, 
      "validation": "check$equal(alterniraj(c(2, 5, 1, 7)), c(2, -5, 1, -7))\ncheck$equal(alterniraj(c(2, 5, 1, 7, -1, -5)), c(2, -5, 1, -7, -1, 5))"
    }
  }, 
  {
    "pk": 596, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `ekstrema(spremembe)`, ki pri danih spremembah\nstanja poi\u0161\u010de dneva, ko je bilo stanje na ra\u010dunu najni\u017eje oziroma\nnajvi\u0161je. Stanji naj vrne v obliki nabora.", 
      "timestamp": "2012-04-24 14:27:15", 
      "challenge": "[]", 
      "solution": "def ekstrema(spremembe):\n    s = stanja(spremembe)\n    najnizje = s.index(min(s))\n    najvisje = s.index(max(s))\n    return (najnizje, najvisje)", 
      "problem": 198, 
      "validation": "Check.equal('ekstrema([1, 2, 3])', (0, 3))\nCheck.equal('ekstrema([1, -5, -20, 30])', (3, 4))\nCheck.equal('ekstrema([])', (0, 0))\nCheck.equal('ekstrema([10, -5, 20, -6])', (0, 3))"
    }
  }, 
  {
    "pk": 67, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `pozitivni(v)`, ki vrne vektor pozitivnih komponent\r\nvektorja `v`.", 
      "timestamp": "2012-11-07 12:55:12", 
      "challenge": "[[\"NA\", \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51\"]]", 
      "solution": "pozitivni <- function(v) {\r\n    v[v > 0]\r\n}", 
      "problem": 22, 
      "validation": "check$equal(pozitivni(c(2, 5, 1, 7)), c(2, 5, 1, 7))\r\ncheck$equal(pozitivni(c(2, 5, -1, 7, -1, -5)), c(2, 5, 7))\r\ncheck$challenge(paste(pozitivni(-50 : 51), collapse=\" \"))"
    }
  }, 
  {
    "pk": 601, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `cikel(permutacija, x)`, ki vrne celoten cikel, ki\nse za\u010dne s \u0161tevilom `x`.\n\n    >>> cikel({1: 3, 2: 2, 3: 1}, 1)\n    [1, 3]\n    >>> cikel({1: 3, 2: 2, 3: 1}, 2)\n    [2]", 
      "timestamp": "2012-05-07 01:21:59", 
      "challenge": "[]", 
      "solution": "def cikel(permutacija, x):\n    # Dokler slika zadnjega elementa, ki smo ga dodali v cikel, ni enaka\n    # za\u010detnemu elementu y, dodamo sliko ter ponavljamo.\n    cikel = [x]\n    y = permutacija[x]\n    while y != x:\n        cikel.append(y)\n        y = permutacija[y]\n    return cikel", 
      "problem": 199, 
      "validation": "Check.equal('cikel({1: 3, 2: 4, 3: 2, 4: 1}, 1)', [1, 3, 2, 4])\nCheck.equal('cikel({1: 3, 2: 2, 3: 1}, 1)', [1, 3])\nCheck.equal('cikel({1: 3, 2: 2, 3: 1}, 2)', [2])\nCheck.equal('cikel({1: 3, 2: 2, 3: 1}, 3)', [3, 1])"
    }
  }, 
  {
    "pk": 132, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "V spremenljivko `tocke` shranite razporeditev to\u010dk za slog in dol\u017eino\nza posamezne skakalce in serije. Imena stolpcev in vrstic nastavite z\n\n    colnames(tocke) <- c(\"dolzina\", \"slog\")\n    rownames(tocke) <- rownames(rezultati) # vrstice poimenujemo po tekmovalcih\n\nRezultate lahko primerjate tudi z uradnimi.", 
      "timestamp": "2012-12-03 14:09:30", 
      "challenge": "[[\"Simon Ammann dolzina 1\", \"87\"], [\"Simon Ammann dolzina 2\", \"78.9\"], [\"Simon Ammann slog 1\", \"55.5\"], [\"Simon Ammann slog 2\", \"55.5\"], [\"Lauri Asikainen dolzina 1\", \"70.8\"], [\"Lauri Asikainen dolzina 2\", \"45.6\"], [\"Lauri Asikainen slog 1\", \"52.5\"], [\"Lauri Asikainen slog 2\", \"50.5\"], [\"Anders Bardal dolzina 1\", \"75.3\"], [\"Anders Bardal dolzina 2\", \"87.9\"], [\"Anders Bardal slog 1\", \"54\"], [\"Anders Bardal slog 2\", \"55.5\"], [\"Gregor Deschwanden dolzina 1\", \"61.8\"], [\"Gregor Deschwanden dolzina 2\", \"-9.3\"], [\"Gregor Deschwanden slog 1\", \"51\"], [\"Gregor Deschwanden slog 2\", \"42\"], [\"Manuel Fettner dolzina 1\", \"74.4\"], [\"Manuel Fettner dolzina 2\", \"81.6\"], [\"Manuel Fettner slog 1\", \"53.5\"], [\"Manuel Fettner slog 2\", \"52\"], [\"Richard Freitag dolzina 1\", \"62.7\"], [\"Richard Freitag dolzina 2\", \"50.1\"], [\"Richard Freitag slog 1\", \"52.5\"], [\"Richard Freitag slog 2\", \"50\"], [\"Severin Freund dolzina 1\", \"86.1\"], [\"Severin Freund dolzina 2\", \"87.9\"], [\"Severin Freund slog 1\", \"54\"], [\"Severin Freund slog 2\", \"54.5\"], [\"Karl Geiger dolzina 1\", \"69\"], [\"Karl Geiger dolzina 2\", \"54.6\"], [\"Karl Geiger slog 1\", \"52.5\"], [\"Karl Geiger slog 2\", \"47.5\"], [\"Michael Hayboeck dolzina 1\", \"64.5\"], [\"Michael Hayboeck dolzina 2\", \"28.5\"], [\"Michael Hayboeck slog 1\", \"52\"], [\"Michael Hayboeck slog 2\", \"47.5\"], [\"Tom Hilde dolzina 1\", \"66.3\"], [\"Tom Hilde dolzina 2\", \"84.3\"], [\"Tom Hilde slog 1\", \"53\"], [\"Tom Hilde slog 2\", \"55\"], [\"Jaka Hvala dolzina 1\", \"97.8\"], [\"Jaka Hvala dolzina 2\", \"18.6\"], [\"Jaka Hvala slog 1\", \"56.5\"], [\"Jaka Hvala slog 2\", \"43.5\"], [\"Noriaki Kasai dolzina 1\", \"80.7\"], [\"Noriaki Kasai dolzina 2\", \"85.2\"], [\"Noriaki Kasai slog 1\", \"53\"], [\"Noriaki Kasai slog 2\", \"55.5\"], [\"Junshiro Kobayashi dolzina 1\", \"54.6\"], [\"Junshiro Kobayashi dolzina 2\", \"36.6\"], [\"Junshiro Kobayashi slog 1\", \"51\"], [\"Junshiro Kobayashi slog 2\", \"49\"], [\"Martin Koch dolzina 1\", \"57.3\"], [\"Martin Koch dolzina 2\", \"77.1\"], [\"Martin Koch slog 1\", \"52\"], [\"Martin Koch slog 2\", \"53\"], [\"Andreas Kofler dolzina 1\", \"73.5\"], [\"Andreas Kofler dolzina 2\", \"81.6\"], [\"Andreas Kofler slog 1\", \"55.5\"], [\"Andreas Kofler slog 2\", \"56\"], [\"Denis Kornilov dolzina 1\", \"76.2\"], [\"Denis Kornilov dolzina 2\", \"55.5\"], [\"Denis Kornilov slog 1\", \"53.5\"], [\"Denis Kornilov slog 2\", \"50.5\"], [\"Robert Kranjec dolzina 1\", \"71.7\"], [\"Robert Kranjec dolzina 2\", \"64.5\"], [\"Robert Kranjec slog 1\", \"54\"], [\"Robert Kranjec slog 2\", \"51\"], [\"Dawid Kubacki dolzina 1\", \"73.5\"], [\"Dawid Kubacki dolzina 2\", \"52.8\"], [\"Dawid Kubacki slog 1\", \"54\"], [\"Dawid Kubacki slog 2\", \"51.5\"], [\"Wolfgang Loitzl dolzina 1\", \"86.1\"], [\"Wolfgang Loitzl dolzina 2\", \"69.9\"], [\"Wolfgang Loitzl slog 1\", \"55.5\"], [\"Wolfgang Loitzl slog 2\", \"55.5\"], [\"Michael Neumayer dolzina 1\", \"89.7\"], [\"Michael Neumayer dolzina 2\", \"57.3\"], [\"Michael Neumayer slog 1\", \"53\"], [\"Michael Neumayer slog 2\", \"46\"], [\"Peter Prevc dolzina 1\", \"58.2\"], [\"Peter Prevc dolzina 2\", \"87.9\"], [\"Peter Prevc slog 1\", \"51.5\"], [\"Peter Prevc slog 2\", \"56\"], [\"Alexey Romashov dolzina 1\", \"61.8\"], [\"Alexey Romashov dolzina 2\", \"50.1\"], [\"Alexey Romashov slog 1\", \"51\"], [\"Alexey Romashov slog 2\", \"51\"], [\"Gregor Schlierenzauer dolzina 1\", \"91.5\"], [\"Gregor Schlierenzauer dolzina 2\", \"75.3\"], [\"Gregor Schlierenzauer slog 1\", \"55.5\"], [\"Gregor Schlierenzauer slog 2\", \"54\"], [\"Andreas Stjernen dolzina 1\", \"70.8\"], [\"Andreas Stjernen dolzina 2\", \"78\"], [\"Andreas Stjernen slog 1\", \"53\"], [\"Andreas Stjernen slog 2\", \"52.5\"], [\"Taku Takeuchi dolzina 1\", \"78.9\"], [\"Taku Takeuchi dolzina 2\", \"83.4\"], [\"Taku Takeuchi slog 1\", \"54\"], [\"Taku Takeuchi slog 2\", \"55\"], [\"Dimitry Vassiliev dolzina 1\", \"88.8\"], [\"Dimitry Vassiliev dolzina 2\", \"81.6\"], [\"Dimitry Vassiliev slog 1\", \"54.5\"], [\"Dimitry Vassiliev slog 2\", \"55\"], [\"Rune Velta dolzina 1\", \"86.1\"], [\"Rune Velta dolzina 2\", \"52.8\"], [\"Rune Velta slog 1\", \"56.5\"], [\"Rune Velta slog 2\", \"51.5\"], [\"Andreas Wank dolzina 1\", \"80.7\"], [\"Andreas Wank dolzina 2\", \"63.6\"], [\"Andreas Wank slog 1\", \"54\"], [\"Andreas Wank slog 2\", \"51\"], [\"Andreas Wellinger dolzina 1\", \"88.8\"], [\"Andreas Wellinger dolzina 2\", \"71.7\"], [\"Andreas Wellinger slog 1\", \"55.5\"], [\"Andreas Wellinger slog 2\", \"54\"], [\"Vladimir Zografski dolzina 1\", \"51.9\"], [\"Vladimir Zografski dolzina 2\", \"10.5\"], [\"Vladimir Zografski slog 1\", \"49\"], [\"Vladimir Zografski slog 2\", \"43.5\"]]", 
      "solution": "tocke <- array(dim = c(30, 2, 2))\ncolnames(tocke) <- c(\"dolzina\", \"slog\")\nrownames(tocke) <- rownames(rezultati)\n\ntocke[, \"dolzina\", ] <- apply(rezultati[, \"dolzina\", ], c(1, 2), tocke.dolzina)\n# ker je funkcija tocke.dolzina vektorska, lahko pi\u0161emo kar\n# tocke[, \"dolzina\", ] <- tocke.dolzina(rezultati[, \"dolzina\", ])\ntocke[, \"slog\", ] <- apply(rezultati[, 2 : 6, ], c(1, 3), tocke.slog)", 
      "problem": 47, 
      "validation": "check$equal(tocke[\"Peter Prevc\", \"slog\", 1], 51.5)\ncheck$equal(tocke[\"Robert Kranjec\", \"dolzina\", 1], 71.7)\ncheck$equal(tocke[\"Robert Kranjec\", \"dolzina\", 2], 64.5)\ncheck$equal(tocke[\"Peter Prevc\", \"slog\", 2], 56)\nfor(ime in rownames(tocke))\n  for(rezultat in colnames(tocke))\n    for(serija in c(1, 2))\n      check$challenge(tocke[ime, rezultat, serija], paste(ime, rezultat, serija))"
    }
  }, 
  {
    "pk": 739, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Ker se da \u010dlene zgornje vrste razstaviti in se pri se\u0161tevanju med seboj\ndelno uni\u010dijo, se da vsoto vrste izra\u010dunati precej enostavneje kot pa s\nse\u0161tevanjem posameznih \u010dlenov. Sestavite funkcijo `hitra_vsota(n)`, ki\nna ta hitrej\u0161i na\u010din izra\u010duna vsoto prvih $n$ \u010dlenov vrste.\nPravilnost lahko preverite tako, da primerjate rezultate funkcije\n`hitraVsota` z rezultati funkcije `vsota`. Bodite pozorni za majhne\nvrednosti $n$.", 
      "timestamp": "2012-07-12 11:24:51", 
      "challenge": "[]", 
      "solution": "def hitraVsota(n):\n    if n==1:\n        return 2/3\n    return 3/2 - 1/(n+1)-1/(n+2)", 
      "problem": 238, 
      "validation": "Check.equal(\"hitraVsota(1)\", 0.6666666666666666)\nCheck.equal(\"hitraVsota(2)\", 0.9166666666666667)\nCheck.equal(\"hitraVsota(5)\", 1.1904761904761905)\nCheck.equal(\"hitraVsota(100)\", 1.4802950883323627)\nCheck.equal(\"hitraVsota(100000)\", 1.499980000299995)\nCheck.equal(\"hitraVsota(20000000)\", 1.4999999000000075)\nCheck.equal(\"hitraVsota(1000000000)\", 1.4999999979999998)\n\n# for i in range(1,100):\n#     Check.challenge(hitra_vsota(10*i),10*i)"
    }
  }, 
  {
    "pk": 636, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `kolikoIzDatoteke(vhod, izhod)`, ki na izhodno\ndatoteko z imenom `izhod` za vsako ime zapi\u0161e, kolikokrat se pojavi v\ndatoteki z imenom `vhod`.\n\nPozor: vhodna datoteka ima lahko ve\u010d vrstic.", 
      "timestamp": "2012-05-14 06:30:42", 
      "challenge": "[]", 
      "solution": "def kolikoIzDatoteke(vhod, izhod):\n    with open(vhod) as f:\n        imena = \",\".join([vrstica.strip() for vrstica in f.readlines()])\n        imena = imena.replace(' ', '')\n        koliko(imena, izhod)", 
      "problem": 208, 
      "validation": "def _makefile(ime):\n    with open(ime, \"w\") as f:\n        print(\"Luka,Jaka\", file=f)\n        print(\"Luka\", file=f)\n        print(\"Miha\", file=f)\n        print(\"Miha\", file=f)\n        print(\"Miha\", file=f)\n\ndef _makefile2(ime):\n    with open(ime, \"w\") as f:\n        print(\"Miha 3\", file=f)\n        print(\"Luka 2\", file=f)\n        print(\"Jaka 1\", file=f)\n\n\ndef _istevseenodatoteke(ena,dva):\n    with open(ena) as f1, open(dva) as f2:\n        vrste1 = [l.strip() for l in f1.readlines()]\n        vrste1.sort()\n        vrste2 = [l.strip() for l in f2.readlines()]\n        vrste2.sort()\n        if vrste1 == vrste2:\n            return True\n        else:\n            print(\"Izhodna datoteka vsebuje naslednje vrstice: \")\n            print(vrste1)\n            print(\"Morala pa bi vsebovati naslednje vrstice: \")\n            print(vrste2)\n    \ndef _removefiles(*ime):\n    import os\n    for i in ime: os.remove(i)\n\n_makefile(\"_test.csv\")\n_makefile2(\"_test2.csv\")\nkolikoIzDatoteke(\"_test.csv\",\"_test1.csv\")\nif not _istevseenodatoteke(\"_test1.csv\", \"_test2.csv\"):\n    Check.error(\"Izhodna datoteka je napa\u010dna\")\n_removefiles(\"_test.csv\", \"_test1.csv\",\"_test2.csv\")"
    }
  }, 
  {
    "pk": 502, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `greNotri(skatla1, skatla2)`, ki vrne `True`, \u010de\n\u0161katlo `skatla1` lahko obrnemo tako, da gre v \u0161katlo `skatla2`, torej\nda so dimenzije prve \u0161katle strogo manj\u0161e od dimenzij druge \u0161katle.", 
      "timestamp": "2012-06-04 08:48:05", 
      "challenge": "[[\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"]]", 
      "solution": "def greNotri(skatla1, skatla2):\n    skatla1 = list(skatla1)\n    skatla2 = list(skatla2)\n    skatla1.sort()\n    skatla2.sort()\n    \n    return skatla1[0] < skatla2[0] and \\\n           skatla1[1] < skatla2[1] and \\\n           skatla1[2] < skatla2[2]", 
      "problem": 163, 
      "validation": "Check.equal('greNotri((30, 40, 50), (40, 50, 60))', True)\nCheck.equal('greNotri((45, 55, 35), (40, 50, 60))', True)\nCheck.equal('greNotri((30, 40, 50), (40, 50, 30))', False)\nCheck.equal('greNotri((30, 40, 50), (50, 50, 25))', False)\nfor i in range(30):\n    Check.challenge(greNotri((i ** 3 % 37, i ** 2 % 16, i ** 4 % 58), (i ** 4 % 37, i ** 3 % 16, i ** 2 % 58)))"
    }
  }, 
  {
    "pk": 908, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `naslednji_priblizek(x)`, ki vrne naslednji\npribli\u017eek za ni\u010dlo polinoma $p(x)$ po Newtonovi metodi,\n\u010de je $x$ trenutni pribli\u017eek.\n\nNaslednji pribli\u017eek je ni\u010dla tangente na polinom v to\u010dki $x$.\nPomagajte si s prej\u0161njo funkcijo. \u010ce je tangenta v dani to\u010dki\nhorizontalna, naj funkcija vrne `None`.", 
      "timestamp": "2013-01-18 13:22:52", 
      "challenge": "[[\"None\", \"-15.753701\"], [\"None\", \"-14.95526\"], [\"None\", \"-14.156972\"], [\"None\", \"-13.358861\"], [\"None\", \"-12.560955\"], [\"None\", \"-11.763292\"], [\"None\", \"-10.965915\"], [\"None\", \"-10.168884\"], [\"None\", \"-9.372271\"], [\"None\", \"-8.576174\"], [\"None\", \"-7.780727\"], [\"None\", \"-6.986111\"], [\"None\", \"-6.19259\"], [\"None\", \"-5.400556\"], [\"None\", \"-4.610632\"], [\"None\", \"-3.823882\"], [\"None\", \"-3.042342\"], [\"None\", \"-2.270655\"], [\"None\", \"-1.523573\"], [\"None\", \"-0.916667\"], [\"None\", \"0.222222\"], [\"None\", \"1.0\"], [\"None\", \"1.809524\"], [\"None\", \"2.277778\"], [\"None\", \"-2.705882\"], [\"None\", \"4.919192\"], [\"None\", \"5.402209\"], [\"None\", \"6.099385\"], [\"None\", \"6.847587\"], [\"None\", \"7.616088\"], [\"None\", \"8.394795\"], [\"None\", \"9.179386\"], [\"None\", \"9.967694\"], [\"None\", \"10.758504\"], [\"None\", \"11.551084\"], [\"None\", \"12.344962\"], [\"None\", \"13.139822\"], [\"None\", \"13.935444\"], [\"None\", \"14.731669\"], [\"None\", \"15.528379\"]]", 
      "solution": "def naslednji_priblizek(x):\n    (k, n) = tangenta(x)\n    if k == 0:\n        return None\n    else:\n        return -n / k", 
      "problem": 306, 
      "validation": "Check.equal(\"naslednji_priblizek(0)\", 0.222222)\nCheck.equal(\"naslednji_priblizek(1)\", 1)\nCheck.equal(\"naslednji_priblizek(-1)\", -0.91666666)\nCheck.equal(\"naslednji_priblizek(0.6)\",  None)\n\nfor x in range(-20, 20):\n    Check.challenge(naslednji_priblizek(x))"
    }
  }, 
  {
    "pk": 656, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Janez zboli, tako da ne more sam v igralnico, zato prosi Pepeta,\nda namesto njega igra. Seveda pa Janez Pepetu ne zaupa, da bo\n'pravilno' stavil, zato Pepetu da seznam svojih stav (kot seznam \u010drk\n`r` ali `\u010d`), Pepe pa Janezu prinese seznam rezultatov na ruleti (tudi\nkot seznam \u010drk `r` in `\u010d`). Sestavi funkcijo `zasluzek(janez, pepe)`, ki iz teh dveh seznamov tvori\nseznam zaslu\u017ekov (tj. \u010de se stava in vrednost na ruleti ujemata,\nJanez dobi 1 \u017eeton, sicer pa 1 \u017eeton izgubi).\nPrimer: \n\n     >>> zasluzek(\"r\u010d\u010d\", \"rr\u010d\")\n     [1, -1, 1]", 
      "timestamp": "2012-04-16 13:36:02", 
      "challenge": "[]", 
      "solution": "def zasluzek(janez, pepe):\n    zasluzek = []\n    for i in range(len(janez)):\n        if janez[i]==pepe[i]:\n            zasluzek.append(1)\n        else:\n            zasluzek.append(-1)\n    return zasluzek\n\n# nalogo lahko re\u0161imo s pomo\u010djo izpeljanih seznamov\ndef zasluzek(janez, pepe):\n    return [1 if janez[i]==pepe[i] else -1 for i in range(len(janez))]", 
      "problem": 213, 
      "validation": "Check.equal('zasluzek(\"r\u010d\u010d\", \"rr\u010d\")', [1,-1,1])\nCheck.equal(\"zasluzek('\u010d\u010drrr\u010d\u010dr\u010dr', 'r\u010d\u010d\u010drr\u010d\u010dr\u010d')\", [-1, 1, -1, -1, 1, -1, 1, -1, -1, -1])"
    }
  }, 
  {
    "pk": 365, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `potrebnoKupiti(recept, shramba)`, ki vrne slovar\nsestavin s pripadajo\u010dimi koli\u010dinami, ki jih moramo \u0161e dokupiti, da bomo\nlahko skuhali jed po danem receptu.\n\n    >>> potrebnoKupiti({'jajca': 3, 'moka': 500}, {'moka': 1000, 'jajca': 6, 'sladkor': 1000})\n    {}\n    >>> potrebnoKupiti({'jajca': 3, 'moka': 500}, {'moka': 1000, 'sladkor': 1000})\n    {'jajca': 3}\n    >>> potrebnoKupiti({'jajca': 3, 'moka': 500}, {'moka': 100})\n    {'jajca': 2, 'moka': 400}", 
      "timestamp": "2012-05-04 11:25:40", 
      "challenge": "[]", 
      "solution": "def potrebnoKupiti(recept, shramba):\n    kupiti = {}\n    for sestavina, kolicina in recept.items():\n        razlika = kolicina - shramba.get(sestavina, 0)\n        if razlika > 0:\n            kupiti[sestavina] = razlika\n    return kupiti", 
      "problem": 126, 
      "validation": "Check.equal(\"potrebnoKupiti({'jajca': 3, 'moka': 500}, {'moka': 1000, 'jajca': 6, 'sladkor': 1000})\", {})\nCheck.equal(\"potrebnoKupiti({'jajca': 3, 'moka': 500}, {'moka': 1000, 'sladkor': 1000})\",{'jajca': 3} )\nCheck.equal(\"potrebnoKupiti({'jajca': 3, 'moka': 500}, {'moka': 100})\", {'jajca': 3, 'moka': 400})"
    }
  }, 
  {
    "pk": 759, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `vEnojce(mnozica)`, ki vrne mno\u017eico vseh enojcev\n(naborov z enim elementom) elementov iz mno\u017eice `mnozica`.\nNa primer:\n\n    >>> vEnojce({'A', 'B', 'C'})\n    {('A',), ('B',), ('C',)}", 
      "timestamp": "2012-07-12 12:56:54", 
      "challenge": "[]", 
      "solution": "def vEnojce(mnozica):\n    return {(x,) for x in mnozica}", 
      "problem": 241, 
      "validation": "Check.equal(\"vEnojce(set())\", set())\nCheck.equal(\"vEnojce({1, 2})\", {(1,), (2,)})\nCheck.equal(\"vEnojce({'A', 'B', 'C'})\", {('A',), ('B',), ('C',)})\nCheck.equal(\"vEnojce({1, 2, 3, 4})\", {(1,), (2,), (3,), (4,)})"
    }
  }, 
  {
    "pk": 683, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `brezStolpca(mat, j)`, ki vrne matriko, ki jo\ndobimo, \u010de matriki `mat` odstranimo `j`-ti stolpec.\n\nPozor: va\u0161a funkcija matrike `mat` ne sme spreminjati. \u010ce \u017eelite, si\nlahko pomagate z zgoraj definirano funkcijo `kopiraj(mat)`, ki ustvari\nkopijo matrike `mat`, ki jo lahko poljubno spreminjate.", 
      "timestamp": "2012-06-10 10:06:08", 
      "challenge": "[[\"([[0, 1, 8], [1, 8, 10], [8, 10, 13]], 1)\", \"[[1, 8], [8, 10], [10, 13]]\"], [\"([[0, 1, 8], [1, 8, 10], [8, 10, 13]], 2)\", \"[[0, 8], [1, 10], [8, 13]]\"], [\"([[0, 1, 8], [1, 8, 10], [8, 10, 13]], 3)\", \"[[0, 1], [1, 8], [8, 10]]\"], [\"([[0, 1, 8, 10], [1, 8, 10, 13], [8, 10, 13, 6], [10, 13, 6, 12]], 1)\", \"[[1, 8, 10], [8, 10, 13], [10, 13, 6], [13, 6, 12]]\"], [\"([[0, 1, 8, 10], [1, 8, 10, 13], [8, 10, 13, 6], [10, 13, 6, 12]], 2)\", \"[[0, 8, 10], [1, 10, 13], [8, 13, 6], [10, 6, 12]]\"], [\"([[0, 1, 8, 10], [1, 8, 10, 13], [8, 10, 13, 6], [10, 13, 6, 12]], 3)\", \"[[0, 1, 10], [1, 8, 13], [8, 10, 6], [10, 13, 12]]\"], [\"([[0, 1, 8, 10], [1, 8, 10, 13], [8, 10, 13, 6], [10, 13, 6, 12]], 4)\", \"[[0, 1, 8], [1, 8, 10], [8, 10, 13], [10, 13, 6]]\"], [\"([[0, 1, 8, 10, 13], [1, 8, 10, 13, 6], [8, 10, 13, 6, 12], [10, 13, 6, 12, 3], [13, 6, 12, 3, 2]], 1)\", \"[[1, 8, 10, 13], [8, 10, 13, 6], [10, 13, 6, 12], [13, 6, 12, 3], [6, 12, 3, 2]]\"], [\"([[0, 1, 8, 10, 13], [1, 8, 10, 13, 6], [8, 10, 13, 6, 12], [10, 13, 6, 12, 3], [13, 6, 12, 3, 2]], 2)\", \"[[0, 8, 10, 13], [1, 10, 13, 6], [8, 13, 6, 12], [10, 6, 12, 3], [13, 12, 3, 2]]\"], [\"([[0, 1, 8, 10, 13], [1, 8, 10, 13, 6], [8, 10, 13, 6, 12], [10, 13, 6, 12, 3], [13, 6, 12, 3, 2]], 3)\", \"[[0, 1, 10, 13], [1, 8, 13, 6], [8, 10, 6, 12], [10, 13, 12, 3], [13, 6, 3, 2]]\"], [\"([[0, 1, 8, 10, 13], [1, 8, 10, 13, 6], [8, 10, 13, 6, 12], [10, 13, 6, 12, 3], [13, 6, 12, 3, 2]], 4)\", \"[[0, 1, 8, 13], [1, 8, 10, 6], [8, 10, 13, 12], [10, 13, 6, 3], [13, 6, 12, 2]]\"], [\"([[0, 1, 8, 10, 13], [1, 8, 10, 13, 6], [8, 10, 13, 6, 12], [10, 13, 6, 12, 3], [13, 6, 12, 3, 2]], 5)\", \"[[0, 1, 8, 10], [1, 8, 10, 13], [8, 10, 13, 6], [10, 13, 6, 12], [13, 6, 12, 3]]\"], [\"([[0, 1, 8, 10, 13, 6], [1, 8, 10, 13, 6, 12], [8, 10, 13, 6, 12, 3], [10, 13, 6, 12, 3, 2], [13, 6, 12, 3, 2, 15], [6, 12, 3, 2, 15, 14]], 1)\", \"[[1, 8, 10, 13, 6], [8, 10, 13, 6, 12], [10, 13, 6, 12, 3], [13, 6, 12, 3, 2], [6, 12, 3, 2, 15], [12, 3, 2, 15, 14]]\"], [\"([[0, 1, 8, 10, 13, 6], [1, 8, 10, 13, 6, 12], [8, 10, 13, 6, 12, 3], [10, 13, 6, 12, 3, 2], [13, 6, 12, 3, 2, 15], [6, 12, 3, 2, 15, 14]], 2)\", \"[[0, 8, 10, 13, 6], [1, 10, 13, 6, 12], [8, 13, 6, 12, 3], [10, 6, 12, 3, 2], [13, 12, 3, 2, 15], [6, 3, 2, 15, 14]]\"], [\"([[0, 1, 8, 10, 13, 6], [1, 8, 10, 13, 6, 12], [8, 10, 13, 6, 12, 3], [10, 13, 6, 12, 3, 2], [13, 6, 12, 3, 2, 15], [6, 12, 3, 2, 15, 14]], 3)\", \"[[0, 1, 10, 13, 6], [1, 8, 13, 6, 12], [8, 10, 6, 12, 3], [10, 13, 12, 3, 2], [13, 6, 3, 2, 15], [6, 12, 2, 15, 14]]\"], [\"([[0, 1, 8, 10, 13, 6], [1, 8, 10, 13, 6, 12], [8, 10, 13, 6, 12, 3], [10, 13, 6, 12, 3, 2], [13, 6, 12, 3, 2, 15], [6, 12, 3, 2, 15, 14]], 4)\", \"[[0, 1, 8, 13, 6], [1, 8, 10, 6, 12], [8, 10, 13, 12, 3], [10, 13, 6, 3, 2], [13, 6, 12, 2, 15], [6, 12, 3, 15, 14]]\"], [\"([[0, 1, 8, 10, 13, 6], [1, 8, 10, 13, 6, 12], [8, 10, 13, 6, 12, 3], [10, 13, 6, 12, 3, 2], [13, 6, 12, 3, 2, 15], [6, 12, 3, 2, 15, 14]], 5)\", \"[[0, 1, 8, 10, 6], [1, 8, 10, 13, 12], [8, 10, 13, 6, 3], [10, 13, 6, 12, 2], [13, 6, 12, 3, 15], [6, 12, 3, 2, 14]]\"], [\"([[0, 1, 8, 10, 13, 6], [1, 8, 10, 13, 6, 12], [8, 10, 13, 6, 12, 3], [10, 13, 6, 12, 3, 2], [13, 6, 12, 3, 2, 15], [6, 12, 3, 2, 15, 14]], 6)\", \"[[0, 1, 8, 10, 13], [1, 8, 10, 13, 6], [8, 10, 13, 6, 12], [10, 13, 6, 12, 3], [13, 6, 12, 3, 2], [6, 12, 3, 2, 15]]\"]]", 
      "solution": "def brezStolpca(mat, j):\n    return [mat[i][:j - 1] + mat[i][j:] for i in range(len(mat))]", 
      "problem": 220, 
      "validation": "Check.equal('brezStolpca([[9, 8, 7], [6, 5, 4], [3, 2, 1]], 1)', [[8, 7], [5, 4], [2, 1]])\nCheck.equal('brezStolpca([[9, 8, 7], [6, 5, 4], [3, 2, 1]], 2)', [[9, 7], [6, 4], [3, 1]])\nCheck.equal('brezStolpca([[9, 8, 7], [6, 5, 4], [3, 2, 1]], 3)', [[9, 8], [6, 5], [3, 2]])\nCheck.run(['brezStolpca(mat, 1)'], {\"mat\": [[9, 8, 7], [6, 5, 4], [3, 2, 1]]}, env={\"mat\": [[9, 8, 7], [6, 5, 4], [3, 2, 1]]})\nfor n in range(3, 7):\n    mat = [[(i + j) ** 3 % 17 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        Check.challenge(brezStolpca(mat, i + 1), (mat, i + 1))"
    }
  }, 
  {
    "pk": 687, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `permutacija(cikli)`, ki iz seznama ciklov `cikli`\nizra\u010duna seznam slik elementov od $1$ do $n$.", 
      "timestamp": "2012-06-10 18:18:09", 
      "challenge": "[]", 
      "solution": "def permutacija(cikli):\n    n = sum(len(cikel) for cikel in cikli)\n    return [uporabi(cikli, i) for i in range(1, n + 1)]", 
      "problem": 223, 
      "validation": "Check.equal('permutacija([[1, 4], [2, 5, 3]])', [4, 5, 2, 1, 3])\nCheck.equal('permutacija([[1, 4, 2, 5, 3]])', [4, 5, 1, 2, 3])\nCheck.equal('permutacija([[1], [4], [2], [5], [3]])', [1, 2, 3, 4, 5])\nCheck.equal('permutacija([[2, 4, 5], [1, 3]])', [3, 4, 1, 5, 2])"
    }
  }, 
  {
    "pk": 691, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `povprecenPopust(ponudba, razprodaja)`, ki izra\u010duna\npovpre\u010den popust izdelkov. Povpre\u010den popust se izra\u010duna iz razmerja med\nvsoto cen vseh izdelkov, \u010de upo\u0161tevamo popust, ter vsoto cen vseh\nizdelkov pred upo\u0161tevanjem popusta. Pomagajte si s funkcijo `noveCene`.\nTako za razmerje `0.88` dobimo popust 12%. Funkcija naj vrne popust\nv odstotkih, zaokro\u017een na 1 decimalno mesto.", 
      "timestamp": "2012-06-11 10:06:35", 
      "challenge": "[]", 
      "solution": "def povprecenPopust(ponudba, razprodaja):\n    nove=noveCene(ponudba, razprodaja)\n    p=sum(nove.values())/sum(ponudba.values())\n    return round(100*(1-p), 1)", 
      "problem": 226, 
      "validation": "Check.equal(\"povprecenPopust({'nogavice': 12, 'hla\u010de': 36, 'majica': 10}, {'nogavice': 50, 'hla\u010de': 75})\", 56.9)\nCheck.equal(\"povprecenPopust({'nogavice': 12, 'hla\u010de': 30, 'majica': 10}, {'nogavice': 20, 'hla\u010de': 75})\", 47.9)"
    }
  }, 
  {
    "pk": 450, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavi metodo `medIinJ(seznam, i, j)`, ki vrne \u0161tevilo glasov po\nglasovnaju j-tega predstavnika relativno glede na glasovanje i-tega\npredstavnika (torej gledamo le \u0161tevilo glasov od takrat dalje oz. gledamo,\nkot da se je glasovanje za\u010delo pri i-tem). Prvi element seznama ustreza\nvrednosti i=1. Predpostavi\u0161 lahko, da je i < j.", 
      "timestamp": "2012-04-16 12:30:20", 
      "challenge": "[]", 
      "solution": "def medIinJ(seznam, i, j):\n    return sum(seznam[i-1:j])", 
      "problem": 150, 
      "validation": "Check.equal('medIinJ([1, 2, -3, 1], 2, 3)', -1)\nCheck.equal('medIinJ([1, -5, -2, 3, 4], 1, 3)', -6)\nCheck.equal('medIinJ([1, -5, -2, 3, 4, 2, -1, 5, -3, 4], 3, 7)', 6)"
    }
  }, 
  {
    "pk": 233, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `dolzineMesecev(leto)`, ki vrne seznam dol\u017eine 12,\r\nki ima za elemente \u0161tevila dni po posameznih mesecih v danem letu.", 
      "timestamp": "2012-12-14 14:57:42", 
      "challenge": "[[\"None\", \"[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\"], [\"None\", \"[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\"], [\"None\", \"[31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\"], [\"None\", \"[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\"], [\"None\", \"[31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\"], [\"None\", \"[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\"], [\"None\", \"[31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\"], [\"None\", \"[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\"], [\"None\", \"[31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\"], [\"None\", \"[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\"], [\"None\", \"[31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\"], [\"None\", \"[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\"], [\"None\", \"[31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\"], [\"None\", \"[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\"], [\"None\", \"[31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\"], [\"None\", \"[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\"], [\"None\", \"[31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\"], [\"None\", \"[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\"], [\"None\", \"[31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\"], [\"None\", \"[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\"]]", 
      "solution": "def dolzineMesecev(leto):\r\n    return [\r\n        31, 29 if jePrestopno(leto) else 28, 31, 30, 31, 30,\r\n        31, 31, 30, 31, 30, 31\r\n    ]", 
      "problem": 72, 
      "validation": "Check.equal('dolzineMesecev(1900)', [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31])\r\nCheck.equal('dolzineMesecev(2000)', [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31])\r\nCheck.equal('dolzineMesecev(2004)', [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31])\r\nCheck.equal('dolzineMesecev(2011)', [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31])\r\n\r\nfor leto in range(1900, 2100, 10):\r\n    Check.challenge(dolzineMesecev(leto))"
    }
  }, 
  {
    "pk": 462, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavi funkcijo `cakanja`, ki sprejme poljubno \u0161tevilo\r\nodpiralnih \u010dasov mostov, nato pa naklju\u010dno iz\u017ereba n \u0161tevil\r\nmed 0 in 59, ki predstavljajo minuto prihoda ladje k vskemu izmed\r\nmostov (n je \u0161tevilo podanih mostov). Funkcija naj vrne nabor\r\ndol\u017eine n, ki predstavlja \u010das \u010dakanja ladje pred posameznim mostom.\r\n", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "def cakanja(*mostovi):\r\n    n=len(mostovi)\r\n    casi=[randint(0,59) for i in range(n)]\r\n    return tuple(cakam(mostovi[i], casi[i]) for i in range(n))\r\n", 
      "problem": 153, 
      "validation": "Check.equal('type(cakanja(30))', tuple, \"Funkcija ne vra\u010da naborov\")\r\nCheck.equal('len(cakanja(30,20,10))', 3, \"Funkcija ne vra\u010da nabora prave dol\u017eine\")\r\nCheck.equal('len(cakanja(10,30,20, 5, 4, 1))', 6, \"Funkcija ne vra\u010da nabora prave dol\u017eine\")\r\nCheck.equal('sum([cakanja(59)[0] for i in range(100)])', 0, \"Funkcija vra\u010da napa\u010dne vrednosti\")\r\nfor i,j,k in [(randint(1,59), randint(1,59), randint(1,59)) for x in range(10)]:\r\nCheck.equal('min([x for l in range(100) for x in cakanja({},{},{})])'.format(i,j,k),0, \"Funkcija vra\u010da napa\u010dne vrednosti\")\r\nCheck.equal('max([x for l in range(1000) for x in cakanja({},{},{})])'.format(i,j,k),113-min(i+54,j+54,k+54), \"Funkcija vra\u010da napa\u010dne vrednosti\")\r\nCheck.equal('len(set([cakanja({})[0] for l in range(1000)]))'.format(i), 60-i, \"Funkcija ne vra\u010da naklju\u010dnih vrednosti\")"
    }
  }, 
  {
    "pk": 699, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Podan je seznam polo\u017eajev \u017eogic po posameznem udarcu in seznam, katerega vsak element\r\nje nabor, ki podaja jezero ali pesek. Napi\u0161ite metodo `seIzogne(pot, ovire)`, ki pove, ali\r\nse pot v celoti izogne oviram. Pazi: jezero je podano z naborom treh, pesek pa z naborom \u0161tirih \u0161tevil.", 
      "timestamp": "2012-06-10 01:21:03", 
      "challenge": "[]", 
      "solution": "def seIzogne(pot, ovire):\r\n    for tocka in pot:\r\n        for ovira in ovire:\r\n            if (len(ovira)==3 and jeVJezeru(tocka, ovira)) or (len(ovira)==4 and jeVPesku(tocka, ovira)):\r\n                return False\r\n    return True", 
      "problem": 221, 
      "validation": "Check.equal('seIzogne([(1,2),(3,4)],[(2,3,4),(1,1,2,2)])', False)\r\nCheck.equal('seIzogne([(1,2),(3,4)],[(2,3,1),(2,2,3,3)])', True)"
    }
  }, 
  {
    "pk": 624, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Na kak\u0161en na\u010din lahko nalo\u017eimo konstanto e (osnovo naravnega logaritma)?\r\n\r\n1) from time import e \t\r\n\r\n2) from os import e\t\r\n\r\n3) from math import e\r\n\r\n4) import e\r\n\r\n5) from cmath import e\r\n\r\n6) from math import * \t\r\n\r\n7) import math\r\n\r\n8) from random import e\r\n\r\n9) Konstanta e se ne nahaja v standardni knji\u017enici\r\n\r\n10) from math import exp\r\n\r\n11) import e from math\r\n\r\n\r\nSestavite funkcijo naloga15, ki kot rezultat vrne mno\u017eico pravilnih\r\nodgovorov (teh je lahko od 0 do 11, \u010de noben odgovor ni pravilen, naj\r\nfunkcija vrne prazno mno\u017eico).", 
      "timestamp": "2012-03-27 08:51:36", 
      "challenge": "[]", 
      "solution": "def naloga15():\r\n    return {3, 5, 6}", 
      "problem": 205, 
      "validation": "pass\r\n#Check.equal('md5(str(naloga15()).encode()).hexdigest()', '2fbb033eaf09004b738b14061b4856f6', \"Odgovor je napa\u010den\")"
    }
  }, 
  {
    "pk": 454, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `predstavniki(m, k)`, ki vrne slovar predstavnikov v\nmno\u017eici `m` po modulu `k`. Torej, klju\u010di slovarja so ostanki pri deljenju\ns `k`, pripadajo\u010de vrednosti pa so predstavniki teh ostankov.", 
      "timestamp": "2012-05-04 11:25:27", 
      "challenge": "[]", 
      "solution": "def predstavniki(mnozica, k):\n    return {o: predstavnik(mnozica, k, o) for o in ostanki(mnozica, k)}", 
      "problem": 151, 
      "validation": "Check.equal('predstavniki({1, 2, 12, 7, 5, 9, 15}, 4)', {0: 12, 1: 1, 2: 2, 3: 7})\nCheck.equal('predstavniki({0, 2, 4}, 5)', {0: 0, 2: 2, 4: 4})\nCheck.equal('predstavniki({-10, 11, 7, 3, 10, 17}, 6)', {1: 7, 2: -10, 3: 3, 4: 10, 5: 11})"
    }
  }, 
  {
    "pk": 845, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `najblizji(t)`, ki sprejme tabelo to\u010dk v ravnini in vrne\r\n*indeksa* `(i,j)` tistih dveh to\u010dk `t[i]` in `t[j]`, ki sta si najbli\u017eji. \u010ce\r\nje tabela `t` prazna ali vsebuje samo eno to\u010dko, naj funkcija vrne `None`.\r\n\r\nFunkcija mora delovati v \u010dasu $O(n \\log n)$ ali vsaj $O(n (\\log n)^2)$.\r\n\r\nNamig: namesto, da bi primerjali razdalje med to\u010dkami, lahko primerjamo\r\nkvadrate razdalj in se s tem izognemo ra\u010dunanju kvadratnih korenov. Sestavite\r\npomo\u017eno funkcijo, ki vrne kvadrat razdalje med dvema to\u010dkama.", 
      "timestamp": "2012-11-05 13:40:59", 
      "challenge": "[[\"None\", \"[(0, 0), (0, 1), (0, 4), (0, 9), (0, 16), (0, 25), (0, 36), (0, 49), (0, 64), (0, 81), (0, 100), (0, 121), (0, 144), (0, 169), (0, 196), (0, 225), (0, 256), (0, 289), (0, 324), (0, 361), (0, 400), (0, 441), (0, 484), (0, 529), (0, 576), (0, 625), (0, 676), (0, 729), (0, 784), (0, 841), (0, 900), (0, 961), (0, 1024), (0, 1089), (0, 1156), (0, 1225), (0, 1296), (0, 1369), (0, 1444), (0, 1521), (0, 1600), (0, 1681), (0, 1764), (0, 1849), (0, 1936), (0, 2025), (0, 2116), (0, 2209), (0, 2304), (0, 2401), (1, 0), (1, 1), (1, 4), (1, 9), (1, 16), (1, 25), (1, 36), (1, 49), (1, 64), (1, 81), (1, 100), (1, 121), (1, 144), (1, 169), (1, 196), (1, 225), (1, 256), (1, 289), (1, 324), (1, 361), (1, 400), (1, 441), (1, 484), (1, 529), (1, 576), (1, 625), (1, 676), (1, 729), (1, 784), (1, 841), (1, 900), (1, 961), (1, 1024), (1, 1089), (1, 1156), (1, 1225), (1, 1296), (1, 1369), (1, 1444), (1, 1521), (1, 1600), (1, 1681), (1, 1764), (1, 1849), (1, 1936), (1, 2025), (1, 2116), (1, 2209), (1, 2304), (1, 2401), (8, 0), (8, 1), (8, 4), (8, 9), (8, 16), (8, 25), (8, 36), (8, 49), (8, 64), (8, 81), (8, 100), (8, 121), (8, 144), (8, 169), (8, 196), (8, 225), (8, 256), (8, 289), (8, 324), (8, 361), (8, 400), (8, 441), (8, 484), (8, 529), (8, 576), (8, 625), (8, 676), (8, 729), (8, 784), (8, 841), (8, 900), (8, 961), (8, 1024), (8, 1089), (8, 1156), (8, 1225), (8, 1296), (8, 1369), (8, 1444), (8, 1521), (8, 1600), (8, 1681), (8, 1764), (8, 1849), (8, 1936), (8, 2025), (8, 2116), (8, 2209), (8, 2304), (8, 2401), (27, 0), (27, 1), (27, 4), (27, 9), (27, 16), (27, 25), (27, 36), (27, 49), (27, 64), (27, 81), (27, 100), (27, 121), (27, 144), (27, 169), (27, 196), (27, 225), (27, 256), (27, 289), (27, 324), (27, 361), (27, 400), (27, 441), (27, 484), (27, 529), (27, 576), (27, 625), (27, 676), (27, 729), (27, 784), (27, 841), (27, 900), (27, 961), (27, 1024), (27, 1089), (27, 1156), (27, 1225), (27, 1296), (27, 1369), (27, 1444), (27, 1521), (27, 1600), (27, 1681), (27, 1764), (27, 1849), (27, 1936), (27, 2025), (27, 2116), (27, 2209), (27, 2304), (27, 2401), (64, 0), (64, 1), (64, 4), (64, 9), (64, 16), (64, 25), (64, 36), (64, 49), (64, 64), (64, 81), (64, 100), (64, 121), (64, 144), (64, 169), (64, 196), (64, 225), (64, 256), (64, 289), (64, 324), (64, 361), (64, 400), (64, 441), (64, 484), (64, 529), (64, 576), (64, 625), (64, 676), (64, 729), (64, 784), (64, 841), (64, 900), (64, 961), (64, 1024), (64, 1089), (64, 1156), (64, 1225), (64, 1296), (64, 1369), (64, 1444), (64, 1521), (64, 1600), (64, 1681), (64, 1764), (64, 1849), (64, 1936), (64, 2025), (64, 2116), (64, 2209), (64, 2304), (64, 2401), (125, 0), (125, 1), (125, 4), (125, 9), (125, 16), (125, 25), (125, 36), (125, 49), (125, 64), (125, 81), (125, 100), (125, 121), (125, 144), (125, 169), (125, 196), (125, 225), (125, 256), (125, 289), (125, 324), (125, 361), (125, 400), (125, 441), (125, 484), (125, 529), (125, 576), (125, 625), (125, 676), (125, 729), (125, 784), (125, 841), (125, 900), (125, 961), (125, 1024), (125, 1089), (125, 1156), (125, 1225), (125, 1296), (125, 1369), (125, 1444), (125, 1521), (125, 1600), (125, 1681), (125, 1764), (125, 1849), (125, 1936), (125, 2025), (125, 2116), (125, 2209), (125, 2304), (125, 2401), (216, 0), (216, 1), (216, 4), (216, 9), (216, 16), (216, 25), (216, 36), (216, 49), (216, 64), (216, 81), (216, 100), (216, 121), (216, 144), (216, 169), (216, 196), (216, 225), (216, 256), (216, 289), (216, 324), (216, 361), (216, 400), (216, 441), (216, 484), (216, 529), (216, 576), (216, 625), (216, 676), (216, 729), (216, 784), (216, 841), (216, 900), (216, 961), (216, 1024), (216, 1089), (216, 1156), (216, 1225), (216, 1296), (216, 1369), (216, 1444), (216, 1521), (216, 1600), (216, 1681), (216, 1764), (216, 1849), (216, 1936), (216, 2025), (216, 2116), (216, 2209), (216, 2304), (216, 2401), (343, 0), (343, 1), (343, 4), (343, 9), (343, 16), (343, 25), (343, 36), (343, 49), (343, 64), (343, 81), (343, 100), (343, 121), (343, 144), (343, 169), (343, 196), (343, 225), (343, 256), (343, 289), (343, 324), (343, 361), (343, 400), (343, 441), (343, 484), (343, 529), (343, 576), (343, 625), (343, 676), (343, 729), (343, 784), (343, 841), (343, 900), (343, 961), (343, 1024), (343, 1089), (343, 1156), (343, 1225), (343, 1296), (343, 1369), (343, 1444), (343, 1521), (343, 1600), (343, 1681), (343, 1764), (343, 1849), (343, 1936), (343, 2025), (343, 2116), (343, 2209), (343, 2304), (343, 2401), (512, 0), (512, 1), (512, 4), (512, 9), (512, 16), (512, 25), (512, 36), (512, 49), (512, 64), (512, 81), (512, 100), (512, 121), (512, 144), (512, 169), (512, 196), (512, 225), (512, 256), (512, 289), (512, 324), (512, 361), (512, 400), (512, 441), (512, 484), (512, 529), (512, 576), (512, 625), (512, 676), (512, 729), (512, 784), (512, 841), (512, 900), (512, 961), (512, 1024), (512, 1089), (512, 1156), (512, 1225), (512, 1296), (512, 1369), (512, 1444), (512, 1521), (512, 1600), (512, 1681), (512, 1764), (512, 1849), (512, 1936), (512, 2025), (512, 2116), (512, 2209), (512, 2304), (512, 2401), (729, 0), (729, 1), (729, 4), (729, 9), (729, 16), (729, 25), (729, 36), (729, 49), (729, 64), (729, 81), (729, 100), (729, 121), (729, 144), (729, 169), (729, 196), (729, 225), (729, 256), (729, 289), (729, 324), (729, 361), (729, 400), (729, 441), (729, 484), (729, 529), (729, 576), (729, 625), (729, 676), (729, 729), (729, 784), (729, 841), (729, 900), (729, 961), (729, 1024), (729, 1089), (729, 1156), (729, 1225), (729, 1296), (729, 1369), (729, 1444), (729, 1521), (729, 1600), (729, 1681), (729, 1764), (729, 1849), (729, 1936), (729, 2025), (729, 2116), (729, 2209), (729, 2304), (729, 2401), (1000, 0), (1000, 1), (1000, 4), (1000, 9), (1000, 16), (1000, 25), (1000, 36), (1000, 49), (1000, 64), (1000, 81), (1000, 100), (1000, 121), (1000, 144), (1000, 169), (1000, 196), (1000, 225), (1000, 256), (1000, 289), (1000, 324), (1000, 361), (1000, 400), (1000, 441), (1000, 484), (1000, 529), (1000, 576), (1000, 625), (1000, 676), (1000, 729), (1000, 784), (1000, 841), (1000, 900), (1000, 961), (1000, 1024), (1000, 1089), (1000, 1156), (1000, 1225), (1000, 1296), (1000, 1369), (1000, 1444), (1000, 1521), (1000, 1600), (1000, 1681), (1000, 1764), (1000, 1849), (1000, 1936), (1000, 2025), (1000, 2116), (1000, 2209), (1000, 2304), (1000, 2401), (1331, 0), (1331, 1), (1331, 4), (1331, 9), (1331, 16), (1331, 25), (1331, 36), (1331, 49), (1331, 64), (1331, 81), (1331, 100), (1331, 121), (1331, 144), (1331, 169), (1331, 196), (1331, 225), (1331, 256), (1331, 289), (1331, 324), (1331, 361), (1331, 400), (1331, 441), (1331, 484), (1331, 529), (1331, 576), (1331, 625), (1331, 676), (1331, 729), (1331, 784), (1331, 841), (1331, 900), (1331, 961), (1331, 1024), (1331, 1089), (1331, 1156), (1331, 1225), (1331, 1296), (1331, 1369), (1331, 1444), (1331, 1521), (1331, 1600), (1331, 1681), (1331, 1764), (1331, 1849), (1331, 1936), (1331, 2025), (1331, 2116), (1331, 2209), (1331, 2304), (1331, 2401), (1728, 0), (1728, 1), (1728, 4), (1728, 9), (1728, 16), (1728, 25), (1728, 36), (1728, 49), (1728, 64), (1728, 81), (1728, 100), (1728, 121), (1728, 144), (1728, 169), (1728, 196), (1728, 225), (1728, 256), (1728, 289), (1728, 324), (1728, 361), (1728, 400), (1728, 441), (1728, 484), (1728, 529), (1728, 576), (1728, 625), (1728, 676), (1728, 729), (1728, 784), (1728, 841), (1728, 900), (1728, 961), (1728, 1024), (1728, 1089), (1728, 1156), (1728, 1225), (1728, 1296), (1728, 1369), (1728, 1444), (1728, 1521), (1728, 1600), (1728, 1681), (1728, 1764), (1728, 1849), (1728, 1936), (1728, 2025), (1728, 2116), (1728, 2209), (1728, 2304), (1728, 2401), (2197, 0), (2197, 1), (2197, 4), (2197, 9), (2197, 16), (2197, 25), (2197, 36), (2197, 49), (2197, 64), (2197, 81), (2197, 100), (2197, 121), (2197, 144), (2197, 169), (2197, 196), (2197, 225), (2197, 256), (2197, 289), (2197, 324), (2197, 361), (2197, 400), (2197, 441), (2197, 484), (2197, 529), (2197, 576), (2197, 625), (2197, 676), (2197, 729), (2197, 784), (2197, 841), (2197, 900), (2197, 961), (2197, 1024), (2197, 1089), (2197, 1156), (2197, 1225), (2197, 1296), (2197, 1369), (2197, 1444), (2197, 1521), (2197, 1600), (2197, 1681), (2197, 1764), (2197, 1849), (2197, 1936), (2197, 2025), (2197, 2116), (2197, 2209), (2197, 2304), (2197, 2401), (2744, 0), (2744, 1), (2744, 4), (2744, 9), (2744, 16), (2744, 25), (2744, 36), (2744, 49), (2744, 64), (2744, 81), (2744, 100), (2744, 121), (2744, 144), (2744, 169), (2744, 196), (2744, 225), (2744, 256), (2744, 289), (2744, 324), (2744, 361), (2744, 400), (2744, 441), (2744, 484), (2744, 529), (2744, 576), (2744, 625), (2744, 676), (2744, 729), (2744, 784), (2744, 841), (2744, 900), (2744, 961), (2744, 1024), (2744, 1089), (2744, 1156), (2744, 1225), (2744, 1296), (2744, 1369), (2744, 1444), (2744, 1521), (2744, 1600), (2744, 1681), (2744, 1764), (2744, 1849), (2744, 1936), (2744, 2025), (2744, 2116), (2744, 2209), (2744, 2304), (2744, 2401), (3375, 0), (3375, 1), (3375, 4), (3375, 9), (3375, 16), (3375, 25), (3375, 36), (3375, 49), (3375, 64), (3375, 81), (3375, 100), (3375, 121), (3375, 144), (3375, 169), (3375, 196), (3375, 225), (3375, 256), (3375, 289), (3375, 324), (3375, 361), (3375, 400), (3375, 441), (3375, 484), (3375, 529), (3375, 576), (3375, 625), (3375, 676), (3375, 729), (3375, 784), (3375, 841), (3375, 900), (3375, 961), (3375, 1024), (3375, 1089), (3375, 1156), (3375, 1225), (3375, 1296), (3375, 1369), (3375, 1444), (3375, 1521), (3375, 1600), (3375, 1681), (3375, 1764), (3375, 1849), (3375, 1936), (3375, 2025), (3375, 2116), (3375, 2209), (3375, 2304), (3375, 2401), (4096, 0), (4096, 1), (4096, 4), (4096, 9), (4096, 16), (4096, 25), (4096, 36), (4096, 49), (4096, 64), (4096, 81), (4096, 100), (4096, 121), (4096, 144), (4096, 169), (4096, 196), (4096, 225), (4096, 256), (4096, 289), (4096, 324), (4096, 361), (4096, 400), (4096, 441), (4096, 484), (4096, 529), (4096, 576), (4096, 625), (4096, 676), (4096, 729), (4096, 784), (4096, 841), (4096, 900), (4096, 961), (4096, 1024), (4096, 1089), (4096, 1156), (4096, 1225), (4096, 1296), (4096, 1369), (4096, 1444), (4096, 1521), (4096, 1600), (4096, 1681), (4096, 1764), (4096, 1849), (4096, 1936), (4096, 2025), (4096, 2116), (4096, 2209), (4096, 2304), (4096, 2401), (4913, 0), (4913, 1), (4913, 4), (4913, 9), (4913, 16), (4913, 25), (4913, 36), (4913, 49), (4913, 64), (4913, 81), (4913, 100), (4913, 121), (4913, 144), (4913, 169), (4913, 196), (4913, 225), (4913, 256), (4913, 289), (4913, 324), (4913, 361), (4913, 400), (4913, 441), (4913, 484), (4913, 529), (4913, 576), (4913, 625), (4913, 676), (4913, 729), (4913, 784), (4913, 841), (4913, 900), (4913, 961), (4913, 1024), (4913, 1089), (4913, 1156), (4913, 1225), (4913, 1296), (4913, 1369), (4913, 1444), (4913, 1521), (4913, 1600), (4913, 1681), (4913, 1764), (4913, 1849), (4913, 1936), (4913, 2025), (4913, 2116), (4913, 2209), (4913, 2304), (4913, 2401), (5832, 0), (5832, 1), (5832, 4), (5832, 9), (5832, 16), (5832, 25), (5832, 36), (5832, 49), (5832, 64), (5832, 81), (5832, 100), (5832, 121), (5832, 144), (5832, 169), (5832, 196), (5832, 225), (5832, 256), (5832, 289), (5832, 324), (5832, 361), (5832, 400), (5832, 441), (5832, 484), (5832, 529), (5832, 576), (5832, 625), (5832, 676), (5832, 729), (5832, 784), (5832, 841), (5832, 900), (5832, 961), (5832, 1024), (5832, 1089), (5832, 1156), (5832, 1225), (5832, 1296), (5832, 1369), (5832, 1444), (5832, 1521), (5832, 1600), (5832, 1681), (5832, 1764), (5832, 1849), (5832, 1936), (5832, 2025), (5832, 2116), (5832, 2209), (5832, 2304), (5832, 2401), (6859, 0), (6859, 1), (6859, 4), (6859, 9), (6859, 16), (6859, 25), (6859, 36), (6859, 49), (6859, 64), (6859, 81), (6859, 100), (6859, 121), (6859, 144), (6859, 169), (6859, 196), (6859, 225), (6859, 256), (6859, 289), (6859, 324), (6859, 361), (6859, 400), (6859, 441), (6859, 484), (6859, 529), (6859, 576), (6859, 625), (6859, 676), (6859, 729), (6859, 784), (6859, 841), (6859, 900), (6859, 961), (6859, 1024), (6859, 1089), (6859, 1156), (6859, 1225), (6859, 1296), (6859, 1369), (6859, 1444), (6859, 1521), (6859, 1600), (6859, 1681), (6859, 1764), (6859, 1849), (6859, 1936), (6859, 2025), (6859, 2116), (6859, 2209), (6859, 2304), (6859, 2401), (8000, 0), (8000, 1), (8000, 4), (8000, 9), (8000, 16), (8000, 25), (8000, 36), (8000, 49), (8000, 64), (8000, 81), (8000, 100), (8000, 121), (8000, 144), (8000, 169), (8000, 196), (8000, 225), (8000, 256), (8000, 289), (8000, 324), (8000, 361), (8000, 400), (8000, 441), (8000, 484), (8000, 529), (8000, 576), (8000, 625), (8000, 676), (8000, 729), (8000, 784), (8000, 841), (8000, 900), (8000, 961), (8000, 1024), (8000, 1089), (8000, 1156), (8000, 1225), (8000, 1296), (8000, 1369), (8000, 1444), (8000, 1521), (8000, 1600), (8000, 1681), (8000, 1764), (8000, 1849), (8000, 1936), (8000, 2025), (8000, 2116), (8000, 2209), (8000, 2304), (8000, 2401), (9261, 0), (9261, 1), (9261, 4), (9261, 9), (9261, 16), (9261, 25), (9261, 36), (9261, 49), (9261, 64), (9261, 81), (9261, 100), (9261, 121), (9261, 144), (9261, 169), (9261, 196), (9261, 225), (9261, 256), (9261, 289), (9261, 324), (9261, 361), (9261, 400), (9261, 441), (9261, 484), (9261, 529), (9261, 576), (9261, 625), (9261, 676), (9261, 729), (9261, 784), (9261, 841), (9261, 900), (9261, 961), (9261, 1024), (9261, 1089), (9261, 1156), (9261, 1225), (9261, 1296), (9261, 1369), (9261, 1444), (9261, 1521), (9261, 1600), (9261, 1681), (9261, 1764), (9261, 1849), (9261, 1936), (9261, 2025), (9261, 2116), (9261, 2209), (9261, 2304), (9261, 2401), (10648, 0), (10648, 1), (10648, 4), (10648, 9), (10648, 16), (10648, 25), (10648, 36), (10648, 49), (10648, 64), (10648, 81), (10648, 100), (10648, 121), (10648, 144), (10648, 169), (10648, 196), (10648, 225), (10648, 256), (10648, 289), (10648, 324), (10648, 361), (10648, 400), (10648, 441), (10648, 484), (10648, 529), (10648, 576), (10648, 625), (10648, 676), (10648, 729), (10648, 784), (10648, 841), (10648, 900), (10648, 961), (10648, 1024), (10648, 1089), (10648, 1156), (10648, 1225), (10648, 1296), (10648, 1369), (10648, 1444), (10648, 1521), (10648, 1600), (10648, 1681), (10648, 1764), (10648, 1849), (10648, 1936), (10648, 2025), (10648, 2116), (10648, 2209), (10648, 2304), (10648, 2401), (12167, 0), (12167, 1), (12167, 4), (12167, 9), (12167, 16), (12167, 25), (12167, 36), (12167, 49), (12167, 64), (12167, 81), (12167, 100), (12167, 121), (12167, 144), (12167, 169), (12167, 196), (12167, 225), (12167, 256), (12167, 289), (12167, 324), (12167, 361), (12167, 400), (12167, 441), (12167, 484), (12167, 529), (12167, 576), (12167, 625), (12167, 676), (12167, 729), (12167, 784), (12167, 841), (12167, 900), (12167, 961), (12167, 1024), (12167, 1089), (12167, 1156), (12167, 1225), (12167, 1296), (12167, 1369), (12167, 1444), (12167, 1521), (12167, 1600), (12167, 1681), (12167, 1764), (12167, 1849), (12167, 1936), (12167, 2025), (12167, 2116), (12167, 2209), (12167, 2304), (12167, 2401), (13824, 0), (13824, 1), (13824, 4), (13824, 9), (13824, 16), (13824, 25), (13824, 36), (13824, 49), (13824, 64), (13824, 81), (13824, 100), (13824, 121), (13824, 144), (13824, 169), (13824, 196), (13824, 225), (13824, 256), (13824, 289), (13824, 324), (13824, 361), (13824, 400), (13824, 441), (13824, 484), (13824, 529), (13824, 576), (13824, 625), (13824, 676), (13824, 729), (13824, 784), (13824, 841), (13824, 900), (13824, 961), (13824, 1024), (13824, 1089), (13824, 1156), (13824, 1225), (13824, 1296), (13824, 1369), (13824, 1444), (13824, 1521), (13824, 1600), (13824, 1681), (13824, 1764), (13824, 1849), (13824, 1936), (13824, 2025), (13824, 2116), (13824, 2209), (13824, 2304), (13824, 2401), (15625, 0), (15625, 1), (15625, 4), (15625, 9), (15625, 16), (15625, 25), (15625, 36), (15625, 49), (15625, 64), (15625, 81), (15625, 100), (15625, 121), (15625, 144), (15625, 169), (15625, 196), (15625, 225), (15625, 256), (15625, 289), (15625, 324), (15625, 361), (15625, 400), (15625, 441), (15625, 484), (15625, 529), (15625, 576), (15625, 625), (15625, 676), (15625, 729), (15625, 784), (15625, 841), (15625, 900), (15625, 961), (15625, 1024), (15625, 1089), (15625, 1156), (15625, 1225), (15625, 1296), (15625, 1369), (15625, 1444), (15625, 1521), (15625, 1600), (15625, 1681), (15625, 1764), (15625, 1849), (15625, 1936), (15625, 2025), (15625, 2116), (15625, 2209), (15625, 2304), (15625, 2401), (17576, 0), (17576, 1), (17576, 4), (17576, 9), (17576, 16), (17576, 25), (17576, 36), (17576, 49), (17576, 64), (17576, 81), (17576, 100), (17576, 121), (17576, 144), (17576, 169), (17576, 196), (17576, 225), (17576, 256), (17576, 289), (17576, 324), (17576, 361), (17576, 400), (17576, 441), (17576, 484), (17576, 529), (17576, 576), (17576, 625), (17576, 676), (17576, 729), (17576, 784), (17576, 841), (17576, 900), (17576, 961), (17576, 1024), (17576, 1089), (17576, 1156), (17576, 1225), (17576, 1296), (17576, 1369), (17576, 1444), (17576, 1521), (17576, 1600), (17576, 1681), (17576, 1764), (17576, 1849), (17576, 1936), (17576, 2025), (17576, 2116), (17576, 2209), (17576, 2304), (17576, 2401), (19683, 0), (19683, 1), (19683, 4), (19683, 9), (19683, 16), (19683, 25), (19683, 36), (19683, 49), (19683, 64), (19683, 81), (19683, 100), (19683, 121), (19683, 144), (19683, 169), (19683, 196), (19683, 225), (19683, 256), (19683, 289), (19683, 324), (19683, 361), (19683, 400), (19683, 441), (19683, 484), (19683, 529), (19683, 576), (19683, 625), (19683, 676), (19683, 729), (19683, 784), (19683, 841), (19683, 900), (19683, 961), (19683, 1024), (19683, 1089), (19683, 1156), (19683, 1225), (19683, 1296), (19683, 1369), (19683, 1444), (19683, 1521), (19683, 1600), (19683, 1681), (19683, 1764), (19683, 1849), (19683, 1936), (19683, 2025), (19683, 2116), (19683, 2209), (19683, 2304), (19683, 2401), (21952, 0), (21952, 1), (21952, 4), (21952, 9), (21952, 16), (21952, 25), (21952, 36), (21952, 49), (21952, 64), (21952, 81), (21952, 100), (21952, 121), (21952, 144), (21952, 169), (21952, 196), (21952, 225), (21952, 256), (21952, 289), (21952, 324), (21952, 361), (21952, 400), (21952, 441), (21952, 484), (21952, 529), (21952, 576), (21952, 625), (21952, 676), (21952, 729), (21952, 784), (21952, 841), (21952, 900), (21952, 961), (21952, 1024), (21952, 1089), (21952, 1156), (21952, 1225), (21952, 1296), (21952, 1369), (21952, 1444), (21952, 1521), (21952, 1600), (21952, 1681), (21952, 1764), (21952, 1849), (21952, 1936), (21952, 2025), (21952, 2116), (21952, 2209), (21952, 2304), (21952, 2401), (24389, 0), (24389, 1), (24389, 4), (24389, 9), (24389, 16), (24389, 25), (24389, 36), (24389, 49), (24389, 64), (24389, 81), (24389, 100), (24389, 121), (24389, 144), (24389, 169), (24389, 196), (24389, 225), (24389, 256), (24389, 289), (24389, 324), (24389, 361), (24389, 400), (24389, 441), (24389, 484), (24389, 529), (24389, 576), (24389, 625), (24389, 676), (24389, 729), (24389, 784), (24389, 841), (24389, 900), (24389, 961), (24389, 1024), (24389, 1089), (24389, 1156), (24389, 1225), (24389, 1296), (24389, 1369), (24389, 1444), (24389, 1521), (24389, 1600), (24389, 1681), (24389, 1764), (24389, 1849), (24389, 1936), (24389, 2025), (24389, 2116), (24389, 2209), (24389, 2304), (24389, 2401), (27000, 0), (27000, 1), (27000, 4), (27000, 9), (27000, 16), (27000, 25), (27000, 36), (27000, 49), (27000, 64), (27000, 81), (27000, 100), (27000, 121), (27000, 144), (27000, 169), (27000, 196), (27000, 225), (27000, 256), (27000, 289), (27000, 324), (27000, 361), (27000, 400), (27000, 441), (27000, 484), (27000, 529), (27000, 576), (27000, 625), (27000, 676), (27000, 729), (27000, 784), (27000, 841), (27000, 900), (27000, 961), (27000, 1024), (27000, 1089), (27000, 1156), (27000, 1225), (27000, 1296), (27000, 1369), (27000, 1444), (27000, 1521), (27000, 1600), (27000, 1681), (27000, 1764), (27000, 1849), (27000, 1936), (27000, 2025), (27000, 2116), (27000, 2209), (27000, 2304), (27000, 2401), (29791, 0), (29791, 1), (29791, 4), (29791, 9), (29791, 16), (29791, 25), (29791, 36), (29791, 49), (29791, 64), (29791, 81), (29791, 100), (29791, 121), (29791, 144), (29791, 169), (29791, 196), (29791, 225), (29791, 256), (29791, 289), (29791, 324), (29791, 361), (29791, 400), (29791, 441), (29791, 484), (29791, 529), (29791, 576), (29791, 625), (29791, 676), (29791, 729), (29791, 784), (29791, 841), (29791, 900), (29791, 961), (29791, 1024), (29791, 1089), (29791, 1156), (29791, 1225), (29791, 1296), (29791, 1369), (29791, 1444), (29791, 1521), (29791, 1600), (29791, 1681), (29791, 1764), (29791, 1849), (29791, 1936), (29791, 2025), (29791, 2116), (29791, 2209), (29791, 2304), (29791, 2401), (32768, 0), (32768, 1), (32768, 4), (32768, 9), (32768, 16), (32768, 25), (32768, 36), (32768, 49), (32768, 64), (32768, 81), (32768, 100), (32768, 121), (32768, 144), (32768, 169), (32768, 196), (32768, 225), (32768, 256), (32768, 289), (32768, 324), (32768, 361), (32768, 400), (32768, 441), (32768, 484), (32768, 529), (32768, 576), (32768, 625), (32768, 676), (32768, 729), (32768, 784), (32768, 841), (32768, 900), (32768, 961), (32768, 1024), (32768, 1089), (32768, 1156), (32768, 1225), (32768, 1296), (32768, 1369), (32768, 1444), (32768, 1521), (32768, 1600), (32768, 1681), (32768, 1764), (32768, 1849), (32768, 1936), (32768, 2025), (32768, 2116), (32768, 2209), (32768, 2304), (32768, 2401), (35937, 0), (35937, 1), (35937, 4), (35937, 9), (35937, 16), (35937, 25), (35937, 36), (35937, 49), (35937, 64), (35937, 81), (35937, 100), (35937, 121), (35937, 144), (35937, 169), (35937, 196), (35937, 225), (35937, 256), (35937, 289), (35937, 324), (35937, 361), (35937, 400), (35937, 441), (35937, 484), (35937, 529), (35937, 576), (35937, 625), (35937, 676), (35937, 729), (35937, 784), (35937, 841), (35937, 900), (35937, 961), (35937, 1024), (35937, 1089), (35937, 1156), (35937, 1225), (35937, 1296), (35937, 1369), (35937, 1444), (35937, 1521), (35937, 1600), (35937, 1681), (35937, 1764), (35937, 1849), (35937, 1936), (35937, 2025), (35937, 2116), (35937, 2209), (35937, 2304), (35937, 2401), (39304, 0), (39304, 1), (39304, 4), (39304, 9), (39304, 16), (39304, 25), (39304, 36), (39304, 49), (39304, 64), (39304, 81), (39304, 100), (39304, 121), (39304, 144), (39304, 169), (39304, 196), (39304, 225), (39304, 256), (39304, 289), (39304, 324), (39304, 361), (39304, 400), (39304, 441), (39304, 484), (39304, 529), (39304, 576), (39304, 625), (39304, 676), (39304, 729), (39304, 784), (39304, 841), (39304, 900), (39304, 961), (39304, 1024), (39304, 1089), (39304, 1156), (39304, 1225), (39304, 1296), (39304, 1369), (39304, 1444), (39304, 1521), (39304, 1600), (39304, 1681), (39304, 1764), (39304, 1849), (39304, 1936), (39304, 2025), (39304, 2116), (39304, 2209), (39304, 2304), (39304, 2401), (42875, 0), (42875, 1), (42875, 4), (42875, 9), (42875, 16), (42875, 25), (42875, 36), (42875, 49), (42875, 64), (42875, 81), (42875, 100), (42875, 121), (42875, 144), (42875, 169), (42875, 196), (42875, 225), (42875, 256), (42875, 289), (42875, 324), (42875, 361), (42875, 400), (42875, 441), (42875, 484), (42875, 529), (42875, 576), (42875, 625), (42875, 676), (42875, 729), (42875, 784), (42875, 841), (42875, 900), (42875, 961), (42875, 1024), (42875, 1089), (42875, 1156), (42875, 1225), (42875, 1296), (42875, 1369), (42875, 1444), (42875, 1521), (42875, 1600), (42875, 1681), (42875, 1764), (42875, 1849), (42875, 1936), (42875, 2025), (42875, 2116), (42875, 2209), (42875, 2304), (42875, 2401), (46656, 0), (46656, 1), (46656, 4), (46656, 9), (46656, 16), (46656, 25), (46656, 36), (46656, 49), (46656, 64), (46656, 81), (46656, 100), (46656, 121), (46656, 144), (46656, 169), (46656, 196), (46656, 225), (46656, 256), (46656, 289), (46656, 324), (46656, 361), (46656, 400), (46656, 441), (46656, 484), (46656, 529), (46656, 576), (46656, 625), (46656, 676), (46656, 729), (46656, 784), (46656, 841), (46656, 900), (46656, 961), (46656, 1024), (46656, 1089), (46656, 1156), (46656, 1225), (46656, 1296), (46656, 1369), (46656, 1444), (46656, 1521), (46656, 1600), (46656, 1681), (46656, 1764), (46656, 1849), (46656, 1936), (46656, 2025), (46656, 2116), (46656, 2209), (46656, 2304), (46656, 2401), (50653, 0), (50653, 1), (50653, 4), (50653, 9), (50653, 16), (50653, 25), (50653, 36), (50653, 49), (50653, 64), (50653, 81), (50653, 100), (50653, 121), (50653, 144), (50653, 169), (50653, 196), (50653, 225), (50653, 256), (50653, 289), (50653, 324), (50653, 361), (50653, 400), (50653, 441), (50653, 484), (50653, 529), (50653, 576), (50653, 625), (50653, 676), (50653, 729), (50653, 784), (50653, 841), (50653, 900), (50653, 961), (50653, 1024), (50653, 1089), (50653, 1156), (50653, 1225), (50653, 1296), (50653, 1369), (50653, 1444), (50653, 1521), (50653, 1600), (50653, 1681), (50653, 1764), (50653, 1849), (50653, 1936), (50653, 2025), (50653, 2116), (50653, 2209), (50653, 2304), (50653, 2401), (54872, 0), (54872, 1), (54872, 4), (54872, 9), (54872, 16), (54872, 25), (54872, 36), (54872, 49), (54872, 64), (54872, 81), (54872, 100), (54872, 121), (54872, 144), (54872, 169), (54872, 196), (54872, 225), (54872, 256), (54872, 289), (54872, 324), (54872, 361), (54872, 400), (54872, 441), (54872, 484), (54872, 529), (54872, 576), (54872, 625), (54872, 676), (54872, 729), (54872, 784), (54872, 841), (54872, 900), (54872, 961), (54872, 1024), (54872, 1089), (54872, 1156), (54872, 1225), (54872, 1296), (54872, 1369), (54872, 1444), (54872, 1521), (54872, 1600), (54872, 1681), (54872, 1764), (54872, 1849), (54872, 1936), (54872, 2025), (54872, 2116), (54872, 2209), (54872, 2304), (54872, 2401), (59319, 0), (59319, 1), (59319, 4), (59319, 9), (59319, 16), (59319, 25), (59319, 36), (59319, 49), (59319, 64), (59319, 81), (59319, 100), (59319, 121), (59319, 144), (59319, 169), (59319, 196), (59319, 225), (59319, 256), (59319, 289), (59319, 324), (59319, 361), (59319, 400), (59319, 441), (59319, 484), (59319, 529), (59319, 576), (59319, 625), (59319, 676), (59319, 729), (59319, 784), (59319, 841), (59319, 900), (59319, 961), (59319, 1024), (59319, 1089), (59319, 1156), (59319, 1225), (59319, 1296), (59319, 1369), (59319, 1444), (59319, 1521), (59319, 1600), (59319, 1681), (59319, 1764), (59319, 1849), (59319, 1936), (59319, 2025), (59319, 2116), (59319, 2209), (59319, 2304), (59319, 2401), (64000, 0), (64000, 1), (64000, 4), (64000, 9), (64000, 16), (64000, 25), (64000, 36), (64000, 49), (64000, 64), (64000, 81), (64000, 100), (64000, 121), (64000, 144), (64000, 169), (64000, 196), (64000, 225), (64000, 256), (64000, 289), (64000, 324), (64000, 361), (64000, 400), (64000, 441), (64000, 484), (64000, 529), (64000, 576), (64000, 625), (64000, 676), (64000, 729), (64000, 784), (64000, 841), (64000, 900), (64000, 961), (64000, 1024), (64000, 1089), (64000, 1156), (64000, 1225), (64000, 1296), (64000, 1369), (64000, 1444), (64000, 1521), (64000, 1600), (64000, 1681), (64000, 1764), (64000, 1849), (64000, 1936), (64000, 2025), (64000, 2116), (64000, 2209), (64000, 2304), (64000, 2401), (68921, 0), (68921, 1), (68921, 4), (68921, 9), (68921, 16), (68921, 25), (68921, 36), (68921, 49), (68921, 64), (68921, 81), (68921, 100), (68921, 121), (68921, 144), (68921, 169), (68921, 196), (68921, 225), (68921, 256), (68921, 289), (68921, 324), (68921, 361), (68921, 400), (68921, 441), (68921, 484), (68921, 529), (68921, 576), (68921, 625), (68921, 676), (68921, 729), (68921, 784), (68921, 841), (68921, 900), (68921, 961), (68921, 1024), (68921, 1089), (68921, 1156), (68921, 1225), (68921, 1296), (68921, 1369), (68921, 1444), (68921, 1521), (68921, 1600), (68921, 1681), (68921, 1764), (68921, 1849), (68921, 1936), (68921, 2025), (68921, 2116), (68921, 2209), (68921, 2304), (68921, 2401), (74088, 0), (74088, 1), (74088, 4), (74088, 9), (74088, 16), (74088, 25), (74088, 36), (74088, 49), (74088, 64), (74088, 81), (74088, 100), (74088, 121), (74088, 144), (74088, 169), (74088, 196), (74088, 225), (74088, 256), (74088, 289), (74088, 324), (74088, 361), (74088, 400), (74088, 441), (74088, 484), (74088, 529), (74088, 576), (74088, 625), (74088, 676), (74088, 729), (74088, 784), (74088, 841), (74088, 900), (74088, 961), (74088, 1024), (74088, 1089), (74088, 1156), (74088, 1225), (74088, 1296), (74088, 1369), (74088, 1444), (74088, 1521), (74088, 1600), (74088, 1681), (74088, 1764), (74088, 1849), (74088, 1936), (74088, 2025), (74088, 2116), (74088, 2209), (74088, 2304), (74088, 2401), (79507, 0), (79507, 1), (79507, 4), (79507, 9), (79507, 16), (79507, 25), (79507, 36), (79507, 49), (79507, 64), (79507, 81), (79507, 100), (79507, 121), (79507, 144), (79507, 169), (79507, 196), (79507, 225), (79507, 256), (79507, 289), (79507, 324), (79507, 361), (79507, 400), (79507, 441), (79507, 484), (79507, 529), (79507, 576), (79507, 625), (79507, 676), (79507, 729), (79507, 784), (79507, 841), (79507, 900), (79507, 961), (79507, 1024), (79507, 1089), (79507, 1156), (79507, 1225), (79507, 1296), (79507, 1369), (79507, 1444), (79507, 1521), (79507, 1600), (79507, 1681), (79507, 1764), (79507, 1849), (79507, 1936), (79507, 2025), (79507, 2116), (79507, 2209), (79507, 2304), (79507, 2401), (85184, 0), (85184, 1), (85184, 4), (85184, 9), (85184, 16), (85184, 25), (85184, 36), (85184, 49), (85184, 64), (85184, 81), (85184, 100), (85184, 121), (85184, 144), (85184, 169), (85184, 196), (85184, 225), (85184, 256), (85184, 289), (85184, 324), (85184, 361), (85184, 400), (85184, 441), (85184, 484), (85184, 529), (85184, 576), (85184, 625), (85184, 676), (85184, 729), (85184, 784), (85184, 841), (85184, 900), (85184, 961), (85184, 1024), (85184, 1089), (85184, 1156), (85184, 1225), (85184, 1296), (85184, 1369), (85184, 1444), (85184, 1521), (85184, 1600), (85184, 1681), (85184, 1764), (85184, 1849), (85184, 1936), (85184, 2025), (85184, 2116), (85184, 2209), (85184, 2304), (85184, 2401), (91125, 0), (91125, 1), (91125, 4), (91125, 9), (91125, 16), (91125, 25), (91125, 36), (91125, 49), (91125, 64), (91125, 81), (91125, 100), (91125, 121), (91125, 144), (91125, 169), (91125, 196), (91125, 225), (91125, 256), (91125, 289), (91125, 324), (91125, 361), (91125, 400), (91125, 441), (91125, 484), (91125, 529), (91125, 576), (91125, 625), (91125, 676), (91125, 729), (91125, 784), (91125, 841), (91125, 900), (91125, 961), (91125, 1024), (91125, 1089), (91125, 1156), (91125, 1225), (91125, 1296), (91125, 1369), (91125, 1444), (91125, 1521), (91125, 1600), (91125, 1681), (91125, 1764), (91125, 1849), (91125, 1936), (91125, 2025), (91125, 2116), (91125, 2209), (91125, 2304), (91125, 2401), (97336, 0), (97336, 1), (97336, 4), (97336, 9), (97336, 16), (97336, 25), (97336, 36), (97336, 49), (97336, 64), (97336, 81), (97336, 100), (97336, 121), (97336, 144), (97336, 169), (97336, 196), (97336, 225), (97336, 256), (97336, 289), (97336, 324), (97336, 361), (97336, 400), (97336, 441), (97336, 484), (97336, 529), (97336, 576), (97336, 625), (97336, 676), (97336, 729), (97336, 784), (97336, 841), (97336, 900), (97336, 961), (97336, 1024), (97336, 1089), (97336, 1156), (97336, 1225), (97336, 1296), (97336, 1369), (97336, 1444), (97336, 1521), (97336, 1600), (97336, 1681), (97336, 1764), (97336, 1849), (97336, 1936), (97336, 2025), (97336, 2116), (97336, 2209), (97336, 2304), (97336, 2401), (103823, 0), (103823, 1), (103823, 4), (103823, 9), (103823, 16), (103823, 25), (103823, 36), (103823, 49), (103823, 64), (103823, 81), (103823, 100), (103823, 121), (103823, 144), (103823, 169), (103823, 196), (103823, 225), (103823, 256), (103823, 289), (103823, 324), (103823, 361), (103823, 400), (103823, 441), (103823, 484), (103823, 529), (103823, 576), (103823, 625), (103823, 676), (103823, 729), (103823, 784), (103823, 841), (103823, 900), (103823, 961), (103823, 1024), (103823, 1089), (103823, 1156), (103823, 1225), (103823, 1296), (103823, 1369), (103823, 1444), (103823, 1521), (103823, 1600), (103823, 1681), (103823, 1764), (103823, 1849), (103823, 1936), (103823, 2025), (103823, 2116), (103823, 2209), (103823, 2304), (103823, 2401), (110592, 0), (110592, 1), (110592, 4), (110592, 9), (110592, 16), (110592, 25), (110592, 36), (110592, 49), (110592, 64), (110592, 81), (110592, 100), (110592, 121), (110592, 144), (110592, 169), (110592, 196), (110592, 225), (110592, 256), (110592, 289), (110592, 324), (110592, 361), (110592, 400), (110592, 441), (110592, 484), (110592, 529), (110592, 576), (110592, 625), (110592, 676), (110592, 729), (110592, 784), (110592, 841), (110592, 900), (110592, 961), (110592, 1024), (110592, 1089), (110592, 1156), (110592, 1225), (110592, 1296), (110592, 1369), (110592, 1444), (110592, 1521), (110592, 1600), (110592, 1681), (110592, 1764), (110592, 1849), (110592, 1936), (110592, 2025), (110592, 2116), (110592, 2209), (110592, 2304), (110592, 2401), (117649, 0), (117649, 1), (117649, 4), (117649, 9), (117649, 16), (117649, 25), (117649, 36), (117649, 49), (117649, 64), (117649, 81), (117649, 100), (117649, 121), (117649, 144), (117649, 169), (117649, 196), (117649, 225), (117649, 256), (117649, 289), (117649, 324), (117649, 361), (117649, 400), (117649, 441), (117649, 484), (117649, 529), (117649, 576), (117649, 625), (117649, 676), (117649, 729), (117649, 784), (117649, 841), (117649, 900), (117649, 961), (117649, 1024), (117649, 1089), (117649, 1156), (117649, 1225), (117649, 1296), (117649, 1369), (117649, 1444), (117649, 1521), (117649, 1600), (117649, 1681), (117649, 1764), (117649, 1849), (117649, 1936), (117649, 2025), (117649, 2116), (117649, 2209), (117649, 2304), (117649, 2401)]\"], [\"None\", \"[(-125000, 2500), (-125000, 2401), (-125000, 2304), (-125000, 2209), (-125000, 2116), (-125000, 2025), (-125000, 1936), (-125000, 1849), (-125000, 1764), (-125000, 1681), (-125000, 1600), (-125000, 1521), (-125000, 1444), (-125000, 1369), (-125000, 1296), (-125000, 1225), (-125000, 1156), (-125000, 1089), (-125000, 1024), (-125000, 961), (-125000, 900), (-125000, 841), (-125000, 784), (-125000, 729), (-125000, 676), (-125000, 625), (-125000, 576), (-125000, 529), (-125000, 484), (-125000, 441), (-125000, 400), (-125000, 361), (-125000, 324), (-125000, 289), (-125000, 256), (-125000, 225), (-125000, 196), (-125000, 169), (-125000, 144), (-125000, 121), (-125000, 100), (-125000, 81), (-125000, 64), (-125000, 49), (-125000, 36), (-125000, 25), (-125000, 16), (-125000, 9), (-125000, 4), (-125000, 1), (-125000, 0), (-125000, 1), (-125000, 4), (-125000, 9), (-125000, 16), (-125000, 25), (-125000, 36), (-125000, 49), (-125000, 64), (-125000, 81), (-125000, 100), (-125000, 121), (-125000, 144), (-125000, 169), (-125000, 196), (-125000, 225), (-125000, 256), (-125000, 289), (-125000, 324), (-125000, 361), (-125000, 400), (-125000, 441), (-125000, 484), (-125000, 529), (-125000, 576), (-125000, 625), (-125000, 676), (-125000, 729), (-125000, 784), (-125000, 841), (-125000, 900), (-125000, 961), (-125000, 1024), (-125000, 1089), (-125000, 1156), (-125000, 1225), (-125000, 1296), (-125000, 1369), (-125000, 1444), (-125000, 1521), (-125000, 1600), (-125000, 1681), (-125000, 1764), (-125000, 1849), (-125000, 1936), (-125000, 2025), (-125000, 2116), (-125000, 2209), (-125000, 2304), (-125000, 2401), (-117649, 2500), (-117649, 2401), (-117649, 2304), (-117649, 2209), (-117649, 2116), (-117649, 2025), (-117649, 1936), (-117649, 1849), (-117649, 1764), (-117649, 1681), (-117649, 1600), (-117649, 1521), (-117649, 1444), (-117649, 1369), (-117649, 1296), (-117649, 1225), (-117649, 1156), (-117649, 1089), (-117649, 1024), (-117649, 961), (-117649, 900), (-117649, 841), (-117649, 784), (-117649, 729), (-117649, 676), (-117649, 625), (-117649, 576), (-117649, 529), (-117649, 484), (-117649, 441), (-117649, 400), (-117649, 361), (-117649, 324), (-117649, 289), (-117649, 256), (-117649, 225), (-117649, 196), (-117649, 169), (-117649, 144), (-117649, 121), (-117649, 100), (-117649, 81), (-117649, 64), (-117649, 49), (-117649, 36), (-117649, 25), (-117649, 16), (-117649, 9), (-117649, 4), (-117649, 1), (-117649, 0), (-117649, 1), (-117649, 4), (-117649, 9), (-117649, 16), (-117649, 25), (-117649, 36), (-117649, 49), (-117649, 64), (-117649, 81), (-117649, 100), (-117649, 121), (-117649, 144), (-117649, 169), (-117649, 196), (-117649, 225), (-117649, 256), (-117649, 289), (-117649, 324), (-117649, 361), (-117649, 400), (-117649, 441), (-117649, 484), (-117649, 529), (-117649, 576), (-117649, 625), (-117649, 676), (-117649, 729), (-117649, 784), (-117649, 841), (-117649, 900), (-117649, 961), (-117649, 1024), (-117649, 1089), (-117649, 1156), (-117649, 1225), (-117649, 1296), (-117649, 1369), (-117649, 1444), (-117649, 1521), (-117649, 1600), (-117649, 1681), (-117649, 1764), (-117649, 1849), (-117649, 1936), (-117649, 2025), (-117649, 2116), (-117649, 2209), (-117649, 2304), (-117649, 2401), (-110592, 2500), (-110592, 2401), (-110592, 2304), (-110592, 2209), (-110592, 2116), (-110592, 2025), (-110592, 1936), (-110592, 1849), (-110592, 1764), (-110592, 1681), (-110592, 1600), (-110592, 1521), (-110592, 1444), (-110592, 1369), (-110592, 1296), (-110592, 1225), (-110592, 1156), (-110592, 1089), (-110592, 1024), (-110592, 961), (-110592, 900), (-110592, 841), (-110592, 784), (-110592, 729), (-110592, 676), (-110592, 625), (-110592, 576), (-110592, 529), (-110592, 484), (-110592, 441), (-110592, 400), (-110592, 361), (-110592, 324), (-110592, 289), (-110592, 256), (-110592, 225), (-110592, 196), (-110592, 169), (-110592, 144), (-110592, 121), (-110592, 100), (-110592, 81), (-110592, 64), (-110592, 49), (-110592, 36), (-110592, 25), (-110592, 16), (-110592, 9), (-110592, 4), (-110592, 1), (-110592, 0), (-110592, 1), (-110592, 4), (-110592, 9), (-110592, 16), (-110592, 25), (-110592, 36), (-110592, 49), (-110592, 64), (-110592, 81), (-110592, 100), (-110592, 121), (-110592, 144), (-110592, 169), (-110592, 196), (-110592, 225), (-110592, 256), (-110592, 289), (-110592, 324), (-110592, 361), (-110592, 400), (-110592, 441), (-110592, 484), (-110592, 529), (-110592, 576), (-110592, 625), (-110592, 676), (-110592, 729), (-110592, 784), (-110592, 841), (-110592, 900), (-110592, 961), (-110592, 1024), (-110592, 1089), (-110592, 1156), (-110592, 1225), (-110592, 1296), (-110592, 1369), (-110592, 1444), (-110592, 1521), (-110592, 1600), (-110592, 1681), (-110592, 1764), (-110592, 1849), (-110592, 1936), (-110592, 2025), (-110592, 2116), (-110592, 2209), (-110592, 2304), (-110592, 2401), (-103823, 2500), (-103823, 2401), (-103823, 2304), (-103823, 2209), (-103823, 2116), (-103823, 2025), (-103823, 1936), (-103823, 1849), (-103823, 1764), (-103823, 1681), (-103823, 1600), (-103823, 1521), (-103823, 1444), (-103823, 1369), (-103823, 1296), (-103823, 1225), (-103823, 1156), (-103823, 1089), (-103823, 1024), (-103823, 961), (-103823, 900), (-103823, 841), (-103823, 784), (-103823, 729), (-103823, 676), (-103823, 625), (-103823, 576), (-103823, 529), (-103823, 484), (-103823, 441), (-103823, 400), (-103823, 361), (-103823, 324), (-103823, 289), (-103823, 256), (-103823, 225), (-103823, 196), (-103823, 169), (-103823, 144), (-103823, 121), (-103823, 100), (-103823, 81), (-103823, 64), (-103823, 49), (-103823, 36), (-103823, 25), (-103823, 16), (-103823, 9), (-103823, 4), (-103823, 1), (-103823, 0), (-103823, 1), (-103823, 4), (-103823, 9), (-103823, 16), (-103823, 25), (-103823, 36), (-103823, 49), (-103823, 64), (-103823, 81), (-103823, 100), (-103823, 121), (-103823, 144), (-103823, 169), (-103823, 196), (-103823, 225), (-103823, 256), (-103823, 289), (-103823, 324), (-103823, 361), (-103823, 400), (-103823, 441), (-103823, 484), (-103823, 529), (-103823, 576), (-103823, 625), (-103823, 676), (-103823, 729), (-103823, 784), (-103823, 841), (-103823, 900), (-103823, 961), (-103823, 1024), (-103823, 1089), (-103823, 1156), (-103823, 1225), (-103823, 1296), (-103823, 1369), (-103823, 1444), (-103823, 1521), (-103823, 1600), (-103823, 1681), (-103823, 1764), (-103823, 1849), (-103823, 1936), (-103823, 2025), (-103823, 2116), (-103823, 2209), (-103823, 2304), (-103823, 2401), (-97336, 2500), (-97336, 2401), (-97336, 2304), (-97336, 2209), (-97336, 2116), (-97336, 2025), (-97336, 1936), (-97336, 1849), (-97336, 1764), (-97336, 1681), (-97336, 1600), (-97336, 1521), (-97336, 1444), (-97336, 1369), (-97336, 1296), (-97336, 1225), (-97336, 1156), (-97336, 1089), (-97336, 1024), (-97336, 961), (-97336, 900), (-97336, 841), (-97336, 784), (-97336, 729), (-97336, 676), (-97336, 625), (-97336, 576), (-97336, 529), (-97336, 484), (-97336, 441), (-97336, 400), (-97336, 361), (-97336, 324), (-97336, 289), (-97336, 256), (-97336, 225), (-97336, 196), (-97336, 169), (-97336, 144), (-97336, 121), (-97336, 100), (-97336, 81), (-97336, 64), (-97336, 49), (-97336, 36), (-97336, 25), (-97336, 16), (-97336, 9), (-97336, 4), (-97336, 1), (-97336, 0), (-97336, 1), (-97336, 4), (-97336, 9), (-97336, 16), (-97336, 25), (-97336, 36), (-97336, 49), (-97336, 64), (-97336, 81), (-97336, 100), (-97336, 121), (-97336, 144), (-97336, 169), (-97336, 196), (-97336, 225), (-97336, 256), (-97336, 289), (-97336, 324), (-97336, 361), (-97336, 400), (-97336, 441), (-97336, 484), (-97336, 529), (-97336, 576), (-97336, 625), (-97336, 676), (-97336, 729), (-97336, 784), (-97336, 841), (-97336, 900), (-97336, 961), (-97336, 1024), (-97336, 1089), (-97336, 1156), (-97336, 1225), (-97336, 1296), (-97336, 1369), (-97336, 1444), (-97336, 1521), (-97336, 1600), (-97336, 1681), (-97336, 1764), (-97336, 1849), (-97336, 1936), (-97336, 2025), (-97336, 2116), (-97336, 2209), (-97336, 2304), (-97336, 2401), (-91125, 2500), (-91125, 2401), (-91125, 2304), (-91125, 2209), (-91125, 2116), (-91125, 2025), (-91125, 1936), (-91125, 1849), (-91125, 1764), (-91125, 1681), (-91125, 1600), (-91125, 1521), (-91125, 1444), (-91125, 1369), (-91125, 1296), (-91125, 1225), (-91125, 1156), (-91125, 1089), (-91125, 1024), (-91125, 961), (-91125, 900), (-91125, 841), (-91125, 784), (-91125, 729), (-91125, 676), (-91125, 625), (-91125, 576), (-91125, 529), (-91125, 484), (-91125, 441), (-91125, 400), (-91125, 361), (-91125, 324), (-91125, 289), (-91125, 256), (-91125, 225), (-91125, 196), (-91125, 169), (-91125, 144), (-91125, 121), (-91125, 100), (-91125, 81), (-91125, 64), (-91125, 49), (-91125, 36), (-91125, 25), (-91125, 16), (-91125, 9), (-91125, 4), (-91125, 1), (-91125, 0), (-91125, 1), (-91125, 4), (-91125, 9), (-91125, 16), (-91125, 25), (-91125, 36), (-91125, 49), (-91125, 64), (-91125, 81), (-91125, 100), (-91125, 121), (-91125, 144), (-91125, 169), (-91125, 196), (-91125, 225), (-91125, 256), (-91125, 289), (-91125, 324), (-91125, 361), (-91125, 400), (-91125, 441), (-91125, 484), (-91125, 529), (-91125, 576), (-91125, 625), (-91125, 676), (-91125, 729), (-91125, 784), (-91125, 841), (-91125, 900), (-91125, 961), (-91125, 1024), (-91125, 1089), (-91125, 1156), (-91125, 1225), (-91125, 1296), (-91125, 1369), (-91125, 1444), (-91125, 1521), (-91125, 1600), (-91125, 1681), (-91125, 1764), (-91125, 1849), (-91125, 1936), (-91125, 2025), (-91125, 2116), (-91125, 2209), (-91125, 2304), (-91125, 2401), (-85184, 2500), (-85184, 2401), (-85184, 2304), (-85184, 2209), (-85184, 2116), (-85184, 2025), (-85184, 1936), (-85184, 1849), (-85184, 1764), (-85184, 1681), (-85184, 1600), (-85184, 1521), (-85184, 1444), (-85184, 1369), (-85184, 1296), (-85184, 1225), (-85184, 1156), (-85184, 1089), (-85184, 1024), (-85184, 961), (-85184, 900), (-85184, 841), (-85184, 784), (-85184, 729), (-85184, 676), (-85184, 625), (-85184, 576), (-85184, 529), (-85184, 484), (-85184, 441), (-85184, 400), (-85184, 361), (-85184, 324), (-85184, 289), (-85184, 256), (-85184, 225), (-85184, 196), (-85184, 169), (-85184, 144), (-85184, 121), (-85184, 100), (-85184, 81), (-85184, 64), (-85184, 49), (-85184, 36), (-85184, 25), (-85184, 16), (-85184, 9), (-85184, 4), (-85184, 1), (-85184, 0), (-85184, 1), (-85184, 4), (-85184, 9), (-85184, 16), (-85184, 25), (-85184, 36), (-85184, 49), (-85184, 64), (-85184, 81), (-85184, 100), (-85184, 121), (-85184, 144), (-85184, 169), (-85184, 196), (-85184, 225), (-85184, 256), (-85184, 289), (-85184, 324), (-85184, 361), (-85184, 400), (-85184, 441), (-85184, 484), (-85184, 529), (-85184, 576), (-85184, 625), (-85184, 676), (-85184, 729), (-85184, 784), (-85184, 841), (-85184, 900), (-85184, 961), (-85184, 1024), (-85184, 1089), (-85184, 1156), (-85184, 1225), (-85184, 1296), (-85184, 1369), (-85184, 1444), (-85184, 1521), (-85184, 1600), (-85184, 1681), (-85184, 1764), (-85184, 1849), (-85184, 1936), (-85184, 2025), (-85184, 2116), (-85184, 2209), (-85184, 2304), (-85184, 2401), (-79507, 2500), (-79507, 2401), (-79507, 2304), (-79507, 2209), (-79507, 2116), (-79507, 2025), (-79507, 1936), (-79507, 1849), (-79507, 1764), (-79507, 1681), (-79507, 1600), (-79507, 1521), (-79507, 1444), (-79507, 1369), (-79507, 1296), (-79507, 1225), (-79507, 1156), (-79507, 1089), (-79507, 1024), (-79507, 961), (-79507, 900), (-79507, 841), (-79507, 784), (-79507, 729), (-79507, 676), (-79507, 625), (-79507, 576), (-79507, 529), (-79507, 484), (-79507, 441), (-79507, 400), (-79507, 361), (-79507, 324), (-79507, 289), (-79507, 256), (-79507, 225), (-79507, 196), (-79507, 169), (-79507, 144), (-79507, 121), (-79507, 100), (-79507, 81), (-79507, 64), (-79507, 49), (-79507, 36), (-79507, 25), (-79507, 16), (-79507, 9), (-79507, 4), (-79507, 1), (-79507, 0), (-79507, 1), (-79507, 4), (-79507, 9), (-79507, 16), (-79507, 25), (-79507, 36), (-79507, 49), (-79507, 64), (-79507, 81), (-79507, 100), (-79507, 121), (-79507, 144), (-79507, 169), (-79507, 196), (-79507, 225), (-79507, 256), (-79507, 289), (-79507, 324), (-79507, 361), (-79507, 400), (-79507, 441), (-79507, 484), (-79507, 529), (-79507, 576), (-79507, 625), (-79507, 676), (-79507, 729), (-79507, 784), (-79507, 841), (-79507, 900), (-79507, 961), (-79507, 1024), (-79507, 1089), (-79507, 1156), (-79507, 1225), (-79507, 1296), (-79507, 1369), (-79507, 1444), (-79507, 1521), (-79507, 1600), (-79507, 1681), (-79507, 1764), (-79507, 1849), (-79507, 1936), (-79507, 2025), (-79507, 2116), (-79507, 2209), (-79507, 2304), (-79507, 2401), (-74088, 2500), (-74088, 2401), (-74088, 2304), (-74088, 2209), (-74088, 2116), (-74088, 2025), (-74088, 1936), (-74088, 1849), (-74088, 1764), (-74088, 1681), (-74088, 1600), (-74088, 1521), (-74088, 1444), (-74088, 1369), (-74088, 1296), (-74088, 1225), (-74088, 1156), (-74088, 1089), (-74088, 1024), (-74088, 961), (-74088, 900), (-74088, 841), (-74088, 784), (-74088, 729), (-74088, 676), (-74088, 625), (-74088, 576), (-74088, 529), (-74088, 484), (-74088, 441), (-74088, 400), (-74088, 361), (-74088, 324), (-74088, 289), (-74088, 256), (-74088, 225), (-74088, 196), (-74088, 169), (-74088, 144), (-74088, 121), (-74088, 100), (-74088, 81), (-74088, 64), (-74088, 49), (-74088, 36), (-74088, 25), (-74088, 16), (-74088, 9), (-74088, 4), (-74088, 1), (-74088, 0), (-74088, 1), (-74088, 4), (-74088, 9), (-74088, 16), (-74088, 25), (-74088, 36), (-74088, 49), (-74088, 64), (-74088, 81), (-74088, 100), (-74088, 121), (-74088, 144), (-74088, 169), (-74088, 196), (-74088, 225), (-74088, 256), (-74088, 289), (-74088, 324), (-74088, 361), (-74088, 400), (-74088, 441), (-74088, 484), (-74088, 529), (-74088, 576), (-74088, 625), (-74088, 676), (-74088, 729), (-74088, 784), (-74088, 841), (-74088, 900), (-74088, 961), (-74088, 1024), (-74088, 1089), (-74088, 1156), (-74088, 1225), (-74088, 1296), (-74088, 1369), (-74088, 1444), (-74088, 1521), (-74088, 1600), (-74088, 1681), (-74088, 1764), (-74088, 1849), (-74088, 1936), (-74088, 2025), (-74088, 2116), (-74088, 2209), (-74088, 2304), (-74088, 2401), (-68921, 2500), (-68921, 2401), (-68921, 2304), (-68921, 2209), (-68921, 2116), (-68921, 2025), (-68921, 1936), (-68921, 1849), (-68921, 1764), (-68921, 1681), (-68921, 1600), (-68921, 1521), (-68921, 1444), (-68921, 1369), (-68921, 1296), (-68921, 1225), (-68921, 1156), (-68921, 1089), (-68921, 1024), (-68921, 961), (-68921, 900), (-68921, 841), (-68921, 784), (-68921, 729), (-68921, 676), (-68921, 625), (-68921, 576), (-68921, 529), (-68921, 484), (-68921, 441), (-68921, 400), (-68921, 361), (-68921, 324), (-68921, 289), (-68921, 256), (-68921, 225), (-68921, 196), (-68921, 169), (-68921, 144), (-68921, 121), (-68921, 100), (-68921, 81), (-68921, 64), (-68921, 49), (-68921, 36), (-68921, 25), (-68921, 16), (-68921, 9), (-68921, 4), (-68921, 1), (-68921, 0), (-68921, 1), (-68921, 4), (-68921, 9), (-68921, 16), (-68921, 25), (-68921, 36), (-68921, 49), (-68921, 64), (-68921, 81), (-68921, 100), (-68921, 121), (-68921, 144), (-68921, 169), (-68921, 196), (-68921, 225), (-68921, 256), (-68921, 289), (-68921, 324), (-68921, 361), (-68921, 400), (-68921, 441), (-68921, 484), (-68921, 529), (-68921, 576), (-68921, 625), (-68921, 676), (-68921, 729), (-68921, 784), (-68921, 841), (-68921, 900), (-68921, 961), (-68921, 1024), (-68921, 1089), (-68921, 1156), (-68921, 1225), (-68921, 1296), (-68921, 1369), (-68921, 1444), (-68921, 1521), (-68921, 1600), (-68921, 1681), (-68921, 1764), (-68921, 1849), (-68921, 1936), (-68921, 2025), (-68921, 2116), (-68921, 2209), (-68921, 2304), (-68921, 2401), (-64000, 2500), (-64000, 2401), (-64000, 2304), (-64000, 2209), (-64000, 2116), (-64000, 2025), (-64000, 1936), (-64000, 1849), (-64000, 1764), (-64000, 1681), (-64000, 1600), (-64000, 1521), (-64000, 1444), (-64000, 1369), (-64000, 1296), (-64000, 1225), (-64000, 1156), (-64000, 1089), (-64000, 1024), (-64000, 961), (-64000, 900), (-64000, 841), (-64000, 784), (-64000, 729), (-64000, 676), (-64000, 625), (-64000, 576), (-64000, 529), (-64000, 484), (-64000, 441), (-64000, 400), (-64000, 361), (-64000, 324), (-64000, 289), (-64000, 256), (-64000, 225), (-64000, 196), (-64000, 169), (-64000, 144), (-64000, 121), (-64000, 100), (-64000, 81), (-64000, 64), (-64000, 49), (-64000, 36), (-64000, 25), (-64000, 16), (-64000, 9), (-64000, 4), (-64000, 1), (-64000, 0), (-64000, 1), (-64000, 4), (-64000, 9), (-64000, 16), (-64000, 25), (-64000, 36), (-64000, 49), (-64000, 64), (-64000, 81), (-64000, 100), (-64000, 121), (-64000, 144), (-64000, 169), (-64000, 196), (-64000, 225), (-64000, 256), (-64000, 289), (-64000, 324), (-64000, 361), (-64000, 400), (-64000, 441), (-64000, 484), (-64000, 529), (-64000, 576), (-64000, 625), (-64000, 676), (-64000, 729), (-64000, 784), (-64000, 841), (-64000, 900), (-64000, 961), (-64000, 1024), (-64000, 1089), (-64000, 1156), (-64000, 1225), (-64000, 1296), (-64000, 1369), (-64000, 1444), (-64000, 1521), (-64000, 1600), (-64000, 1681), (-64000, 1764), (-64000, 1849), (-64000, 1936), (-64000, 2025), (-64000, 2116), (-64000, 2209), (-64000, 2304), (-64000, 2401), (-59319, 2500), (-59319, 2401), (-59319, 2304), (-59319, 2209), (-59319, 2116), (-59319, 2025), (-59319, 1936), (-59319, 1849), (-59319, 1764), (-59319, 1681), (-59319, 1600), (-59319, 1521), (-59319, 1444), (-59319, 1369), (-59319, 1296), (-59319, 1225), (-59319, 1156), (-59319, 1089), (-59319, 1024), (-59319, 961), (-59319, 900), (-59319, 841), (-59319, 784), (-59319, 729), (-59319, 676), (-59319, 625), (-59319, 576), (-59319, 529), (-59319, 484), (-59319, 441), (-59319, 400), (-59319, 361), (-59319, 324), (-59319, 289), (-59319, 256), (-59319, 225), (-59319, 196), (-59319, 169), (-59319, 144), (-59319, 121), (-59319, 100), (-59319, 81), (-59319, 64), (-59319, 49), (-59319, 36), (-59319, 25), (-59319, 16), (-59319, 9), (-59319, 4), (-59319, 1), (-59319, 0), (-59319, 1), (-59319, 4), (-59319, 9), (-59319, 16), (-59319, 25), (-59319, 36), (-59319, 49), (-59319, 64), (-59319, 81), (-59319, 100), (-59319, 121), (-59319, 144), (-59319, 169), (-59319, 196), (-59319, 225), (-59319, 256), (-59319, 289), (-59319, 324), (-59319, 361), (-59319, 400), (-59319, 441), (-59319, 484), (-59319, 529), (-59319, 576), (-59319, 625), (-59319, 676), (-59319, 729), (-59319, 784), (-59319, 841), (-59319, 900), (-59319, 961), (-59319, 1024), (-59319, 1089), (-59319, 1156), (-59319, 1225), (-59319, 1296), (-59319, 1369), (-59319, 1444), (-59319, 1521), (-59319, 1600), (-59319, 1681), (-59319, 1764), (-59319, 1849), (-59319, 1936), (-59319, 2025), (-59319, 2116), (-59319, 2209), (-59319, 2304), (-59319, 2401), (-54872, 2500), (-54872, 2401), (-54872, 2304), (-54872, 2209), (-54872, 2116), (-54872, 2025), (-54872, 1936), (-54872, 1849), (-54872, 1764), (-54872, 1681), (-54872, 1600), (-54872, 1521), (-54872, 1444), (-54872, 1369), (-54872, 1296), (-54872, 1225), (-54872, 1156), (-54872, 1089), (-54872, 1024), (-54872, 961), (-54872, 900), (-54872, 841), (-54872, 784), (-54872, 729), (-54872, 676), (-54872, 625), (-54872, 576), (-54872, 529), (-54872, 484), (-54872, 441), (-54872, 400), (-54872, 361), (-54872, 324), (-54872, 289), (-54872, 256), (-54872, 225), (-54872, 196), (-54872, 169), (-54872, 144), (-54872, 121), (-54872, 100), (-54872, 81), (-54872, 64), (-54872, 49), (-54872, 36), (-54872, 25), (-54872, 16), (-54872, 9), (-54872, 4), (-54872, 1), (-54872, 0), (-54872, 1), (-54872, 4), (-54872, 9), (-54872, 16), (-54872, 25), (-54872, 36), (-54872, 49), (-54872, 64), (-54872, 81), (-54872, 100), (-54872, 121), (-54872, 144), (-54872, 169), (-54872, 196), (-54872, 225), (-54872, 256), (-54872, 289), (-54872, 324), (-54872, 361), (-54872, 400), (-54872, 441), (-54872, 484), (-54872, 529), (-54872, 576), (-54872, 625), (-54872, 676), (-54872, 729), (-54872, 784), (-54872, 841), (-54872, 900), (-54872, 961), (-54872, 1024), (-54872, 1089), (-54872, 1156), (-54872, 1225), (-54872, 1296), (-54872, 1369), (-54872, 1444), (-54872, 1521), (-54872, 1600), (-54872, 1681), (-54872, 1764), (-54872, 1849), (-54872, 1936), (-54872, 2025), (-54872, 2116), (-54872, 2209), (-54872, 2304), (-54872, 2401), (-50653, 2500), (-50653, 2401), (-50653, 2304), (-50653, 2209), (-50653, 2116), (-50653, 2025), (-50653, 1936), (-50653, 1849), (-50653, 1764), (-50653, 1681), (-50653, 1600), (-50653, 1521), (-50653, 1444), (-50653, 1369), (-50653, 1296), (-50653, 1225), (-50653, 1156), (-50653, 1089), (-50653, 1024), (-50653, 961), (-50653, 900), (-50653, 841), (-50653, 784), (-50653, 729), (-50653, 676), (-50653, 625), (-50653, 576), (-50653, 529), (-50653, 484), (-50653, 441), (-50653, 400), (-50653, 361), (-50653, 324), (-50653, 289), (-50653, 256), (-50653, 225), (-50653, 196), (-50653, 169), (-50653, 144), (-50653, 121), (-50653, 100), (-50653, 81), (-50653, 64), (-50653, 49), (-50653, 36), (-50653, 25), (-50653, 16), (-50653, 9), (-50653, 4), (-50653, 1), (-50653, 0), (-50653, 1), (-50653, 4), (-50653, 9), (-50653, 16), (-50653, 25), (-50653, 36), (-50653, 49), (-50653, 64), (-50653, 81), (-50653, 100), (-50653, 121), (-50653, 144), (-50653, 169), (-50653, 196), (-50653, 225), (-50653, 256), (-50653, 289), (-50653, 324), (-50653, 361), (-50653, 400), (-50653, 441), (-50653, 484), (-50653, 529), (-50653, 576), (-50653, 625), (-50653, 676), (-50653, 729), (-50653, 784), (-50653, 841), (-50653, 900), (-50653, 961), (-50653, 1024), (-50653, 1089), (-50653, 1156), (-50653, 1225), (-50653, 1296), (-50653, 1369), (-50653, 1444), (-50653, 1521), (-50653, 1600), (-50653, 1681), (-50653, 1764), (-50653, 1849), (-50653, 1936), (-50653, 2025), (-50653, 2116), (-50653, 2209), (-50653, 2304), (-50653, 2401), (-46656, 2500), (-46656, 2401), (-46656, 2304), (-46656, 2209), (-46656, 2116), (-46656, 2025), (-46656, 1936), (-46656, 1849), (-46656, 1764), (-46656, 1681), (-46656, 1600), (-46656, 1521), (-46656, 1444), (-46656, 1369), (-46656, 1296), (-46656, 1225), (-46656, 1156), (-46656, 1089), (-46656, 1024), (-46656, 961), (-46656, 900), (-46656, 841), (-46656, 784), (-46656, 729), (-46656, 676), (-46656, 625), (-46656, 576), (-46656, 529), (-46656, 484), (-46656, 441), (-46656, 400), (-46656, 361), (-46656, 324), (-46656, 289), (-46656, 256), (-46656, 225), (-46656, 196), (-46656, 169), (-46656, 144), (-46656, 121), (-46656, 100), (-46656, 81), (-46656, 64), (-46656, 49), (-46656, 36), (-46656, 25), (-46656, 16), (-46656, 9), (-46656, 4), (-46656, 1), (-46656, 0), (-46656, 1), (-46656, 4), (-46656, 9), (-46656, 16), (-46656, 25), (-46656, 36), (-46656, 49), (-46656, 64), (-46656, 81), (-46656, 100), (-46656, 121), (-46656, 144), (-46656, 169), (-46656, 196), (-46656, 225), (-46656, 256), (-46656, 289), (-46656, 324), (-46656, 361), (-46656, 400), (-46656, 441), (-46656, 484), (-46656, 529), (-46656, 576), (-46656, 625), (-46656, 676), (-46656, 729), (-46656, 784), (-46656, 841), (-46656, 900), (-46656, 961), (-46656, 1024), (-46656, 1089), (-46656, 1156), (-46656, 1225), (-46656, 1296), (-46656, 1369), (-46656, 1444), (-46656, 1521), (-46656, 1600), (-46656, 1681), (-46656, 1764), (-46656, 1849), (-46656, 1936), (-46656, 2025), (-46656, 2116), (-46656, 2209), (-46656, 2304), (-46656, 2401), (-42875, 2500), (-42875, 2401), (-42875, 2304), (-42875, 2209), (-42875, 2116), (-42875, 2025), (-42875, 1936), (-42875, 1849), (-42875, 1764), (-42875, 1681), (-42875, 1600), (-42875, 1521), (-42875, 1444), (-42875, 1369), (-42875, 1296), (-42875, 1225), (-42875, 1156), (-42875, 1089), (-42875, 1024), (-42875, 961), (-42875, 900), (-42875, 841), (-42875, 784), (-42875, 729), (-42875, 676), (-42875, 625), (-42875, 576), (-42875, 529), (-42875, 484), (-42875, 441), (-42875, 400), (-42875, 361), (-42875, 324), (-42875, 289), (-42875, 256), (-42875, 225), (-42875, 196), (-42875, 169), (-42875, 144), (-42875, 121), (-42875, 100), (-42875, 81), (-42875, 64), (-42875, 49), (-42875, 36), (-42875, 25), (-42875, 16), (-42875, 9), (-42875, 4), (-42875, 1), (-42875, 0), (-42875, 1), (-42875, 4), (-42875, 9), (-42875, 16), (-42875, 25), (-42875, 36), (-42875, 49), (-42875, 64), (-42875, 81), (-42875, 100), (-42875, 121), (-42875, 144), (-42875, 169), (-42875, 196), (-42875, 225), (-42875, 256), (-42875, 289), (-42875, 324), (-42875, 361), (-42875, 400), (-42875, 441), (-42875, 484), (-42875, 529), (-42875, 576), (-42875, 625), (-42875, 676), (-42875, 729), (-42875, 784), (-42875, 841), (-42875, 900), (-42875, 961), (-42875, 1024), (-42875, 1089), (-42875, 1156), (-42875, 1225), (-42875, 1296), (-42875, 1369), (-42875, 1444), (-42875, 1521), (-42875, 1600), (-42875, 1681), (-42875, 1764), (-42875, 1849), (-42875, 1936), (-42875, 2025), (-42875, 2116), (-42875, 2209), (-42875, 2304), (-42875, 2401), (-39304, 2500), (-39304, 2401), (-39304, 2304), (-39304, 2209), (-39304, 2116), (-39304, 2025), (-39304, 1936), (-39304, 1849), (-39304, 1764), (-39304, 1681), (-39304, 1600), (-39304, 1521), (-39304, 1444), (-39304, 1369), (-39304, 1296), (-39304, 1225), (-39304, 1156), (-39304, 1089), (-39304, 1024), (-39304, 961), (-39304, 900), (-39304, 841), (-39304, 784), (-39304, 729), (-39304, 676), (-39304, 625), (-39304, 576), (-39304, 529), (-39304, 484), (-39304, 441), (-39304, 400), (-39304, 361), (-39304, 324), (-39304, 289), (-39304, 256), (-39304, 225), (-39304, 196), (-39304, 169), (-39304, 144), (-39304, 121), (-39304, 100), (-39304, 81), (-39304, 64), (-39304, 49), (-39304, 36), (-39304, 25), (-39304, 16), (-39304, 9), (-39304, 4), (-39304, 1), (-39304, 0), (-39304, 1), (-39304, 4), (-39304, 9), (-39304, 16), (-39304, 25), (-39304, 36), (-39304, 49), (-39304, 64), (-39304, 81), (-39304, 100), (-39304, 121), (-39304, 144), (-39304, 169), (-39304, 196), (-39304, 225), (-39304, 256), (-39304, 289), (-39304, 324), (-39304, 361), (-39304, 400), (-39304, 441), (-39304, 484), (-39304, 529), (-39304, 576), (-39304, 625), (-39304, 676), (-39304, 729), (-39304, 784), (-39304, 841), (-39304, 900), (-39304, 961), (-39304, 1024), (-39304, 1089), (-39304, 1156), (-39304, 1225), (-39304, 1296), (-39304, 1369), (-39304, 1444), (-39304, 1521), (-39304, 1600), (-39304, 1681), (-39304, 1764), (-39304, 1849), (-39304, 1936), (-39304, 2025), (-39304, 2116), (-39304, 2209), (-39304, 2304), (-39304, 2401), (-35937, 2500), (-35937, 2401), (-35937, 2304), (-35937, 2209), (-35937, 2116), (-35937, 2025), (-35937, 1936), (-35937, 1849), (-35937, 1764), (-35937, 1681), (-35937, 1600), (-35937, 1521), (-35937, 1444), (-35937, 1369), (-35937, 1296), (-35937, 1225), (-35937, 1156), (-35937, 1089), (-35937, 1024), (-35937, 961), (-35937, 900), (-35937, 841), (-35937, 784), (-35937, 729), (-35937, 676), (-35937, 625), (-35937, 576), (-35937, 529), (-35937, 484), (-35937, 441), (-35937, 400), (-35937, 361), (-35937, 324), (-35937, 289), (-35937, 256), (-35937, 225), (-35937, 196), (-35937, 169), (-35937, 144), (-35937, 121), (-35937, 100), (-35937, 81), (-35937, 64), (-35937, 49), (-35937, 36), (-35937, 25), (-35937, 16), (-35937, 9), (-35937, 4), (-35937, 1), (-35937, 0), (-35937, 1), (-35937, 4), (-35937, 9), (-35937, 16), (-35937, 25), (-35937, 36), (-35937, 49), (-35937, 64), (-35937, 81), (-35937, 100), (-35937, 121), (-35937, 144), (-35937, 169), (-35937, 196), (-35937, 225), (-35937, 256), (-35937, 289), (-35937, 324), (-35937, 361), (-35937, 400), (-35937, 441), (-35937, 484), (-35937, 529), (-35937, 576), (-35937, 625), (-35937, 676), (-35937, 729), (-35937, 784), (-35937, 841), (-35937, 900), (-35937, 961), (-35937, 1024), (-35937, 1089), (-35937, 1156), (-35937, 1225), (-35937, 1296), (-35937, 1369), (-35937, 1444), (-35937, 1521), (-35937, 1600), (-35937, 1681), (-35937, 1764), (-35937, 1849), (-35937, 1936), (-35937, 2025), (-35937, 2116), (-35937, 2209), (-35937, 2304), (-35937, 2401), (-32768, 2500), (-32768, 2401), (-32768, 2304), (-32768, 2209), (-32768, 2116), (-32768, 2025), (-32768, 1936), (-32768, 1849), (-32768, 1764), (-32768, 1681), (-32768, 1600), (-32768, 1521), (-32768, 1444), (-32768, 1369), (-32768, 1296), (-32768, 1225), (-32768, 1156), (-32768, 1089), (-32768, 1024), (-32768, 961), (-32768, 900), (-32768, 841), (-32768, 784), (-32768, 729), (-32768, 676), (-32768, 625), (-32768, 576), (-32768, 529), (-32768, 484), (-32768, 441), (-32768, 400), (-32768, 361), (-32768, 324), (-32768, 289), (-32768, 256), (-32768, 225), (-32768, 196), (-32768, 169), (-32768, 144), (-32768, 121), (-32768, 100), (-32768, 81), (-32768, 64), (-32768, 49), (-32768, 36), (-32768, 25), (-32768, 16), (-32768, 9), (-32768, 4), (-32768, 1), (-32768, 0), (-32768, 1), (-32768, 4), (-32768, 9), (-32768, 16), (-32768, 25), (-32768, 36), (-32768, 49), (-32768, 64), (-32768, 81), (-32768, 100), (-32768, 121), (-32768, 144), (-32768, 169), (-32768, 196), (-32768, 225), (-32768, 256), (-32768, 289), (-32768, 324), (-32768, 361), (-32768, 400), (-32768, 441), (-32768, 484), (-32768, 529), (-32768, 576), (-32768, 625), (-32768, 676), (-32768, 729), (-32768, 784), (-32768, 841), (-32768, 900), (-32768, 961), (-32768, 1024), (-32768, 1089), (-32768, 1156), (-32768, 1225), (-32768, 1296), (-32768, 1369), (-32768, 1444), (-32768, 1521), (-32768, 1600), (-32768, 1681), (-32768, 1764), (-32768, 1849), (-32768, 1936), (-32768, 2025), (-32768, 2116), (-32768, 2209), (-32768, 2304), (-32768, 2401), (-29791, 2500), (-29791, 2401), (-29791, 2304), (-29791, 2209), (-29791, 2116), (-29791, 2025), (-29791, 1936), (-29791, 1849), (-29791, 1764), (-29791, 1681), (-29791, 1600), (-29791, 1521), (-29791, 1444), (-29791, 1369), (-29791, 1296), (-29791, 1225), (-29791, 1156), (-29791, 1089), (-29791, 1024), (-29791, 961), (-29791, 900), (-29791, 841), (-29791, 784), (-29791, 729), (-29791, 676), (-29791, 625), (-29791, 576), (-29791, 529), (-29791, 484), (-29791, 441), (-29791, 400), (-29791, 361), (-29791, 324), (-29791, 289), (-29791, 256), (-29791, 225), (-29791, 196), (-29791, 169), (-29791, 144), (-29791, 121), (-29791, 100), (-29791, 81), (-29791, 64), (-29791, 49), (-29791, 36), (-29791, 25), (-29791, 16), (-29791, 9), (-29791, 4), (-29791, 1), (-29791, 0), (-29791, 1), (-29791, 4), (-29791, 9), (-29791, 16), (-29791, 25), (-29791, 36), (-29791, 49), (-29791, 64), (-29791, 81), (-29791, 100), (-29791, 121), (-29791, 144), (-29791, 169), (-29791, 196), (-29791, 225), (-29791, 256), (-29791, 289), (-29791, 324), (-29791, 361), (-29791, 400), (-29791, 441), (-29791, 484), (-29791, 529), (-29791, 576), (-29791, 625), (-29791, 676), (-29791, 729), (-29791, 784), (-29791, 841), (-29791, 900), (-29791, 961), (-29791, 1024), (-29791, 1089), (-29791, 1156), (-29791, 1225), (-29791, 1296), (-29791, 1369), (-29791, 1444), (-29791, 1521), (-29791, 1600), (-29791, 1681), (-29791, 1764), (-29791, 1849), (-29791, 1936), (-29791, 2025), (-29791, 2116), (-29791, 2209), (-29791, 2304), (-29791, 2401), (-27000, 2500), (-27000, 2401), (-27000, 2304), (-27000, 2209), (-27000, 2116), (-27000, 2025), (-27000, 1936), (-27000, 1849), (-27000, 1764), (-27000, 1681), (-27000, 1600), (-27000, 1521), (-27000, 1444), (-27000, 1369), (-27000, 1296), (-27000, 1225), (-27000, 1156), (-27000, 1089), (-27000, 1024), (-27000, 961), (-27000, 900), (-27000, 841), (-27000, 784), (-27000, 729), (-27000, 676), (-27000, 625), (-27000, 576), (-27000, 529), (-27000, 484), (-27000, 441), (-27000, 400), (-27000, 361), (-27000, 324), (-27000, 289), (-27000, 256), (-27000, 225), (-27000, 196), (-27000, 169), (-27000, 144), (-27000, 121), (-27000, 100), (-27000, 81), (-27000, 64), (-27000, 49), (-27000, 36), (-27000, 25), (-27000, 16), (-27000, 9), (-27000, 4), (-27000, 1), (-27000, 0), (-27000, 1), (-27000, 4), (-27000, 9), (-27000, 16), (-27000, 25), (-27000, 36), (-27000, 49), (-27000, 64), (-27000, 81), (-27000, 100), (-27000, 121), (-27000, 144), (-27000, 169), (-27000, 196), (-27000, 225), (-27000, 256), (-27000, 289), (-27000, 324), (-27000, 361), (-27000, 400), (-27000, 441), (-27000, 484), (-27000, 529), (-27000, 576), (-27000, 625), (-27000, 676), (-27000, 729), (-27000, 784), (-27000, 841), (-27000, 900), (-27000, 961), (-27000, 1024), (-27000, 1089), (-27000, 1156), (-27000, 1225), (-27000, 1296), (-27000, 1369), (-27000, 1444), (-27000, 1521), (-27000, 1600), (-27000, 1681), (-27000, 1764), (-27000, 1849), (-27000, 1936), (-27000, 2025), (-27000, 2116), (-27000, 2209), (-27000, 2304), (-27000, 2401), (-24389, 2500), (-24389, 2401), (-24389, 2304), (-24389, 2209), (-24389, 2116), (-24389, 2025), (-24389, 1936), (-24389, 1849), (-24389, 1764), (-24389, 1681), (-24389, 1600), (-24389, 1521), (-24389, 1444), (-24389, 1369), (-24389, 1296), (-24389, 1225), (-24389, 1156), (-24389, 1089), (-24389, 1024), (-24389, 961), (-24389, 900), (-24389, 841), (-24389, 784), (-24389, 729), (-24389, 676), (-24389, 625), (-24389, 576), (-24389, 529), (-24389, 484), (-24389, 441), (-24389, 400), (-24389, 361), (-24389, 324), (-24389, 289), (-24389, 256), (-24389, 225), (-24389, 196), (-24389, 169), (-24389, 144), (-24389, 121), (-24389, 100), (-24389, 81), (-24389, 64), (-24389, 49), (-24389, 36), (-24389, 25), (-24389, 16), (-24389, 9), (-24389, 4), (-24389, 1), (-24389, 0), (-24389, 1), (-24389, 4), (-24389, 9), (-24389, 16), (-24389, 25), (-24389, 36), (-24389, 49), (-24389, 64), (-24389, 81), (-24389, 100), (-24389, 121), (-24389, 144), (-24389, 169), (-24389, 196), (-24389, 225), (-24389, 256), (-24389, 289), (-24389, 324), (-24389, 361), (-24389, 400), (-24389, 441), (-24389, 484), (-24389, 529), (-24389, 576), (-24389, 625), (-24389, 676), (-24389, 729), (-24389, 784), (-24389, 841), (-24389, 900), (-24389, 961), (-24389, 1024), (-24389, 1089), (-24389, 1156), (-24389, 1225), (-24389, 1296), (-24389, 1369), (-24389, 1444), (-24389, 1521), (-24389, 1600), (-24389, 1681), (-24389, 1764), (-24389, 1849), (-24389, 1936), (-24389, 2025), (-24389, 2116), (-24389, 2209), (-24389, 2304), (-24389, 2401), (-21952, 2500), (-21952, 2401), (-21952, 2304), (-21952, 2209), (-21952, 2116), (-21952, 2025), (-21952, 1936), (-21952, 1849), (-21952, 1764), (-21952, 1681), (-21952, 1600), (-21952, 1521), (-21952, 1444), (-21952, 1369), (-21952, 1296), (-21952, 1225), (-21952, 1156), (-21952, 1089), (-21952, 1024), (-21952, 961), (-21952, 900), (-21952, 841), (-21952, 784), (-21952, 729), (-21952, 676), (-21952, 625), (-21952, 576), (-21952, 529), (-21952, 484), (-21952, 441), (-21952, 400), (-21952, 361), (-21952, 324), (-21952, 289), (-21952, 256), (-21952, 225), (-21952, 196), (-21952, 169), (-21952, 144), (-21952, 121), (-21952, 100), (-21952, 81), (-21952, 64), (-21952, 49), (-21952, 36), (-21952, 25), (-21952, 16), (-21952, 9), (-21952, 4), (-21952, 1), (-21952, 0), (-21952, 1), (-21952, 4), (-21952, 9), (-21952, 16), (-21952, 25), (-21952, 36), (-21952, 49), (-21952, 64), (-21952, 81), (-21952, 100), (-21952, 121), (-21952, 144), (-21952, 169), (-21952, 196), (-21952, 225), (-21952, 256), (-21952, 289), (-21952, 324), (-21952, 361), (-21952, 400), (-21952, 441), (-21952, 484), (-21952, 529), (-21952, 576), (-21952, 625), (-21952, 676), (-21952, 729), (-21952, 784), (-21952, 841), (-21952, 900), (-21952, 961), (-21952, 1024), (-21952, 1089), (-21952, 1156), (-21952, 1225), (-21952, 1296), (-21952, 1369), (-21952, 1444), (-21952, 1521), (-21952, 1600), (-21952, 1681), (-21952, 1764), (-21952, 1849), (-21952, 1936), (-21952, 2025), (-21952, 2116), (-21952, 2209), (-21952, 2304), (-21952, 2401), (-19683, 2500), (-19683, 2401), (-19683, 2304), (-19683, 2209), (-19683, 2116), (-19683, 2025), (-19683, 1936), (-19683, 1849), (-19683, 1764), (-19683, 1681), (-19683, 1600), (-19683, 1521), (-19683, 1444), (-19683, 1369), (-19683, 1296), (-19683, 1225), (-19683, 1156), (-19683, 1089), (-19683, 1024), (-19683, 961), (-19683, 900), (-19683, 841), (-19683, 784), (-19683, 729), (-19683, 676), (-19683, 625), (-19683, 576), (-19683, 529), (-19683, 484), (-19683, 441), (-19683, 400), (-19683, 361), (-19683, 324), (-19683, 289), (-19683, 256), (-19683, 225), (-19683, 196), (-19683, 169), (-19683, 144), (-19683, 121), (-19683, 100), (-19683, 81), (-19683, 64), (-19683, 49), (-19683, 36), (-19683, 25), (-19683, 16), (-19683, 9), (-19683, 4), (-19683, 1), (-19683, 0), (-19683, 1), (-19683, 4), (-19683, 9), (-19683, 16), (-19683, 25), (-19683, 36), (-19683, 49), (-19683, 64), (-19683, 81), (-19683, 100), (-19683, 121), (-19683, 144), (-19683, 169), (-19683, 196), (-19683, 225), (-19683, 256), (-19683, 289), (-19683, 324), (-19683, 361), (-19683, 400), (-19683, 441), (-19683, 484), (-19683, 529), (-19683, 576), (-19683, 625), (-19683, 676), (-19683, 729), (-19683, 784), (-19683, 841), (-19683, 900), (-19683, 961), (-19683, 1024), (-19683, 1089), (-19683, 1156), (-19683, 1225), (-19683, 1296), (-19683, 1369), (-19683, 1444), (-19683, 1521), (-19683, 1600), (-19683, 1681), (-19683, 1764), (-19683, 1849), (-19683, 1936), (-19683, 2025), (-19683, 2116), (-19683, 2209), (-19683, 2304), (-19683, 2401), (-17576, 2500), (-17576, 2401), (-17576, 2304), (-17576, 2209), (-17576, 2116), (-17576, 2025), (-17576, 1936), (-17576, 1849), (-17576, 1764), (-17576, 1681), (-17576, 1600), (-17576, 1521), (-17576, 1444), (-17576, 1369), (-17576, 1296), (-17576, 1225), (-17576, 1156), (-17576, 1089), (-17576, 1024), (-17576, 961), (-17576, 900), (-17576, 841), (-17576, 784), (-17576, 729), (-17576, 676), (-17576, 625), (-17576, 576), (-17576, 529), (-17576, 484), (-17576, 441), (-17576, 400), (-17576, 361), (-17576, 324), (-17576, 289), (-17576, 256), (-17576, 225), (-17576, 196), (-17576, 169), (-17576, 144), (-17576, 121), (-17576, 100), (-17576, 81), (-17576, 64), (-17576, 49), (-17576, 36), (-17576, 25), (-17576, 16), (-17576, 9), (-17576, 4), (-17576, 1), (-17576, 0), (-17576, 1), (-17576, 4), (-17576, 9), (-17576, 16), (-17576, 25), (-17576, 36), (-17576, 49), (-17576, 64), (-17576, 81), (-17576, 100), (-17576, 121), (-17576, 144), (-17576, 169), (-17576, 196), (-17576, 225), (-17576, 256), (-17576, 289), (-17576, 324), (-17576, 361), (-17576, 400), (-17576, 441), (-17576, 484), (-17576, 529), (-17576, 576), (-17576, 625), (-17576, 676), (-17576, 729), (-17576, 784), (-17576, 841), (-17576, 900), (-17576, 961), (-17576, 1024), (-17576, 1089), (-17576, 1156), (-17576, 1225), (-17576, 1296), (-17576, 1369), (-17576, 1444), (-17576, 1521), (-17576, 1600), (-17576, 1681), (-17576, 1764), (-17576, 1849), (-17576, 1936), (-17576, 2025), (-17576, 2116), (-17576, 2209), (-17576, 2304), (-17576, 2401), (-15625, 2500), (-15625, 2401), (-15625, 2304), (-15625, 2209), (-15625, 2116), (-15625, 2025), (-15625, 1936), (-15625, 1849), (-15625, 1764), (-15625, 1681), (-15625, 1600), (-15625, 1521), (-15625, 1444), (-15625, 1369), (-15625, 1296), (-15625, 1225), (-15625, 1156), (-15625, 1089), (-15625, 1024), (-15625, 961), (-15625, 900), (-15625, 841), (-15625, 784), (-15625, 729), (-15625, 676), (-15625, 625), (-15625, 576), (-15625, 529), (-15625, 484), (-15625, 441), (-15625, 400), (-15625, 361), (-15625, 324), (-15625, 289), (-15625, 256), (-15625, 225), (-15625, 196), (-15625, 169), (-15625, 144), (-15625, 121), (-15625, 100), (-15625, 81), (-15625, 64), (-15625, 49), (-15625, 36), (-15625, 25), (-15625, 16), (-15625, 9), (-15625, 4), (-15625, 1), (-15625, 0), (-15625, 1), (-15625, 4), (-15625, 9), (-15625, 16), (-15625, 25), (-15625, 36), (-15625, 49), (-15625, 64), (-15625, 81), (-15625, 100), (-15625, 121), (-15625, 144), (-15625, 169), (-15625, 196), (-15625, 225), (-15625, 256), (-15625, 289), (-15625, 324), (-15625, 361), (-15625, 400), (-15625, 441), (-15625, 484), (-15625, 529), (-15625, 576), (-15625, 625), (-15625, 676), (-15625, 729), (-15625, 784), (-15625, 841), (-15625, 900), (-15625, 961), (-15625, 1024), (-15625, 1089), (-15625, 1156), (-15625, 1225), (-15625, 1296), (-15625, 1369), (-15625, 1444), (-15625, 1521), (-15625, 1600), (-15625, 1681), (-15625, 1764), (-15625, 1849), (-15625, 1936), (-15625, 2025), (-15625, 2116), (-15625, 2209), (-15625, 2304), (-15625, 2401), (-13824, 2500), (-13824, 2401), (-13824, 2304), (-13824, 2209), (-13824, 2116), (-13824, 2025), (-13824, 1936), (-13824, 1849), (-13824, 1764), (-13824, 1681), (-13824, 1600), (-13824, 1521), (-13824, 1444), (-13824, 1369), (-13824, 1296), (-13824, 1225), (-13824, 1156), (-13824, 1089), (-13824, 1024), (-13824, 961), (-13824, 900), (-13824, 841), (-13824, 784), (-13824, 729), (-13824, 676), (-13824, 625), (-13824, 576), (-13824, 529), (-13824, 484), (-13824, 441), (-13824, 400), (-13824, 361), (-13824, 324), (-13824, 289), (-13824, 256), (-13824, 225), (-13824, 196), (-13824, 169), (-13824, 144), (-13824, 121), (-13824, 100), (-13824, 81), (-13824, 64), (-13824, 49), (-13824, 36), (-13824, 25), (-13824, 16), (-13824, 9), (-13824, 4), (-13824, 1), (-13824, 0), (-13824, 1), (-13824, 4), (-13824, 9), (-13824, 16), (-13824, 25), (-13824, 36), (-13824, 49), (-13824, 64), (-13824, 81), (-13824, 100), (-13824, 121), (-13824, 144), (-13824, 169), (-13824, 196), (-13824, 225), (-13824, 256), (-13824, 289), (-13824, 324), (-13824, 361), (-13824, 400), (-13824, 441), (-13824, 484), (-13824, 529), (-13824, 576), (-13824, 625), (-13824, 676), (-13824, 729), (-13824, 784), (-13824, 841), (-13824, 900), (-13824, 961), (-13824, 1024), (-13824, 1089), (-13824, 1156), (-13824, 1225), (-13824, 1296), (-13824, 1369), (-13824, 1444), (-13824, 1521), (-13824, 1600), (-13824, 1681), (-13824, 1764), (-13824, 1849), (-13824, 1936), (-13824, 2025), (-13824, 2116), (-13824, 2209), (-13824, 2304), (-13824, 2401), (-12167, 2500), (-12167, 2401), (-12167, 2304), (-12167, 2209), (-12167, 2116), (-12167, 2025), (-12167, 1936), (-12167, 1849), (-12167, 1764), (-12167, 1681), (-12167, 1600), (-12167, 1521), (-12167, 1444), (-12167, 1369), (-12167, 1296), (-12167, 1225), (-12167, 1156), (-12167, 1089), (-12167, 1024), (-12167, 961), (-12167, 900), (-12167, 841), (-12167, 784), (-12167, 729), (-12167, 676), (-12167, 625), (-12167, 576), (-12167, 529), (-12167, 484), (-12167, 441), (-12167, 400), (-12167, 361), (-12167, 324), (-12167, 289), (-12167, 256), (-12167, 225), (-12167, 196), (-12167, 169), (-12167, 144), (-12167, 121), (-12167, 100), (-12167, 81), (-12167, 64), (-12167, 49), (-12167, 36), (-12167, 25), (-12167, 16), (-12167, 9), (-12167, 4), (-12167, 1), (-12167, 0), (-12167, 1), (-12167, 4), (-12167, 9), (-12167, 16), (-12167, 25), (-12167, 36), (-12167, 49), (-12167, 64), (-12167, 81), (-12167, 100), (-12167, 121), (-12167, 144), (-12167, 169), (-12167, 196), (-12167, 225), (-12167, 256), (-12167, 289), (-12167, 324), (-12167, 361), (-12167, 400), (-12167, 441), (-12167, 484), (-12167, 529), (-12167, 576), (-12167, 625), (-12167, 676), (-12167, 729), (-12167, 784), (-12167, 841), (-12167, 900), (-12167, 961), (-12167, 1024), (-12167, 1089), (-12167, 1156), (-12167, 1225), (-12167, 1296), (-12167, 1369), (-12167, 1444), (-12167, 1521), (-12167, 1600), (-12167, 1681), (-12167, 1764), (-12167, 1849), (-12167, 1936), (-12167, 2025), (-12167, 2116), (-12167, 2209), (-12167, 2304), (-12167, 2401), (-10648, 2500), (-10648, 2401), (-10648, 2304), (-10648, 2209), (-10648, 2116), (-10648, 2025), (-10648, 1936), (-10648, 1849), (-10648, 1764), (-10648, 1681), (-10648, 1600), (-10648, 1521), (-10648, 1444), (-10648, 1369), (-10648, 1296), (-10648, 1225), (-10648, 1156), (-10648, 1089), (-10648, 1024), (-10648, 961), (-10648, 900), (-10648, 841), (-10648, 784), (-10648, 729), (-10648, 676), (-10648, 625), (-10648, 576), (-10648, 529), (-10648, 484), (-10648, 441), (-10648, 400), (-10648, 361), (-10648, 324), (-10648, 289), (-10648, 256), (-10648, 225), (-10648, 196), (-10648, 169), (-10648, 144), (-10648, 121), (-10648, 100), (-10648, 81), (-10648, 64), (-10648, 49), (-10648, 36), (-10648, 25), (-10648, 16), (-10648, 9), (-10648, 4), (-10648, 1), (-10648, 0), (-10648, 1), (-10648, 4), (-10648, 9), (-10648, 16), (-10648, 25), (-10648, 36), (-10648, 49), (-10648, 64), (-10648, 81), (-10648, 100), (-10648, 121), (-10648, 144), (-10648, 169), (-10648, 196), (-10648, 225), (-10648, 256), (-10648, 289), (-10648, 324), (-10648, 361), (-10648, 400), (-10648, 441), (-10648, 484), (-10648, 529), (-10648, 576), (-10648, 625), (-10648, 676), (-10648, 729), (-10648, 784), (-10648, 841), (-10648, 900), (-10648, 961), (-10648, 1024), (-10648, 1089), (-10648, 1156), (-10648, 1225), (-10648, 1296), (-10648, 1369), (-10648, 1444), (-10648, 1521), (-10648, 1600), (-10648, 1681), (-10648, 1764), (-10648, 1849), (-10648, 1936), (-10648, 2025), (-10648, 2116), (-10648, 2209), (-10648, 2304), (-10648, 2401), (-9261, 2500), (-9261, 2401), (-9261, 2304), (-9261, 2209), (-9261, 2116), (-9261, 2025), (-9261, 1936), (-9261, 1849), (-9261, 1764), (-9261, 1681), (-9261, 1600), (-9261, 1521), (-9261, 1444), (-9261, 1369), (-9261, 1296), (-9261, 1225), (-9261, 1156), (-9261, 1089), (-9261, 1024), (-9261, 961), (-9261, 900), (-9261, 841), (-9261, 784), (-9261, 729), (-9261, 676), (-9261, 625), (-9261, 576), (-9261, 529), (-9261, 484), (-9261, 441), (-9261, 400), (-9261, 361), (-9261, 324), (-9261, 289), (-9261, 256), (-9261, 225), (-9261, 196), (-9261, 169), (-9261, 144), (-9261, 121), (-9261, 100), (-9261, 81), (-9261, 64), (-9261, 49), (-9261, 36), (-9261, 25), (-9261, 16), (-9261, 9), (-9261, 4), (-9261, 1), (-9261, 0), (-9261, 1), (-9261, 4), (-9261, 9), (-9261, 16), (-9261, 25), (-9261, 36), (-9261, 49), (-9261, 64), (-9261, 81), (-9261, 100), (-9261, 121), (-9261, 144), (-9261, 169), (-9261, 196), (-9261, 225), (-9261, 256), (-9261, 289), (-9261, 324), (-9261, 361), (-9261, 400), (-9261, 441), (-9261, 484), (-9261, 529), (-9261, 576), (-9261, 625), (-9261, 676), (-9261, 729), (-9261, 784), (-9261, 841), (-9261, 900), (-9261, 961), (-9261, 1024), (-9261, 1089), (-9261, 1156), (-9261, 1225), (-9261, 1296), (-9261, 1369), (-9261, 1444), (-9261, 1521), (-9261, 1600), (-9261, 1681), (-9261, 1764), (-9261, 1849), (-9261, 1936), (-9261, 2025), (-9261, 2116), (-9261, 2209), (-9261, 2304), (-9261, 2401), (-8000, 2500), (-8000, 2401), (-8000, 2304), (-8000, 2209), (-8000, 2116), (-8000, 2025), (-8000, 1936), (-8000, 1849), (-8000, 1764), (-8000, 1681), (-8000, 1600), (-8000, 1521), (-8000, 1444), (-8000, 1369), (-8000, 1296), (-8000, 1225), (-8000, 1156), (-8000, 1089), (-8000, 1024), (-8000, 961), (-8000, 900), (-8000, 841), (-8000, 784), (-8000, 729), (-8000, 676), (-8000, 625), (-8000, 576), (-8000, 529), (-8000, 484), (-8000, 441), (-8000, 400), (-8000, 361), (-8000, 324), (-8000, 289), (-8000, 256), (-8000, 225), (-8000, 196), (-8000, 169), (-8000, 144), (-8000, 121), (-8000, 100), (-8000, 81), (-8000, 64), (-8000, 49), (-8000, 36), (-8000, 25), (-8000, 16), (-8000, 9), (-8000, 4), (-8000, 1), (-8000, 0), (-8000, 1), (-8000, 4), (-8000, 9), (-8000, 16), (-8000, 25), (-8000, 36), (-8000, 49), (-8000, 64), (-8000, 81), (-8000, 100), (-8000, 121), (-8000, 144), (-8000, 169), (-8000, 196), (-8000, 225), (-8000, 256), (-8000, 289), (-8000, 324), (-8000, 361), (-8000, 400), (-8000, 441), (-8000, 484), (-8000, 529), (-8000, 576), (-8000, 625), (-8000, 676), (-8000, 729), (-8000, 784), (-8000, 841), (-8000, 900), (-8000, 961), (-8000, 1024), (-8000, 1089), (-8000, 1156), (-8000, 1225), (-8000, 1296), (-8000, 1369), (-8000, 1444), (-8000, 1521), (-8000, 1600), (-8000, 1681), (-8000, 1764), (-8000, 1849), (-8000, 1936), (-8000, 2025), (-8000, 2116), (-8000, 2209), (-8000, 2304), (-8000, 2401), (-6859, 2500), (-6859, 2401), (-6859, 2304), (-6859, 2209), (-6859, 2116), (-6859, 2025), (-6859, 1936), (-6859, 1849), (-6859, 1764), (-6859, 1681), (-6859, 1600), (-6859, 1521), (-6859, 1444), (-6859, 1369), (-6859, 1296), (-6859, 1225), (-6859, 1156), (-6859, 1089), (-6859, 1024), (-6859, 961), (-6859, 900), (-6859, 841), (-6859, 784), (-6859, 729), (-6859, 676), (-6859, 625), (-6859, 576), (-6859, 529), (-6859, 484), (-6859, 441), (-6859, 400), (-6859, 361), (-6859, 324), (-6859, 289), (-6859, 256), (-6859, 225), (-6859, 196), (-6859, 169), (-6859, 144), (-6859, 121), (-6859, 100), (-6859, 81), (-6859, 64), (-6859, 49), (-6859, 36), (-6859, 25), (-6859, 16), (-6859, 9), (-6859, 4), (-6859, 1), (-6859, 0), (-6859, 1), (-6859, 4), (-6859, 9), (-6859, 16), (-6859, 25), (-6859, 36), (-6859, 49), (-6859, 64), (-6859, 81), (-6859, 100), (-6859, 121), (-6859, 144), (-6859, 169), (-6859, 196), (-6859, 225), (-6859, 256), (-6859, 289), (-6859, 324), (-6859, 361), (-6859, 400), (-6859, 441), (-6859, 484), (-6859, 529), (-6859, 576), (-6859, 625), (-6859, 676), (-6859, 729), (-6859, 784), (-6859, 841), (-6859, 900), (-6859, 961), (-6859, 1024), (-6859, 1089), (-6859, 1156), (-6859, 1225), (-6859, 1296), (-6859, 1369), (-6859, 1444), (-6859, 1521), (-6859, 1600), (-6859, 1681), (-6859, 1764), (-6859, 1849), (-6859, 1936), (-6859, 2025), (-6859, 2116), (-6859, 2209), (-6859, 2304), (-6859, 2401), (-5832, 2500), (-5832, 2401), (-5832, 2304), (-5832, 2209), (-5832, 2116), (-5832, 2025), (-5832, 1936), (-5832, 1849), (-5832, 1764), (-5832, 1681), (-5832, 1600), (-5832, 1521), (-5832, 1444), (-5832, 1369), (-5832, 1296), (-5832, 1225), (-5832, 1156), (-5832, 1089), (-5832, 1024), (-5832, 961), (-5832, 900), (-5832, 841), (-5832, 784), (-5832, 729), (-5832, 676), (-5832, 625), (-5832, 576), (-5832, 529), (-5832, 484), (-5832, 441), (-5832, 400), (-5832, 361), (-5832, 324), (-5832, 289), (-5832, 256), (-5832, 225), (-5832, 196), (-5832, 169), (-5832, 144), (-5832, 121), (-5832, 100), (-5832, 81), (-5832, 64), (-5832, 49), (-5832, 36), (-5832, 25), (-5832, 16), (-5832, 9), (-5832, 4), (-5832, 1), (-5832, 0), (-5832, 1), (-5832, 4), (-5832, 9), (-5832, 16), (-5832, 25), (-5832, 36), (-5832, 49), (-5832, 64), (-5832, 81), (-5832, 100), (-5832, 121), (-5832, 144), (-5832, 169), (-5832, 196), (-5832, 225), (-5832, 256), (-5832, 289), (-5832, 324), (-5832, 361), (-5832, 400), (-5832, 441), (-5832, 484), (-5832, 529), (-5832, 576), (-5832, 625), (-5832, 676), (-5832, 729), (-5832, 784), (-5832, 841), (-5832, 900), (-5832, 961), (-5832, 1024), (-5832, 1089), (-5832, 1156), (-5832, 1225), (-5832, 1296), (-5832, 1369), (-5832, 1444), (-5832, 1521), (-5832, 1600), (-5832, 1681), (-5832, 1764), (-5832, 1849), (-5832, 1936), (-5832, 2025), (-5832, 2116), (-5832, 2209), (-5832, 2304), (-5832, 2401), (-4913, 2500), (-4913, 2401), (-4913, 2304), (-4913, 2209), (-4913, 2116), (-4913, 2025), (-4913, 1936), (-4913, 1849), (-4913, 1764), (-4913, 1681), (-4913, 1600), (-4913, 1521), (-4913, 1444), (-4913, 1369), (-4913, 1296), (-4913, 1225), (-4913, 1156), (-4913, 1089), (-4913, 1024), (-4913, 961), (-4913, 900), (-4913, 841), (-4913, 784), (-4913, 729), (-4913, 676), (-4913, 625), (-4913, 576), (-4913, 529), (-4913, 484), (-4913, 441), (-4913, 400), (-4913, 361), (-4913, 324), (-4913, 289), (-4913, 256), (-4913, 225), (-4913, 196), (-4913, 169), (-4913, 144), (-4913, 121), (-4913, 100), (-4913, 81), (-4913, 64), (-4913, 49), (-4913, 36), (-4913, 25), (-4913, 16), (-4913, 9), (-4913, 4), (-4913, 1), (-4913, 0), (-4913, 1), (-4913, 4), (-4913, 9), (-4913, 16), (-4913, 25), (-4913, 36), (-4913, 49), (-4913, 64), (-4913, 81), (-4913, 100), (-4913, 121), (-4913, 144), (-4913, 169), (-4913, 196), (-4913, 225), (-4913, 256), (-4913, 289), (-4913, 324), (-4913, 361), (-4913, 400), (-4913, 441), (-4913, 484), (-4913, 529), (-4913, 576), (-4913, 625), (-4913, 676), (-4913, 729), (-4913, 784), (-4913, 841), (-4913, 900), (-4913, 961), (-4913, 1024), (-4913, 1089), (-4913, 1156), (-4913, 1225), (-4913, 1296), (-4913, 1369), (-4913, 1444), (-4913, 1521), (-4913, 1600), (-4913, 1681), (-4913, 1764), (-4913, 1849), (-4913, 1936), (-4913, 2025), (-4913, 2116), (-4913, 2209), (-4913, 2304), (-4913, 2401), (-4096, 2500), (-4096, 2401), (-4096, 2304), (-4096, 2209), (-4096, 2116), (-4096, 2025), (-4096, 1936), (-4096, 1849), (-4096, 1764), (-4096, 1681), (-4096, 1600), (-4096, 1521), (-4096, 1444), (-4096, 1369), (-4096, 1296), (-4096, 1225), (-4096, 1156), (-4096, 1089), (-4096, 1024), (-4096, 961), (-4096, 900), (-4096, 841), (-4096, 784), (-4096, 729), (-4096, 676), (-4096, 625), (-4096, 576), (-4096, 529), (-4096, 484), (-4096, 441), (-4096, 400), (-4096, 361), (-4096, 324), (-4096, 289), (-4096, 256), (-4096, 225), (-4096, 196), (-4096, 169), (-4096, 144), (-4096, 121), (-4096, 100), (-4096, 81), (-4096, 64), (-4096, 49), (-4096, 36), (-4096, 25), (-4096, 16), (-4096, 9), (-4096, 4), (-4096, 1), (-4096, 0), (-4096, 1), (-4096, 4), (-4096, 9), (-4096, 16), (-4096, 25), (-4096, 36), (-4096, 49), (-4096, 64), (-4096, 81), (-4096, 100), (-4096, 121), (-4096, 144), (-4096, 169), (-4096, 196), (-4096, 225), (-4096, 256), (-4096, 289), (-4096, 324), (-4096, 361), (-4096, 400), (-4096, 441), (-4096, 484), (-4096, 529), (-4096, 576), (-4096, 625), (-4096, 676), (-4096, 729), (-4096, 784), (-4096, 841), (-4096, 900), (-4096, 961), (-4096, 1024), (-4096, 1089), (-4096, 1156), (-4096, 1225), (-4096, 1296), (-4096, 1369), (-4096, 1444), (-4096, 1521), (-4096, 1600), (-4096, 1681), (-4096, 1764), (-4096, 1849), (-4096, 1936), (-4096, 2025), (-4096, 2116), (-4096, 2209), (-4096, 2304), (-4096, 2401), (-3375, 2500), (-3375, 2401), (-3375, 2304), (-3375, 2209), (-3375, 2116), (-3375, 2025), (-3375, 1936), (-3375, 1849), (-3375, 1764), (-3375, 1681), (-3375, 1600), (-3375, 1521), (-3375, 1444), (-3375, 1369), (-3375, 1296), (-3375, 1225), (-3375, 1156), (-3375, 1089), (-3375, 1024), (-3375, 961), (-3375, 900), (-3375, 841), (-3375, 784), (-3375, 729), (-3375, 676), (-3375, 625), (-3375, 576), (-3375, 529), (-3375, 484), (-3375, 441), (-3375, 400), (-3375, 361), (-3375, 324), (-3375, 289), (-3375, 256), (-3375, 225), (-3375, 196), (-3375, 169), (-3375, 144), (-3375, 121), (-3375, 100), (-3375, 81), (-3375, 64), (-3375, 49), (-3375, 36), (-3375, 25), (-3375, 16), (-3375, 9), (-3375, 4), (-3375, 1), (-3375, 0), (-3375, 1), (-3375, 4), (-3375, 9), (-3375, 16), (-3375, 25), (-3375, 36), (-3375, 49), (-3375, 64), (-3375, 81), (-3375, 100), (-3375, 121), (-3375, 144), (-3375, 169), (-3375, 196), (-3375, 225), (-3375, 256), (-3375, 289), (-3375, 324), (-3375, 361), (-3375, 400), (-3375, 441), (-3375, 484), (-3375, 529), (-3375, 576), (-3375, 625), (-3375, 676), (-3375, 729), (-3375, 784), (-3375, 841), (-3375, 900), (-3375, 961), (-3375, 1024), (-3375, 1089), (-3375, 1156), (-3375, 1225), (-3375, 1296), (-3375, 1369), (-3375, 1444), (-3375, 1521), (-3375, 1600), (-3375, 1681), (-3375, 1764), (-3375, 1849), (-3375, 1936), (-3375, 2025), (-3375, 2116), (-3375, 2209), (-3375, 2304), (-3375, 2401), (-2744, 2500), (-2744, 2401), (-2744, 2304), (-2744, 2209), (-2744, 2116), (-2744, 2025), (-2744, 1936), (-2744, 1849), (-2744, 1764), (-2744, 1681), (-2744, 1600), (-2744, 1521), (-2744, 1444), (-2744, 1369), (-2744, 1296), (-2744, 1225), (-2744, 1156), (-2744, 1089), (-2744, 1024), (-2744, 961), (-2744, 900), (-2744, 841), (-2744, 784), (-2744, 729), (-2744, 676), (-2744, 625), (-2744, 576), (-2744, 529), (-2744, 484), (-2744, 441), (-2744, 400), (-2744, 361), (-2744, 324), (-2744, 289), (-2744, 256), (-2744, 225), (-2744, 196), (-2744, 169), (-2744, 144), (-2744, 121), (-2744, 100), (-2744, 81), (-2744, 64), (-2744, 49), (-2744, 36), (-2744, 25), (-2744, 16), (-2744, 9), (-2744, 4), (-2744, 1), (-2744, 0), (-2744, 1), (-2744, 4), (-2744, 9), (-2744, 16), (-2744, 25), (-2744, 36), (-2744, 49), (-2744, 64), (-2744, 81), (-2744, 100), (-2744, 121), (-2744, 144), (-2744, 169), (-2744, 196), (-2744, 225), (-2744, 256), (-2744, 289), (-2744, 324), (-2744, 361), (-2744, 400), (-2744, 441), (-2744, 484), (-2744, 529), (-2744, 576), (-2744, 625), (-2744, 676), (-2744, 729), (-2744, 784), (-2744, 841), (-2744, 900), (-2744, 961), (-2744, 1024), (-2744, 1089), (-2744, 1156), (-2744, 1225), (-2744, 1296), (-2744, 1369), (-2744, 1444), (-2744, 1521), (-2744, 1600), (-2744, 1681), (-2744, 1764), (-2744, 1849), (-2744, 1936), (-2744, 2025), (-2744, 2116), (-2744, 2209), (-2744, 2304), (-2744, 2401), (-2197, 2500), (-2197, 2401), (-2197, 2304), (-2197, 2209), (-2197, 2116), (-2197, 2025), (-2197, 1936), (-2197, 1849), (-2197, 1764), (-2197, 1681), (-2197, 1600), (-2197, 1521), (-2197, 1444), (-2197, 1369), (-2197, 1296), (-2197, 1225), (-2197, 1156), (-2197, 1089), (-2197, 1024), (-2197, 961), (-2197, 900), (-2197, 841), (-2197, 784), (-2197, 729), (-2197, 676), (-2197, 625), (-2197, 576), (-2197, 529), (-2197, 484), (-2197, 441), (-2197, 400), (-2197, 361), (-2197, 324), (-2197, 289), (-2197, 256), (-2197, 225), (-2197, 196), (-2197, 169), (-2197, 144), (-2197, 121), (-2197, 100), (-2197, 81), (-2197, 64), (-2197, 49), (-2197, 36), (-2197, 25), (-2197, 16), (-2197, 9), (-2197, 4), (-2197, 1), (-2197, 0), (-2197, 1), (-2197, 4), (-2197, 9), (-2197, 16), (-2197, 25), (-2197, 36), (-2197, 49), (-2197, 64), (-2197, 81), (-2197, 100), (-2197, 121), (-2197, 144), (-2197, 169), (-2197, 196), (-2197, 225), (-2197, 256), (-2197, 289), (-2197, 324), (-2197, 361), (-2197, 400), (-2197, 441), (-2197, 484), (-2197, 529), (-2197, 576), (-2197, 625), (-2197, 676), (-2197, 729), (-2197, 784), (-2197, 841), (-2197, 900), (-2197, 961), (-2197, 1024), (-2197, 1089), (-2197, 1156), (-2197, 1225), (-2197, 1296), (-2197, 1369), (-2197, 1444), (-2197, 1521), (-2197, 1600), (-2197, 1681), (-2197, 1764), (-2197, 1849), (-2197, 1936), (-2197, 2025), (-2197, 2116), (-2197, 2209), (-2197, 2304), (-2197, 2401), (-1728, 2500), (-1728, 2401), (-1728, 2304), (-1728, 2209), (-1728, 2116), (-1728, 2025), (-1728, 1936), (-1728, 1849), (-1728, 1764), (-1728, 1681), (-1728, 1600), (-1728, 1521), (-1728, 1444), (-1728, 1369), (-1728, 1296), (-1728, 1225), (-1728, 1156), (-1728, 1089), (-1728, 1024), (-1728, 961), (-1728, 900), (-1728, 841), (-1728, 784), (-1728, 729), (-1728, 676), (-1728, 625), (-1728, 576), (-1728, 529), (-1728, 484), (-1728, 441), (-1728, 400), (-1728, 361), (-1728, 324), (-1728, 289), (-1728, 256), (-1728, 225), (-1728, 196), (-1728, 169), (-1728, 144), (-1728, 121), (-1728, 100), (-1728, 81), (-1728, 64), (-1728, 49), (-1728, 36), (-1728, 25), (-1728, 16), (-1728, 9), (-1728, 4), (-1728, 1), (-1728, 0), (-1728, 1), (-1728, 4), (-1728, 9), (-1728, 16), (-1728, 25), (-1728, 36), (-1728, 49), (-1728, 64), (-1728, 81), (-1728, 100), (-1728, 121), (-1728, 144), (-1728, 169), (-1728, 196), (-1728, 225), (-1728, 256), (-1728, 289), (-1728, 324), (-1728, 361), (-1728, 400), (-1728, 441), (-1728, 484), (-1728, 529), (-1728, 576), (-1728, 625), (-1728, 676), (-1728, 729), (-1728, 784), (-1728, 841), (-1728, 900), (-1728, 961), (-1728, 1024), (-1728, 1089), (-1728, 1156), (-1728, 1225), (-1728, 1296), (-1728, 1369), (-1728, 1444), (-1728, 1521), (-1728, 1600), (-1728, 1681), (-1728, 1764), (-1728, 1849), (-1728, 1936), (-1728, 2025), (-1728, 2116), (-1728, 2209), (-1728, 2304), (-1728, 2401), (-1331, 2500), (-1331, 2401), (-1331, 2304), (-1331, 2209), (-1331, 2116), (-1331, 2025), (-1331, 1936), (-1331, 1849), (-1331, 1764), (-1331, 1681), (-1331, 1600), (-1331, 1521), (-1331, 1444), (-1331, 1369), (-1331, 1296), (-1331, 1225), (-1331, 1156), (-1331, 1089), (-1331, 1024), (-1331, 961), (-1331, 900), (-1331, 841), (-1331, 784), (-1331, 729), (-1331, 676), (-1331, 625), (-1331, 576), (-1331, 529), (-1331, 484), (-1331, 441), (-1331, 400), (-1331, 361), (-1331, 324), (-1331, 289), (-1331, 256), (-1331, 225), (-1331, 196), (-1331, 169), (-1331, 144), (-1331, 121), (-1331, 100), (-1331, 81), (-1331, 64), (-1331, 49), (-1331, 36), (-1331, 25), (-1331, 16), (-1331, 9), (-1331, 4), (-1331, 1), (-1331, 0), (-1331, 1), (-1331, 4), (-1331, 9), (-1331, 16), (-1331, 25), (-1331, 36), (-1331, 49), (-1331, 64), (-1331, 81), (-1331, 100), (-1331, 121), (-1331, 144), (-1331, 169), (-1331, 196), (-1331, 225), (-1331, 256), (-1331, 289), (-1331, 324), (-1331, 361), (-1331, 400), (-1331, 441), (-1331, 484), (-1331, 529), (-1331, 576), (-1331, 625), (-1331, 676), (-1331, 729), (-1331, 784), (-1331, 841), (-1331, 900), (-1331, 961), (-1331, 1024), (-1331, 1089), (-1331, 1156), (-1331, 1225), (-1331, 1296), (-1331, 1369), (-1331, 1444), (-1331, 1521), (-1331, 1600), (-1331, 1681), (-1331, 1764), (-1331, 1849), (-1331, 1936), (-1331, 2025), (-1331, 2116), (-1331, 2209), (-1331, 2304), (-1331, 2401), (-1000, 2500), (-1000, 2401), (-1000, 2304), (-1000, 2209), (-1000, 2116), (-1000, 2025), (-1000, 1936), (-1000, 1849), (-1000, 1764), (-1000, 1681), (-1000, 1600), (-1000, 1521), (-1000, 1444), (-1000, 1369), (-1000, 1296), (-1000, 1225), (-1000, 1156), (-1000, 1089), (-1000, 1024), (-1000, 961), (-1000, 900), (-1000, 841), (-1000, 784), (-1000, 729), (-1000, 676), (-1000, 625), (-1000, 576), (-1000, 529), (-1000, 484), (-1000, 441), (-1000, 400), (-1000, 361), (-1000, 324), (-1000, 289), (-1000, 256), (-1000, 225), (-1000, 196), (-1000, 169), (-1000, 144), (-1000, 121), (-1000, 100), (-1000, 81), (-1000, 64), (-1000, 49), (-1000, 36), (-1000, 25), (-1000, 16), (-1000, 9), (-1000, 4), (-1000, 1), (-1000, 0), (-1000, 1), (-1000, 4), (-1000, 9), (-1000, 16), (-1000, 25), (-1000, 36), (-1000, 49), (-1000, 64), (-1000, 81), (-1000, 100), (-1000, 121), (-1000, 144), (-1000, 169), (-1000, 196), (-1000, 225), (-1000, 256), (-1000, 289), (-1000, 324), (-1000, 361), (-1000, 400), (-1000, 441), (-1000, 484), (-1000, 529), (-1000, 576), (-1000, 625), (-1000, 676), (-1000, 729), (-1000, 784), (-1000, 841), (-1000, 900), (-1000, 961), (-1000, 1024), (-1000, 1089), (-1000, 1156), (-1000, 1225), (-1000, 1296), (-1000, 1369), (-1000, 1444), (-1000, 1521), (-1000, 1600), (-1000, 1681), (-1000, 1764), (-1000, 1849), (-1000, 1936), (-1000, 2025), (-1000, 2116), (-1000, 2209), (-1000, 2304), (-1000, 2401), (-729, 2500), (-729, 2401), (-729, 2304), (-729, 2209), (-729, 2116), (-729, 2025), (-729, 1936), (-729, 1849), (-729, 1764), (-729, 1681), (-729, 1600), (-729, 1521), (-729, 1444), (-729, 1369), (-729, 1296), (-729, 1225), (-729, 1156), (-729, 1089), (-729, 1024), (-729, 961), (-729, 900), (-729, 841), (-729, 784), (-729, 729), (-729, 676), (-729, 625), (-729, 576), (-729, 529), (-729, 484), (-729, 441), (-729, 400), (-729, 361), (-729, 324), (-729, 289), (-729, 256), (-729, 225), (-729, 196), (-729, 169), (-729, 144), (-729, 121), (-729, 100), (-729, 81), (-729, 64), (-729, 49), (-729, 36), (-729, 25), (-729, 16), (-729, 9), (-729, 4), (-729, 1), (-729, 0), (-729, 1), (-729, 4), (-729, 9), (-729, 16), (-729, 25), (-729, 36), (-729, 49), (-729, 64), (-729, 81), (-729, 100), (-729, 121), (-729, 144), (-729, 169), (-729, 196), (-729, 225), (-729, 256), (-729, 289), (-729, 324), (-729, 361), (-729, 400), (-729, 441), (-729, 484), (-729, 529), (-729, 576), (-729, 625), (-729, 676), (-729, 729), (-729, 784), (-729, 841), (-729, 900), (-729, 961), (-729, 1024), (-729, 1089), (-729, 1156), (-729, 1225), (-729, 1296), (-729, 1369), (-729, 1444), (-729, 1521), (-729, 1600), (-729, 1681), (-729, 1764), (-729, 1849), (-729, 1936), (-729, 2025), (-729, 2116), (-729, 2209), (-729, 2304), (-729, 2401), (-512, 2500), (-512, 2401), (-512, 2304), (-512, 2209), (-512, 2116), (-512, 2025), (-512, 1936), (-512, 1849), (-512, 1764), (-512, 1681), (-512, 1600), (-512, 1521), (-512, 1444), (-512, 1369), (-512, 1296), (-512, 1225), (-512, 1156), (-512, 1089), (-512, 1024), (-512, 961), (-512, 900), (-512, 841), (-512, 784), (-512, 729), (-512, 676), (-512, 625), (-512, 576), (-512, 529), (-512, 484), (-512, 441), (-512, 400), (-512, 361), (-512, 324), (-512, 289), (-512, 256), (-512, 225), (-512, 196), (-512, 169), (-512, 144), (-512, 121), (-512, 100), (-512, 81), (-512, 64), (-512, 49), (-512, 36), (-512, 25), (-512, 16), (-512, 9), (-512, 4), (-512, 1), (-512, 0), (-512, 1), (-512, 4), (-512, 9), (-512, 16), (-512, 25), (-512, 36), (-512, 49), (-512, 64), (-512, 81), (-512, 100), (-512, 121), (-512, 144), (-512, 169), (-512, 196), (-512, 225), (-512, 256), (-512, 289), (-512, 324), (-512, 361), (-512, 400), (-512, 441), (-512, 484), (-512, 529), (-512, 576), (-512, 625), (-512, 676), (-512, 729), (-512, 784), (-512, 841), (-512, 900), (-512, 961), (-512, 1024), (-512, 1089), (-512, 1156), (-512, 1225), (-512, 1296), (-512, 1369), (-512, 1444), (-512, 1521), (-512, 1600), (-512, 1681), (-512, 1764), (-512, 1849), (-512, 1936), (-512, 2025), (-512, 2116), (-512, 2209), (-512, 2304), (-512, 2401), (-343, 2500), (-343, 2401), (-343, 2304), (-343, 2209), (-343, 2116), (-343, 2025), (-343, 1936), (-343, 1849), (-343, 1764), (-343, 1681), (-343, 1600), (-343, 1521), (-343, 1444), (-343, 1369), (-343, 1296), (-343, 1225), (-343, 1156), (-343, 1089), (-343, 1024), (-343, 961), (-343, 900), (-343, 841), (-343, 784), (-343, 729), (-343, 676), (-343, 625), (-343, 576), (-343, 529), (-343, 484), (-343, 441), (-343, 400), (-343, 361), (-343, 324), (-343, 289), (-343, 256), (-343, 225), (-343, 196), (-343, 169), (-343, 144), (-343, 121), (-343, 100), (-343, 81), (-343, 64), (-343, 49), (-343, 36), (-343, 25), (-343, 16), (-343, 9), (-343, 4), (-343, 1), (-343, 0), (-343, 1), (-343, 4), (-343, 9), (-343, 16), (-343, 25), (-343, 36), (-343, 49), (-343, 64), (-343, 81), (-343, 100), (-343, 121), (-343, 144), (-343, 169), (-343, 196), (-343, 225), (-343, 256), (-343, 289), (-343, 324), (-343, 361), (-343, 400), (-343, 441), (-343, 484), (-343, 529), (-343, 576), (-343, 625), (-343, 676), (-343, 729), (-343, 784), (-343, 841), (-343, 900), (-343, 961), (-343, 1024), (-343, 1089), (-343, 1156), (-343, 1225), (-343, 1296), (-343, 1369), (-343, 1444), (-343, 1521), (-343, 1600), (-343, 1681), (-343, 1764), (-343, 1849), (-343, 1936), (-343, 2025), (-343, 2116), (-343, 2209), (-343, 2304), (-343, 2401), (-216, 2500), (-216, 2401), (-216, 2304), (-216, 2209), (-216, 2116), (-216, 2025), (-216, 1936), (-216, 1849), (-216, 1764), (-216, 1681), (-216, 1600), (-216, 1521), (-216, 1444), (-216, 1369), (-216, 1296), (-216, 1225), (-216, 1156), (-216, 1089), (-216, 1024), (-216, 961), (-216, 900), (-216, 841), (-216, 784), (-216, 729), (-216, 676), (-216, 625), (-216, 576), (-216, 529), (-216, 484), (-216, 441), (-216, 400), (-216, 361), (-216, 324), (-216, 289), (-216, 256), (-216, 225), (-216, 196), (-216, 169), (-216, 144), (-216, 121), (-216, 100), (-216, 81), (-216, 64), (-216, 49), (-216, 36), (-216, 25), (-216, 16), (-216, 9), (-216, 4), (-216, 1), (-216, 0), (-216, 1), (-216, 4), (-216, 9), (-216, 16), (-216, 25), (-216, 36), (-216, 49), (-216, 64), (-216, 81), (-216, 100), (-216, 121), (-216, 144), (-216, 169), (-216, 196), (-216, 225), (-216, 256), (-216, 289), (-216, 324), (-216, 361), (-216, 400), (-216, 441), (-216, 484), (-216, 529), (-216, 576), (-216, 625), (-216, 676), (-216, 729), (-216, 784), (-216, 841), (-216, 900), (-216, 961), (-216, 1024), (-216, 1089), (-216, 1156), (-216, 1225), (-216, 1296), (-216, 1369), (-216, 1444), (-216, 1521), (-216, 1600), (-216, 1681), (-216, 1764), (-216, 1849), (-216, 1936), (-216, 2025), (-216, 2116), (-216, 2209), (-216, 2304), (-216, 2401), (-125, 2500), (-125, 2401), (-125, 2304), (-125, 2209), (-125, 2116), (-125, 2025), (-125, 1936), (-125, 1849), (-125, 1764), (-125, 1681), (-125, 1600), (-125, 1521), (-125, 1444), (-125, 1369), (-125, 1296), (-125, 1225), (-125, 1156), (-125, 1089), (-125, 1024), (-125, 961), (-125, 900), (-125, 841), (-125, 784), (-125, 729), (-125, 676), (-125, 625), (-125, 576), (-125, 529), (-125, 484), (-125, 441), (-125, 400), (-125, 361), (-125, 324), (-125, 289), (-125, 256), (-125, 225), (-125, 196), (-125, 169), (-125, 144), (-125, 121), (-125, 100), (-125, 81), (-125, 64), (-125, 49), (-125, 36), (-125, 25), (-125, 16), (-125, 9), (-125, 4), (-125, 1), (-125, 0), (-125, 1), (-125, 4), (-125, 9), (-125, 16), (-125, 25), (-125, 36), (-125, 49), (-125, 64), (-125, 81), (-125, 100), (-125, 121), (-125, 144), (-125, 169), (-125, 196), (-125, 225), (-125, 256), (-125, 289), (-125, 324), (-125, 361), (-125, 400), (-125, 441), (-125, 484), (-125, 529), (-125, 576), (-125, 625), (-125, 676), (-125, 729), (-125, 784), (-125, 841), (-125, 900), (-125, 961), (-125, 1024), (-125, 1089), (-125, 1156), (-125, 1225), (-125, 1296), (-125, 1369), (-125, 1444), (-125, 1521), (-125, 1600), (-125, 1681), (-125, 1764), (-125, 1849), (-125, 1936), (-125, 2025), (-125, 2116), (-125, 2209), (-125, 2304), (-125, 2401), (-64, 2500), (-64, 2401), (-64, 2304), (-64, 2209), (-64, 2116), (-64, 2025), (-64, 1936), (-64, 1849), (-64, 1764), (-64, 1681), (-64, 1600), (-64, 1521), (-64, 1444), (-64, 1369), (-64, 1296), (-64, 1225), (-64, 1156), (-64, 1089), (-64, 1024), (-64, 961), (-64, 900), (-64, 841), (-64, 784), (-64, 729), (-64, 676), (-64, 625), (-64, 576), (-64, 529), (-64, 484), (-64, 441), (-64, 400), (-64, 361), (-64, 324), (-64, 289), (-64, 256), (-64, 225), (-64, 196), (-64, 169), (-64, 144), (-64, 121), (-64, 100), (-64, 81), (-64, 64), (-64, 49), (-64, 36), (-64, 25), (-64, 16), (-64, 9), (-64, 4), (-64, 1), (-64, 0), (-64, 1), (-64, 4), (-64, 9), (-64, 16), (-64, 25), (-64, 36), (-64, 49), (-64, 64), (-64, 81), (-64, 100), (-64, 121), (-64, 144), (-64, 169), (-64, 196), (-64, 225), (-64, 256), (-64, 289), (-64, 324), (-64, 361), (-64, 400), (-64, 441), (-64, 484), (-64, 529), (-64, 576), (-64, 625), (-64, 676), (-64, 729), (-64, 784), (-64, 841), (-64, 900), (-64, 961), (-64, 1024), (-64, 1089), (-64, 1156), (-64, 1225), (-64, 1296), (-64, 1369), (-64, 1444), (-64, 1521), (-64, 1600), (-64, 1681), (-64, 1764), (-64, 1849), (-64, 1936), (-64, 2025), (-64, 2116), (-64, 2209), (-64, 2304), (-64, 2401), (-27, 2500), (-27, 2401), (-27, 2304), (-27, 2209), (-27, 2116), (-27, 2025), (-27, 1936), (-27, 1849), (-27, 1764), (-27, 1681), (-27, 1600), (-27, 1521), (-27, 1444), (-27, 1369), (-27, 1296), (-27, 1225), (-27, 1156), (-27, 1089), (-27, 1024), (-27, 961), (-27, 900), (-27, 841), (-27, 784), (-27, 729), (-27, 676), (-27, 625), (-27, 576), (-27, 529), (-27, 484), (-27, 441), (-27, 400), (-27, 361), (-27, 324), (-27, 289), (-27, 256), (-27, 225), (-27, 196), (-27, 169), (-27, 144), (-27, 121), (-27, 100), (-27, 81), (-27, 64), (-27, 49), (-27, 36), (-27, 25), (-27, 16), (-27, 9), (-27, 4), (-27, 1), (-27, 0), (-27, 1), (-27, 4), (-27, 9), (-27, 16), (-27, 25), (-27, 36), (-27, 49), (-27, 64), (-27, 81), (-27, 100), (-27, 121), (-27, 144), (-27, 169), (-27, 196), (-27, 225), (-27, 256), (-27, 289), (-27, 324), (-27, 361), (-27, 400), (-27, 441), (-27, 484), (-27, 529), (-27, 576), (-27, 625), (-27, 676), (-27, 729), (-27, 784), (-27, 841), (-27, 900), (-27, 961), (-27, 1024), (-27, 1089), (-27, 1156), (-27, 1225), (-27, 1296), (-27, 1369), (-27, 1444), (-27, 1521), (-27, 1600), (-27, 1681), (-27, 1764), (-27, 1849), (-27, 1936), (-27, 2025), (-27, 2116), (-27, 2209), (-27, 2304), (-27, 2401), (-8, 2500), (-8, 2401), (-8, 2304), (-8, 2209), (-8, 2116), (-8, 2025), (-8, 1936), (-8, 1849), (-8, 1764), (-8, 1681), (-8, 1600), (-8, 1521), (-8, 1444), (-8, 1369), (-8, 1296), (-8, 1225), (-8, 1156), (-8, 1089), (-8, 1024), (-8, 961), (-8, 900), (-8, 841), (-8, 784), (-8, 729), (-8, 676), (-8, 625), (-8, 576), (-8, 529), (-8, 484), (-8, 441), (-8, 400), (-8, 361), (-8, 324), (-8, 289), (-8, 256), (-8, 225), (-8, 196), (-8, 169), (-8, 144), (-8, 121), (-8, 100), (-8, 81), (-8, 64), (-8, 49), (-8, 36), (-8, 25), (-8, 16), (-8, 9), (-8, 4), (-8, 1), (-8, 0), (-8, 1), (-8, 4), (-8, 9), (-8, 16), (-8, 25), (-8, 36), (-8, 49), (-8, 64), (-8, 81), (-8, 100), (-8, 121), (-8, 144), (-8, 169), (-8, 196), (-8, 225), (-8, 256), (-8, 289), (-8, 324), (-8, 361), (-8, 400), (-8, 441), (-8, 484), (-8, 529), (-8, 576), (-8, 625), (-8, 676), (-8, 729), (-8, 784), (-8, 841), (-8, 900), (-8, 961), (-8, 1024), (-8, 1089), (-8, 1156), (-8, 1225), (-8, 1296), (-8, 1369), (-8, 1444), (-8, 1521), (-8, 1600), (-8, 1681), (-8, 1764), (-8, 1849), (-8, 1936), (-8, 2025), (-8, 2116), (-8, 2209), (-8, 2304), (-8, 2401), (-1, 2500), (-1, 2401), (-1, 2304), (-1, 2209), (-1, 2116), (-1, 2025), (-1, 1936), (-1, 1849), (-1, 1764), (-1, 1681), (-1, 1600), (-1, 1521), (-1, 1444), (-1, 1369), (-1, 1296), (-1, 1225), (-1, 1156), (-1, 1089), (-1, 1024), (-1, 961), (-1, 900), (-1, 841), (-1, 784), (-1, 729), (-1, 676), (-1, 625), (-1, 576), (-1, 529), (-1, 484), (-1, 441), (-1, 400), (-1, 361), (-1, 324), (-1, 289), (-1, 256), (-1, 225), (-1, 196), (-1, 169), (-1, 144), (-1, 121), (-1, 100), (-1, 81), (-1, 64), (-1, 49), (-1, 36), (-1, 25), (-1, 16), (-1, 9), (-1, 4), (-1, 1), (-1, 0), (-1, 1), (-1, 4), (-1, 9), (-1, 16), (-1, 25), (-1, 36), (-1, 49), (-1, 64), (-1, 81), (-1, 100), (-1, 121), (-1, 144), (-1, 169), (-1, 196), (-1, 225), (-1, 256), (-1, 289), (-1, 324), (-1, 361), (-1, 400), (-1, 441), (-1, 484), (-1, 529), (-1, 576), (-1, 625), (-1, 676), (-1, 729), (-1, 784), (-1, 841), (-1, 900), (-1, 961), (-1, 1024), (-1, 1089), (-1, 1156), (-1, 1225), (-1, 1296), (-1, 1369), (-1, 1444), (-1, 1521), (-1, 1600), (-1, 1681), (-1, 1764), (-1, 1849), (-1, 1936), (-1, 2025), (-1, 2116), (-1, 2209), (-1, 2304), (-1, 2401), (0, 2500), (0, 2401), (0, 2304), (0, 2209), (0, 2116), (0, 2025), (0, 1936), (0, 1849), (0, 1764), (0, 1681), (0, 1600), (0, 1521), (0, 1444), (0, 1369), (0, 1296), (0, 1225), (0, 1156), (0, 1089), (0, 1024), (0, 961), (0, 900), (0, 841), (0, 784), (0, 729), (0, 676), (0, 625), (0, 576), (0, 529), (0, 484), (0, 441), (0, 400), (0, 361), (0, 324), (0, 289), (0, 256), (0, 225), (0, 196), (0, 169), (0, 144), (0, 121), (0, 100), (0, 81), (0, 64), (0, 49), (0, 36), (0, 25), (0, 16), (0, 9), (0, 4), (0, 1), (0, 0), (0, 1), (0, 4), (0, 9), (0, 16), (0, 25), (0, 36), (0, 49), (0, 64), (0, 81), (0, 100), (0, 121), (0, 144), (0, 169), (0, 196), (0, 225), (0, 256), (0, 289), (0, 324), (0, 361), (0, 400), (0, 441), (0, 484), (0, 529), (0, 576), (0, 625), (0, 676), (0, 729), (0, 784), (0, 841), (0, 900), (0, 961), (0, 1024), (0, 1089), (0, 1156), (0, 1225), (0, 1296), (0, 1369), (0, 1444), (0, 1521), (0, 1600), (0, 1681), (0, 1764), (0, 1849), (0, 1936), (0, 2025), (0, 2116), (0, 2209), (0, 2304), (0, 2401), (1, 2500), (1, 2401), (1, 2304), (1, 2209), (1, 2116), (1, 2025), (1, 1936), (1, 1849), (1, 1764), (1, 1681), (1, 1600), (1, 1521), (1, 1444), (1, 1369), (1, 1296), (1, 1225), (1, 1156), (1, 1089), (1, 1024), (1, 961), (1, 900), (1, 841), (1, 784), (1, 729), (1, 676), (1, 625), (1, 576), (1, 529), (1, 484), (1, 441), (1, 400), (1, 361), (1, 324), (1, 289), (1, 256), (1, 225), (1, 196), (1, 169), (1, 144), (1, 121), (1, 100), (1, 81), (1, 64), (1, 49), (1, 36), (1, 25), (1, 16), (1, 9), (1, 4), (1, 1), (1, 0), (1, 1), (1, 4), (1, 9), (1, 16), (1, 25), (1, 36), (1, 49), (1, 64), (1, 81), (1, 100), (1, 121), (1, 144), (1, 169), (1, 196), (1, 225), (1, 256), (1, 289), (1, 324), (1, 361), (1, 400), (1, 441), (1, 484), (1, 529), (1, 576), (1, 625), (1, 676), (1, 729), (1, 784), (1, 841), (1, 900), (1, 961), (1, 1024), (1, 1089), (1, 1156), (1, 1225), (1, 1296), (1, 1369), (1, 1444), (1, 1521), (1, 1600), (1, 1681), (1, 1764), (1, 1849), (1, 1936), (1, 2025), (1, 2116), (1, 2209), (1, 2304), (1, 2401), (8, 2500), (8, 2401), (8, 2304), (8, 2209), (8, 2116), (8, 2025), (8, 1936), (8, 1849), (8, 1764), (8, 1681), (8, 1600), (8, 1521), (8, 1444), (8, 1369), (8, 1296), (8, 1225), (8, 1156), (8, 1089), (8, 1024), (8, 961), (8, 900), (8, 841), (8, 784), (8, 729), (8, 676), (8, 625), (8, 576), (8, 529), (8, 484), (8, 441), (8, 400), (8, 361), (8, 324), (8, 289), (8, 256), (8, 225), (8, 196), (8, 169), (8, 144), (8, 121), (8, 100), (8, 81), (8, 64), (8, 49), (8, 36), (8, 25), (8, 16), (8, 9), (8, 4), (8, 1), (8, 0), (8, 1), (8, 4), (8, 9), (8, 16), (8, 25), (8, 36), (8, 49), (8, 64), (8, 81), (8, 100), (8, 121), (8, 144), (8, 169), (8, 196), (8, 225), (8, 256), (8, 289), (8, 324), (8, 361), (8, 400), (8, 441), (8, 484), (8, 529), (8, 576), (8, 625), (8, 676), (8, 729), (8, 784), (8, 841), (8, 900), (8, 961), (8, 1024), (8, 1089), (8, 1156), (8, 1225), (8, 1296), (8, 1369), (8, 1444), (8, 1521), (8, 1600), (8, 1681), (8, 1764), (8, 1849), (8, 1936), (8, 2025), (8, 2116), (8, 2209), (8, 2304), (8, 2401), (27, 2500), (27, 2401), (27, 2304), (27, 2209), (27, 2116), (27, 2025), (27, 1936), (27, 1849), (27, 1764), (27, 1681), (27, 1600), (27, 1521), (27, 1444), (27, 1369), (27, 1296), (27, 1225), (27, 1156), (27, 1089), (27, 1024), (27, 961), (27, 900), (27, 841), (27, 784), (27, 729), (27, 676), (27, 625), (27, 576), (27, 529), (27, 484), (27, 441), (27, 400), (27, 361), (27, 324), (27, 289), (27, 256), (27, 225), (27, 196), (27, 169), (27, 144), (27, 121), (27, 100), (27, 81), (27, 64), (27, 49), (27, 36), (27, 25), (27, 16), (27, 9), (27, 4), (27, 1), (27, 0), (27, 1), (27, 4), (27, 9), (27, 16), (27, 25), (27, 36), (27, 49), (27, 64), (27, 81), (27, 100), (27, 121), (27, 144), (27, 169), (27, 196), (27, 225), (27, 256), (27, 289), (27, 324), (27, 361), (27, 400), (27, 441), (27, 484), (27, 529), (27, 576), (27, 625), (27, 676), (27, 729), (27, 784), (27, 841), (27, 900), (27, 961), (27, 1024), (27, 1089), (27, 1156), (27, 1225), (27, 1296), (27, 1369), (27, 1444), (27, 1521), (27, 1600), (27, 1681), (27, 1764), (27, 1849), (27, 1936), (27, 2025), (27, 2116), (27, 2209), (27, 2304), (27, 2401), (64, 2500), (64, 2401), (64, 2304), (64, 2209), (64, 2116), (64, 2025), (64, 1936), (64, 1849), (64, 1764), (64, 1681), (64, 1600), (64, 1521), (64, 1444), (64, 1369), (64, 1296), (64, 1225), (64, 1156), (64, 1089), (64, 1024), (64, 961), (64, 900), (64, 841), (64, 784), (64, 729), (64, 676), (64, 625), (64, 576), (64, 529), (64, 484), (64, 441), (64, 400), (64, 361), (64, 324), (64, 289), (64, 256), (64, 225), (64, 196), (64, 169), (64, 144), (64, 121), (64, 100), (64, 81), (64, 64), (64, 49), (64, 36), (64, 25), (64, 16), (64, 9), (64, 4), (64, 1), (64, 0), (64, 1), (64, 4), (64, 9), (64, 16), (64, 25), (64, 36), (64, 49), (64, 64), (64, 81), (64, 100), (64, 121), (64, 144), (64, 169), (64, 196), (64, 225), (64, 256), (64, 289), (64, 324), (64, 361), (64, 400), (64, 441), (64, 484), (64, 529), (64, 576), (64, 625), (64, 676), (64, 729), (64, 784), (64, 841), (64, 900), (64, 961), (64, 1024), (64, 1089), (64, 1156), (64, 1225), (64, 1296), (64, 1369), (64, 1444), (64, 1521), (64, 1600), (64, 1681), (64, 1764), (64, 1849), (64, 1936), (64, 2025), (64, 2116), (64, 2209), (64, 2304), (64, 2401), (125, 2500), (125, 2401), (125, 2304), (125, 2209), (125, 2116), (125, 2025), (125, 1936), (125, 1849), (125, 1764), (125, 1681), (125, 1600), (125, 1521), (125, 1444), (125, 1369), (125, 1296), (125, 1225), (125, 1156), (125, 1089), (125, 1024), (125, 961), (125, 900), (125, 841), (125, 784), (125, 729), (125, 676), (125, 625), (125, 576), (125, 529), (125, 484), (125, 441), (125, 400), (125, 361), (125, 324), (125, 289), (125, 256), (125, 225), (125, 196), (125, 169), (125, 144), (125, 121), (125, 100), (125, 81), (125, 64), (125, 49), (125, 36), (125, 25), (125, 16), (125, 9), (125, 4), (125, 1), (125, 0), (125, 1), (125, 4), (125, 9), (125, 16), (125, 25), (125, 36), (125, 49), (125, 64), (125, 81), (125, 100), (125, 121), (125, 144), (125, 169), (125, 196), (125, 225), (125, 256), (125, 289), (125, 324), (125, 361), (125, 400), (125, 441), (125, 484), (125, 529), (125, 576), (125, 625), (125, 676), (125, 729), (125, 784), (125, 841), (125, 900), (125, 961), (125, 1024), (125, 1089), (125, 1156), (125, 1225), (125, 1296), (125, 1369), (125, 1444), (125, 1521), (125, 1600), (125, 1681), (125, 1764), (125, 1849), (125, 1936), (125, 2025), (125, 2116), (125, 2209), (125, 2304), (125, 2401), (216, 2500), (216, 2401), (216, 2304), (216, 2209), (216, 2116), (216, 2025), (216, 1936), (216, 1849), (216, 1764), (216, 1681), (216, 1600), (216, 1521), (216, 1444), (216, 1369), (216, 1296), (216, 1225), (216, 1156), (216, 1089), (216, 1024), (216, 961), (216, 900), (216, 841), (216, 784), (216, 729), (216, 676), (216, 625), (216, 576), (216, 529), (216, 484), (216, 441), (216, 400), (216, 361), (216, 324), (216, 289), (216, 256), (216, 225), (216, 196), (216, 169), (216, 144), (216, 121), (216, 100), (216, 81), (216, 64), (216, 49), (216, 36), (216, 25), (216, 16), (216, 9), (216, 4), (216, 1), (216, 0), (216, 1), (216, 4), (216, 9), (216, 16), (216, 25), (216, 36), (216, 49), (216, 64), (216, 81), (216, 100), (216, 121), (216, 144), (216, 169), (216, 196), (216, 225), (216, 256), (216, 289), (216, 324), (216, 361), (216, 400), (216, 441), (216, 484), (216, 529), (216, 576), (216, 625), (216, 676), (216, 729), (216, 784), (216, 841), (216, 900), (216, 961), (216, 1024), (216, 1089), (216, 1156), (216, 1225), (216, 1296), (216, 1369), (216, 1444), (216, 1521), (216, 1600), (216, 1681), (216, 1764), (216, 1849), (216, 1936), (216, 2025), (216, 2116), (216, 2209), (216, 2304), (216, 2401), (343, 2500), (343, 2401), (343, 2304), (343, 2209), (343, 2116), (343, 2025), (343, 1936), (343, 1849), (343, 1764), (343, 1681), (343, 1600), (343, 1521), (343, 1444), (343, 1369), (343, 1296), (343, 1225), (343, 1156), (343, 1089), (343, 1024), (343, 961), (343, 900), (343, 841), (343, 784), (343, 729), (343, 676), (343, 625), (343, 576), (343, 529), (343, 484), (343, 441), (343, 400), (343, 361), (343, 324), (343, 289), (343, 256), (343, 225), (343, 196), (343, 169), (343, 144), (343, 121), (343, 100), (343, 81), (343, 64), (343, 49), (343, 36), (343, 25), (343, 16), (343, 9), (343, 4), (343, 1), (343, 0), (343, 1), (343, 4), (343, 9), (343, 16), (343, 25), (343, 36), (343, 49), (343, 64), (343, 81), (343, 100), (343, 121), (343, 144), (343, 169), (343, 196), (343, 225), (343, 256), (343, 289), (343, 324), (343, 361), (343, 400), (343, 441), (343, 484), (343, 529), (343, 576), (343, 625), (343, 676), (343, 729), (343, 784), (343, 841), (343, 900), (343, 961), (343, 1024), (343, 1089), (343, 1156), (343, 1225), (343, 1296), (343, 1369), (343, 1444), (343, 1521), (343, 1600), (343, 1681), (343, 1764), (343, 1849), (343, 1936), (343, 2025), (343, 2116), (343, 2209), (343, 2304), (343, 2401), (512, 2500), (512, 2401), (512, 2304), (512, 2209), (512, 2116), (512, 2025), (512, 1936), (512, 1849), (512, 1764), (512, 1681), (512, 1600), (512, 1521), (512, 1444), (512, 1369), (512, 1296), (512, 1225), (512, 1156), (512, 1089), (512, 1024), (512, 961), (512, 900), (512, 841), (512, 784), (512, 729), (512, 676), (512, 625), (512, 576), (512, 529), (512, 484), (512, 441), (512, 400), (512, 361), (512, 324), (512, 289), (512, 256), (512, 225), (512, 196), (512, 169), (512, 144), (512, 121), (512, 100), (512, 81), (512, 64), (512, 49), (512, 36), (512, 25), (512, 16), (512, 9), (512, 4), (512, 1), (512, 0), (512, 1), (512, 4), (512, 9), (512, 16), (512, 25), (512, 36), (512, 49), (512, 64), (512, 81), (512, 100), (512, 121), (512, 144), (512, 169), (512, 196), (512, 225), (512, 256), (512, 289), (512, 324), (512, 361), (512, 400), (512, 441), (512, 484), (512, 529), (512, 576), (512, 625), (512, 676), (512, 729), (512, 784), (512, 841), (512, 900), (512, 961), (512, 1024), (512, 1089), (512, 1156), (512, 1225), (512, 1296), (512, 1369), (512, 1444), (512, 1521), (512, 1600), (512, 1681), (512, 1764), (512, 1849), (512, 1936), (512, 2025), (512, 2116), (512, 2209), (512, 2304), (512, 2401), (729, 2500), (729, 2401), (729, 2304), (729, 2209), (729, 2116), (729, 2025), (729, 1936), (729, 1849), (729, 1764), (729, 1681), (729, 1600), (729, 1521), (729, 1444), (729, 1369), (729, 1296), (729, 1225), (729, 1156), (729, 1089), (729, 1024), (729, 961), (729, 900), (729, 841), (729, 784), (729, 729), (729, 676), (729, 625), (729, 576), (729, 529), (729, 484), (729, 441), (729, 400), (729, 361), (729, 324), (729, 289), (729, 256), (729, 225), (729, 196), (729, 169), (729, 144), (729, 121), (729, 100), (729, 81), (729, 64), (729, 49), (729, 36), (729, 25), (729, 16), (729, 9), (729, 4), (729, 1), (729, 0), (729, 1), (729, 4), (729, 9), (729, 16), (729, 25), (729, 36), (729, 49), (729, 64), (729, 81), (729, 100), (729, 121), (729, 144), (729, 169), (729, 196), (729, 225), (729, 256), (729, 289), (729, 324), (729, 361), (729, 400), (729, 441), (729, 484), (729, 529), (729, 576), (729, 625), (729, 676), (729, 729), (729, 784), (729, 841), (729, 900), (729, 961), (729, 1024), (729, 1089), (729, 1156), (729, 1225), (729, 1296), (729, 1369), (729, 1444), (729, 1521), (729, 1600), (729, 1681), (729, 1764), (729, 1849), (729, 1936), (729, 2025), (729, 2116), (729, 2209), (729, 2304), (729, 2401), (1000, 2500), (1000, 2401), (1000, 2304), (1000, 2209), (1000, 2116), (1000, 2025), (1000, 1936), (1000, 1849), (1000, 1764), (1000, 1681), (1000, 1600), (1000, 1521), (1000, 1444), (1000, 1369), (1000, 1296), (1000, 1225), (1000, 1156), (1000, 1089), (1000, 1024), (1000, 961), (1000, 900), (1000, 841), (1000, 784), (1000, 729), (1000, 676), (1000, 625), (1000, 576), (1000, 529), (1000, 484), (1000, 441), (1000, 400), (1000, 361), (1000, 324), (1000, 289), (1000, 256), (1000, 225), (1000, 196), (1000, 169), (1000, 144), (1000, 121), (1000, 100), (1000, 81), (1000, 64), (1000, 49), (1000, 36), (1000, 25), (1000, 16), (1000, 9), (1000, 4), (1000, 1), (1000, 0), (1000, 1), (1000, 4), (1000, 9), (1000, 16), (1000, 25), (1000, 36), (1000, 49), (1000, 64), (1000, 81), (1000, 100), (1000, 121), (1000, 144), (1000, 169), (1000, 196), (1000, 225), (1000, 256), (1000, 289), (1000, 324), (1000, 361), (1000, 400), (1000, 441), (1000, 484), (1000, 529), (1000, 576), (1000, 625), (1000, 676), (1000, 729), (1000, 784), (1000, 841), (1000, 900), (1000, 961), (1000, 1024), (1000, 1089), (1000, 1156), (1000, 1225), (1000, 1296), (1000, 1369), (1000, 1444), (1000, 1521), (1000, 1600), (1000, 1681), (1000, 1764), (1000, 1849), (1000, 1936), (1000, 2025), (1000, 2116), (1000, 2209), (1000, 2304), (1000, 2401), (1331, 2500), (1331, 2401), (1331, 2304), (1331, 2209), (1331, 2116), (1331, 2025), (1331, 1936), (1331, 1849), (1331, 1764), (1331, 1681), (1331, 1600), (1331, 1521), (1331, 1444), (1331, 1369), (1331, 1296), (1331, 1225), (1331, 1156), (1331, 1089), (1331, 1024), (1331, 961), (1331, 900), (1331, 841), (1331, 784), (1331, 729), (1331, 676), (1331, 625), (1331, 576), (1331, 529), (1331, 484), (1331, 441), (1331, 400), (1331, 361), (1331, 324), (1331, 289), (1331, 256), (1331, 225), (1331, 196), (1331, 169), (1331, 144), (1331, 121), (1331, 100), (1331, 81), (1331, 64), (1331, 49), (1331, 36), (1331, 25), (1331, 16), (1331, 9), (1331, 4), (1331, 1), (1331, 0), (1331, 1), (1331, 4), (1331, 9), (1331, 16), (1331, 25), (1331, 36), (1331, 49), (1331, 64), (1331, 81), (1331, 100), (1331, 121), (1331, 144), (1331, 169), (1331, 196), (1331, 225), (1331, 256), (1331, 289), (1331, 324), (1331, 361), (1331, 400), (1331, 441), (1331, 484), (1331, 529), (1331, 576), (1331, 625), (1331, 676), (1331, 729), (1331, 784), (1331, 841), (1331, 900), (1331, 961), (1331, 1024), (1331, 1089), (1331, 1156), (1331, 1225), (1331, 1296), (1331, 1369), (1331, 1444), (1331, 1521), (1331, 1600), (1331, 1681), (1331, 1764), (1331, 1849), (1331, 1936), (1331, 2025), (1331, 2116), (1331, 2209), (1331, 2304), (1331, 2401), (1728, 2500), (1728, 2401), (1728, 2304), (1728, 2209), (1728, 2116), (1728, 2025), (1728, 1936), (1728, 1849), (1728, 1764), (1728, 1681), (1728, 1600), (1728, 1521), (1728, 1444), (1728, 1369), (1728, 1296), (1728, 1225), (1728, 1156), (1728, 1089), (1728, 1024), (1728, 961), (1728, 900), (1728, 841), (1728, 784), (1728, 729), (1728, 676), (1728, 625), (1728, 576), (1728, 529), (1728, 484), (1728, 441), (1728, 400), (1728, 361), (1728, 324), (1728, 289), (1728, 256), (1728, 225), (1728, 196), (1728, 169), (1728, 144), (1728, 121), (1728, 100), (1728, 81), (1728, 64), (1728, 49), (1728, 36), (1728, 25), (1728, 16), (1728, 9), (1728, 4), (1728, 1), (1728, 0), (1728, 1), (1728, 4), (1728, 9), (1728, 16), (1728, 25), (1728, 36), (1728, 49), (1728, 64), (1728, 81), (1728, 100), (1728, 121), (1728, 144), (1728, 169), (1728, 196), (1728, 225), (1728, 256), (1728, 289), (1728, 324), (1728, 361), (1728, 400), (1728, 441), (1728, 484), (1728, 529), (1728, 576), (1728, 625), (1728, 676), (1728, 729), (1728, 784), (1728, 841), (1728, 900), (1728, 961), (1728, 1024), (1728, 1089), (1728, 1156), (1728, 1225), (1728, 1296), (1728, 1369), (1728, 1444), (1728, 1521), (1728, 1600), (1728, 1681), (1728, 1764), (1728, 1849), (1728, 1936), (1728, 2025), (1728, 2116), (1728, 2209), (1728, 2304), (1728, 2401), (2197, 2500), (2197, 2401), (2197, 2304), (2197, 2209), (2197, 2116), (2197, 2025), (2197, 1936), (2197, 1849), (2197, 1764), (2197, 1681), (2197, 1600), (2197, 1521), (2197, 1444), (2197, 1369), (2197, 1296), (2197, 1225), (2197, 1156), (2197, 1089), (2197, 1024), (2197, 961), (2197, 900), (2197, 841), (2197, 784), (2197, 729), (2197, 676), (2197, 625), (2197, 576), (2197, 529), (2197, 484), (2197, 441), (2197, 400), (2197, 361), (2197, 324), (2197, 289), (2197, 256), (2197, 225), (2197, 196), (2197, 169), (2197, 144), (2197, 121), (2197, 100), (2197, 81), (2197, 64), (2197, 49), (2197, 36), (2197, 25), (2197, 16), (2197, 9), (2197, 4), (2197, 1), (2197, 0), (2197, 1), (2197, 4), (2197, 9), (2197, 16), (2197, 25), (2197, 36), (2197, 49), (2197, 64), (2197, 81), (2197, 100), (2197, 121), (2197, 144), (2197, 169), (2197, 196), (2197, 225), (2197, 256), (2197, 289), (2197, 324), (2197, 361), (2197, 400), (2197, 441), (2197, 484), (2197, 529), (2197, 576), (2197, 625), (2197, 676), (2197, 729), (2197, 784), (2197, 841), (2197, 900), (2197, 961), (2197, 1024), (2197, 1089), (2197, 1156), (2197, 1225), (2197, 1296), (2197, 1369), (2197, 1444), (2197, 1521), (2197, 1600), (2197, 1681), (2197, 1764), (2197, 1849), (2197, 1936), (2197, 2025), (2197, 2116), (2197, 2209), (2197, 2304), (2197, 2401), (2744, 2500), (2744, 2401), (2744, 2304), (2744, 2209), (2744, 2116), (2744, 2025), (2744, 1936), (2744, 1849), (2744, 1764), (2744, 1681), (2744, 1600), (2744, 1521), (2744, 1444), (2744, 1369), (2744, 1296), (2744, 1225), (2744, 1156), (2744, 1089), (2744, 1024), (2744, 961), (2744, 900), (2744, 841), (2744, 784), (2744, 729), (2744, 676), (2744, 625), (2744, 576), (2744, 529), (2744, 484), (2744, 441), (2744, 400), (2744, 361), (2744, 324), (2744, 289), (2744, 256), (2744, 225), (2744, 196), (2744, 169), (2744, 144), (2744, 121), (2744, 100), (2744, 81), (2744, 64), (2744, 49), (2744, 36), (2744, 25), (2744, 16), (2744, 9), (2744, 4), (2744, 1), (2744, 0), (2744, 1), (2744, 4), (2744, 9), (2744, 16), (2744, 25), (2744, 36), (2744, 49), (2744, 64), (2744, 81), (2744, 100), (2744, 121), (2744, 144), (2744, 169), (2744, 196), (2744, 225), (2744, 256), (2744, 289), (2744, 324), (2744, 361), (2744, 400), (2744, 441), (2744, 484), (2744, 529), (2744, 576), (2744, 625), (2744, 676), (2744, 729), (2744, 784), (2744, 841), (2744, 900), (2744, 961), (2744, 1024), (2744, 1089), (2744, 1156), (2744, 1225), (2744, 1296), (2744, 1369), (2744, 1444), (2744, 1521), (2744, 1600), (2744, 1681), (2744, 1764), (2744, 1849), (2744, 1936), (2744, 2025), (2744, 2116), (2744, 2209), (2744, 2304), (2744, 2401), (3375, 2500), (3375, 2401), (3375, 2304), (3375, 2209), (3375, 2116), (3375, 2025), (3375, 1936), (3375, 1849), (3375, 1764), (3375, 1681), (3375, 1600), (3375, 1521), (3375, 1444), (3375, 1369), (3375, 1296), (3375, 1225), (3375, 1156), (3375, 1089), (3375, 1024), (3375, 961), (3375, 900), (3375, 841), (3375, 784), (3375, 729), (3375, 676), (3375, 625), (3375, 576), (3375, 529), (3375, 484), (3375, 441), (3375, 400), (3375, 361), (3375, 324), (3375, 289), (3375, 256), (3375, 225), (3375, 196), (3375, 169), (3375, 144), (3375, 121), (3375, 100), (3375, 81), (3375, 64), (3375, 49), (3375, 36), (3375, 25), (3375, 16), (3375, 9), (3375, 4), (3375, 1), (3375, 0), (3375, 1), (3375, 4), (3375, 9), (3375, 16), (3375, 25), (3375, 36), (3375, 49), (3375, 64), (3375, 81), (3375, 100), (3375, 121), (3375, 144), (3375, 169), (3375, 196), (3375, 225), (3375, 256), (3375, 289), (3375, 324), (3375, 361), (3375, 400), (3375, 441), (3375, 484), (3375, 529), (3375, 576), (3375, 625), (3375, 676), (3375, 729), (3375, 784), (3375, 841), (3375, 900), (3375, 961), (3375, 1024), (3375, 1089), (3375, 1156), (3375, 1225), (3375, 1296), (3375, 1369), (3375, 1444), (3375, 1521), (3375, 1600), (3375, 1681), (3375, 1764), (3375, 1849), (3375, 1936), (3375, 2025), (3375, 2116), (3375, 2209), (3375, 2304), (3375, 2401), (4096, 2500), (4096, 2401), (4096, 2304), (4096, 2209), (4096, 2116), (4096, 2025), (4096, 1936), (4096, 1849), (4096, 1764), (4096, 1681), (4096, 1600), (4096, 1521), (4096, 1444), (4096, 1369), (4096, 1296), (4096, 1225), (4096, 1156), (4096, 1089), (4096, 1024), (4096, 961), (4096, 900), (4096, 841), (4096, 784), (4096, 729), (4096, 676), (4096, 625), (4096, 576), (4096, 529), (4096, 484), (4096, 441), (4096, 400), (4096, 361), (4096, 324), (4096, 289), (4096, 256), (4096, 225), (4096, 196), (4096, 169), (4096, 144), (4096, 121), (4096, 100), (4096, 81), (4096, 64), (4096, 49), (4096, 36), (4096, 25), (4096, 16), (4096, 9), (4096, 4), (4096, 1), (4096, 0), (4096, 1), (4096, 4), (4096, 9), (4096, 16), (4096, 25), (4096, 36), (4096, 49), (4096, 64), (4096, 81), (4096, 100), (4096, 121), (4096, 144), (4096, 169), (4096, 196), (4096, 225), (4096, 256), (4096, 289), (4096, 324), (4096, 361), (4096, 400), (4096, 441), (4096, 484), (4096, 529), (4096, 576), (4096, 625), (4096, 676), (4096, 729), (4096, 784), (4096, 841), (4096, 900), (4096, 961), (4096, 1024), (4096, 1089), (4096, 1156), (4096, 1225), (4096, 1296), (4096, 1369), (4096, 1444), (4096, 1521), (4096, 1600), (4096, 1681), (4096, 1764), (4096, 1849), (4096, 1936), (4096, 2025), (4096, 2116), (4096, 2209), (4096, 2304), (4096, 2401), (4913, 2500), (4913, 2401), (4913, 2304), (4913, 2209), (4913, 2116), (4913, 2025), (4913, 1936), (4913, 1849), (4913, 1764), (4913, 1681), (4913, 1600), (4913, 1521), (4913, 1444), (4913, 1369), (4913, 1296), (4913, 1225), (4913, 1156), (4913, 1089), (4913, 1024), (4913, 961), (4913, 900), (4913, 841), (4913, 784), (4913, 729), (4913, 676), (4913, 625), (4913, 576), (4913, 529), (4913, 484), (4913, 441), (4913, 400), (4913, 361), (4913, 324), (4913, 289), (4913, 256), (4913, 225), (4913, 196), (4913, 169), (4913, 144), (4913, 121), (4913, 100), (4913, 81), (4913, 64), (4913, 49), (4913, 36), (4913, 25), (4913, 16), (4913, 9), (4913, 4), (4913, 1), (4913, 0), (4913, 1), (4913, 4), (4913, 9), (4913, 16), (4913, 25), (4913, 36), (4913, 49), (4913, 64), (4913, 81), (4913, 100), (4913, 121), (4913, 144), (4913, 169), (4913, 196), (4913, 225), (4913, 256), (4913, 289), (4913, 324), (4913, 361), (4913, 400), (4913, 441), (4913, 484), (4913, 529), (4913, 576), (4913, 625), (4913, 676), (4913, 729), (4913, 784), (4913, 841), (4913, 900), (4913, 961), (4913, 1024), (4913, 1089), (4913, 1156), (4913, 1225), (4913, 1296), (4913, 1369), (4913, 1444), (4913, 1521), (4913, 1600), (4913, 1681), (4913, 1764), (4913, 1849), (4913, 1936), (4913, 2025), (4913, 2116), (4913, 2209), (4913, 2304), (4913, 2401), (5832, 2500), (5832, 2401), (5832, 2304), (5832, 2209), (5832, 2116), (5832, 2025), (5832, 1936), (5832, 1849), (5832, 1764), (5832, 1681), (5832, 1600), (5832, 1521), (5832, 1444), (5832, 1369), (5832, 1296), (5832, 1225), (5832, 1156), (5832, 1089), (5832, 1024), (5832, 961), (5832, 900), (5832, 841), (5832, 784), (5832, 729), (5832, 676), (5832, 625), (5832, 576), (5832, 529), (5832, 484), (5832, 441), (5832, 400), (5832, 361), (5832, 324), (5832, 289), (5832, 256), (5832, 225), (5832, 196), (5832, 169), (5832, 144), (5832, 121), (5832, 100), (5832, 81), (5832, 64), (5832, 49), (5832, 36), (5832, 25), (5832, 16), (5832, 9), (5832, 4), (5832, 1), (5832, 0), (5832, 1), (5832, 4), (5832, 9), (5832, 16), (5832, 25), (5832, 36), (5832, 49), (5832, 64), (5832, 81), (5832, 100), (5832, 121), (5832, 144), (5832, 169), (5832, 196), (5832, 225), (5832, 256), (5832, 289), (5832, 324), (5832, 361), (5832, 400), (5832, 441), (5832, 484), (5832, 529), (5832, 576), (5832, 625), (5832, 676), (5832, 729), (5832, 784), (5832, 841), (5832, 900), (5832, 961), (5832, 1024), (5832, 1089), (5832, 1156), (5832, 1225), (5832, 1296), (5832, 1369), (5832, 1444), (5832, 1521), (5832, 1600), (5832, 1681), (5832, 1764), (5832, 1849), (5832, 1936), (5832, 2025), (5832, 2116), (5832, 2209), (5832, 2304), (5832, 2401), (6859, 2500), (6859, 2401), (6859, 2304), (6859, 2209), (6859, 2116), (6859, 2025), (6859, 1936), (6859, 1849), (6859, 1764), (6859, 1681), (6859, 1600), (6859, 1521), (6859, 1444), (6859, 1369), (6859, 1296), (6859, 1225), (6859, 1156), (6859, 1089), (6859, 1024), (6859, 961), (6859, 900), (6859, 841), (6859, 784), (6859, 729), (6859, 676), (6859, 625), (6859, 576), (6859, 529), (6859, 484), (6859, 441), (6859, 400), (6859, 361), (6859, 324), (6859, 289), (6859, 256), (6859, 225), (6859, 196), (6859, 169), (6859, 144), (6859, 121), (6859, 100), (6859, 81), (6859, 64), (6859, 49), (6859, 36), (6859, 25), (6859, 16), (6859, 9), (6859, 4), (6859, 1), (6859, 0), (6859, 1), (6859, 4), (6859, 9), (6859, 16), (6859, 25), (6859, 36), (6859, 49), (6859, 64), (6859, 81), (6859, 100), (6859, 121), (6859, 144), (6859, 169), (6859, 196), (6859, 225), (6859, 256), (6859, 289), (6859, 324), (6859, 361), (6859, 400), (6859, 441), (6859, 484), (6859, 529), (6859, 576), (6859, 625), (6859, 676), (6859, 729), (6859, 784), (6859, 841), (6859, 900), (6859, 961), (6859, 1024), (6859, 1089), (6859, 1156), (6859, 1225), (6859, 1296), (6859, 1369), (6859, 1444), (6859, 1521), (6859, 1600), (6859, 1681), (6859, 1764), (6859, 1849), (6859, 1936), (6859, 2025), (6859, 2116), (6859, 2209), (6859, 2304), (6859, 2401), (8000, 2500), (8000, 2401), (8000, 2304), (8000, 2209), (8000, 2116), (8000, 2025), (8000, 1936), (8000, 1849), (8000, 1764), (8000, 1681), (8000, 1600), (8000, 1521), (8000, 1444), (8000, 1369), (8000, 1296), (8000, 1225), (8000, 1156), (8000, 1089), (8000, 1024), (8000, 961), (8000, 900), (8000, 841), (8000, 784), (8000, 729), (8000, 676), (8000, 625), (8000, 576), (8000, 529), (8000, 484), (8000, 441), (8000, 400), (8000, 361), (8000, 324), (8000, 289), (8000, 256), (8000, 225), (8000, 196), (8000, 169), (8000, 144), (8000, 121), (8000, 100), (8000, 81), (8000, 64), (8000, 49), (8000, 36), (8000, 25), (8000, 16), (8000, 9), (8000, 4), (8000, 1), (8000, 0), (8000, 1), (8000, 4), (8000, 9), (8000, 16), (8000, 25), (8000, 36), (8000, 49), (8000, 64), (8000, 81), (8000, 100), (8000, 121), (8000, 144), (8000, 169), (8000, 196), (8000, 225), (8000, 256), (8000, 289), (8000, 324), (8000, 361), (8000, 400), (8000, 441), (8000, 484), (8000, 529), (8000, 576), (8000, 625), (8000, 676), (8000, 729), (8000, 784), (8000, 841), (8000, 900), (8000, 961), (8000, 1024), (8000, 1089), (8000, 1156), (8000, 1225), (8000, 1296), (8000, 1369), (8000, 1444), (8000, 1521), (8000, 1600), (8000, 1681), (8000, 1764), (8000, 1849), (8000, 1936), (8000, 2025), (8000, 2116), (8000, 2209), (8000, 2304), (8000, 2401), (9261, 2500), (9261, 2401), (9261, 2304), (9261, 2209), (9261, 2116), (9261, 2025), (9261, 1936), (9261, 1849), (9261, 1764), (9261, 1681), (9261, 1600), (9261, 1521), (9261, 1444), (9261, 1369), (9261, 1296), (9261, 1225), (9261, 1156), (9261, 1089), (9261, 1024), (9261, 961), (9261, 900), (9261, 841), (9261, 784), (9261, 729), (9261, 676), (9261, 625), (9261, 576), (9261, 529), (9261, 484), (9261, 441), (9261, 400), (9261, 361), (9261, 324), (9261, 289), (9261, 256), (9261, 225), (9261, 196), (9261, 169), (9261, 144), (9261, 121), (9261, 100), (9261, 81), (9261, 64), (9261, 49), (9261, 36), (9261, 25), (9261, 16), (9261, 9), (9261, 4), (9261, 1), (9261, 0), (9261, 1), (9261, 4), (9261, 9), (9261, 16), (9261, 25), (9261, 36), (9261, 49), (9261, 64), (9261, 81), (9261, 100), (9261, 121), (9261, 144), (9261, 169), (9261, 196), (9261, 225), (9261, 256), (9261, 289), (9261, 324), (9261, 361), (9261, 400), (9261, 441), (9261, 484), (9261, 529), (9261, 576), (9261, 625), (9261, 676), (9261, 729), (9261, 784), (9261, 841), (9261, 900), (9261, 961), (9261, 1024), (9261, 1089), (9261, 1156), (9261, 1225), (9261, 1296), (9261, 1369), (9261, 1444), (9261, 1521), (9261, 1600), (9261, 1681), (9261, 1764), (9261, 1849), (9261, 1936), (9261, 2025), (9261, 2116), (9261, 2209), (9261, 2304), (9261, 2401), (10648, 2500), (10648, 2401), (10648, 2304), (10648, 2209), (10648, 2116), (10648, 2025), (10648, 1936), (10648, 1849), (10648, 1764), (10648, 1681), (10648, 1600), (10648, 1521), (10648, 1444), (10648, 1369), (10648, 1296), (10648, 1225), (10648, 1156), (10648, 1089), (10648, 1024), (10648, 961), (10648, 900), (10648, 841), (10648, 784), (10648, 729), (10648, 676), (10648, 625), (10648, 576), (10648, 529), (10648, 484), (10648, 441), (10648, 400), (10648, 361), (10648, 324), (10648, 289), (10648, 256), (10648, 225), (10648, 196), (10648, 169), (10648, 144), (10648, 121), (10648, 100), (10648, 81), (10648, 64), (10648, 49), (10648, 36), (10648, 25), (10648, 16), (10648, 9), (10648, 4), (10648, 1), (10648, 0), (10648, 1), (10648, 4), (10648, 9), (10648, 16), (10648, 25), (10648, 36), (10648, 49), (10648, 64), (10648, 81), (10648, 100), (10648, 121), (10648, 144), (10648, 169), (10648, 196), (10648, 225), (10648, 256), (10648, 289), (10648, 324), (10648, 361), (10648, 400), (10648, 441), (10648, 484), (10648, 529), (10648, 576), (10648, 625), (10648, 676), (10648, 729), (10648, 784), (10648, 841), (10648, 900), (10648, 961), (10648, 1024), (10648, 1089), (10648, 1156), (10648, 1225), (10648, 1296), (10648, 1369), (10648, 1444), (10648, 1521), (10648, 1600), (10648, 1681), (10648, 1764), (10648, 1849), (10648, 1936), (10648, 2025), (10648, 2116), (10648, 2209), (10648, 2304), (10648, 2401), (12167, 2500), (12167, 2401), (12167, 2304), (12167, 2209), (12167, 2116), (12167, 2025), (12167, 1936), (12167, 1849), (12167, 1764), (12167, 1681), (12167, 1600), (12167, 1521), (12167, 1444), (12167, 1369), (12167, 1296), (12167, 1225), (12167, 1156), (12167, 1089), (12167, 1024), (12167, 961), (12167, 900), (12167, 841), (12167, 784), (12167, 729), (12167, 676), (12167, 625), (12167, 576), (12167, 529), (12167, 484), (12167, 441), (12167, 400), (12167, 361), (12167, 324), (12167, 289), (12167, 256), (12167, 225), (12167, 196), (12167, 169), (12167, 144), (12167, 121), (12167, 100), (12167, 81), (12167, 64), (12167, 49), (12167, 36), (12167, 25), (12167, 16), (12167, 9), (12167, 4), (12167, 1), (12167, 0), (12167, 1), (12167, 4), (12167, 9), (12167, 16), (12167, 25), (12167, 36), (12167, 49), (12167, 64), (12167, 81), (12167, 100), (12167, 121), (12167, 144), (12167, 169), (12167, 196), (12167, 225), (12167, 256), (12167, 289), (12167, 324), (12167, 361), (12167, 400), (12167, 441), (12167, 484), (12167, 529), (12167, 576), (12167, 625), (12167, 676), (12167, 729), (12167, 784), (12167, 841), (12167, 900), (12167, 961), (12167, 1024), (12167, 1089), (12167, 1156), (12167, 1225), (12167, 1296), (12167, 1369), (12167, 1444), (12167, 1521), (12167, 1600), (12167, 1681), (12167, 1764), (12167, 1849), (12167, 1936), (12167, 2025), (12167, 2116), (12167, 2209), (12167, 2304), (12167, 2401), (13824, 2500), (13824, 2401), (13824, 2304), (13824, 2209), (13824, 2116), (13824, 2025), (13824, 1936), (13824, 1849), (13824, 1764), (13824, 1681), (13824, 1600), (13824, 1521), (13824, 1444), (13824, 1369), (13824, 1296), (13824, 1225), (13824, 1156), (13824, 1089), (13824, 1024), (13824, 961), (13824, 900), (13824, 841), (13824, 784), (13824, 729), (13824, 676), (13824, 625), (13824, 576), (13824, 529), (13824, 484), (13824, 441), (13824, 400), (13824, 361), (13824, 324), (13824, 289), (13824, 256), (13824, 225), (13824, 196), (13824, 169), (13824, 144), (13824, 121), (13824, 100), (13824, 81), (13824, 64), (13824, 49), (13824, 36), (13824, 25), (13824, 16), (13824, 9), (13824, 4), (13824, 1), (13824, 0), (13824, 1), (13824, 4), (13824, 9), (13824, 16), (13824, 25), (13824, 36), (13824, 49), (13824, 64), (13824, 81), (13824, 100), (13824, 121), (13824, 144), (13824, 169), (13824, 196), (13824, 225), (13824, 256), (13824, 289), (13824, 324), (13824, 361), (13824, 400), (13824, 441), (13824, 484), (13824, 529), (13824, 576), (13824, 625), (13824, 676), (13824, 729), (13824, 784), (13824, 841), (13824, 900), (13824, 961), (13824, 1024), (13824, 1089), (13824, 1156), (13824, 1225), (13824, 1296), (13824, 1369), (13824, 1444), (13824, 1521), (13824, 1600), (13824, 1681), (13824, 1764), (13824, 1849), (13824, 1936), (13824, 2025), (13824, 2116), (13824, 2209), (13824, 2304), (13824, 2401), (15625, 2500), (15625, 2401), (15625, 2304), (15625, 2209), (15625, 2116), (15625, 2025), (15625, 1936), (15625, 1849), (15625, 1764), (15625, 1681), (15625, 1600), (15625, 1521), (15625, 1444), (15625, 1369), (15625, 1296), (15625, 1225), (15625, 1156), (15625, 1089), (15625, 1024), (15625, 961), (15625, 900), (15625, 841), (15625, 784), (15625, 729), (15625, 676), (15625, 625), (15625, 576), (15625, 529), (15625, 484), (15625, 441), (15625, 400), (15625, 361), (15625, 324), (15625, 289), (15625, 256), (15625, 225), (15625, 196), (15625, 169), (15625, 144), (15625, 121), (15625, 100), (15625, 81), (15625, 64), (15625, 49), (15625, 36), (15625, 25), (15625, 16), (15625, 9), (15625, 4), (15625, 1), (15625, 0), (15625, 1), (15625, 4), (15625, 9), (15625, 16), (15625, 25), (15625, 36), (15625, 49), (15625, 64), (15625, 81), (15625, 100), (15625, 121), (15625, 144), (15625, 169), (15625, 196), (15625, 225), (15625, 256), (15625, 289), (15625, 324), (15625, 361), (15625, 400), (15625, 441), (15625, 484), (15625, 529), (15625, 576), (15625, 625), (15625, 676), (15625, 729), (15625, 784), (15625, 841), (15625, 900), (15625, 961), (15625, 1024), (15625, 1089), (15625, 1156), (15625, 1225), (15625, 1296), (15625, 1369), (15625, 1444), (15625, 1521), (15625, 1600), (15625, 1681), (15625, 1764), (15625, 1849), (15625, 1936), (15625, 2025), (15625, 2116), (15625, 2209), (15625, 2304), (15625, 2401), (17576, 2500), (17576, 2401), (17576, 2304), (17576, 2209), (17576, 2116), (17576, 2025), (17576, 1936), (17576, 1849), (17576, 1764), (17576, 1681), (17576, 1600), (17576, 1521), (17576, 1444), (17576, 1369), (17576, 1296), (17576, 1225), (17576, 1156), (17576, 1089), (17576, 1024), (17576, 961), (17576, 900), (17576, 841), (17576, 784), (17576, 729), (17576, 676), (17576, 625), (17576, 576), (17576, 529), (17576, 484), (17576, 441), (17576, 400), (17576, 361), (17576, 324), (17576, 289), (17576, 256), (17576, 225), (17576, 196), (17576, 169), (17576, 144), (17576, 121), (17576, 100), (17576, 81), (17576, 64), (17576, 49), (17576, 36), (17576, 25), (17576, 16), (17576, 9), (17576, 4), (17576, 1), (17576, 0), (17576, 1), (17576, 4), (17576, 9), (17576, 16), (17576, 25), (17576, 36), (17576, 49), (17576, 64), (17576, 81), (17576, 100), (17576, 121), (17576, 144), (17576, 169), (17576, 196), (17576, 225), (17576, 256), (17576, 289), (17576, 324), (17576, 361), (17576, 400), (17576, 441), (17576, 484), (17576, 529), (17576, 576), (17576, 625), (17576, 676), (17576, 729), (17576, 784), (17576, 841), (17576, 900), (17576, 961), (17576, 1024), (17576, 1089), (17576, 1156), (17576, 1225), (17576, 1296), (17576, 1369), (17576, 1444), (17576, 1521), (17576, 1600), (17576, 1681), (17576, 1764), (17576, 1849), (17576, 1936), (17576, 2025), (17576, 2116), (17576, 2209), (17576, 2304), (17576, 2401), (19683, 2500), (19683, 2401), (19683, 2304), (19683, 2209), (19683, 2116), (19683, 2025), (19683, 1936), (19683, 1849), (19683, 1764), (19683, 1681), (19683, 1600), (19683, 1521), (19683, 1444), (19683, 1369), (19683, 1296), (19683, 1225), (19683, 1156), (19683, 1089), (19683, 1024), (19683, 961), (19683, 900), (19683, 841), (19683, 784), (19683, 729), (19683, 676), (19683, 625), (19683, 576), (19683, 529), (19683, 484), (19683, 441), (19683, 400), (19683, 361), (19683, 324), (19683, 289), (19683, 256), (19683, 225), (19683, 196), (19683, 169), (19683, 144), (19683, 121), (19683, 100), (19683, 81), (19683, 64), (19683, 49), (19683, 36), (19683, 25), (19683, 16), (19683, 9), (19683, 4), (19683, 1), (19683, 0), (19683, 1), (19683, 4), (19683, 9), (19683, 16), (19683, 25), (19683, 36), (19683, 49), (19683, 64), (19683, 81), (19683, 100), (19683, 121), (19683, 144), (19683, 169), (19683, 196), (19683, 225), (19683, 256), (19683, 289), (19683, 324), (19683, 361), (19683, 400), (19683, 441), (19683, 484), (19683, 529), (19683, 576), (19683, 625), (19683, 676), (19683, 729), (19683, 784), (19683, 841), (19683, 900), (19683, 961), (19683, 1024), (19683, 1089), (19683, 1156), (19683, 1225), (19683, 1296), (19683, 1369), (19683, 1444), (19683, 1521), (19683, 1600), (19683, 1681), (19683, 1764), (19683, 1849), (19683, 1936), (19683, 2025), (19683, 2116), (19683, 2209), (19683, 2304), (19683, 2401), (21952, 2500), (21952, 2401), (21952, 2304), (21952, 2209), (21952, 2116), (21952, 2025), (21952, 1936), (21952, 1849), (21952, 1764), (21952, 1681), (21952, 1600), (21952, 1521), (21952, 1444), (21952, 1369), (21952, 1296), (21952, 1225), (21952, 1156), (21952, 1089), (21952, 1024), (21952, 961), (21952, 900), (21952, 841), (21952, 784), (21952, 729), (21952, 676), (21952, 625), (21952, 576), (21952, 529), (21952, 484), (21952, 441), (21952, 400), (21952, 361), (21952, 324), (21952, 289), (21952, 256), (21952, 225), (21952, 196), (21952, 169), (21952, 144), (21952, 121), (21952, 100), (21952, 81), (21952, 64), (21952, 49), (21952, 36), (21952, 25), (21952, 16), (21952, 9), (21952, 4), (21952, 1), (21952, 0), (21952, 1), (21952, 4), (21952, 9), (21952, 16), (21952, 25), (21952, 36), (21952, 49), (21952, 64), (21952, 81), (21952, 100), (21952, 121), (21952, 144), (21952, 169), (21952, 196), (21952, 225), (21952, 256), (21952, 289), (21952, 324), (21952, 361), (21952, 400), (21952, 441), (21952, 484), (21952, 529), (21952, 576), (21952, 625), (21952, 676), (21952, 729), (21952, 784), (21952, 841), (21952, 900), (21952, 961), (21952, 1024), (21952, 1089), (21952, 1156), (21952, 1225), (21952, 1296), (21952, 1369), (21952, 1444), (21952, 1521), (21952, 1600), (21952, 1681), (21952, 1764), (21952, 1849), (21952, 1936), (21952, 2025), (21952, 2116), (21952, 2209), (21952, 2304), (21952, 2401), (24389, 2500), (24389, 2401), (24389, 2304), (24389, 2209), (24389, 2116), (24389, 2025), (24389, 1936), (24389, 1849), (24389, 1764), (24389, 1681), (24389, 1600), (24389, 1521), (24389, 1444), (24389, 1369), (24389, 1296), (24389, 1225), (24389, 1156), (24389, 1089), (24389, 1024), (24389, 961), (24389, 900), (24389, 841), (24389, 784), (24389, 729), (24389, 676), (24389, 625), (24389, 576), (24389, 529), (24389, 484), (24389, 441), (24389, 400), (24389, 361), (24389, 324), (24389, 289), (24389, 256), (24389, 225), (24389, 196), (24389, 169), (24389, 144), (24389, 121), (24389, 100), (24389, 81), (24389, 64), (24389, 49), (24389, 36), (24389, 25), (24389, 16), (24389, 9), (24389, 4), (24389, 1), (24389, 0), (24389, 1), (24389, 4), (24389, 9), (24389, 16), (24389, 25), (24389, 36), (24389, 49), (24389, 64), (24389, 81), (24389, 100), (24389, 121), (24389, 144), (24389, 169), (24389, 196), (24389, 225), (24389, 256), (24389, 289), (24389, 324), (24389, 361), (24389, 400), (24389, 441), (24389, 484), (24389, 529), (24389, 576), (24389, 625), (24389, 676), (24389, 729), (24389, 784), (24389, 841), (24389, 900), (24389, 961), (24389, 1024), (24389, 1089), (24389, 1156), (24389, 1225), (24389, 1296), (24389, 1369), (24389, 1444), (24389, 1521), (24389, 1600), (24389, 1681), (24389, 1764), (24389, 1849), (24389, 1936), (24389, 2025), (24389, 2116), (24389, 2209), (24389, 2304), (24389, 2401), (27000, 2500), (27000, 2401), (27000, 2304), (27000, 2209), (27000, 2116), (27000, 2025), (27000, 1936), (27000, 1849), (27000, 1764), (27000, 1681), (27000, 1600), (27000, 1521), (27000, 1444), (27000, 1369), (27000, 1296), (27000, 1225), (27000, 1156), (27000, 1089), (27000, 1024), (27000, 961), (27000, 900), (27000, 841), (27000, 784), (27000, 729), (27000, 676), (27000, 625), (27000, 576), (27000, 529), (27000, 484), (27000, 441), (27000, 400), (27000, 361), (27000, 324), (27000, 289), (27000, 256), (27000, 225), (27000, 196), (27000, 169), (27000, 144), (27000, 121), (27000, 100), (27000, 81), (27000, 64), (27000, 49), (27000, 36), (27000, 25), (27000, 16), (27000, 9), (27000, 4), (27000, 1), (27000, 0), (27000, 1), (27000, 4), (27000, 9), (27000, 16), (27000, 25), (27000, 36), (27000, 49), (27000, 64), (27000, 81), (27000, 100), (27000, 121), (27000, 144), (27000, 169), (27000, 196), (27000, 225), (27000, 256), (27000, 289), (27000, 324), (27000, 361), (27000, 400), (27000, 441), (27000, 484), (27000, 529), (27000, 576), (27000, 625), (27000, 676), (27000, 729), (27000, 784), (27000, 841), (27000, 900), (27000, 961), (27000, 1024), (27000, 1089), (27000, 1156), (27000, 1225), (27000, 1296), (27000, 1369), (27000, 1444), (27000, 1521), (27000, 1600), (27000, 1681), (27000, 1764), (27000, 1849), (27000, 1936), (27000, 2025), (27000, 2116), (27000, 2209), (27000, 2304), (27000, 2401), (29791, 2500), (29791, 2401), (29791, 2304), (29791, 2209), (29791, 2116), (29791, 2025), (29791, 1936), (29791, 1849), (29791, 1764), (29791, 1681), (29791, 1600), (29791, 1521), (29791, 1444), (29791, 1369), (29791, 1296), (29791, 1225), (29791, 1156), (29791, 1089), (29791, 1024), (29791, 961), (29791, 900), (29791, 841), (29791, 784), (29791, 729), (29791, 676), (29791, 625), (29791, 576), (29791, 529), (29791, 484), (29791, 441), (29791, 400), (29791, 361), (29791, 324), (29791, 289), (29791, 256), (29791, 225), (29791, 196), (29791, 169), (29791, 144), (29791, 121), (29791, 100), (29791, 81), (29791, 64), (29791, 49), (29791, 36), (29791, 25), (29791, 16), (29791, 9), (29791, 4), (29791, 1), (29791, 0), (29791, 1), (29791, 4), (29791, 9), (29791, 16), (29791, 25), (29791, 36), (29791, 49), (29791, 64), (29791, 81), (29791, 100), (29791, 121), (29791, 144), (29791, 169), (29791, 196), (29791, 225), (29791, 256), (29791, 289), (29791, 324), (29791, 361), (29791, 400), (29791, 441), (29791, 484), (29791, 529), (29791, 576), (29791, 625), (29791, 676), (29791, 729), (29791, 784), (29791, 841), (29791, 900), (29791, 961), (29791, 1024), (29791, 1089), (29791, 1156), (29791, 1225), (29791, 1296), (29791, 1369), (29791, 1444), (29791, 1521), (29791, 1600), (29791, 1681), (29791, 1764), (29791, 1849), (29791, 1936), (29791, 2025), (29791, 2116), (29791, 2209), (29791, 2304), (29791, 2401), (32768, 2500), (32768, 2401), (32768, 2304), (32768, 2209), (32768, 2116), (32768, 2025), (32768, 1936), (32768, 1849), (32768, 1764), (32768, 1681), (32768, 1600), (32768, 1521), (32768, 1444), (32768, 1369), (32768, 1296), (32768, 1225), (32768, 1156), (32768, 1089), (32768, 1024), (32768, 961), (32768, 900), (32768, 841), (32768, 784), (32768, 729), (32768, 676), (32768, 625), (32768, 576), (32768, 529), (32768, 484), (32768, 441), (32768, 400), (32768, 361), (32768, 324), (32768, 289), (32768, 256), (32768, 225), (32768, 196), (32768, 169), (32768, 144), (32768, 121), (32768, 100), (32768, 81), (32768, 64), (32768, 49), (32768, 36), (32768, 25), (32768, 16), (32768, 9), (32768, 4), (32768, 1), (32768, 0), (32768, 1), (32768, 4), (32768, 9), (32768, 16), (32768, 25), (32768, 36), (32768, 49), (32768, 64), (32768, 81), (32768, 100), (32768, 121), (32768, 144), (32768, 169), (32768, 196), (32768, 225), (32768, 256), (32768, 289), (32768, 324), (32768, 361), (32768, 400), (32768, 441), (32768, 484), (32768, 529), (32768, 576), (32768, 625), (32768, 676), (32768, 729), (32768, 784), (32768, 841), (32768, 900), (32768, 961), (32768, 1024), (32768, 1089), (32768, 1156), (32768, 1225), (32768, 1296), (32768, 1369), (32768, 1444), (32768, 1521), (32768, 1600), (32768, 1681), (32768, 1764), (32768, 1849), (32768, 1936), (32768, 2025), (32768, 2116), (32768, 2209), (32768, 2304), (32768, 2401), (35937, 2500), (35937, 2401), (35937, 2304), (35937, 2209), (35937, 2116), (35937, 2025), (35937, 1936), (35937, 1849), (35937, 1764), (35937, 1681), (35937, 1600), (35937, 1521), (35937, 1444), (35937, 1369), (35937, 1296), (35937, 1225), (35937, 1156), (35937, 1089), (35937, 1024), (35937, 961), (35937, 900), (35937, 841), (35937, 784), (35937, 729), (35937, 676), (35937, 625), (35937, 576), (35937, 529), (35937, 484), (35937, 441), (35937, 400), (35937, 361), (35937, 324), (35937, 289), (35937, 256), (35937, 225), (35937, 196), (35937, 169), (35937, 144), (35937, 121), (35937, 100), (35937, 81), (35937, 64), (35937, 49), (35937, 36), (35937, 25), (35937, 16), (35937, 9), (35937, 4), (35937, 1), (35937, 0), (35937, 1), (35937, 4), (35937, 9), (35937, 16), (35937, 25), (35937, 36), (35937, 49), (35937, 64), (35937, 81), (35937, 100), (35937, 121), (35937, 144), (35937, 169), (35937, 196), (35937, 225), (35937, 256), (35937, 289), (35937, 324), (35937, 361), (35937, 400), (35937, 441), (35937, 484), (35937, 529), (35937, 576), (35937, 625), (35937, 676), (35937, 729), (35937, 784), (35937, 841), (35937, 900), (35937, 961), (35937, 1024), (35937, 1089), (35937, 1156), (35937, 1225), (35937, 1296), (35937, 1369), (35937, 1444), (35937, 1521), (35937, 1600), (35937, 1681), (35937, 1764), (35937, 1849), (35937, 1936), (35937, 2025), (35937, 2116), (35937, 2209), (35937, 2304), (35937, 2401), (39304, 2500), (39304, 2401), (39304, 2304), (39304, 2209), (39304, 2116), (39304, 2025), (39304, 1936), (39304, 1849), (39304, 1764), (39304, 1681), (39304, 1600), (39304, 1521), (39304, 1444), (39304, 1369), (39304, 1296), (39304, 1225), (39304, 1156), (39304, 1089), (39304, 1024), (39304, 961), (39304, 900), (39304, 841), (39304, 784), (39304, 729), (39304, 676), (39304, 625), (39304, 576), (39304, 529), (39304, 484), (39304, 441), (39304, 400), (39304, 361), (39304, 324), (39304, 289), (39304, 256), (39304, 225), (39304, 196), (39304, 169), (39304, 144), (39304, 121), (39304, 100), (39304, 81), (39304, 64), (39304, 49), (39304, 36), (39304, 25), (39304, 16), (39304, 9), (39304, 4), (39304, 1), (39304, 0), (39304, 1), (39304, 4), (39304, 9), (39304, 16), (39304, 25), (39304, 36), (39304, 49), (39304, 64), (39304, 81), (39304, 100), (39304, 121), (39304, 144), (39304, 169), (39304, 196), (39304, 225), (39304, 256), (39304, 289), (39304, 324), (39304, 361), (39304, 400), (39304, 441), (39304, 484), (39304, 529), (39304, 576), (39304, 625), (39304, 676), (39304, 729), (39304, 784), (39304, 841), (39304, 900), (39304, 961), (39304, 1024), (39304, 1089), (39304, 1156), (39304, 1225), (39304, 1296), (39304, 1369), (39304, 1444), (39304, 1521), (39304, 1600), (39304, 1681), (39304, 1764), (39304, 1849), (39304, 1936), (39304, 2025), (39304, 2116), (39304, 2209), (39304, 2304), (39304, 2401), (42875, 2500), (42875, 2401), (42875, 2304), (42875, 2209), (42875, 2116), (42875, 2025), (42875, 1936), (42875, 1849), (42875, 1764), (42875, 1681), (42875, 1600), (42875, 1521), (42875, 1444), (42875, 1369), (42875, 1296), (42875, 1225), (42875, 1156), (42875, 1089), (42875, 1024), (42875, 961), (42875, 900), (42875, 841), (42875, 784), (42875, 729), (42875, 676), (42875, 625), (42875, 576), (42875, 529), (42875, 484), (42875, 441), (42875, 400), (42875, 361), (42875, 324), (42875, 289), (42875, 256), (42875, 225), (42875, 196), (42875, 169), (42875, 144), (42875, 121), (42875, 100), (42875, 81), (42875, 64), (42875, 49), (42875, 36), (42875, 25), (42875, 16), (42875, 9), (42875, 4), (42875, 1), (42875, 0), (42875, 1), (42875, 4), (42875, 9), (42875, 16), (42875, 25), (42875, 36), (42875, 49), (42875, 64), (42875, 81), (42875, 100), (42875, 121), (42875, 144), (42875, 169), (42875, 196), (42875, 225), (42875, 256), (42875, 289), (42875, 324), (42875, 361), (42875, 400), (42875, 441), (42875, 484), (42875, 529), (42875, 576), (42875, 625), (42875, 676), (42875, 729), (42875, 784), (42875, 841), (42875, 900), (42875, 961), (42875, 1024), (42875, 1089), (42875, 1156), (42875, 1225), (42875, 1296), (42875, 1369), (42875, 1444), (42875, 1521), (42875, 1600), (42875, 1681), (42875, 1764), (42875, 1849), (42875, 1936), (42875, 2025), (42875, 2116), (42875, 2209), (42875, 2304), (42875, 2401), (46656, 2500), (46656, 2401), (46656, 2304), (46656, 2209), (46656, 2116), (46656, 2025), (46656, 1936), (46656, 1849), (46656, 1764), (46656, 1681), (46656, 1600), (46656, 1521), (46656, 1444), (46656, 1369), (46656, 1296), (46656, 1225), (46656, 1156), (46656, 1089), (46656, 1024), (46656, 961), (46656, 900), (46656, 841), (46656, 784), (46656, 729), (46656, 676), (46656, 625), (46656, 576), (46656, 529), (46656, 484), (46656, 441), (46656, 400), (46656, 361), (46656, 324), (46656, 289), (46656, 256), (46656, 225), (46656, 196), (46656, 169), (46656, 144), (46656, 121), (46656, 100), (46656, 81), (46656, 64), (46656, 49), (46656, 36), (46656, 25), (46656, 16), (46656, 9), (46656, 4), (46656, 1), (46656, 0), (46656, 1), (46656, 4), (46656, 9), (46656, 16), (46656, 25), (46656, 36), (46656, 49), (46656, 64), (46656, 81), (46656, 100), (46656, 121), (46656, 144), (46656, 169), (46656, 196), (46656, 225), (46656, 256), (46656, 289), (46656, 324), (46656, 361), (46656, 400), (46656, 441), (46656, 484), (46656, 529), (46656, 576), (46656, 625), (46656, 676), (46656, 729), (46656, 784), (46656, 841), (46656, 900), (46656, 961), (46656, 1024), (46656, 1089), (46656, 1156), (46656, 1225), (46656, 1296), (46656, 1369), (46656, 1444), (46656, 1521), (46656, 1600), (46656, 1681), (46656, 1764), (46656, 1849), (46656, 1936), (46656, 2025), (46656, 2116), (46656, 2209), (46656, 2304), (46656, 2401), (50653, 2500), (50653, 2401), (50653, 2304), (50653, 2209), (50653, 2116), (50653, 2025), (50653, 1936), (50653, 1849), (50653, 1764), (50653, 1681), (50653, 1600), (50653, 1521), (50653, 1444), (50653, 1369), (50653, 1296), (50653, 1225), (50653, 1156), (50653, 1089), (50653, 1024), (50653, 961), (50653, 900), (50653, 841), (50653, 784), (50653, 729), (50653, 676), (50653, 625), (50653, 576), (50653, 529), (50653, 484), (50653, 441), (50653, 400), (50653, 361), (50653, 324), (50653, 289), (50653, 256), (50653, 225), (50653, 196), (50653, 169), (50653, 144), (50653, 121), (50653, 100), (50653, 81), (50653, 64), (50653, 49), (50653, 36), (50653, 25), (50653, 16), (50653, 9), (50653, 4), (50653, 1), (50653, 0), (50653, 1), (50653, 4), (50653, 9), (50653, 16), (50653, 25), (50653, 36), (50653, 49), (50653, 64), (50653, 81), (50653, 100), (50653, 121), (50653, 144), (50653, 169), (50653, 196), (50653, 225), (50653, 256), (50653, 289), (50653, 324), (50653, 361), (50653, 400), (50653, 441), (50653, 484), (50653, 529), (50653, 576), (50653, 625), (50653, 676), (50653, 729), (50653, 784), (50653, 841), (50653, 900), (50653, 961), (50653, 1024), (50653, 1089), (50653, 1156), (50653, 1225), (50653, 1296), (50653, 1369), (50653, 1444), (50653, 1521), (50653, 1600), (50653, 1681), (50653, 1764), (50653, 1849), (50653, 1936), (50653, 2025), (50653, 2116), (50653, 2209), (50653, 2304), (50653, 2401), (54872, 2500), (54872, 2401), (54872, 2304), (54872, 2209), (54872, 2116), (54872, 2025), (54872, 1936), (54872, 1849), (54872, 1764), (54872, 1681), (54872, 1600), (54872, 1521), (54872, 1444), (54872, 1369), (54872, 1296), (54872, 1225), (54872, 1156), (54872, 1089), (54872, 1024), (54872, 961), (54872, 900), (54872, 841), (54872, 784), (54872, 729), (54872, 676), (54872, 625), (54872, 576), (54872, 529), (54872, 484), (54872, 441), (54872, 400), (54872, 361), (54872, 324), (54872, 289), (54872, 256), (54872, 225), (54872, 196), (54872, 169), (54872, 144), (54872, 121), (54872, 100), (54872, 81), (54872, 64), (54872, 49), (54872, 36), (54872, 25), (54872, 16), (54872, 9), (54872, 4), (54872, 1), (54872, 0), (54872, 1), (54872, 4), (54872, 9), (54872, 16), (54872, 25), (54872, 36), (54872, 49), (54872, 64), (54872, 81), (54872, 100), (54872, 121), (54872, 144), (54872, 169), (54872, 196), (54872, 225), (54872, 256), (54872, 289), (54872, 324), (54872, 361), (54872, 400), (54872, 441), (54872, 484), (54872, 529), (54872, 576), (54872, 625), (54872, 676), (54872, 729), (54872, 784), (54872, 841), (54872, 900), (54872, 961), (54872, 1024), (54872, 1089), (54872, 1156), (54872, 1225), (54872, 1296), (54872, 1369), (54872, 1444), (54872, 1521), (54872, 1600), (54872, 1681), (54872, 1764), (54872, 1849), (54872, 1936), (54872, 2025), (54872, 2116), (54872, 2209), (54872, 2304), (54872, 2401), (59319, 2500), (59319, 2401), (59319, 2304), (59319, 2209), (59319, 2116), (59319, 2025), (59319, 1936), (59319, 1849), (59319, 1764), (59319, 1681), (59319, 1600), (59319, 1521), (59319, 1444), (59319, 1369), (59319, 1296), (59319, 1225), (59319, 1156), (59319, 1089), (59319, 1024), (59319, 961), (59319, 900), (59319, 841), (59319, 784), (59319, 729), (59319, 676), (59319, 625), (59319, 576), (59319, 529), (59319, 484), (59319, 441), (59319, 400), (59319, 361), (59319, 324), (59319, 289), (59319, 256), (59319, 225), (59319, 196), (59319, 169), (59319, 144), (59319, 121), (59319, 100), (59319, 81), (59319, 64), (59319, 49), (59319, 36), (59319, 25), (59319, 16), (59319, 9), (59319, 4), (59319, 1), (59319, 0), (59319, 1), (59319, 4), (59319, 9), (59319, 16), (59319, 25), (59319, 36), (59319, 49), (59319, 64), (59319, 81), (59319, 100), (59319, 121), (59319, 144), (59319, 169), (59319, 196), (59319, 225), (59319, 256), (59319, 289), (59319, 324), (59319, 361), (59319, 400), (59319, 441), (59319, 484), (59319, 529), (59319, 576), (59319, 625), (59319, 676), (59319, 729), (59319, 784), (59319, 841), (59319, 900), (59319, 961), (59319, 1024), (59319, 1089), (59319, 1156), (59319, 1225), (59319, 1296), (59319, 1369), (59319, 1444), (59319, 1521), (59319, 1600), (59319, 1681), (59319, 1764), (59319, 1849), (59319, 1936), (59319, 2025), (59319, 2116), (59319, 2209), (59319, 2304), (59319, 2401), (64000, 2500), (64000, 2401), (64000, 2304), (64000, 2209), (64000, 2116), (64000, 2025), (64000, 1936), (64000, 1849), (64000, 1764), (64000, 1681), (64000, 1600), (64000, 1521), (64000, 1444), (64000, 1369), (64000, 1296), (64000, 1225), (64000, 1156), (64000, 1089), (64000, 1024), (64000, 961), (64000, 900), (64000, 841), (64000, 784), (64000, 729), (64000, 676), (64000, 625), (64000, 576), (64000, 529), (64000, 484), (64000, 441), (64000, 400), (64000, 361), (64000, 324), (64000, 289), (64000, 256), (64000, 225), (64000, 196), (64000, 169), (64000, 144), (64000, 121), (64000, 100), (64000, 81), (64000, 64), (64000, 49), (64000, 36), (64000, 25), (64000, 16), (64000, 9), (64000, 4), (64000, 1), (64000, 0), (64000, 1), (64000, 4), (64000, 9), (64000, 16), (64000, 25), (64000, 36), (64000, 49), (64000, 64), (64000, 81), (64000, 100), (64000, 121), (64000, 144), (64000, 169), (64000, 196), (64000, 225), (64000, 256), (64000, 289), (64000, 324), (64000, 361), (64000, 400), (64000, 441), (64000, 484), (64000, 529), (64000, 576), (64000, 625), (64000, 676), (64000, 729), (64000, 784), (64000, 841), (64000, 900), (64000, 961), (64000, 1024), (64000, 1089), (64000, 1156), (64000, 1225), (64000, 1296), (64000, 1369), (64000, 1444), (64000, 1521), (64000, 1600), (64000, 1681), (64000, 1764), (64000, 1849), (64000, 1936), (64000, 2025), (64000, 2116), (64000, 2209), (64000, 2304), (64000, 2401), (68921, 2500), (68921, 2401), (68921, 2304), (68921, 2209), (68921, 2116), (68921, 2025), (68921, 1936), (68921, 1849), (68921, 1764), (68921, 1681), (68921, 1600), (68921, 1521), (68921, 1444), (68921, 1369), (68921, 1296), (68921, 1225), (68921, 1156), (68921, 1089), (68921, 1024), (68921, 961), (68921, 900), (68921, 841), (68921, 784), (68921, 729), (68921, 676), (68921, 625), (68921, 576), (68921, 529), (68921, 484), (68921, 441), (68921, 400), (68921, 361), (68921, 324), (68921, 289), (68921, 256), (68921, 225), (68921, 196), (68921, 169), (68921, 144), (68921, 121), (68921, 100), (68921, 81), (68921, 64), (68921, 49), (68921, 36), (68921, 25), (68921, 16), (68921, 9), (68921, 4), (68921, 1), (68921, 0), (68921, 1), (68921, 4), (68921, 9), (68921, 16), (68921, 25), (68921, 36), (68921, 49), (68921, 64), (68921, 81), (68921, 100), (68921, 121), (68921, 144), (68921, 169), (68921, 196), (68921, 225), (68921, 256), (68921, 289), (68921, 324), (68921, 361), (68921, 400), (68921, 441), (68921, 484), (68921, 529), (68921, 576), (68921, 625), (68921, 676), (68921, 729), (68921, 784), (68921, 841), (68921, 900), (68921, 961), (68921, 1024), (68921, 1089), (68921, 1156), (68921, 1225), (68921, 1296), (68921, 1369), (68921, 1444), (68921, 1521), (68921, 1600), (68921, 1681), (68921, 1764), (68921, 1849), (68921, 1936), (68921, 2025), (68921, 2116), (68921, 2209), (68921, 2304), (68921, 2401), (74088, 2500), (74088, 2401), (74088, 2304), (74088, 2209), (74088, 2116), (74088, 2025), (74088, 1936), (74088, 1849), (74088, 1764), (74088, 1681), (74088, 1600), (74088, 1521), (74088, 1444), (74088, 1369), (74088, 1296), (74088, 1225), (74088, 1156), (74088, 1089), (74088, 1024), (74088, 961), (74088, 900), (74088, 841), (74088, 784), (74088, 729), (74088, 676), (74088, 625), (74088, 576), (74088, 529), (74088, 484), (74088, 441), (74088, 400), (74088, 361), (74088, 324), (74088, 289), (74088, 256), (74088, 225), (74088, 196), (74088, 169), (74088, 144), (74088, 121), (74088, 100), (74088, 81), (74088, 64), (74088, 49), (74088, 36), (74088, 25), (74088, 16), (74088, 9), (74088, 4), (74088, 1), (74088, 0), (74088, 1), (74088, 4), (74088, 9), (74088, 16), (74088, 25), (74088, 36), (74088, 49), (74088, 64), (74088, 81), (74088, 100), (74088, 121), (74088, 144), (74088, 169), (74088, 196), (74088, 225), (74088, 256), (74088, 289), (74088, 324), (74088, 361), (74088, 400), (74088, 441), (74088, 484), (74088, 529), (74088, 576), (74088, 625), (74088, 676), (74088, 729), (74088, 784), (74088, 841), (74088, 900), (74088, 961), (74088, 1024), (74088, 1089), (74088, 1156), (74088, 1225), (74088, 1296), (74088, 1369), (74088, 1444), (74088, 1521), (74088, 1600), (74088, 1681), (74088, 1764), (74088, 1849), (74088, 1936), (74088, 2025), (74088, 2116), (74088, 2209), (74088, 2304), (74088, 2401), (79507, 2500), (79507, 2401), (79507, 2304), (79507, 2209), (79507, 2116), (79507, 2025), (79507, 1936), (79507, 1849), (79507, 1764), (79507, 1681), (79507, 1600), (79507, 1521), (79507, 1444), (79507, 1369), (79507, 1296), (79507, 1225), (79507, 1156), (79507, 1089), (79507, 1024), (79507, 961), (79507, 900), (79507, 841), (79507, 784), (79507, 729), (79507, 676), (79507, 625), (79507, 576), (79507, 529), (79507, 484), (79507, 441), (79507, 400), (79507, 361), (79507, 324), (79507, 289), (79507, 256), (79507, 225), (79507, 196), (79507, 169), (79507, 144), (79507, 121), (79507, 100), (79507, 81), (79507, 64), (79507, 49), (79507, 36), (79507, 25), (79507, 16), (79507, 9), (79507, 4), (79507, 1), (79507, 0), (79507, 1), (79507, 4), (79507, 9), (79507, 16), (79507, 25), (79507, 36), (79507, 49), (79507, 64), (79507, 81), (79507, 100), (79507, 121), (79507, 144), (79507, 169), (79507, 196), (79507, 225), (79507, 256), (79507, 289), (79507, 324), (79507, 361), (79507, 400), (79507, 441), (79507, 484), (79507, 529), (79507, 576), (79507, 625), (79507, 676), (79507, 729), (79507, 784), (79507, 841), (79507, 900), (79507, 961), (79507, 1024), (79507, 1089), (79507, 1156), (79507, 1225), (79507, 1296), (79507, 1369), (79507, 1444), (79507, 1521), (79507, 1600), (79507, 1681), (79507, 1764), (79507, 1849), (79507, 1936), (79507, 2025), (79507, 2116), (79507, 2209), (79507, 2304), (79507, 2401), (85184, 2500), (85184, 2401), (85184, 2304), (85184, 2209), (85184, 2116), (85184, 2025), (85184, 1936), (85184, 1849), (85184, 1764), (85184, 1681), (85184, 1600), (85184, 1521), (85184, 1444), (85184, 1369), (85184, 1296), (85184, 1225), (85184, 1156), (85184, 1089), (85184, 1024), (85184, 961), (85184, 900), (85184, 841), (85184, 784), (85184, 729), (85184, 676), (85184, 625), (85184, 576), (85184, 529), (85184, 484), (85184, 441), (85184, 400), (85184, 361), (85184, 324), (85184, 289), (85184, 256), (85184, 225), (85184, 196), (85184, 169), (85184, 144), (85184, 121), (85184, 100), (85184, 81), (85184, 64), (85184, 49), (85184, 36), (85184, 25), (85184, 16), (85184, 9), (85184, 4), (85184, 1), (85184, 0), (85184, 1), (85184, 4), (85184, 9), (85184, 16), (85184, 25), (85184, 36), (85184, 49), (85184, 64), (85184, 81), (85184, 100), (85184, 121), (85184, 144), (85184, 169), (85184, 196), (85184, 225), (85184, 256), (85184, 289), (85184, 324), (85184, 361), (85184, 400), (85184, 441), (85184, 484), (85184, 529), (85184, 576), (85184, 625), (85184, 676), (85184, 729), (85184, 784), (85184, 841), (85184, 900), (85184, 961), (85184, 1024), (85184, 1089), (85184, 1156), (85184, 1225), (85184, 1296), (85184, 1369), (85184, 1444), (85184, 1521), (85184, 1600), (85184, 1681), (85184, 1764), (85184, 1849), (85184, 1936), (85184, 2025), (85184, 2116), (85184, 2209), (85184, 2304), (85184, 2401), (91125, 2500), (91125, 2401), (91125, 2304), (91125, 2209), (91125, 2116), (91125, 2025), (91125, 1936), (91125, 1849), (91125, 1764), (91125, 1681), (91125, 1600), (91125, 1521), (91125, 1444), (91125, 1369), (91125, 1296), (91125, 1225), (91125, 1156), (91125, 1089), (91125, 1024), (91125, 961), (91125, 900), (91125, 841), (91125, 784), (91125, 729), (91125, 676), (91125, 625), (91125, 576), (91125, 529), (91125, 484), (91125, 441), (91125, 400), (91125, 361), (91125, 324), (91125, 289), (91125, 256), (91125, 225), (91125, 196), (91125, 169), (91125, 144), (91125, 121), (91125, 100), (91125, 81), (91125, 64), (91125, 49), (91125, 36), (91125, 25), (91125, 16), (91125, 9), (91125, 4), (91125, 1), (91125, 0), (91125, 1), (91125, 4), (91125, 9), (91125, 16), (91125, 25), (91125, 36), (91125, 49), (91125, 64), (91125, 81), (91125, 100), (91125, 121), (91125, 144), (91125, 169), (91125, 196), (91125, 225), (91125, 256), (91125, 289), (91125, 324), (91125, 361), (91125, 400), (91125, 441), (91125, 484), (91125, 529), (91125, 576), (91125, 625), (91125, 676), (91125, 729), (91125, 784), (91125, 841), (91125, 900), (91125, 961), (91125, 1024), (91125, 1089), (91125, 1156), (91125, 1225), (91125, 1296), (91125, 1369), (91125, 1444), (91125, 1521), (91125, 1600), (91125, 1681), (91125, 1764), (91125, 1849), (91125, 1936), (91125, 2025), (91125, 2116), (91125, 2209), (91125, 2304), (91125, 2401), (97336, 2500), (97336, 2401), (97336, 2304), (97336, 2209), (97336, 2116), (97336, 2025), (97336, 1936), (97336, 1849), (97336, 1764), (97336, 1681), (97336, 1600), (97336, 1521), (97336, 1444), (97336, 1369), (97336, 1296), (97336, 1225), (97336, 1156), (97336, 1089), (97336, 1024), (97336, 961), (97336, 900), (97336, 841), (97336, 784), (97336, 729), (97336, 676), (97336, 625), (97336, 576), (97336, 529), (97336, 484), (97336, 441), (97336, 400), (97336, 361), (97336, 324), (97336, 289), (97336, 256), (97336, 225), (97336, 196), (97336, 169), (97336, 144), (97336, 121), (97336, 100), (97336, 81), (97336, 64), (97336, 49), (97336, 36), (97336, 25), (97336, 16), (97336, 9), (97336, 4), (97336, 1), (97336, 0), (97336, 1), (97336, 4), (97336, 9), (97336, 16), (97336, 25), (97336, 36), (97336, 49), (97336, 64), (97336, 81), (97336, 100), (97336, 121), (97336, 144), (97336, 169), (97336, 196), (97336, 225), (97336, 256), (97336, 289), (97336, 324), (97336, 361), (97336, 400), (97336, 441), (97336, 484), (97336, 529), (97336, 576), (97336, 625), (97336, 676), (97336, 729), (97336, 784), (97336, 841), (97336, 900), (97336, 961), (97336, 1024), (97336, 1089), (97336, 1156), (97336, 1225), (97336, 1296), (97336, 1369), (97336, 1444), (97336, 1521), (97336, 1600), (97336, 1681), (97336, 1764), (97336, 1849), (97336, 1936), (97336, 2025), (97336, 2116), (97336, 2209), (97336, 2304), (97336, 2401), (103823, 2500), (103823, 2401), (103823, 2304), (103823, 2209), (103823, 2116), (103823, 2025), (103823, 1936), (103823, 1849), (103823, 1764), (103823, 1681), (103823, 1600), (103823, 1521), (103823, 1444), (103823, 1369), (103823, 1296), (103823, 1225), (103823, 1156), (103823, 1089), (103823, 1024), (103823, 961), (103823, 900), (103823, 841), (103823, 784), (103823, 729), (103823, 676), (103823, 625), (103823, 576), (103823, 529), (103823, 484), (103823, 441), (103823, 400), (103823, 361), (103823, 324), (103823, 289), (103823, 256), (103823, 225), (103823, 196), (103823, 169), (103823, 144), (103823, 121), (103823, 100), (103823, 81), (103823, 64), (103823, 49), (103823, 36), (103823, 25), (103823, 16), (103823, 9), (103823, 4), (103823, 1), (103823, 0), (103823, 1), (103823, 4), (103823, 9), (103823, 16), (103823, 25), (103823, 36), (103823, 49), (103823, 64), (103823, 81), (103823, 100), (103823, 121), (103823, 144), (103823, 169), (103823, 196), (103823, 225), (103823, 256), (103823, 289), (103823, 324), (103823, 361), (103823, 400), (103823, 441), (103823, 484), (103823, 529), (103823, 576), (103823, 625), (103823, 676), (103823, 729), (103823, 784), (103823, 841), (103823, 900), (103823, 961), (103823, 1024), (103823, 1089), (103823, 1156), (103823, 1225), (103823, 1296), (103823, 1369), (103823, 1444), (103823, 1521), (103823, 1600), (103823, 1681), (103823, 1764), (103823, 1849), (103823, 1936), (103823, 2025), (103823, 2116), (103823, 2209), (103823, 2304), (103823, 2401), (110592, 2500), (110592, 2401), (110592, 2304), (110592, 2209), (110592, 2116), (110592, 2025), (110592, 1936), (110592, 1849), (110592, 1764), (110592, 1681), (110592, 1600), (110592, 1521), (110592, 1444), (110592, 1369), (110592, 1296), (110592, 1225), (110592, 1156), (110592, 1089), (110592, 1024), (110592, 961), (110592, 900), (110592, 841), (110592, 784), (110592, 729), (110592, 676), (110592, 625), (110592, 576), (110592, 529), (110592, 484), (110592, 441), (110592, 400), (110592, 361), (110592, 324), (110592, 289), (110592, 256), (110592, 225), (110592, 196), (110592, 169), (110592, 144), (110592, 121), (110592, 100), (110592, 81), (110592, 64), (110592, 49), (110592, 36), (110592, 25), (110592, 16), (110592, 9), (110592, 4), (110592, 1), (110592, 0), (110592, 1), (110592, 4), (110592, 9), (110592, 16), (110592, 25), (110592, 36), (110592, 49), (110592, 64), (110592, 81), (110592, 100), (110592, 121), (110592, 144), (110592, 169), (110592, 196), (110592, 225), (110592, 256), (110592, 289), (110592, 324), (110592, 361), (110592, 400), (110592, 441), (110592, 484), (110592, 529), (110592, 576), (110592, 625), (110592, 676), (110592, 729), (110592, 784), (110592, 841), (110592, 900), (110592, 961), (110592, 1024), (110592, 1089), (110592, 1156), (110592, 1225), (110592, 1296), (110592, 1369), (110592, 1444), (110592, 1521), (110592, 1600), (110592, 1681), (110592, 1764), (110592, 1849), (110592, 1936), (110592, 2025), (110592, 2116), (110592, 2209), (110592, 2304), (110592, 2401), (117649, 2500), (117649, 2401), (117649, 2304), (117649, 2209), (117649, 2116), (117649, 2025), (117649, 1936), (117649, 1849), (117649, 1764), (117649, 1681), (117649, 1600), (117649, 1521), (117649, 1444), (117649, 1369), (117649, 1296), (117649, 1225), (117649, 1156), (117649, 1089), (117649, 1024), (117649, 961), (117649, 900), (117649, 841), (117649, 784), (117649, 729), (117649, 676), (117649, 625), (117649, 576), (117649, 529), (117649, 484), (117649, 441), (117649, 400), (117649, 361), (117649, 324), (117649, 289), (117649, 256), (117649, 225), (117649, 196), (117649, 169), (117649, 144), (117649, 121), (117649, 100), (117649, 81), (117649, 64), (117649, 49), (117649, 36), (117649, 25), (117649, 16), (117649, 9), (117649, 4), (117649, 1), (117649, 0), (117649, 1), (117649, 4), (117649, 9), (117649, 16), (117649, 25), (117649, 36), (117649, 49), (117649, 64), (117649, 81), (117649, 100), (117649, 121), (117649, 144), (117649, 169), (117649, 196), (117649, 225), (117649, 256), (117649, 289), (117649, 324), (117649, 361), (117649, 400), (117649, 441), (117649, 484), (117649, 529), (117649, 576), (117649, 625), (117649, 676), (117649, 729), (117649, 784), (117649, 841), (117649, 900), (117649, 961), (117649, 1024), (117649, 1089), (117649, 1156), (117649, 1225), (117649, 1296), (117649, 1369), (117649, 1444), (117649, 1521), (117649, 1600), (117649, 1681), (117649, 1764), (117649, 1849), (117649, 1936), (117649, 2025), (117649, 2116), (117649, 2209), (117649, 2304), (117649, 2401)]\"]]", 
      "solution": "def najblizji(t):\r\n    \"\"\"Vrni par indeksov (i,j), da je (t[i], t[j]) par najbli\u017ejih to\u010dk.\"\"\"\r\n\r\n    ix = uredi_po_x(t) # _indeksi_ to\u010dk iz t, urejeni po osi x\r\n    iy = uredi_po_y(t) # _indexi_ to\u010dk iz t, urejeni po osi y\r\n\r\n    def dist2(u,v):\r\n        \"\"\"Kvadrat razdalje med to\u010dkama u in v.\"\"\"\r\n        dx = u[0] - v[0]\r\n        dy = u[1] - v[1]\r\n        return dx*dx + dy*dy\r\n\r\n    def isci(i,j):\r\n        '''V podtabeli a[ix[i]:ix[(j+1)]] poi\u0161\u010di par najbli\u017ejih to\u010dk.'''\r\n        if i >= j:\r\n            # podtabela ima 0 ali 1 element\r\n            return None\r\n        elif i + 1 == j:\r\n            # podtabela ima 2 elementa\r\n            return (ix[i], iy[j])\r\n        else: # podtabela ima ve\u010d kot dva elementa\r\n\r\n            # deli\r\n\r\n            k = (i + j) // 2 # sredina podtabele\r\n            levo = isci(i,k)\r\n            desno = isci(k+1,j)\r\n\r\n            # vladaj\r\n\r\n            # ugotovimo, ali je bolj\u0161i kandidat na levi ali na desni\r\n            if levo is None:\r\n                (i_min, j_min) = desno\r\n            elif desno is None:\r\n                (i_min, j_min) = levo\r\n            else:\r\n                (i_levo, j_levo) = levo\r\n                (i_desno, j_desno) = desno\r\n                d_levo = dist2(t[i_levo], t[j_levo])\r\n                d_desno = dist2(t[i_desno], t[j_desno])\r\n                if d_levo < d_desno:\r\n                    (i_min, j_min) = (i_levo, j_levo)\r\n                else:\r\n                    (i_min, j_min) = (i_desno, j_desno)\r\n            d = dist2(t[i_min], t[j_min])\r\n            # zdaj je (i_min, j_min) indeks najbolj\u0161ega kandidata in d kvadrat razdalje\r\n            # med t[i_min] in t[j_min]\r\n\r\n            # izra\u010dunamo pas debeline 2*d\r\n            x = (t[ix[k]][0] + t[ix[k+1]][0]) / 2 # koordinata vertikale, ki deli obmo\u010dje\r\n            pas = [j for j in iy if abs(t[j][0] - x)**2 <= d]\r\n            # po pasu i\u0161\u010demo bolj\u0161ega kandidata od (i_min, j_min)\r\n            for p in range(len(pas)):\r\n                r = p + 1\r\n                while r < len(pas) and (t[iy[r]][1] - t[iy[p]][1])**2 < d and r - p <= 6:\r\n                    e = dist2(t[iy[p]], t[iy[r]])\r\n                    if e < d:\r\n                        d = e\r\n                        i_min = p\r\n                        j_min = r\r\n                    r = r + 1\r\n            return (i_min, j_min)\r\n\r\n    return isci(0,len(t)-1)", 
      "problem": 278, 
      "validation": "Check.equal(\"\"\"najblizji([])\"\"\", None)\r\nCheck.equal(\"\"\"najblizji([(1,2)])\"\"\", None)\r\nCheck.equal(\"\"\"najblizji([(1,2), (3,4)])\"\"\", (0,1))\r\nCheck.equal(\"\"\"najblizji([(1,2), (3,4), (10, 20)])\"\"\", (0,1))\r\nCheck.equal(\"\"\"najblizji([(i*i, 0) for i in range(0,10)])\"\"\", (0,1))\r\nCheck.equal(\"\"\"najblizji([(0, i*i) for i in range(0,10)])\"\"\", (0,1))\r\nCheck.equal(\"\"\"najblizji([(i**3, i) for i in range(-10,10) if i != 1])\"\"\", (9,10))\r\n\r\nCheck.challenge([(i*i*i, j*j) for i in range(50) for j in range(50)])\r\nCheck.challenge([(i*i*i, j*j) for i in range(-50,50) for j in range(-50,50)])"
    }
  }, 
  {
    "pk": 818, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `sled((d,m,n))`, ki vrne sled redke matrike, predstavljene\ns trojico `(d,m,n)`. Sled je vsota diagonalnih elementov.", 
      "timestamp": "2012-10-01 12:38:42", 
      "challenge": "[[\"None\", \"741321\"]]", 
      "solution": "def sled(dmn):\n    (d,m,n) = dmn\n    return sum([x for ((i,j),x) in d.items() if i == j])", 
      "problem": 256, 
      "validation": "Check.equal(\"\"\"sled(({(0,0) : 1, (0,4) : 2, (1,1) : 4, (1,4): 3, (3,5) : 5}, 4, 6))\"\"\",\n            5)\n\nCheck.equal(\"\"\"sled(({(i,i):i for i in range(101)}, 100, 100))\"\"\",\n            5050)\n\nCheck.challenge(sled(({(i,i):i*i*i for i in range(42)}, 50, 50)))"
    }
  }, 
  {
    "pk": 89, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "V spremenljivko `preziveli` shranite podrazporeditev s podatki\no pre\u017eivelih v 1. in 3. razredu", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"NA\", \"5, 13, 1, 14, 57, 75, 140, 76\"]]", 
      "solution": "preziveli <- Titanic[c(\"1st\", \"3rd\"), , , \"Yes\"]", 
      "problem": 34, 
      "validation": "check$equal(preziveli[, \"Male\", \"Child\"], c(5, 13))\ncheck$equal(preziveli[, \"Female\", \"Adult\"], c(140, 76))\ncheck$challenge(toString(preziveli))"
    }
  }, 
  {
    "pk": 505, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `najvecIzhodnih(g)`, ki vrne tisto vozli\u0161\u010de\nusmerjenega grafa `g`, iz katerega vodi najve\u010d povezav.\n\u010ce je takih vozli\u0161\u010d ve\u010d, lahko funkcija vrne poljubno izmed njih.", 
      "timestamp": "2012-05-31 11:35:12", 
      "challenge": "[]", 
      "solution": "def najvecIzhodnih(g):\n    max_izhodna = max(len(sosedi) for sosedi in g.values())\n    for v, sosedi in g.items():\n        if len(sosedi) == max_izhodna:\n            return v", 
      "problem": 164, 
      "validation": "Check.equal('najvecIzhodnih({1: {3}, 2: {1, 3}, 3: set()})', 2)\nCheck.equal('najvecIzhodnih({1: {3}, 2: set(), 3: set()})', 1)\nCheck.equal('najvecIzhodnih({1: {3, 2}, 2: {1}, 3: {1}})', 1)"
    }
  }, 
  {
    "pk": 900, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Napi\u0161ite funkcijo `konflikt(besede)`, ki sprejme seznam besed, vrne pa\nnabor prvih dveh besed v seznamu, ki jima pripada ista \u0161tevilka.\n\u010ce takega para ni, naj funkcija ne vrne ni\u010desar.\n\n    >>> konflikt(['mama', 'ata', 'teta', 'stric'])\n    >>> konflikt(['redno', 'bedno', 'sedmo', 'osmo'])\n    ('redno', 'sedmo')", 
      "timestamp": "2013-01-16 17:02:45", 
      "challenge": "[]", 
      "solution": "def konflikt(besede):\n    pregledane = {}\n    for beseda in besede:\n        st = v_stevilko(beseda)\n        if st in pregledane:\n            return (pregledane[st], beseda)\n        else:\n            pregledane[st] = beseda", 
      "problem": 308, 
      "validation": "Check.equal(\"konflikt(['spopad', 'bitka', 'katastrofa', 'propad'])\", ('spopad', 'propad'))\nCheck.equal(\"konflikt(['redno', 'bedno', 'sedmo', 'osmo'])\", ('redno', 'sedmo'))\nCheck.equal(\"konflikt(['mama', 'ata', 'teta', 'stric'])\", None)"
    }
  }, 
  {
    "pk": 673, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Kochovo sne\u017einko dobimo tako, da skupaj staknemo tri Kochove krivulje,\ntako da je kot med njimi 60 stopinj (torej postavimo Kochove krivulje\nna stranice enakostrani\u010dnega trikotnika). Funkcijo poimenujte\n`KochovaSnezinka(n, d)`. Funkcija naj vrne `None`.", 
      "timestamp": "2012-05-27 23:52:28", 
      "challenge": "[]", 
      "solution": "def KochovaSnezinka(n, d):\n    kochovaKrivulja(n,d)\n    T.rt(120)\n    kochovaKrivulja(n,d)\n    T.rt(120)\n    kochovaKrivulja(n,d)", 
      "problem": 217, 
      "validation": "T.clear()\nT.goto(-100,0)\nKochovaSnezinka(5,243)\nT.update()\nCheck.equal(\"print('Sami preverite, da je sne\u017einka pravilna')\", None)"
    }
  }, 
  {
    "pk": 628, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavi funkcijo `relativno(seznam,i,j)`, ki poi\u0161\u010de relativno stanje po\r\ndnevu `j`, \u010de za\u010dnemo meriti od `i`-tega dneva naprej.", 
      "timestamp": "2012-03-27 08:52:31", 
      "challenge": "[]", 
      "solution": "def relativno(seznam, i, j):\r\n    s = [0] + stanja(seznam)\r\n    return s[j] - s[i]", 
      "problem": 206, 
      "validation": "Check.equal('relativno([1, 2, 3], 2, 3)', 3)\r\nCheck.equal('relativno([1, -5, -20, 30], 0, 4)', 6)\r\nCheck.equal('relativno([10, -5, 20, -6], 1, 2)', -5)\r\nCheck.equal('relativno([10, -5, 20, -6], 2, 4)', 14)"
    }
  }, 
  {
    "pk": 703, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Napi\u0161ite funkcijo `poisciPalcka(imena)`, ki danem seznamu imen \npoi\u0161\u010de najkraj\u0161e ime, katerega te\u017ea imena je enaka, tudi \u010de ime zapi\u0161emo dvakrat zapovrstjo.\n\u010ce takega ni, naj funkcija vrne None.", 
      "timestamp": "2012-06-10 01:11:13", 
      "challenge": "[]", 
      "solution": "def poisciPalcka( imena ):\n    palcki = [ime for ime in imena if tezaImena(ime)==tezaImena(ime+ime)]\n    if palcki==[]:\n        return None\n    else:\n        me = palcki[0]\n        for e in palcki[1:]:\n            if len(e) < len(me):\n                me = e\n        return me", 
      "problem": 228, 
      "validation": "Check.equal('poisciPalcka( [\"Ana\",\"Beno\",\"Maja\",\"Mojca\"] )', \"Maja\" )\nCheck.equal('poisciPalcka( [\"Beno\",\"Marjana\",\"\u017diga\"] )', None )"
    }
  }, 
  {
    "pk": 735, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `povprecje(s)`, ki izra\u010duna povpre\u010dje realnih\n\u0161tevil danega seznama. Za prazen seznam naj funkcija vrne 0.", 
      "timestamp": "2012-07-12 09:56:50", 
      "challenge": "[]", 
      "solution": "def povprecje(s):\n    n=len(s)\n    if n==0:\n        return 0\n    return sum(s)/n", 
      "problem": 235, 
      "validation": "Check.equal(\"povprecje([1,2,3,4,5])\", 3)\nCheck.equal(\"povprecje([-4.33, 10.83, -2.17, 13.0, 0.0, 15.17, 2.17, 17.33, 4.33, 19.5])\", 7.583)\nCheck.equal(\"povprecje([])\", 0)"
    }
  }, 
  {
    "pk": 530, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Vpi\u0161ite izraz, katerega vrednost je enaka $1 + 2 + 3 + 4 + 5$.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "15", 
      "problem": 174, 
      "validation": "x = eval(Check.current[\"solution\"])\nif x != 15:\n   Check.error(\"Izraz je napa\u010den.\")"
    }
  }, 
  {
    "pk": 466, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Borzni posrednik je delnice v preteklosti \u017ee kupil,\nzanima pa ga, kdaj se mu je najbolj spla\u010dalo delnico prodati.\nSestavi funkcijo `kdajProdam(cene)`, ki ugotovi, kdaj bi borzni\nposrednik imel najve\u010dji zaslu\u017eek. Kot argumente sprejme seznam\ncen delnic po dnevih, vrne pa naj dan, ko se mu delnico najbolj\nspla\u010da prodati (dnevi se za\u010dnejo \u0161teti z ni\u010d - prvi element v\nseznamu cen je torej vrednost delnice na 0. dan).\nPrimer:\n\n     >>> kdajprodam([30, 40, 20, 45, 15, 28])\n     3", 
      "timestamp": "2012-04-16 12:56:47", 
      "challenge": "[]", 
      "solution": "def kdajProdam(cene):\n    return cene.index(max(cene))", 
      "problem": 154, 
      "validation": "Check.equal('kdajProdam([1, 1, 1])', 0)\nCheck.equal('kdajProdam([30, 40, 20, 45, 15, 28])', 3)\nCheck.equal('kdajProdam([15, 45, 38, 12, 45, 44])', 1)\nCheck.equal('kdajProdam([124, 125, 177, 155, 156, 154, 191, 156, 130, 190, 168, 194, 173, 142, 106, 128, 142, 114, 115, 197, 151, 119, 116, 188, 146, 178, 141, 146, 146, 151, 105, 152, 101, 109, 151, 118, 117, 181, 199, 162, 120, 183, 162, 136, 145, 143, 185, 161, 193, 157, 170, 193, 107, 152, 133, 175, 121, 114, 182, 147, 143, 129, 126, 146, 146, 158, 197, 133, 135, 134, 164, 170, 194, 105, 121, 190, 134, 170, 131, 178, 135, 144, 148, 189, 144, 101, 158, 177, 175, 117, 161, 195, 144, 123, 125, 143, 157, 162, 192, 186])', 38)"
    }
  }, 
  {
    "pk": 608, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `pravokotnik(krogi)`, ki poi\u0161\u010de najmanj\u0161i pravokotnik,\nki vsebuje unijo vseh krogov iz danega seznama `krogi`. Pravokotnik\nnaj vrne kot nabor $(x_{min},y_{min},x_{max},y_{max})$, torej\nnajorej koordinati ogli\u0161\u010da spodaj levo, nato pa koordinati ogli\u0161\u010da zgoraj\ndesno", 
      "timestamp": "2012-03-30 12:21:55", 
      "challenge": "[]", 
      "solution": "def pravokotnik(krogi):\n    sezA=[]\n    sezB=[]\n    for (xi, _, ri) in krogi:\n        sezA.append(xi - ri)\n        sezB.append(xi + ri)\n    sezC=[]\n    sezD=[]\n    for (_, yi, ri) in krogi:\n        sezC.append(yi - ri)\n        sezD.append(yi + ri)\n    a = min(sezA)\n    b = max(sezB)\n    c = min(sezC)\n    d = max(sezD)\n    return (a,c,b,d)", 
      "problem": 201, 
      "validation": "Check.equal('pravokotnik([(0, 0, 1)])', (-1,-1,1,1)) # \"Enotski krog (0, 0, 1) je vsebovan v pravokotniku z ogli\u0161\u010di (-1,-1) in (1,1)\")\nCheck.equal('pravokotnik([(0, 0, 1), (2, 2, 2)])', (-1,-1,4,4)) #, \"Kroga (0, 0, 1) in (2, 2, 2) sta vsebovana v pravokotniku z ogli\u0161\u010di (-1,-1) in (4,4).\")\nCheck.equal('pravokotnik([(-1, 1, 1), (2, -2, 1)])', (-2,-3,3,2))#, \"Kroga (-1, 1, 1) in (2, -2, 1) sta vsebovana v pravokotniku z ogli\u0161\u010di (-2,-3) in (3,2).\")"
    }
  }, 
  {
    "pk": 380, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "S pomo\u010djo datoteke 'besedilo.txt' na spletni u\u010dilnici sestavi\r\nslovar digramov v slovenskih besedilih. Pri tem upo\u0161tevaj 25\r\n\u010drk slovenske abecede in presledke, ostale znake pa ignoriraj.\r\n\r\nMetodi naj bo ime digrami, vrne pa naj slovar zgrajenih digramov.\r\nKot argument naj sprejme ime datoteke, iz katere prebere besede.\r\n\r\nPozor: testni program za to nalogo ne obstaja, zato mora\u0161\r\nnjeno delovanje preveriti sam.\r\n\r\nVe\u010d o digramih si preberite na Wikipedii na naslovu\r\nhttp://en.wikipedia.org/wiki/Bigram .\r\n", 
      "timestamp": "2012-05-12 23:21:53", 
      "challenge": "[]", 
      "solution": "def digrami(datoteka):\r\n    slovar = dict()\r\n    st=0\r\n    f=open(datoteka,\"r\",encoding=\"utf-8\")\r\n    # Poiscemo prvo crko\r\n    c1=f.read(1).upper()\r\n    while not c1.isalpha():\r\n        c1=f.read(1).upper()\r\n        \r\n    for vrstica in f:\r\n        for c2 in vrstica:\r\n            # Vse bele znake (nova vrstica, tab, presledek)\r\n            # spremenimo v presledke, \u010drke naredimo velike\r\n            c2=' ' if c2.isspace() else c2.upper()\r\n            # \u010de je \u010drka ali presledek, dodamo digram v slovar\r\n            if c2.isalpha() or c2.isspace():\r\n                if c1 == ' ' and c2 == ' ': continue # No\u010demo dvojnih presledkov\r\n                digram=c1+c2\r\n                slovar[digram] = slovar.get(digram,0)+1\r\n                st+=1\r\n                c1=c2\r\n    #Izra\u010dunamo \u0161e frekvence\r\n    for k,v in slovar.items():\r\n        slovar[k]=v/st    \r\n    return slovar", 
      "problem": 132, 
      "validation": ""
    }
  }, 
  {
    "pk": 510, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `sestej(imeDatoteke)`, ki iz datoteke prebere vrstice,\r\nnato pa izra\u010duna vsoto vrednosti vseh predmetov.\r\n\r\nPozor: nekateri predmeti se lahko pojavijo ve\u010dkrat in z razli\u010dnimi cenami.\r\nV tem primeru upo\u0161tevajte najni\u017ejo ceno.\r\n\r\nNa primer, iz datoteke\r\n\r\n    ortopedsko oblikovana duda,18,7\r\n    avtomati\u010dno brisalo ritke,231,10\r\n    ortopedsko oblikovana duda,15,7\r\n    ljubezen,0,1\r\n    ortopedsko oblikovana duda,21,7\r\n    ljubezen,1,1\r\n\r\nbi dobili vsoto $231 + 15 + 0 = 246$.", 
      "timestamp": "2012-06-06 14:35:55", 
      "challenge": "[]", 
      "solution": "def sestej(imeDatoteke):\r\n    seznam=preberi(imeDatoteke)\r\n    predmeti=dict()\r\n    for el in seznam:\r\n        v=predmeti.get(el[0])\r\n        if v!= None:\r\n            if el[1] >= v: continue\r\n        predmeti[el[0]]=el[1]\r\n    \r\n    return sum(predmeti.values())", 
      "problem": 165, 
      "validation": "with open(\"_seznam.txt\", \"w\") as f:\r\n    print(\"ortopedsko oblikovana duda,18,4\", file=f)\r\n    print(\"avtomati\u010dno brisalo ritke,231,10\", file=f)\r\n    print(\"ortopedsko oblikovana duda,15,7\", file=f)\r\n    print(\"ljubezen,0,1\", file=f)\r\n    print(\"ortopedsko oblikovana duda,21,5\", file=f)\r\n    print(\"ljubezen,1,1\", file=f)\r\nvsota = sestej(\"_seznam.txt\")\r\nif vsota != 246:\r\n    Check.error(\"Pri primeru iz navodil vsota zna\u0161a {0} namesto 246.\".format(vsota))\r\nos.remove(\"_seznam.txt\")"
    }
  }, 
  {
    "pk": 376, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `seznami(ime_vhodne, ime_izhodne)`, ki bo podatke iz\nvhodne datoteke zapisala v izhodno datoteko v obliki neurejenega seznama.\nV vhodni datoteki se vrstice seznamov za\u010dnejo z zvezdico.\n\nNa primer, \u010de je v datoteki `seznami.txt` zapisano:\n\n    V trgovini moram kupiti:\n    * jajca,\n    * kruh,\n    * moko.\n    Na poti nazaj moram:\n    * obiskati sosedo.\n\nbo po klicu `seznami('seznami.txt', 'seznami.html')` v datoteki `seznami.html`:\n\n    V trgovini moram kupiti:\n    <ul>\n      <li>jajca,</li>\n      <li>kruh,</li>\n      <li>moko.</li>\n    </ul>\n    Na poti nazaj moram:\n    <ul>\n      <li>obiskati sosedo.</li>\n    </ul>", 
      "timestamp": "2012-05-13 11:53:18", 
      "challenge": "[]", 
      "solution": "def seznami(ime_vhodne, ime_izhodne):\n    seznam = False\n    with open(ime_vhodne) as vhodna:\n        with open(ime_izhodne, 'w') as izhodna:\n            for vrstica in vhodna:\n                if vrstica[0] == '*':\n                    if not seznam:\n                        print('<ul>', file=izhodna)\n                        seznam = True\n                    print('  <li>{0}</li>'.format(vrstica[2:-1]), file=izhodna)\n                else:\n                    if seznam:\n                        print('</ul>', file=izhodna)\n                        seznam = False\n                    print(vrstica, file=izhodna, end='')\n            if seznam: print('</ul>', file=izhodna)", 
      "problem": 131, 
      "validation": "in_example = [\"V trgovini moram kupiti:\",\n              \"* jajca,\",\n              \"* kruh,\",\n              \"* moko.\",\n              \"Na poti nazaj moram:\",\n              \"* obiskati sosedo.\"]\nout_example = [\"V trgovini moram kupiti:\",\n               \"<ul>\",\n               \"  <li>jajca,</li>\",\n               \"  <li>kruh,</li>\",\n               \"  <li>moko.</li>\",\n               \"</ul>\",\n               \"Na poti nazaj moram:\",\n               \"<ul>\",\n               \"  <li>obiskati sosedo.</li>\",\n               \"</ul>\"]\n\n\nwith Check.in_out_file(in_example, out_example) as (fi, fo):\n    seznami(fi, fo)"
    }
  }, 
  {
    "pk": 176, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `najblizji(t)`, ki sprejme tabelo to\u010dk v ravnini in vrne\n*indeksa* `(i,j)` tistih dveh to\u010dk `t[i]` in `t[j]`, ki sta si najbli\u017eji. \u010ce\nje tabela `t` prazna ali vsebuje samo eno to\u010dko, naj funkcija vrne `None`.\n\nFunkcija mora delovati v \u010dasu $O(n \\log n)$ ali vsaj $O(n (\\log n)^2)$.\n\nNamig: namesto, da bi primerjali razdalje med to\u010dkami, lahko primerjamo\nkvadrate razdalj in se s tem izognemo ra\u010dunanju kvadratnih korenov. Sestavite\npomo\u017eno funkcijo, ki vrne kvadrat razdalje med dvema to\u010dkama.", 
      "timestamp": "2012-12-10 17:07:53", 
      "challenge": "[[\"None\", \"[(0, 0), (0, 1), (0, 4), (0, 9), (0, 16), (0, 25), (0, 36), (0, 49), (0, 64), (0, 81), (0, 100), (0, 121), (0, 144), (0, 169), (0, 196), (0, 225), (0, 256), (0, 289), (0, 324), (0, 361), (0, 400), (0, 441), (0, 484), (0, 529), (0, 576), (0, 625), (0, 676), (0, 729), (0, 784), (0, 841), (0, 900), (0, 961), (0, 1024), (0, 1089), (0, 1156), (0, 1225), (0, 1296), (0, 1369), (0, 1444), (0, 1521), (0, 1600), (0, 1681), (0, 1764), (0, 1849), (0, 1936), (0, 2025), (0, 2116), (0, 2209), (0, 2304), (0, 2401), (1, 0), (1, 1), (1, 4), (1, 9), (1, 16), (1, 25), (1, 36), (1, 49), (1, 64), (1, 81), (1, 100), (1, 121), (1, 144), (1, 169), (1, 196), (1, 225), (1, 256), (1, 289), (1, 324), (1, 361), (1, 400), (1, 441), (1, 484), (1, 529), (1, 576), (1, 625), (1, 676), (1, 729), (1, 784), (1, 841), (1, 900), (1, 961), (1, 1024), (1, 1089), (1, 1156), (1, 1225), (1, 1296), (1, 1369), (1, 1444), (1, 1521), (1, 1600), (1, 1681), (1, 1764), (1, 1849), (1, 1936), (1, 2025), (1, 2116), (1, 2209), (1, 2304), (1, 2401), (8, 0), (8, 1), (8, 4), (8, 9), (8, 16), (8, 25), (8, 36), (8, 49), (8, 64), (8, 81), (8, 100), (8, 121), (8, 144), (8, 169), (8, 196), (8, 225), (8, 256), (8, 289), (8, 324), (8, 361), (8, 400), (8, 441), (8, 484), (8, 529), (8, 576), (8, 625), (8, 676), (8, 729), (8, 784), (8, 841), (8, 900), (8, 961), (8, 1024), (8, 1089), (8, 1156), (8, 1225), (8, 1296), (8, 1369), (8, 1444), (8, 1521), (8, 1600), (8, 1681), (8, 1764), (8, 1849), (8, 1936), (8, 2025), (8, 2116), (8, 2209), (8, 2304), (8, 2401), (27, 0), (27, 1), (27, 4), (27, 9), (27, 16), (27, 25), (27, 36), (27, 49), (27, 64), (27, 81), (27, 100), (27, 121), (27, 144), (27, 169), (27, 196), (27, 225), (27, 256), (27, 289), (27, 324), (27, 361), (27, 400), (27, 441), (27, 484), (27, 529), (27, 576), (27, 625), (27, 676), (27, 729), (27, 784), (27, 841), (27, 900), (27, 961), (27, 1024), (27, 1089), (27, 1156), (27, 1225), (27, 1296), (27, 1369), (27, 1444), (27, 1521), (27, 1600), (27, 1681), (27, 1764), (27, 1849), (27, 1936), (27, 2025), (27, 2116), (27, 2209), (27, 2304), (27, 2401), (64, 0), (64, 1), (64, 4), (64, 9), (64, 16), (64, 25), (64, 36), (64, 49), (64, 64), (64, 81), (64, 100), (64, 121), (64, 144), (64, 169), (64, 196), (64, 225), (64, 256), (64, 289), (64, 324), (64, 361), (64, 400), (64, 441), (64, 484), (64, 529), (64, 576), (64, 625), (64, 676), (64, 729), (64, 784), (64, 841), (64, 900), (64, 961), (64, 1024), (64, 1089), (64, 1156), (64, 1225), (64, 1296), (64, 1369), (64, 1444), (64, 1521), (64, 1600), (64, 1681), (64, 1764), (64, 1849), (64, 1936), (64, 2025), (64, 2116), (64, 2209), (64, 2304), (64, 2401), (125, 0), (125, 1), (125, 4), (125, 9), (125, 16), (125, 25), (125, 36), (125, 49), (125, 64), (125, 81), (125, 100), (125, 121), (125, 144), (125, 169), (125, 196), (125, 225), (125, 256), (125, 289), (125, 324), (125, 361), (125, 400), (125, 441), (125, 484), (125, 529), (125, 576), (125, 625), (125, 676), (125, 729), (125, 784), (125, 841), (125, 900), (125, 961), (125, 1024), (125, 1089), (125, 1156), (125, 1225), (125, 1296), (125, 1369), (125, 1444), (125, 1521), (125, 1600), (125, 1681), (125, 1764), (125, 1849), (125, 1936), (125, 2025), (125, 2116), (125, 2209), (125, 2304), (125, 2401), (216, 0), (216, 1), (216, 4), (216, 9), (216, 16), (216, 25), (216, 36), (216, 49), (216, 64), (216, 81), (216, 100), (216, 121), (216, 144), (216, 169), (216, 196), (216, 225), (216, 256), (216, 289), (216, 324), (216, 361), (216, 400), (216, 441), (216, 484), (216, 529), (216, 576), (216, 625), (216, 676), (216, 729), (216, 784), (216, 841), (216, 900), (216, 961), (216, 1024), (216, 1089), (216, 1156), (216, 1225), (216, 1296), (216, 1369), (216, 1444), (216, 1521), (216, 1600), (216, 1681), (216, 1764), (216, 1849), (216, 1936), (216, 2025), (216, 2116), (216, 2209), (216, 2304), (216, 2401), (343, 0), (343, 1), (343, 4), (343, 9), (343, 16), (343, 25), (343, 36), (343, 49), (343, 64), (343, 81), (343, 100), (343, 121), (343, 144), (343, 169), (343, 196), (343, 225), (343, 256), (343, 289), (343, 324), (343, 361), (343, 400), (343, 441), (343, 484), (343, 529), (343, 576), (343, 625), (343, 676), (343, 729), (343, 784), (343, 841), (343, 900), (343, 961), (343, 1024), (343, 1089), (343, 1156), (343, 1225), (343, 1296), (343, 1369), (343, 1444), (343, 1521), (343, 1600), (343, 1681), (343, 1764), (343, 1849), (343, 1936), (343, 2025), (343, 2116), (343, 2209), (343, 2304), (343, 2401), (512, 0), (512, 1), (512, 4), (512, 9), (512, 16), (512, 25), (512, 36), (512, 49), (512, 64), (512, 81), (512, 100), (512, 121), (512, 144), (512, 169), (512, 196), (512, 225), (512, 256), (512, 289), (512, 324), (512, 361), (512, 400), (512, 441), (512, 484), (512, 529), (512, 576), (512, 625), (512, 676), (512, 729), (512, 784), (512, 841), (512, 900), (512, 961), (512, 1024), (512, 1089), (512, 1156), (512, 1225), (512, 1296), (512, 1369), (512, 1444), (512, 1521), (512, 1600), (512, 1681), (512, 1764), (512, 1849), (512, 1936), (512, 2025), (512, 2116), (512, 2209), (512, 2304), (512, 2401), (729, 0), (729, 1), (729, 4), (729, 9), (729, 16), (729, 25), (729, 36), (729, 49), (729, 64), (729, 81), (729, 100), (729, 121), (729, 144), (729, 169), (729, 196), (729, 225), (729, 256), (729, 289), (729, 324), (729, 361), (729, 400), (729, 441), (729, 484), (729, 529), (729, 576), (729, 625), (729, 676), (729, 729), (729, 784), (729, 841), (729, 900), (729, 961), (729, 1024), (729, 1089), (729, 1156), (729, 1225), (729, 1296), (729, 1369), (729, 1444), (729, 1521), (729, 1600), (729, 1681), (729, 1764), (729, 1849), (729, 1936), (729, 2025), (729, 2116), (729, 2209), (729, 2304), (729, 2401), (1000, 0), (1000, 1), (1000, 4), (1000, 9), (1000, 16), (1000, 25), (1000, 36), (1000, 49), (1000, 64), (1000, 81), (1000, 100), (1000, 121), (1000, 144), (1000, 169), (1000, 196), (1000, 225), (1000, 256), (1000, 289), (1000, 324), (1000, 361), (1000, 400), (1000, 441), (1000, 484), (1000, 529), (1000, 576), (1000, 625), (1000, 676), (1000, 729), (1000, 784), (1000, 841), (1000, 900), (1000, 961), (1000, 1024), (1000, 1089), (1000, 1156), (1000, 1225), (1000, 1296), (1000, 1369), (1000, 1444), (1000, 1521), (1000, 1600), (1000, 1681), (1000, 1764), (1000, 1849), (1000, 1936), (1000, 2025), (1000, 2116), (1000, 2209), (1000, 2304), (1000, 2401), (1331, 0), (1331, 1), (1331, 4), (1331, 9), (1331, 16), (1331, 25), (1331, 36), (1331, 49), (1331, 64), (1331, 81), (1331, 100), (1331, 121), (1331, 144), (1331, 169), (1331, 196), (1331, 225), (1331, 256), (1331, 289), (1331, 324), (1331, 361), (1331, 400), (1331, 441), (1331, 484), (1331, 529), (1331, 576), (1331, 625), (1331, 676), (1331, 729), (1331, 784), (1331, 841), (1331, 900), (1331, 961), (1331, 1024), (1331, 1089), (1331, 1156), (1331, 1225), (1331, 1296), (1331, 1369), (1331, 1444), (1331, 1521), (1331, 1600), (1331, 1681), (1331, 1764), (1331, 1849), (1331, 1936), (1331, 2025), (1331, 2116), (1331, 2209), (1331, 2304), (1331, 2401), (1728, 0), (1728, 1), (1728, 4), (1728, 9), (1728, 16), (1728, 25), (1728, 36), (1728, 49), (1728, 64), (1728, 81), (1728, 100), (1728, 121), (1728, 144), (1728, 169), (1728, 196), (1728, 225), (1728, 256), (1728, 289), (1728, 324), (1728, 361), (1728, 400), (1728, 441), (1728, 484), (1728, 529), (1728, 576), (1728, 625), (1728, 676), (1728, 729), (1728, 784), (1728, 841), (1728, 900), (1728, 961), (1728, 1024), (1728, 1089), (1728, 1156), (1728, 1225), (1728, 1296), (1728, 1369), (1728, 1444), (1728, 1521), (1728, 1600), (1728, 1681), (1728, 1764), (1728, 1849), (1728, 1936), (1728, 2025), (1728, 2116), (1728, 2209), (1728, 2304), (1728, 2401), (2197, 0), (2197, 1), (2197, 4), (2197, 9), (2197, 16), (2197, 25), (2197, 36), (2197, 49), (2197, 64), (2197, 81), (2197, 100), (2197, 121), (2197, 144), (2197, 169), (2197, 196), (2197, 225), (2197, 256), (2197, 289), (2197, 324), (2197, 361), (2197, 400), (2197, 441), (2197, 484), (2197, 529), (2197, 576), (2197, 625), (2197, 676), (2197, 729), (2197, 784), (2197, 841), (2197, 900), (2197, 961), (2197, 1024), (2197, 1089), (2197, 1156), (2197, 1225), (2197, 1296), (2197, 1369), (2197, 1444), (2197, 1521), (2197, 1600), (2197, 1681), (2197, 1764), (2197, 1849), (2197, 1936), (2197, 2025), (2197, 2116), (2197, 2209), (2197, 2304), (2197, 2401), (2744, 0), (2744, 1), (2744, 4), (2744, 9), (2744, 16), (2744, 25), (2744, 36), (2744, 49), (2744, 64), (2744, 81), (2744, 100), (2744, 121), (2744, 144), (2744, 169), (2744, 196), (2744, 225), (2744, 256), (2744, 289), (2744, 324), (2744, 361), (2744, 400), (2744, 441), (2744, 484), (2744, 529), (2744, 576), (2744, 625), (2744, 676), (2744, 729), (2744, 784), (2744, 841), (2744, 900), (2744, 961), (2744, 1024), (2744, 1089), (2744, 1156), (2744, 1225), (2744, 1296), (2744, 1369), (2744, 1444), (2744, 1521), (2744, 1600), (2744, 1681), (2744, 1764), (2744, 1849), (2744, 1936), (2744, 2025), (2744, 2116), (2744, 2209), (2744, 2304), (2744, 2401), (3375, 0), (3375, 1), (3375, 4), (3375, 9), (3375, 16), (3375, 25), (3375, 36), (3375, 49), (3375, 64), (3375, 81), (3375, 100), (3375, 121), (3375, 144), (3375, 169), (3375, 196), (3375, 225), (3375, 256), (3375, 289), (3375, 324), (3375, 361), (3375, 400), (3375, 441), (3375, 484), (3375, 529), (3375, 576), (3375, 625), (3375, 676), (3375, 729), (3375, 784), (3375, 841), (3375, 900), (3375, 961), (3375, 1024), (3375, 1089), (3375, 1156), (3375, 1225), (3375, 1296), (3375, 1369), (3375, 1444), (3375, 1521), (3375, 1600), (3375, 1681), (3375, 1764), (3375, 1849), (3375, 1936), (3375, 2025), (3375, 2116), (3375, 2209), (3375, 2304), (3375, 2401), (4096, 0), (4096, 1), (4096, 4), (4096, 9), (4096, 16), (4096, 25), (4096, 36), (4096, 49), (4096, 64), (4096, 81), (4096, 100), (4096, 121), (4096, 144), (4096, 169), (4096, 196), (4096, 225), (4096, 256), (4096, 289), (4096, 324), (4096, 361), (4096, 400), (4096, 441), (4096, 484), (4096, 529), (4096, 576), (4096, 625), (4096, 676), (4096, 729), (4096, 784), (4096, 841), (4096, 900), (4096, 961), (4096, 1024), (4096, 1089), (4096, 1156), (4096, 1225), (4096, 1296), (4096, 1369), (4096, 1444), (4096, 1521), (4096, 1600), (4096, 1681), (4096, 1764), (4096, 1849), (4096, 1936), (4096, 2025), (4096, 2116), (4096, 2209), (4096, 2304), (4096, 2401), (4913, 0), (4913, 1), (4913, 4), (4913, 9), (4913, 16), (4913, 25), (4913, 36), (4913, 49), (4913, 64), (4913, 81), (4913, 100), (4913, 121), (4913, 144), (4913, 169), (4913, 196), (4913, 225), (4913, 256), (4913, 289), (4913, 324), (4913, 361), (4913, 400), (4913, 441), (4913, 484), (4913, 529), (4913, 576), (4913, 625), (4913, 676), (4913, 729), (4913, 784), (4913, 841), (4913, 900), (4913, 961), (4913, 1024), (4913, 1089), (4913, 1156), (4913, 1225), (4913, 1296), (4913, 1369), (4913, 1444), (4913, 1521), (4913, 1600), (4913, 1681), (4913, 1764), (4913, 1849), (4913, 1936), (4913, 2025), (4913, 2116), (4913, 2209), (4913, 2304), (4913, 2401), (5832, 0), (5832, 1), (5832, 4), (5832, 9), (5832, 16), (5832, 25), (5832, 36), (5832, 49), (5832, 64), (5832, 81), (5832, 100), (5832, 121), (5832, 144), (5832, 169), (5832, 196), (5832, 225), (5832, 256), (5832, 289), (5832, 324), (5832, 361), (5832, 400), (5832, 441), (5832, 484), (5832, 529), (5832, 576), (5832, 625), (5832, 676), (5832, 729), (5832, 784), (5832, 841), (5832, 900), (5832, 961), (5832, 1024), (5832, 1089), (5832, 1156), (5832, 1225), (5832, 1296), (5832, 1369), (5832, 1444), (5832, 1521), (5832, 1600), (5832, 1681), (5832, 1764), (5832, 1849), (5832, 1936), (5832, 2025), (5832, 2116), (5832, 2209), (5832, 2304), (5832, 2401), (6859, 0), (6859, 1), (6859, 4), (6859, 9), (6859, 16), (6859, 25), (6859, 36), (6859, 49), (6859, 64), (6859, 81), (6859, 100), (6859, 121), (6859, 144), (6859, 169), (6859, 196), (6859, 225), (6859, 256), (6859, 289), (6859, 324), (6859, 361), (6859, 400), (6859, 441), (6859, 484), (6859, 529), (6859, 576), (6859, 625), (6859, 676), (6859, 729), (6859, 784), (6859, 841), (6859, 900), (6859, 961), (6859, 1024), (6859, 1089), (6859, 1156), (6859, 1225), (6859, 1296), (6859, 1369), (6859, 1444), (6859, 1521), (6859, 1600), (6859, 1681), (6859, 1764), (6859, 1849), (6859, 1936), (6859, 2025), (6859, 2116), (6859, 2209), (6859, 2304), (6859, 2401), (8000, 0), (8000, 1), (8000, 4), (8000, 9), (8000, 16), (8000, 25), (8000, 36), (8000, 49), (8000, 64), (8000, 81), (8000, 100), (8000, 121), (8000, 144), (8000, 169), (8000, 196), (8000, 225), (8000, 256), (8000, 289), (8000, 324), (8000, 361), (8000, 400), (8000, 441), (8000, 484), (8000, 529), (8000, 576), (8000, 625), (8000, 676), (8000, 729), (8000, 784), (8000, 841), (8000, 900), (8000, 961), (8000, 1024), (8000, 1089), (8000, 1156), (8000, 1225), (8000, 1296), (8000, 1369), (8000, 1444), (8000, 1521), (8000, 1600), (8000, 1681), (8000, 1764), (8000, 1849), (8000, 1936), (8000, 2025), (8000, 2116), (8000, 2209), (8000, 2304), (8000, 2401), (9261, 0), (9261, 1), (9261, 4), (9261, 9), (9261, 16), (9261, 25), (9261, 36), (9261, 49), (9261, 64), (9261, 81), (9261, 100), (9261, 121), (9261, 144), (9261, 169), (9261, 196), (9261, 225), (9261, 256), (9261, 289), (9261, 324), (9261, 361), (9261, 400), (9261, 441), (9261, 484), (9261, 529), (9261, 576), (9261, 625), (9261, 676), (9261, 729), (9261, 784), (9261, 841), (9261, 900), (9261, 961), (9261, 1024), (9261, 1089), (9261, 1156), (9261, 1225), (9261, 1296), (9261, 1369), (9261, 1444), (9261, 1521), (9261, 1600), (9261, 1681), (9261, 1764), (9261, 1849), (9261, 1936), (9261, 2025), (9261, 2116), (9261, 2209), (9261, 2304), (9261, 2401), (10648, 0), (10648, 1), (10648, 4), (10648, 9), (10648, 16), (10648, 25), (10648, 36), (10648, 49), (10648, 64), (10648, 81), (10648, 100), (10648, 121), (10648, 144), (10648, 169), (10648, 196), (10648, 225), (10648, 256), (10648, 289), (10648, 324), (10648, 361), (10648, 400), (10648, 441), (10648, 484), (10648, 529), (10648, 576), (10648, 625), (10648, 676), (10648, 729), (10648, 784), (10648, 841), (10648, 900), (10648, 961), (10648, 1024), (10648, 1089), (10648, 1156), (10648, 1225), (10648, 1296), (10648, 1369), (10648, 1444), (10648, 1521), (10648, 1600), (10648, 1681), (10648, 1764), (10648, 1849), (10648, 1936), (10648, 2025), (10648, 2116), (10648, 2209), (10648, 2304), (10648, 2401), (12167, 0), (12167, 1), (12167, 4), (12167, 9), (12167, 16), (12167, 25), (12167, 36), (12167, 49), (12167, 64), (12167, 81), (12167, 100), (12167, 121), (12167, 144), (12167, 169), (12167, 196), (12167, 225), (12167, 256), (12167, 289), (12167, 324), (12167, 361), (12167, 400), (12167, 441), (12167, 484), (12167, 529), (12167, 576), (12167, 625), (12167, 676), (12167, 729), (12167, 784), (12167, 841), (12167, 900), (12167, 961), (12167, 1024), (12167, 1089), (12167, 1156), (12167, 1225), (12167, 1296), (12167, 1369), (12167, 1444), (12167, 1521), (12167, 1600), (12167, 1681), (12167, 1764), (12167, 1849), (12167, 1936), (12167, 2025), (12167, 2116), (12167, 2209), (12167, 2304), (12167, 2401), (13824, 0), (13824, 1), (13824, 4), (13824, 9), (13824, 16), (13824, 25), (13824, 36), (13824, 49), (13824, 64), (13824, 81), (13824, 100), (13824, 121), (13824, 144), (13824, 169), (13824, 196), (13824, 225), (13824, 256), (13824, 289), (13824, 324), (13824, 361), (13824, 400), (13824, 441), (13824, 484), (13824, 529), (13824, 576), (13824, 625), (13824, 676), (13824, 729), (13824, 784), (13824, 841), (13824, 900), (13824, 961), (13824, 1024), (13824, 1089), (13824, 1156), (13824, 1225), (13824, 1296), (13824, 1369), (13824, 1444), (13824, 1521), (13824, 1600), (13824, 1681), (13824, 1764), (13824, 1849), (13824, 1936), (13824, 2025), (13824, 2116), (13824, 2209), (13824, 2304), (13824, 2401), (15625, 0), (15625, 1), (15625, 4), (15625, 9), (15625, 16), (15625, 25), (15625, 36), (15625, 49), (15625, 64), (15625, 81), (15625, 100), (15625, 121), (15625, 144), (15625, 169), (15625, 196), (15625, 225), (15625, 256), (15625, 289), (15625, 324), (15625, 361), (15625, 400), (15625, 441), (15625, 484), (15625, 529), (15625, 576), (15625, 625), (15625, 676), (15625, 729), (15625, 784), (15625, 841), (15625, 900), (15625, 961), (15625, 1024), (15625, 1089), (15625, 1156), (15625, 1225), (15625, 1296), (15625, 1369), (15625, 1444), (15625, 1521), (15625, 1600), (15625, 1681), (15625, 1764), (15625, 1849), (15625, 1936), (15625, 2025), (15625, 2116), (15625, 2209), (15625, 2304), (15625, 2401), (17576, 0), (17576, 1), (17576, 4), (17576, 9), (17576, 16), (17576, 25), (17576, 36), (17576, 49), (17576, 64), (17576, 81), (17576, 100), (17576, 121), (17576, 144), (17576, 169), (17576, 196), (17576, 225), (17576, 256), (17576, 289), (17576, 324), (17576, 361), (17576, 400), (17576, 441), (17576, 484), (17576, 529), (17576, 576), (17576, 625), (17576, 676), (17576, 729), (17576, 784), (17576, 841), (17576, 900), (17576, 961), (17576, 1024), (17576, 1089), (17576, 1156), (17576, 1225), (17576, 1296), (17576, 1369), (17576, 1444), (17576, 1521), (17576, 1600), (17576, 1681), (17576, 1764), (17576, 1849), (17576, 1936), (17576, 2025), (17576, 2116), (17576, 2209), (17576, 2304), (17576, 2401), (19683, 0), (19683, 1), (19683, 4), (19683, 9), (19683, 16), (19683, 25), (19683, 36), (19683, 49), (19683, 64), (19683, 81), (19683, 100), (19683, 121), (19683, 144), (19683, 169), (19683, 196), (19683, 225), (19683, 256), (19683, 289), (19683, 324), (19683, 361), (19683, 400), (19683, 441), (19683, 484), (19683, 529), (19683, 576), (19683, 625), (19683, 676), (19683, 729), (19683, 784), (19683, 841), (19683, 900), (19683, 961), (19683, 1024), (19683, 1089), (19683, 1156), (19683, 1225), (19683, 1296), (19683, 1369), (19683, 1444), (19683, 1521), (19683, 1600), (19683, 1681), (19683, 1764), (19683, 1849), (19683, 1936), (19683, 2025), (19683, 2116), (19683, 2209), (19683, 2304), (19683, 2401), (21952, 0), (21952, 1), (21952, 4), (21952, 9), (21952, 16), (21952, 25), (21952, 36), (21952, 49), (21952, 64), (21952, 81), (21952, 100), (21952, 121), (21952, 144), (21952, 169), (21952, 196), (21952, 225), (21952, 256), (21952, 289), (21952, 324), (21952, 361), (21952, 400), (21952, 441), (21952, 484), (21952, 529), (21952, 576), (21952, 625), (21952, 676), (21952, 729), (21952, 784), (21952, 841), (21952, 900), (21952, 961), (21952, 1024), (21952, 1089), (21952, 1156), (21952, 1225), (21952, 1296), (21952, 1369), (21952, 1444), (21952, 1521), (21952, 1600), (21952, 1681), (21952, 1764), (21952, 1849), (21952, 1936), (21952, 2025), (21952, 2116), (21952, 2209), (21952, 2304), (21952, 2401), (24389, 0), (24389, 1), (24389, 4), (24389, 9), (24389, 16), (24389, 25), (24389, 36), (24389, 49), (24389, 64), (24389, 81), (24389, 100), (24389, 121), (24389, 144), (24389, 169), (24389, 196), (24389, 225), (24389, 256), (24389, 289), (24389, 324), (24389, 361), (24389, 400), (24389, 441), (24389, 484), (24389, 529), (24389, 576), (24389, 625), (24389, 676), (24389, 729), (24389, 784), (24389, 841), (24389, 900), (24389, 961), (24389, 1024), (24389, 1089), (24389, 1156), (24389, 1225), (24389, 1296), (24389, 1369), (24389, 1444), (24389, 1521), (24389, 1600), (24389, 1681), (24389, 1764), (24389, 1849), (24389, 1936), (24389, 2025), (24389, 2116), (24389, 2209), (24389, 2304), (24389, 2401), (27000, 0), (27000, 1), (27000, 4), (27000, 9), (27000, 16), (27000, 25), (27000, 36), (27000, 49), (27000, 64), (27000, 81), (27000, 100), (27000, 121), (27000, 144), (27000, 169), (27000, 196), (27000, 225), (27000, 256), (27000, 289), (27000, 324), (27000, 361), (27000, 400), (27000, 441), (27000, 484), (27000, 529), (27000, 576), (27000, 625), (27000, 676), (27000, 729), (27000, 784), (27000, 841), (27000, 900), (27000, 961), (27000, 1024), (27000, 1089), (27000, 1156), (27000, 1225), (27000, 1296), (27000, 1369), (27000, 1444), (27000, 1521), (27000, 1600), (27000, 1681), (27000, 1764), (27000, 1849), (27000, 1936), (27000, 2025), (27000, 2116), (27000, 2209), (27000, 2304), (27000, 2401), (29791, 0), (29791, 1), (29791, 4), (29791, 9), (29791, 16), (29791, 25), (29791, 36), (29791, 49), (29791, 64), (29791, 81), (29791, 100), (29791, 121), (29791, 144), (29791, 169), (29791, 196), (29791, 225), (29791, 256), (29791, 289), (29791, 324), (29791, 361), (29791, 400), (29791, 441), (29791, 484), (29791, 529), (29791, 576), (29791, 625), (29791, 676), (29791, 729), (29791, 784), (29791, 841), (29791, 900), (29791, 961), (29791, 1024), (29791, 1089), (29791, 1156), (29791, 1225), (29791, 1296), (29791, 1369), (29791, 1444), (29791, 1521), (29791, 1600), (29791, 1681), (29791, 1764), (29791, 1849), (29791, 1936), (29791, 2025), (29791, 2116), (29791, 2209), (29791, 2304), (29791, 2401), (32768, 0), (32768, 1), (32768, 4), (32768, 9), (32768, 16), (32768, 25), (32768, 36), (32768, 49), (32768, 64), (32768, 81), (32768, 100), (32768, 121), (32768, 144), (32768, 169), (32768, 196), (32768, 225), (32768, 256), (32768, 289), (32768, 324), (32768, 361), (32768, 400), (32768, 441), (32768, 484), (32768, 529), (32768, 576), (32768, 625), (32768, 676), (32768, 729), (32768, 784), (32768, 841), (32768, 900), (32768, 961), (32768, 1024), (32768, 1089), (32768, 1156), (32768, 1225), (32768, 1296), (32768, 1369), (32768, 1444), (32768, 1521), (32768, 1600), (32768, 1681), (32768, 1764), (32768, 1849), (32768, 1936), (32768, 2025), (32768, 2116), (32768, 2209), (32768, 2304), (32768, 2401), (35937, 0), (35937, 1), (35937, 4), (35937, 9), (35937, 16), (35937, 25), (35937, 36), (35937, 49), (35937, 64), (35937, 81), (35937, 100), (35937, 121), (35937, 144), (35937, 169), (35937, 196), (35937, 225), (35937, 256), (35937, 289), (35937, 324), (35937, 361), (35937, 400), (35937, 441), (35937, 484), (35937, 529), (35937, 576), (35937, 625), (35937, 676), (35937, 729), (35937, 784), (35937, 841), (35937, 900), (35937, 961), (35937, 1024), (35937, 1089), (35937, 1156), (35937, 1225), (35937, 1296), (35937, 1369), (35937, 1444), (35937, 1521), (35937, 1600), (35937, 1681), (35937, 1764), (35937, 1849), (35937, 1936), (35937, 2025), (35937, 2116), (35937, 2209), (35937, 2304), (35937, 2401), (39304, 0), (39304, 1), (39304, 4), (39304, 9), (39304, 16), (39304, 25), (39304, 36), (39304, 49), (39304, 64), (39304, 81), (39304, 100), (39304, 121), (39304, 144), (39304, 169), (39304, 196), (39304, 225), (39304, 256), (39304, 289), (39304, 324), (39304, 361), (39304, 400), (39304, 441), (39304, 484), (39304, 529), (39304, 576), (39304, 625), (39304, 676), (39304, 729), (39304, 784), (39304, 841), (39304, 900), (39304, 961), (39304, 1024), (39304, 1089), (39304, 1156), (39304, 1225), (39304, 1296), (39304, 1369), (39304, 1444), (39304, 1521), (39304, 1600), (39304, 1681), (39304, 1764), (39304, 1849), (39304, 1936), (39304, 2025), (39304, 2116), (39304, 2209), (39304, 2304), (39304, 2401), (42875, 0), (42875, 1), (42875, 4), (42875, 9), (42875, 16), (42875, 25), (42875, 36), (42875, 49), (42875, 64), (42875, 81), (42875, 100), (42875, 121), (42875, 144), (42875, 169), (42875, 196), (42875, 225), (42875, 256), (42875, 289), (42875, 324), (42875, 361), (42875, 400), (42875, 441), (42875, 484), (42875, 529), (42875, 576), (42875, 625), (42875, 676), (42875, 729), (42875, 784), (42875, 841), (42875, 900), (42875, 961), (42875, 1024), (42875, 1089), (42875, 1156), (42875, 1225), (42875, 1296), (42875, 1369), (42875, 1444), (42875, 1521), (42875, 1600), (42875, 1681), (42875, 1764), (42875, 1849), (42875, 1936), (42875, 2025), (42875, 2116), (42875, 2209), (42875, 2304), (42875, 2401), (46656, 0), (46656, 1), (46656, 4), (46656, 9), (46656, 16), (46656, 25), (46656, 36), (46656, 49), (46656, 64), (46656, 81), (46656, 100), (46656, 121), (46656, 144), (46656, 169), (46656, 196), (46656, 225), (46656, 256), (46656, 289), (46656, 324), (46656, 361), (46656, 400), (46656, 441), (46656, 484), (46656, 529), (46656, 576), (46656, 625), (46656, 676), (46656, 729), (46656, 784), (46656, 841), (46656, 900), (46656, 961), (46656, 1024), (46656, 1089), (46656, 1156), (46656, 1225), (46656, 1296), (46656, 1369), (46656, 1444), (46656, 1521), (46656, 1600), (46656, 1681), (46656, 1764), (46656, 1849), (46656, 1936), (46656, 2025), (46656, 2116), (46656, 2209), (46656, 2304), (46656, 2401), (50653, 0), (50653, 1), (50653, 4), (50653, 9), (50653, 16), (50653, 25), (50653, 36), (50653, 49), (50653, 64), (50653, 81), (50653, 100), (50653, 121), (50653, 144), (50653, 169), (50653, 196), (50653, 225), (50653, 256), (50653, 289), (50653, 324), (50653, 361), (50653, 400), (50653, 441), (50653, 484), (50653, 529), (50653, 576), (50653, 625), (50653, 676), (50653, 729), (50653, 784), (50653, 841), (50653, 900), (50653, 961), (50653, 1024), (50653, 1089), (50653, 1156), (50653, 1225), (50653, 1296), (50653, 1369), (50653, 1444), (50653, 1521), (50653, 1600), (50653, 1681), (50653, 1764), (50653, 1849), (50653, 1936), (50653, 2025), (50653, 2116), (50653, 2209), (50653, 2304), (50653, 2401), (54872, 0), (54872, 1), (54872, 4), (54872, 9), (54872, 16), (54872, 25), (54872, 36), (54872, 49), (54872, 64), (54872, 81), (54872, 100), (54872, 121), (54872, 144), (54872, 169), (54872, 196), (54872, 225), (54872, 256), (54872, 289), (54872, 324), (54872, 361), (54872, 400), (54872, 441), (54872, 484), (54872, 529), (54872, 576), (54872, 625), (54872, 676), (54872, 729), (54872, 784), (54872, 841), (54872, 900), (54872, 961), (54872, 1024), (54872, 1089), (54872, 1156), (54872, 1225), (54872, 1296), (54872, 1369), (54872, 1444), (54872, 1521), (54872, 1600), (54872, 1681), (54872, 1764), (54872, 1849), (54872, 1936), (54872, 2025), (54872, 2116), (54872, 2209), (54872, 2304), (54872, 2401), (59319, 0), (59319, 1), (59319, 4), (59319, 9), (59319, 16), (59319, 25), (59319, 36), (59319, 49), (59319, 64), (59319, 81), (59319, 100), (59319, 121), (59319, 144), (59319, 169), (59319, 196), (59319, 225), (59319, 256), (59319, 289), (59319, 324), (59319, 361), (59319, 400), (59319, 441), (59319, 484), (59319, 529), (59319, 576), (59319, 625), (59319, 676), (59319, 729), (59319, 784), (59319, 841), (59319, 900), (59319, 961), (59319, 1024), (59319, 1089), (59319, 1156), (59319, 1225), (59319, 1296), (59319, 1369), (59319, 1444), (59319, 1521), (59319, 1600), (59319, 1681), (59319, 1764), (59319, 1849), (59319, 1936), (59319, 2025), (59319, 2116), (59319, 2209), (59319, 2304), (59319, 2401), (64000, 0), (64000, 1), (64000, 4), (64000, 9), (64000, 16), (64000, 25), (64000, 36), (64000, 49), (64000, 64), (64000, 81), (64000, 100), (64000, 121), (64000, 144), (64000, 169), (64000, 196), (64000, 225), (64000, 256), (64000, 289), (64000, 324), (64000, 361), (64000, 400), (64000, 441), (64000, 484), (64000, 529), (64000, 576), (64000, 625), (64000, 676), (64000, 729), (64000, 784), (64000, 841), (64000, 900), (64000, 961), (64000, 1024), (64000, 1089), (64000, 1156), (64000, 1225), (64000, 1296), (64000, 1369), (64000, 1444), (64000, 1521), (64000, 1600), (64000, 1681), (64000, 1764), (64000, 1849), (64000, 1936), (64000, 2025), (64000, 2116), (64000, 2209), (64000, 2304), (64000, 2401), (68921, 0), (68921, 1), (68921, 4), (68921, 9), (68921, 16), (68921, 25), (68921, 36), (68921, 49), (68921, 64), (68921, 81), (68921, 100), (68921, 121), (68921, 144), (68921, 169), (68921, 196), (68921, 225), (68921, 256), (68921, 289), (68921, 324), (68921, 361), (68921, 400), (68921, 441), (68921, 484), (68921, 529), (68921, 576), (68921, 625), (68921, 676), (68921, 729), (68921, 784), (68921, 841), (68921, 900), (68921, 961), (68921, 1024), (68921, 1089), (68921, 1156), (68921, 1225), (68921, 1296), (68921, 1369), (68921, 1444), (68921, 1521), (68921, 1600), (68921, 1681), (68921, 1764), (68921, 1849), (68921, 1936), (68921, 2025), (68921, 2116), (68921, 2209), (68921, 2304), (68921, 2401), (74088, 0), (74088, 1), (74088, 4), (74088, 9), (74088, 16), (74088, 25), (74088, 36), (74088, 49), (74088, 64), (74088, 81), (74088, 100), (74088, 121), (74088, 144), (74088, 169), (74088, 196), (74088, 225), (74088, 256), (74088, 289), (74088, 324), (74088, 361), (74088, 400), (74088, 441), (74088, 484), (74088, 529), (74088, 576), (74088, 625), (74088, 676), (74088, 729), (74088, 784), (74088, 841), (74088, 900), (74088, 961), (74088, 1024), (74088, 1089), (74088, 1156), (74088, 1225), (74088, 1296), (74088, 1369), (74088, 1444), (74088, 1521), (74088, 1600), (74088, 1681), (74088, 1764), (74088, 1849), (74088, 1936), (74088, 2025), (74088, 2116), (74088, 2209), (74088, 2304), (74088, 2401), (79507, 0), (79507, 1), (79507, 4), (79507, 9), (79507, 16), (79507, 25), (79507, 36), (79507, 49), (79507, 64), (79507, 81), (79507, 100), (79507, 121), (79507, 144), (79507, 169), (79507, 196), (79507, 225), (79507, 256), (79507, 289), (79507, 324), (79507, 361), (79507, 400), (79507, 441), (79507, 484), (79507, 529), (79507, 576), (79507, 625), (79507, 676), (79507, 729), (79507, 784), (79507, 841), (79507, 900), (79507, 961), (79507, 1024), (79507, 1089), (79507, 1156), (79507, 1225), (79507, 1296), (79507, 1369), (79507, 1444), (79507, 1521), (79507, 1600), (79507, 1681), (79507, 1764), (79507, 1849), (79507, 1936), (79507, 2025), (79507, 2116), (79507, 2209), (79507, 2304), (79507, 2401), (85184, 0), (85184, 1), (85184, 4), (85184, 9), (85184, 16), (85184, 25), (85184, 36), (85184, 49), (85184, 64), (85184, 81), (85184, 100), (85184, 121), (85184, 144), (85184, 169), (85184, 196), (85184, 225), (85184, 256), (85184, 289), (85184, 324), (85184, 361), (85184, 400), (85184, 441), (85184, 484), (85184, 529), (85184, 576), (85184, 625), (85184, 676), (85184, 729), (85184, 784), (85184, 841), (85184, 900), (85184, 961), (85184, 1024), (85184, 1089), (85184, 1156), (85184, 1225), (85184, 1296), (85184, 1369), (85184, 1444), (85184, 1521), (85184, 1600), (85184, 1681), (85184, 1764), (85184, 1849), (85184, 1936), (85184, 2025), (85184, 2116), (85184, 2209), (85184, 2304), (85184, 2401), (91125, 0), (91125, 1), (91125, 4), (91125, 9), (91125, 16), (91125, 25), (91125, 36), (91125, 49), (91125, 64), (91125, 81), (91125, 100), (91125, 121), (91125, 144), (91125, 169), (91125, 196), (91125, 225), (91125, 256), (91125, 289), (91125, 324), (91125, 361), (91125, 400), (91125, 441), (91125, 484), (91125, 529), (91125, 576), (91125, 625), (91125, 676), (91125, 729), (91125, 784), (91125, 841), (91125, 900), (91125, 961), (91125, 1024), (91125, 1089), (91125, 1156), (91125, 1225), (91125, 1296), (91125, 1369), (91125, 1444), (91125, 1521), (91125, 1600), (91125, 1681), (91125, 1764), (91125, 1849), (91125, 1936), (91125, 2025), (91125, 2116), (91125, 2209), (91125, 2304), (91125, 2401), (97336, 0), (97336, 1), (97336, 4), (97336, 9), (97336, 16), (97336, 25), (97336, 36), (97336, 49), (97336, 64), (97336, 81), (97336, 100), (97336, 121), (97336, 144), (97336, 169), (97336, 196), (97336, 225), (97336, 256), (97336, 289), (97336, 324), (97336, 361), (97336, 400), (97336, 441), (97336, 484), (97336, 529), (97336, 576), (97336, 625), (97336, 676), (97336, 729), (97336, 784), (97336, 841), (97336, 900), (97336, 961), (97336, 1024), (97336, 1089), (97336, 1156), (97336, 1225), (97336, 1296), (97336, 1369), (97336, 1444), (97336, 1521), (97336, 1600), (97336, 1681), (97336, 1764), (97336, 1849), (97336, 1936), (97336, 2025), (97336, 2116), (97336, 2209), (97336, 2304), (97336, 2401), (103823, 0), (103823, 1), (103823, 4), (103823, 9), (103823, 16), (103823, 25), (103823, 36), (103823, 49), (103823, 64), (103823, 81), (103823, 100), (103823, 121), (103823, 144), (103823, 169), (103823, 196), (103823, 225), (103823, 256), (103823, 289), (103823, 324), (103823, 361), (103823, 400), (103823, 441), (103823, 484), (103823, 529), (103823, 576), (103823, 625), (103823, 676), (103823, 729), (103823, 784), (103823, 841), (103823, 900), (103823, 961), (103823, 1024), (103823, 1089), (103823, 1156), (103823, 1225), (103823, 1296), (103823, 1369), (103823, 1444), (103823, 1521), (103823, 1600), (103823, 1681), (103823, 1764), (103823, 1849), (103823, 1936), (103823, 2025), (103823, 2116), (103823, 2209), (103823, 2304), (103823, 2401), (110592, 0), (110592, 1), (110592, 4), (110592, 9), (110592, 16), (110592, 25), (110592, 36), (110592, 49), (110592, 64), (110592, 81), (110592, 100), (110592, 121), (110592, 144), (110592, 169), (110592, 196), (110592, 225), (110592, 256), (110592, 289), (110592, 324), (110592, 361), (110592, 400), (110592, 441), (110592, 484), (110592, 529), (110592, 576), (110592, 625), (110592, 676), (110592, 729), (110592, 784), (110592, 841), (110592, 900), (110592, 961), (110592, 1024), (110592, 1089), (110592, 1156), (110592, 1225), (110592, 1296), (110592, 1369), (110592, 1444), (110592, 1521), (110592, 1600), (110592, 1681), (110592, 1764), (110592, 1849), (110592, 1936), (110592, 2025), (110592, 2116), (110592, 2209), (110592, 2304), (110592, 2401), (117649, 0), (117649, 1), (117649, 4), (117649, 9), (117649, 16), (117649, 25), (117649, 36), (117649, 49), (117649, 64), (117649, 81), (117649, 100), (117649, 121), (117649, 144), (117649, 169), (117649, 196), (117649, 225), (117649, 256), (117649, 289), (117649, 324), (117649, 361), (117649, 400), (117649, 441), (117649, 484), (117649, 529), (117649, 576), (117649, 625), (117649, 676), (117649, 729), (117649, 784), (117649, 841), (117649, 900), (117649, 961), (117649, 1024), (117649, 1089), (117649, 1156), (117649, 1225), (117649, 1296), (117649, 1369), (117649, 1444), (117649, 1521), (117649, 1600), (117649, 1681), (117649, 1764), (117649, 1849), (117649, 1936), (117649, 2025), (117649, 2116), (117649, 2209), (117649, 2304), (117649, 2401)]\"], [\"None\", \"[(-125000, 2500), (-125000, 2401), (-125000, 2304), (-125000, 2209), (-125000, 2116), (-125000, 2025), (-125000, 1936), (-125000, 1849), (-125000, 1764), (-125000, 1681), (-125000, 1600), (-125000, 1521), (-125000, 1444), (-125000, 1369), (-125000, 1296), (-125000, 1225), (-125000, 1156), (-125000, 1089), (-125000, 1024), (-125000, 961), (-125000, 900), (-125000, 841), (-125000, 784), (-125000, 729), (-125000, 676), (-125000, 625), (-125000, 576), (-125000, 529), (-125000, 484), (-125000, 441), (-125000, 400), (-125000, 361), (-125000, 324), (-125000, 289), (-125000, 256), (-125000, 225), (-125000, 196), (-125000, 169), (-125000, 144), (-125000, 121), (-125000, 100), (-125000, 81), (-125000, 64), (-125000, 49), (-125000, 36), (-125000, 25), (-125000, 16), (-125000, 9), (-125000, 4), (-125000, 1), (-125000, 0), (-125000, 1), (-125000, 4), (-125000, 9), (-125000, 16), (-125000, 25), (-125000, 36), (-125000, 49), (-125000, 64), (-125000, 81), (-125000, 100), (-125000, 121), (-125000, 144), (-125000, 169), (-125000, 196), (-125000, 225), (-125000, 256), (-125000, 289), (-125000, 324), (-125000, 361), (-125000, 400), (-125000, 441), (-125000, 484), (-125000, 529), (-125000, 576), (-125000, 625), (-125000, 676), (-125000, 729), (-125000, 784), (-125000, 841), (-125000, 900), (-125000, 961), (-125000, 1024), (-125000, 1089), (-125000, 1156), (-125000, 1225), (-125000, 1296), (-125000, 1369), (-125000, 1444), (-125000, 1521), (-125000, 1600), (-125000, 1681), (-125000, 1764), (-125000, 1849), (-125000, 1936), (-125000, 2025), (-125000, 2116), (-125000, 2209), (-125000, 2304), (-125000, 2401), (-117649, 2500), (-117649, 2401), (-117649, 2304), (-117649, 2209), (-117649, 2116), (-117649, 2025), (-117649, 1936), (-117649, 1849), (-117649, 1764), (-117649, 1681), (-117649, 1600), (-117649, 1521), (-117649, 1444), (-117649, 1369), (-117649, 1296), (-117649, 1225), (-117649, 1156), (-117649, 1089), (-117649, 1024), (-117649, 961), (-117649, 900), (-117649, 841), (-117649, 784), (-117649, 729), (-117649, 676), (-117649, 625), (-117649, 576), (-117649, 529), (-117649, 484), (-117649, 441), (-117649, 400), (-117649, 361), (-117649, 324), (-117649, 289), (-117649, 256), (-117649, 225), (-117649, 196), (-117649, 169), (-117649, 144), (-117649, 121), (-117649, 100), (-117649, 81), (-117649, 64), (-117649, 49), (-117649, 36), (-117649, 25), (-117649, 16), (-117649, 9), (-117649, 4), (-117649, 1), (-117649, 0), (-117649, 1), (-117649, 4), (-117649, 9), (-117649, 16), (-117649, 25), (-117649, 36), (-117649, 49), (-117649, 64), (-117649, 81), (-117649, 100), (-117649, 121), (-117649, 144), (-117649, 169), (-117649, 196), (-117649, 225), (-117649, 256), (-117649, 289), (-117649, 324), (-117649, 361), (-117649, 400), (-117649, 441), (-117649, 484), (-117649, 529), (-117649, 576), (-117649, 625), (-117649, 676), (-117649, 729), (-117649, 784), (-117649, 841), (-117649, 900), (-117649, 961), (-117649, 1024), (-117649, 1089), (-117649, 1156), (-117649, 1225), (-117649, 1296), (-117649, 1369), (-117649, 1444), (-117649, 1521), (-117649, 1600), (-117649, 1681), (-117649, 1764), (-117649, 1849), (-117649, 1936), (-117649, 2025), (-117649, 2116), (-117649, 2209), (-117649, 2304), (-117649, 2401), (-110592, 2500), (-110592, 2401), (-110592, 2304), (-110592, 2209), (-110592, 2116), (-110592, 2025), (-110592, 1936), (-110592, 1849), (-110592, 1764), (-110592, 1681), (-110592, 1600), (-110592, 1521), (-110592, 1444), (-110592, 1369), (-110592, 1296), (-110592, 1225), (-110592, 1156), (-110592, 1089), (-110592, 1024), (-110592, 961), (-110592, 900), (-110592, 841), (-110592, 784), (-110592, 729), (-110592, 676), (-110592, 625), (-110592, 576), (-110592, 529), (-110592, 484), (-110592, 441), (-110592, 400), (-110592, 361), (-110592, 324), (-110592, 289), (-110592, 256), (-110592, 225), (-110592, 196), (-110592, 169), (-110592, 144), (-110592, 121), (-110592, 100), (-110592, 81), (-110592, 64), (-110592, 49), (-110592, 36), (-110592, 25), (-110592, 16), (-110592, 9), (-110592, 4), (-110592, 1), (-110592, 0), (-110592, 1), (-110592, 4), (-110592, 9), (-110592, 16), (-110592, 25), (-110592, 36), (-110592, 49), (-110592, 64), (-110592, 81), (-110592, 100), (-110592, 121), (-110592, 144), (-110592, 169), (-110592, 196), (-110592, 225), (-110592, 256), (-110592, 289), (-110592, 324), (-110592, 361), (-110592, 400), (-110592, 441), (-110592, 484), (-110592, 529), (-110592, 576), (-110592, 625), (-110592, 676), (-110592, 729), (-110592, 784), (-110592, 841), (-110592, 900), (-110592, 961), (-110592, 1024), (-110592, 1089), (-110592, 1156), (-110592, 1225), (-110592, 1296), (-110592, 1369), (-110592, 1444), (-110592, 1521), (-110592, 1600), (-110592, 1681), (-110592, 1764), (-110592, 1849), (-110592, 1936), (-110592, 2025), (-110592, 2116), (-110592, 2209), (-110592, 2304), (-110592, 2401), (-103823, 2500), (-103823, 2401), (-103823, 2304), (-103823, 2209), (-103823, 2116), (-103823, 2025), (-103823, 1936), (-103823, 1849), (-103823, 1764), (-103823, 1681), (-103823, 1600), (-103823, 1521), (-103823, 1444), (-103823, 1369), (-103823, 1296), (-103823, 1225), (-103823, 1156), (-103823, 1089), (-103823, 1024), (-103823, 961), (-103823, 900), (-103823, 841), (-103823, 784), (-103823, 729), (-103823, 676), (-103823, 625), (-103823, 576), (-103823, 529), (-103823, 484), (-103823, 441), (-103823, 400), (-103823, 361), (-103823, 324), (-103823, 289), (-103823, 256), (-103823, 225), (-103823, 196), (-103823, 169), (-103823, 144), (-103823, 121), (-103823, 100), (-103823, 81), (-103823, 64), (-103823, 49), (-103823, 36), (-103823, 25), (-103823, 16), (-103823, 9), (-103823, 4), (-103823, 1), (-103823, 0), (-103823, 1), (-103823, 4), (-103823, 9), (-103823, 16), (-103823, 25), (-103823, 36), (-103823, 49), (-103823, 64), (-103823, 81), (-103823, 100), (-103823, 121), (-103823, 144), (-103823, 169), (-103823, 196), (-103823, 225), (-103823, 256), (-103823, 289), (-103823, 324), (-103823, 361), (-103823, 400), (-103823, 441), (-103823, 484), (-103823, 529), (-103823, 576), (-103823, 625), (-103823, 676), (-103823, 729), (-103823, 784), (-103823, 841), (-103823, 900), (-103823, 961), (-103823, 1024), (-103823, 1089), (-103823, 1156), (-103823, 1225), (-103823, 1296), (-103823, 1369), (-103823, 1444), (-103823, 1521), (-103823, 1600), (-103823, 1681), (-103823, 1764), (-103823, 1849), (-103823, 1936), (-103823, 2025), (-103823, 2116), (-103823, 2209), (-103823, 2304), (-103823, 2401), (-97336, 2500), (-97336, 2401), (-97336, 2304), (-97336, 2209), (-97336, 2116), (-97336, 2025), (-97336, 1936), (-97336, 1849), (-97336, 1764), (-97336, 1681), (-97336, 1600), (-97336, 1521), (-97336, 1444), (-97336, 1369), (-97336, 1296), (-97336, 1225), (-97336, 1156), (-97336, 1089), (-97336, 1024), (-97336, 961), (-97336, 900), (-97336, 841), (-97336, 784), (-97336, 729), (-97336, 676), (-97336, 625), (-97336, 576), (-97336, 529), (-97336, 484), (-97336, 441), (-97336, 400), (-97336, 361), (-97336, 324), (-97336, 289), (-97336, 256), (-97336, 225), (-97336, 196), (-97336, 169), (-97336, 144), (-97336, 121), (-97336, 100), (-97336, 81), (-97336, 64), (-97336, 49), (-97336, 36), (-97336, 25), (-97336, 16), (-97336, 9), (-97336, 4), (-97336, 1), (-97336, 0), (-97336, 1), (-97336, 4), (-97336, 9), (-97336, 16), (-97336, 25), (-97336, 36), (-97336, 49), (-97336, 64), (-97336, 81), (-97336, 100), (-97336, 121), (-97336, 144), (-97336, 169), (-97336, 196), (-97336, 225), (-97336, 256), (-97336, 289), (-97336, 324), (-97336, 361), (-97336, 400), (-97336, 441), (-97336, 484), (-97336, 529), (-97336, 576), (-97336, 625), (-97336, 676), (-97336, 729), (-97336, 784), (-97336, 841), (-97336, 900), (-97336, 961), (-97336, 1024), (-97336, 1089), (-97336, 1156), (-97336, 1225), (-97336, 1296), (-97336, 1369), (-97336, 1444), (-97336, 1521), (-97336, 1600), (-97336, 1681), (-97336, 1764), (-97336, 1849), (-97336, 1936), (-97336, 2025), (-97336, 2116), (-97336, 2209), (-97336, 2304), (-97336, 2401), (-91125, 2500), (-91125, 2401), (-91125, 2304), (-91125, 2209), (-91125, 2116), (-91125, 2025), (-91125, 1936), (-91125, 1849), (-91125, 1764), (-91125, 1681), (-91125, 1600), (-91125, 1521), (-91125, 1444), (-91125, 1369), (-91125, 1296), (-91125, 1225), (-91125, 1156), (-91125, 1089), (-91125, 1024), (-91125, 961), (-91125, 900), (-91125, 841), (-91125, 784), (-91125, 729), (-91125, 676), (-91125, 625), (-91125, 576), (-91125, 529), (-91125, 484), (-91125, 441), (-91125, 400), (-91125, 361), (-91125, 324), (-91125, 289), (-91125, 256), (-91125, 225), (-91125, 196), (-91125, 169), (-91125, 144), (-91125, 121), (-91125, 100), (-91125, 81), (-91125, 64), (-91125, 49), (-91125, 36), (-91125, 25), (-91125, 16), (-91125, 9), (-91125, 4), (-91125, 1), (-91125, 0), (-91125, 1), (-91125, 4), (-91125, 9), (-91125, 16), (-91125, 25), (-91125, 36), (-91125, 49), (-91125, 64), (-91125, 81), (-91125, 100), (-91125, 121), (-91125, 144), (-91125, 169), (-91125, 196), (-91125, 225), (-91125, 256), (-91125, 289), (-91125, 324), (-91125, 361), (-91125, 400), (-91125, 441), (-91125, 484), (-91125, 529), (-91125, 576), (-91125, 625), (-91125, 676), (-91125, 729), (-91125, 784), (-91125, 841), (-91125, 900), (-91125, 961), (-91125, 1024), (-91125, 1089), (-91125, 1156), (-91125, 1225), (-91125, 1296), (-91125, 1369), (-91125, 1444), (-91125, 1521), (-91125, 1600), (-91125, 1681), (-91125, 1764), (-91125, 1849), (-91125, 1936), (-91125, 2025), (-91125, 2116), (-91125, 2209), (-91125, 2304), (-91125, 2401), (-85184, 2500), (-85184, 2401), (-85184, 2304), (-85184, 2209), (-85184, 2116), (-85184, 2025), (-85184, 1936), (-85184, 1849), (-85184, 1764), (-85184, 1681), (-85184, 1600), (-85184, 1521), (-85184, 1444), (-85184, 1369), (-85184, 1296), (-85184, 1225), (-85184, 1156), (-85184, 1089), (-85184, 1024), (-85184, 961), (-85184, 900), (-85184, 841), (-85184, 784), (-85184, 729), (-85184, 676), (-85184, 625), (-85184, 576), (-85184, 529), (-85184, 484), (-85184, 441), (-85184, 400), (-85184, 361), (-85184, 324), (-85184, 289), (-85184, 256), (-85184, 225), (-85184, 196), (-85184, 169), (-85184, 144), (-85184, 121), (-85184, 100), (-85184, 81), (-85184, 64), (-85184, 49), (-85184, 36), (-85184, 25), (-85184, 16), (-85184, 9), (-85184, 4), (-85184, 1), (-85184, 0), (-85184, 1), (-85184, 4), (-85184, 9), (-85184, 16), (-85184, 25), (-85184, 36), (-85184, 49), (-85184, 64), (-85184, 81), (-85184, 100), (-85184, 121), (-85184, 144), (-85184, 169), (-85184, 196), (-85184, 225), (-85184, 256), (-85184, 289), (-85184, 324), (-85184, 361), (-85184, 400), (-85184, 441), (-85184, 484), (-85184, 529), (-85184, 576), (-85184, 625), (-85184, 676), (-85184, 729), (-85184, 784), (-85184, 841), (-85184, 900), (-85184, 961), (-85184, 1024), (-85184, 1089), (-85184, 1156), (-85184, 1225), (-85184, 1296), (-85184, 1369), (-85184, 1444), (-85184, 1521), (-85184, 1600), (-85184, 1681), (-85184, 1764), (-85184, 1849), (-85184, 1936), (-85184, 2025), (-85184, 2116), (-85184, 2209), (-85184, 2304), (-85184, 2401), (-79507, 2500), (-79507, 2401), (-79507, 2304), (-79507, 2209), (-79507, 2116), (-79507, 2025), (-79507, 1936), (-79507, 1849), (-79507, 1764), (-79507, 1681), (-79507, 1600), (-79507, 1521), (-79507, 1444), (-79507, 1369), (-79507, 1296), (-79507, 1225), (-79507, 1156), (-79507, 1089), (-79507, 1024), (-79507, 961), (-79507, 900), (-79507, 841), (-79507, 784), (-79507, 729), (-79507, 676), (-79507, 625), (-79507, 576), (-79507, 529), (-79507, 484), (-79507, 441), (-79507, 400), (-79507, 361), (-79507, 324), (-79507, 289), (-79507, 256), (-79507, 225), (-79507, 196), (-79507, 169), (-79507, 144), (-79507, 121), (-79507, 100), (-79507, 81), (-79507, 64), (-79507, 49), (-79507, 36), (-79507, 25), (-79507, 16), (-79507, 9), (-79507, 4), (-79507, 1), (-79507, 0), (-79507, 1), (-79507, 4), (-79507, 9), (-79507, 16), (-79507, 25), (-79507, 36), (-79507, 49), (-79507, 64), (-79507, 81), (-79507, 100), (-79507, 121), (-79507, 144), (-79507, 169), (-79507, 196), (-79507, 225), (-79507, 256), (-79507, 289), (-79507, 324), (-79507, 361), (-79507, 400), (-79507, 441), (-79507, 484), (-79507, 529), (-79507, 576), (-79507, 625), (-79507, 676), (-79507, 729), (-79507, 784), (-79507, 841), (-79507, 900), (-79507, 961), (-79507, 1024), (-79507, 1089), (-79507, 1156), (-79507, 1225), (-79507, 1296), (-79507, 1369), (-79507, 1444), (-79507, 1521), (-79507, 1600), (-79507, 1681), (-79507, 1764), (-79507, 1849), (-79507, 1936), (-79507, 2025), (-79507, 2116), (-79507, 2209), (-79507, 2304), (-79507, 2401), (-74088, 2500), (-74088, 2401), (-74088, 2304), (-74088, 2209), (-74088, 2116), (-74088, 2025), (-74088, 1936), (-74088, 1849), (-74088, 1764), (-74088, 1681), (-74088, 1600), (-74088, 1521), (-74088, 1444), (-74088, 1369), (-74088, 1296), (-74088, 1225), (-74088, 1156), (-74088, 1089), (-74088, 1024), (-74088, 961), (-74088, 900), (-74088, 841), (-74088, 784), (-74088, 729), (-74088, 676), (-74088, 625), (-74088, 576), (-74088, 529), (-74088, 484), (-74088, 441), (-74088, 400), (-74088, 361), (-74088, 324), (-74088, 289), (-74088, 256), (-74088, 225), (-74088, 196), (-74088, 169), (-74088, 144), (-74088, 121), (-74088, 100), (-74088, 81), (-74088, 64), (-74088, 49), (-74088, 36), (-74088, 25), (-74088, 16), (-74088, 9), (-74088, 4), (-74088, 1), (-74088, 0), (-74088, 1), (-74088, 4), (-74088, 9), (-74088, 16), (-74088, 25), (-74088, 36), (-74088, 49), (-74088, 64), (-74088, 81), (-74088, 100), (-74088, 121), (-74088, 144), (-74088, 169), (-74088, 196), (-74088, 225), (-74088, 256), (-74088, 289), (-74088, 324), (-74088, 361), (-74088, 400), (-74088, 441), (-74088, 484), (-74088, 529), (-74088, 576), (-74088, 625), (-74088, 676), (-74088, 729), (-74088, 784), (-74088, 841), (-74088, 900), (-74088, 961), (-74088, 1024), (-74088, 1089), (-74088, 1156), (-74088, 1225), (-74088, 1296), (-74088, 1369), (-74088, 1444), (-74088, 1521), (-74088, 1600), (-74088, 1681), (-74088, 1764), (-74088, 1849), (-74088, 1936), (-74088, 2025), (-74088, 2116), (-74088, 2209), (-74088, 2304), (-74088, 2401), (-68921, 2500), (-68921, 2401), (-68921, 2304), (-68921, 2209), (-68921, 2116), (-68921, 2025), (-68921, 1936), (-68921, 1849), (-68921, 1764), (-68921, 1681), (-68921, 1600), (-68921, 1521), (-68921, 1444), (-68921, 1369), (-68921, 1296), (-68921, 1225), (-68921, 1156), (-68921, 1089), (-68921, 1024), (-68921, 961), (-68921, 900), (-68921, 841), (-68921, 784), (-68921, 729), (-68921, 676), (-68921, 625), (-68921, 576), (-68921, 529), (-68921, 484), (-68921, 441), (-68921, 400), (-68921, 361), (-68921, 324), (-68921, 289), (-68921, 256), (-68921, 225), (-68921, 196), (-68921, 169), (-68921, 144), (-68921, 121), (-68921, 100), (-68921, 81), (-68921, 64), (-68921, 49), (-68921, 36), (-68921, 25), (-68921, 16), (-68921, 9), (-68921, 4), (-68921, 1), (-68921, 0), (-68921, 1), (-68921, 4), (-68921, 9), (-68921, 16), (-68921, 25), (-68921, 36), (-68921, 49), (-68921, 64), (-68921, 81), (-68921, 100), (-68921, 121), (-68921, 144), (-68921, 169), (-68921, 196), (-68921, 225), (-68921, 256), (-68921, 289), (-68921, 324), (-68921, 361), (-68921, 400), (-68921, 441), (-68921, 484), (-68921, 529), (-68921, 576), (-68921, 625), (-68921, 676), (-68921, 729), (-68921, 784), (-68921, 841), (-68921, 900), (-68921, 961), (-68921, 1024), (-68921, 1089), (-68921, 1156), (-68921, 1225), (-68921, 1296), (-68921, 1369), (-68921, 1444), (-68921, 1521), (-68921, 1600), (-68921, 1681), (-68921, 1764), (-68921, 1849), (-68921, 1936), (-68921, 2025), (-68921, 2116), (-68921, 2209), (-68921, 2304), (-68921, 2401), (-64000, 2500), (-64000, 2401), (-64000, 2304), (-64000, 2209), (-64000, 2116), (-64000, 2025), (-64000, 1936), (-64000, 1849), (-64000, 1764), (-64000, 1681), (-64000, 1600), (-64000, 1521), (-64000, 1444), (-64000, 1369), (-64000, 1296), (-64000, 1225), (-64000, 1156), (-64000, 1089), (-64000, 1024), (-64000, 961), (-64000, 900), (-64000, 841), (-64000, 784), (-64000, 729), (-64000, 676), (-64000, 625), (-64000, 576), (-64000, 529), (-64000, 484), (-64000, 441), (-64000, 400), (-64000, 361), (-64000, 324), (-64000, 289), (-64000, 256), (-64000, 225), (-64000, 196), (-64000, 169), (-64000, 144), (-64000, 121), (-64000, 100), (-64000, 81), (-64000, 64), (-64000, 49), (-64000, 36), (-64000, 25), (-64000, 16), (-64000, 9), (-64000, 4), (-64000, 1), (-64000, 0), (-64000, 1), (-64000, 4), (-64000, 9), (-64000, 16), (-64000, 25), (-64000, 36), (-64000, 49), (-64000, 64), (-64000, 81), (-64000, 100), (-64000, 121), (-64000, 144), (-64000, 169), (-64000, 196), (-64000, 225), (-64000, 256), (-64000, 289), (-64000, 324), (-64000, 361), (-64000, 400), (-64000, 441), (-64000, 484), (-64000, 529), (-64000, 576), (-64000, 625), (-64000, 676), (-64000, 729), (-64000, 784), (-64000, 841), (-64000, 900), (-64000, 961), (-64000, 1024), (-64000, 1089), (-64000, 1156), (-64000, 1225), (-64000, 1296), (-64000, 1369), (-64000, 1444), (-64000, 1521), (-64000, 1600), (-64000, 1681), (-64000, 1764), (-64000, 1849), (-64000, 1936), (-64000, 2025), (-64000, 2116), (-64000, 2209), (-64000, 2304), (-64000, 2401), (-59319, 2500), (-59319, 2401), (-59319, 2304), (-59319, 2209), (-59319, 2116), (-59319, 2025), (-59319, 1936), (-59319, 1849), (-59319, 1764), (-59319, 1681), (-59319, 1600), (-59319, 1521), (-59319, 1444), (-59319, 1369), (-59319, 1296), (-59319, 1225), (-59319, 1156), (-59319, 1089), (-59319, 1024), (-59319, 961), (-59319, 900), (-59319, 841), (-59319, 784), (-59319, 729), (-59319, 676), (-59319, 625), (-59319, 576), (-59319, 529), (-59319, 484), (-59319, 441), (-59319, 400), (-59319, 361), (-59319, 324), (-59319, 289), (-59319, 256), (-59319, 225), (-59319, 196), (-59319, 169), (-59319, 144), (-59319, 121), (-59319, 100), (-59319, 81), (-59319, 64), (-59319, 49), (-59319, 36), (-59319, 25), (-59319, 16), (-59319, 9), (-59319, 4), (-59319, 1), (-59319, 0), (-59319, 1), (-59319, 4), (-59319, 9), (-59319, 16), (-59319, 25), (-59319, 36), (-59319, 49), (-59319, 64), (-59319, 81), (-59319, 100), (-59319, 121), (-59319, 144), (-59319, 169), (-59319, 196), (-59319, 225), (-59319, 256), (-59319, 289), (-59319, 324), (-59319, 361), (-59319, 400), (-59319, 441), (-59319, 484), (-59319, 529), (-59319, 576), (-59319, 625), (-59319, 676), (-59319, 729), (-59319, 784), (-59319, 841), (-59319, 900), (-59319, 961), (-59319, 1024), (-59319, 1089), (-59319, 1156), (-59319, 1225), (-59319, 1296), (-59319, 1369), (-59319, 1444), (-59319, 1521), (-59319, 1600), (-59319, 1681), (-59319, 1764), (-59319, 1849), (-59319, 1936), (-59319, 2025), (-59319, 2116), (-59319, 2209), (-59319, 2304), (-59319, 2401), (-54872, 2500), (-54872, 2401), (-54872, 2304), (-54872, 2209), (-54872, 2116), (-54872, 2025), (-54872, 1936), (-54872, 1849), (-54872, 1764), (-54872, 1681), (-54872, 1600), (-54872, 1521), (-54872, 1444), (-54872, 1369), (-54872, 1296), (-54872, 1225), (-54872, 1156), (-54872, 1089), (-54872, 1024), (-54872, 961), (-54872, 900), (-54872, 841), (-54872, 784), (-54872, 729), (-54872, 676), (-54872, 625), (-54872, 576), (-54872, 529), (-54872, 484), (-54872, 441), (-54872, 400), (-54872, 361), (-54872, 324), (-54872, 289), (-54872, 256), (-54872, 225), (-54872, 196), (-54872, 169), (-54872, 144), (-54872, 121), (-54872, 100), (-54872, 81), (-54872, 64), (-54872, 49), (-54872, 36), (-54872, 25), (-54872, 16), (-54872, 9), (-54872, 4), (-54872, 1), (-54872, 0), (-54872, 1), (-54872, 4), (-54872, 9), (-54872, 16), (-54872, 25), (-54872, 36), (-54872, 49), (-54872, 64), (-54872, 81), (-54872, 100), (-54872, 121), (-54872, 144), (-54872, 169), (-54872, 196), (-54872, 225), (-54872, 256), (-54872, 289), (-54872, 324), (-54872, 361), (-54872, 400), (-54872, 441), (-54872, 484), (-54872, 529), (-54872, 576), (-54872, 625), (-54872, 676), (-54872, 729), (-54872, 784), (-54872, 841), (-54872, 900), (-54872, 961), (-54872, 1024), (-54872, 1089), (-54872, 1156), (-54872, 1225), (-54872, 1296), (-54872, 1369), (-54872, 1444), (-54872, 1521), (-54872, 1600), (-54872, 1681), (-54872, 1764), (-54872, 1849), (-54872, 1936), (-54872, 2025), (-54872, 2116), (-54872, 2209), (-54872, 2304), (-54872, 2401), (-50653, 2500), (-50653, 2401), (-50653, 2304), (-50653, 2209), (-50653, 2116), (-50653, 2025), (-50653, 1936), (-50653, 1849), (-50653, 1764), (-50653, 1681), (-50653, 1600), (-50653, 1521), (-50653, 1444), (-50653, 1369), (-50653, 1296), (-50653, 1225), (-50653, 1156), (-50653, 1089), (-50653, 1024), (-50653, 961), (-50653, 900), (-50653, 841), (-50653, 784), (-50653, 729), (-50653, 676), (-50653, 625), (-50653, 576), (-50653, 529), (-50653, 484), (-50653, 441), (-50653, 400), (-50653, 361), (-50653, 324), (-50653, 289), (-50653, 256), (-50653, 225), (-50653, 196), (-50653, 169), (-50653, 144), (-50653, 121), (-50653, 100), (-50653, 81), (-50653, 64), (-50653, 49), (-50653, 36), (-50653, 25), (-50653, 16), (-50653, 9), (-50653, 4), (-50653, 1), (-50653, 0), (-50653, 1), (-50653, 4), (-50653, 9), (-50653, 16), (-50653, 25), (-50653, 36), (-50653, 49), (-50653, 64), (-50653, 81), (-50653, 100), (-50653, 121), (-50653, 144), (-50653, 169), (-50653, 196), (-50653, 225), (-50653, 256), (-50653, 289), (-50653, 324), (-50653, 361), (-50653, 400), (-50653, 441), (-50653, 484), (-50653, 529), (-50653, 576), (-50653, 625), (-50653, 676), (-50653, 729), (-50653, 784), (-50653, 841), (-50653, 900), (-50653, 961), (-50653, 1024), (-50653, 1089), (-50653, 1156), (-50653, 1225), (-50653, 1296), (-50653, 1369), (-50653, 1444), (-50653, 1521), (-50653, 1600), (-50653, 1681), (-50653, 1764), (-50653, 1849), (-50653, 1936), (-50653, 2025), (-50653, 2116), (-50653, 2209), (-50653, 2304), (-50653, 2401), (-46656, 2500), (-46656, 2401), (-46656, 2304), (-46656, 2209), (-46656, 2116), (-46656, 2025), (-46656, 1936), (-46656, 1849), (-46656, 1764), (-46656, 1681), (-46656, 1600), (-46656, 1521), (-46656, 1444), (-46656, 1369), (-46656, 1296), (-46656, 1225), (-46656, 1156), (-46656, 1089), (-46656, 1024), (-46656, 961), (-46656, 900), (-46656, 841), (-46656, 784), (-46656, 729), (-46656, 676), (-46656, 625), (-46656, 576), (-46656, 529), (-46656, 484), (-46656, 441), (-46656, 400), (-46656, 361), (-46656, 324), (-46656, 289), (-46656, 256), (-46656, 225), (-46656, 196), (-46656, 169), (-46656, 144), (-46656, 121), (-46656, 100), (-46656, 81), (-46656, 64), (-46656, 49), (-46656, 36), (-46656, 25), (-46656, 16), (-46656, 9), (-46656, 4), (-46656, 1), (-46656, 0), (-46656, 1), (-46656, 4), (-46656, 9), (-46656, 16), (-46656, 25), (-46656, 36), (-46656, 49), (-46656, 64), (-46656, 81), (-46656, 100), (-46656, 121), (-46656, 144), (-46656, 169), (-46656, 196), (-46656, 225), (-46656, 256), (-46656, 289), (-46656, 324), (-46656, 361), (-46656, 400), (-46656, 441), (-46656, 484), (-46656, 529), (-46656, 576), (-46656, 625), (-46656, 676), (-46656, 729), (-46656, 784), (-46656, 841), (-46656, 900), (-46656, 961), (-46656, 1024), (-46656, 1089), (-46656, 1156), (-46656, 1225), (-46656, 1296), (-46656, 1369), (-46656, 1444), (-46656, 1521), (-46656, 1600), (-46656, 1681), (-46656, 1764), (-46656, 1849), (-46656, 1936), (-46656, 2025), (-46656, 2116), (-46656, 2209), (-46656, 2304), (-46656, 2401), (-42875, 2500), (-42875, 2401), (-42875, 2304), (-42875, 2209), (-42875, 2116), (-42875, 2025), (-42875, 1936), (-42875, 1849), (-42875, 1764), (-42875, 1681), (-42875, 1600), (-42875, 1521), (-42875, 1444), (-42875, 1369), (-42875, 1296), (-42875, 1225), (-42875, 1156), (-42875, 1089), (-42875, 1024), (-42875, 961), (-42875, 900), (-42875, 841), (-42875, 784), (-42875, 729), (-42875, 676), (-42875, 625), (-42875, 576), (-42875, 529), (-42875, 484), (-42875, 441), (-42875, 400), (-42875, 361), (-42875, 324), (-42875, 289), (-42875, 256), (-42875, 225), (-42875, 196), (-42875, 169), (-42875, 144), (-42875, 121), (-42875, 100), (-42875, 81), (-42875, 64), (-42875, 49), (-42875, 36), (-42875, 25), (-42875, 16), (-42875, 9), (-42875, 4), (-42875, 1), (-42875, 0), (-42875, 1), (-42875, 4), (-42875, 9), (-42875, 16), (-42875, 25), (-42875, 36), (-42875, 49), (-42875, 64), (-42875, 81), (-42875, 100), (-42875, 121), (-42875, 144), (-42875, 169), (-42875, 196), (-42875, 225), (-42875, 256), (-42875, 289), (-42875, 324), (-42875, 361), (-42875, 400), (-42875, 441), (-42875, 484), (-42875, 529), (-42875, 576), (-42875, 625), (-42875, 676), (-42875, 729), (-42875, 784), (-42875, 841), (-42875, 900), (-42875, 961), (-42875, 1024), (-42875, 1089), (-42875, 1156), (-42875, 1225), (-42875, 1296), (-42875, 1369), (-42875, 1444), (-42875, 1521), (-42875, 1600), (-42875, 1681), (-42875, 1764), (-42875, 1849), (-42875, 1936), (-42875, 2025), (-42875, 2116), (-42875, 2209), (-42875, 2304), (-42875, 2401), (-39304, 2500), (-39304, 2401), (-39304, 2304), (-39304, 2209), (-39304, 2116), (-39304, 2025), (-39304, 1936), (-39304, 1849), (-39304, 1764), (-39304, 1681), (-39304, 1600), (-39304, 1521), (-39304, 1444), (-39304, 1369), (-39304, 1296), (-39304, 1225), (-39304, 1156), (-39304, 1089), (-39304, 1024), (-39304, 961), (-39304, 900), (-39304, 841), (-39304, 784), (-39304, 729), (-39304, 676), (-39304, 625), (-39304, 576), (-39304, 529), (-39304, 484), (-39304, 441), (-39304, 400), (-39304, 361), (-39304, 324), (-39304, 289), (-39304, 256), (-39304, 225), (-39304, 196), (-39304, 169), (-39304, 144), (-39304, 121), (-39304, 100), (-39304, 81), (-39304, 64), (-39304, 49), (-39304, 36), (-39304, 25), (-39304, 16), (-39304, 9), (-39304, 4), (-39304, 1), (-39304, 0), (-39304, 1), (-39304, 4), (-39304, 9), (-39304, 16), (-39304, 25), (-39304, 36), (-39304, 49), (-39304, 64), (-39304, 81), (-39304, 100), (-39304, 121), (-39304, 144), (-39304, 169), (-39304, 196), (-39304, 225), (-39304, 256), (-39304, 289), (-39304, 324), (-39304, 361), (-39304, 400), (-39304, 441), (-39304, 484), (-39304, 529), (-39304, 576), (-39304, 625), (-39304, 676), (-39304, 729), (-39304, 784), (-39304, 841), (-39304, 900), (-39304, 961), (-39304, 1024), (-39304, 1089), (-39304, 1156), (-39304, 1225), (-39304, 1296), (-39304, 1369), (-39304, 1444), (-39304, 1521), (-39304, 1600), (-39304, 1681), (-39304, 1764), (-39304, 1849), (-39304, 1936), (-39304, 2025), (-39304, 2116), (-39304, 2209), (-39304, 2304), (-39304, 2401), (-35937, 2500), (-35937, 2401), (-35937, 2304), (-35937, 2209), (-35937, 2116), (-35937, 2025), (-35937, 1936), (-35937, 1849), (-35937, 1764), (-35937, 1681), (-35937, 1600), (-35937, 1521), (-35937, 1444), (-35937, 1369), (-35937, 1296), (-35937, 1225), (-35937, 1156), (-35937, 1089), (-35937, 1024), (-35937, 961), (-35937, 900), (-35937, 841), (-35937, 784), (-35937, 729), (-35937, 676), (-35937, 625), (-35937, 576), (-35937, 529), (-35937, 484), (-35937, 441), (-35937, 400), (-35937, 361), (-35937, 324), (-35937, 289), (-35937, 256), (-35937, 225), (-35937, 196), (-35937, 169), (-35937, 144), (-35937, 121), (-35937, 100), (-35937, 81), (-35937, 64), (-35937, 49), (-35937, 36), (-35937, 25), (-35937, 16), (-35937, 9), (-35937, 4), (-35937, 1), (-35937, 0), (-35937, 1), (-35937, 4), (-35937, 9), (-35937, 16), (-35937, 25), (-35937, 36), (-35937, 49), (-35937, 64), (-35937, 81), (-35937, 100), (-35937, 121), (-35937, 144), (-35937, 169), (-35937, 196), (-35937, 225), (-35937, 256), (-35937, 289), (-35937, 324), (-35937, 361), (-35937, 400), (-35937, 441), (-35937, 484), (-35937, 529), (-35937, 576), (-35937, 625), (-35937, 676), (-35937, 729), (-35937, 784), (-35937, 841), (-35937, 900), (-35937, 961), (-35937, 1024), (-35937, 1089), (-35937, 1156), (-35937, 1225), (-35937, 1296), (-35937, 1369), (-35937, 1444), (-35937, 1521), (-35937, 1600), (-35937, 1681), (-35937, 1764), (-35937, 1849), (-35937, 1936), (-35937, 2025), (-35937, 2116), (-35937, 2209), (-35937, 2304), (-35937, 2401), (-32768, 2500), (-32768, 2401), (-32768, 2304), (-32768, 2209), (-32768, 2116), (-32768, 2025), (-32768, 1936), (-32768, 1849), (-32768, 1764), (-32768, 1681), (-32768, 1600), (-32768, 1521), (-32768, 1444), (-32768, 1369), (-32768, 1296), (-32768, 1225), (-32768, 1156), (-32768, 1089), (-32768, 1024), (-32768, 961), (-32768, 900), (-32768, 841), (-32768, 784), (-32768, 729), (-32768, 676), (-32768, 625), (-32768, 576), (-32768, 529), (-32768, 484), (-32768, 441), (-32768, 400), (-32768, 361), (-32768, 324), (-32768, 289), (-32768, 256), (-32768, 225), (-32768, 196), (-32768, 169), (-32768, 144), (-32768, 121), (-32768, 100), (-32768, 81), (-32768, 64), (-32768, 49), (-32768, 36), (-32768, 25), (-32768, 16), (-32768, 9), (-32768, 4), (-32768, 1), (-32768, 0), (-32768, 1), (-32768, 4), (-32768, 9), (-32768, 16), (-32768, 25), (-32768, 36), (-32768, 49), (-32768, 64), (-32768, 81), (-32768, 100), (-32768, 121), (-32768, 144), (-32768, 169), (-32768, 196), (-32768, 225), (-32768, 256), (-32768, 289), (-32768, 324), (-32768, 361), (-32768, 400), (-32768, 441), (-32768, 484), (-32768, 529), (-32768, 576), (-32768, 625), (-32768, 676), (-32768, 729), (-32768, 784), (-32768, 841), (-32768, 900), (-32768, 961), (-32768, 1024), (-32768, 1089), (-32768, 1156), (-32768, 1225), (-32768, 1296), (-32768, 1369), (-32768, 1444), (-32768, 1521), (-32768, 1600), (-32768, 1681), (-32768, 1764), (-32768, 1849), (-32768, 1936), (-32768, 2025), (-32768, 2116), (-32768, 2209), (-32768, 2304), (-32768, 2401), (-29791, 2500), (-29791, 2401), (-29791, 2304), (-29791, 2209), (-29791, 2116), (-29791, 2025), (-29791, 1936), (-29791, 1849), (-29791, 1764), (-29791, 1681), (-29791, 1600), (-29791, 1521), (-29791, 1444), (-29791, 1369), (-29791, 1296), (-29791, 1225), (-29791, 1156), (-29791, 1089), (-29791, 1024), (-29791, 961), (-29791, 900), (-29791, 841), (-29791, 784), (-29791, 729), (-29791, 676), (-29791, 625), (-29791, 576), (-29791, 529), (-29791, 484), (-29791, 441), (-29791, 400), (-29791, 361), (-29791, 324), (-29791, 289), (-29791, 256), (-29791, 225), (-29791, 196), (-29791, 169), (-29791, 144), (-29791, 121), (-29791, 100), (-29791, 81), (-29791, 64), (-29791, 49), (-29791, 36), (-29791, 25), (-29791, 16), (-29791, 9), (-29791, 4), (-29791, 1), (-29791, 0), (-29791, 1), (-29791, 4), (-29791, 9), (-29791, 16), (-29791, 25), (-29791, 36), (-29791, 49), (-29791, 64), (-29791, 81), (-29791, 100), (-29791, 121), (-29791, 144), (-29791, 169), (-29791, 196), (-29791, 225), (-29791, 256), (-29791, 289), (-29791, 324), (-29791, 361), (-29791, 400), (-29791, 441), (-29791, 484), (-29791, 529), (-29791, 576), (-29791, 625), (-29791, 676), (-29791, 729), (-29791, 784), (-29791, 841), (-29791, 900), (-29791, 961), (-29791, 1024), (-29791, 1089), (-29791, 1156), (-29791, 1225), (-29791, 1296), (-29791, 1369), (-29791, 1444), (-29791, 1521), (-29791, 1600), (-29791, 1681), (-29791, 1764), (-29791, 1849), (-29791, 1936), (-29791, 2025), (-29791, 2116), (-29791, 2209), (-29791, 2304), (-29791, 2401), (-27000, 2500), (-27000, 2401), (-27000, 2304), (-27000, 2209), (-27000, 2116), (-27000, 2025), (-27000, 1936), (-27000, 1849), (-27000, 1764), (-27000, 1681), (-27000, 1600), (-27000, 1521), (-27000, 1444), (-27000, 1369), (-27000, 1296), (-27000, 1225), (-27000, 1156), (-27000, 1089), (-27000, 1024), (-27000, 961), (-27000, 900), (-27000, 841), (-27000, 784), (-27000, 729), (-27000, 676), (-27000, 625), (-27000, 576), (-27000, 529), (-27000, 484), (-27000, 441), (-27000, 400), (-27000, 361), (-27000, 324), (-27000, 289), (-27000, 256), (-27000, 225), (-27000, 196), (-27000, 169), (-27000, 144), (-27000, 121), (-27000, 100), (-27000, 81), (-27000, 64), (-27000, 49), (-27000, 36), (-27000, 25), (-27000, 16), (-27000, 9), (-27000, 4), (-27000, 1), (-27000, 0), (-27000, 1), (-27000, 4), (-27000, 9), (-27000, 16), (-27000, 25), (-27000, 36), (-27000, 49), (-27000, 64), (-27000, 81), (-27000, 100), (-27000, 121), (-27000, 144), (-27000, 169), (-27000, 196), (-27000, 225), (-27000, 256), (-27000, 289), (-27000, 324), (-27000, 361), (-27000, 400), (-27000, 441), (-27000, 484), (-27000, 529), (-27000, 576), (-27000, 625), (-27000, 676), (-27000, 729), (-27000, 784), (-27000, 841), (-27000, 900), (-27000, 961), (-27000, 1024), (-27000, 1089), (-27000, 1156), (-27000, 1225), (-27000, 1296), (-27000, 1369), (-27000, 1444), (-27000, 1521), (-27000, 1600), (-27000, 1681), (-27000, 1764), (-27000, 1849), (-27000, 1936), (-27000, 2025), (-27000, 2116), (-27000, 2209), (-27000, 2304), (-27000, 2401), (-24389, 2500), (-24389, 2401), (-24389, 2304), (-24389, 2209), (-24389, 2116), (-24389, 2025), (-24389, 1936), (-24389, 1849), (-24389, 1764), (-24389, 1681), (-24389, 1600), (-24389, 1521), (-24389, 1444), (-24389, 1369), (-24389, 1296), (-24389, 1225), (-24389, 1156), (-24389, 1089), (-24389, 1024), (-24389, 961), (-24389, 900), (-24389, 841), (-24389, 784), (-24389, 729), (-24389, 676), (-24389, 625), (-24389, 576), (-24389, 529), (-24389, 484), (-24389, 441), (-24389, 400), (-24389, 361), (-24389, 324), (-24389, 289), (-24389, 256), (-24389, 225), (-24389, 196), (-24389, 169), (-24389, 144), (-24389, 121), (-24389, 100), (-24389, 81), (-24389, 64), (-24389, 49), (-24389, 36), (-24389, 25), (-24389, 16), (-24389, 9), (-24389, 4), (-24389, 1), (-24389, 0), (-24389, 1), (-24389, 4), (-24389, 9), (-24389, 16), (-24389, 25), (-24389, 36), (-24389, 49), (-24389, 64), (-24389, 81), (-24389, 100), (-24389, 121), (-24389, 144), (-24389, 169), (-24389, 196), (-24389, 225), (-24389, 256), (-24389, 289), (-24389, 324), (-24389, 361), (-24389, 400), (-24389, 441), (-24389, 484), (-24389, 529), (-24389, 576), (-24389, 625), (-24389, 676), (-24389, 729), (-24389, 784), (-24389, 841), (-24389, 900), (-24389, 961), (-24389, 1024), (-24389, 1089), (-24389, 1156), (-24389, 1225), (-24389, 1296), (-24389, 1369), (-24389, 1444), (-24389, 1521), (-24389, 1600), (-24389, 1681), (-24389, 1764), (-24389, 1849), (-24389, 1936), (-24389, 2025), (-24389, 2116), (-24389, 2209), (-24389, 2304), (-24389, 2401), (-21952, 2500), (-21952, 2401), (-21952, 2304), (-21952, 2209), (-21952, 2116), (-21952, 2025), (-21952, 1936), (-21952, 1849), (-21952, 1764), (-21952, 1681), (-21952, 1600), (-21952, 1521), (-21952, 1444), (-21952, 1369), (-21952, 1296), (-21952, 1225), (-21952, 1156), (-21952, 1089), (-21952, 1024), (-21952, 961), (-21952, 900), (-21952, 841), (-21952, 784), (-21952, 729), (-21952, 676), (-21952, 625), (-21952, 576), (-21952, 529), (-21952, 484), (-21952, 441), (-21952, 400), (-21952, 361), (-21952, 324), (-21952, 289), (-21952, 256), (-21952, 225), (-21952, 196), (-21952, 169), (-21952, 144), (-21952, 121), (-21952, 100), (-21952, 81), (-21952, 64), (-21952, 49), (-21952, 36), (-21952, 25), (-21952, 16), (-21952, 9), (-21952, 4), (-21952, 1), (-21952, 0), (-21952, 1), (-21952, 4), (-21952, 9), (-21952, 16), (-21952, 25), (-21952, 36), (-21952, 49), (-21952, 64), (-21952, 81), (-21952, 100), (-21952, 121), (-21952, 144), (-21952, 169), (-21952, 196), (-21952, 225), (-21952, 256), (-21952, 289), (-21952, 324), (-21952, 361), (-21952, 400), (-21952, 441), (-21952, 484), (-21952, 529), (-21952, 576), (-21952, 625), (-21952, 676), (-21952, 729), (-21952, 784), (-21952, 841), (-21952, 900), (-21952, 961), (-21952, 1024), (-21952, 1089), (-21952, 1156), (-21952, 1225), (-21952, 1296), (-21952, 1369), (-21952, 1444), (-21952, 1521), (-21952, 1600), (-21952, 1681), (-21952, 1764), (-21952, 1849), (-21952, 1936), (-21952, 2025), (-21952, 2116), (-21952, 2209), (-21952, 2304), (-21952, 2401), (-19683, 2500), (-19683, 2401), (-19683, 2304), (-19683, 2209), (-19683, 2116), (-19683, 2025), (-19683, 1936), (-19683, 1849), (-19683, 1764), (-19683, 1681), (-19683, 1600), (-19683, 1521), (-19683, 1444), (-19683, 1369), (-19683, 1296), (-19683, 1225), (-19683, 1156), (-19683, 1089), (-19683, 1024), (-19683, 961), (-19683, 900), (-19683, 841), (-19683, 784), (-19683, 729), (-19683, 676), (-19683, 625), (-19683, 576), (-19683, 529), (-19683, 484), (-19683, 441), (-19683, 400), (-19683, 361), (-19683, 324), (-19683, 289), (-19683, 256), (-19683, 225), (-19683, 196), (-19683, 169), (-19683, 144), (-19683, 121), (-19683, 100), (-19683, 81), (-19683, 64), (-19683, 49), (-19683, 36), (-19683, 25), (-19683, 16), (-19683, 9), (-19683, 4), (-19683, 1), (-19683, 0), (-19683, 1), (-19683, 4), (-19683, 9), (-19683, 16), (-19683, 25), (-19683, 36), (-19683, 49), (-19683, 64), (-19683, 81), (-19683, 100), (-19683, 121), (-19683, 144), (-19683, 169), (-19683, 196), (-19683, 225), (-19683, 256), (-19683, 289), (-19683, 324), (-19683, 361), (-19683, 400), (-19683, 441), (-19683, 484), (-19683, 529), (-19683, 576), (-19683, 625), (-19683, 676), (-19683, 729), (-19683, 784), (-19683, 841), (-19683, 900), (-19683, 961), (-19683, 1024), (-19683, 1089), (-19683, 1156), (-19683, 1225), (-19683, 1296), (-19683, 1369), (-19683, 1444), (-19683, 1521), (-19683, 1600), (-19683, 1681), (-19683, 1764), (-19683, 1849), (-19683, 1936), (-19683, 2025), (-19683, 2116), (-19683, 2209), (-19683, 2304), (-19683, 2401), (-17576, 2500), (-17576, 2401), (-17576, 2304), (-17576, 2209), (-17576, 2116), (-17576, 2025), (-17576, 1936), (-17576, 1849), (-17576, 1764), (-17576, 1681), (-17576, 1600), (-17576, 1521), (-17576, 1444), (-17576, 1369), (-17576, 1296), (-17576, 1225), (-17576, 1156), (-17576, 1089), (-17576, 1024), (-17576, 961), (-17576, 900), (-17576, 841), (-17576, 784), (-17576, 729), (-17576, 676), (-17576, 625), (-17576, 576), (-17576, 529), (-17576, 484), (-17576, 441), (-17576, 400), (-17576, 361), (-17576, 324), (-17576, 289), (-17576, 256), (-17576, 225), (-17576, 196), (-17576, 169), (-17576, 144), (-17576, 121), (-17576, 100), (-17576, 81), (-17576, 64), (-17576, 49), (-17576, 36), (-17576, 25), (-17576, 16), (-17576, 9), (-17576, 4), (-17576, 1), (-17576, 0), (-17576, 1), (-17576, 4), (-17576, 9), (-17576, 16), (-17576, 25), (-17576, 36), (-17576, 49), (-17576, 64), (-17576, 81), (-17576, 100), (-17576, 121), (-17576, 144), (-17576, 169), (-17576, 196), (-17576, 225), (-17576, 256), (-17576, 289), (-17576, 324), (-17576, 361), (-17576, 400), (-17576, 441), (-17576, 484), (-17576, 529), (-17576, 576), (-17576, 625), (-17576, 676), (-17576, 729), (-17576, 784), (-17576, 841), (-17576, 900), (-17576, 961), (-17576, 1024), (-17576, 1089), (-17576, 1156), (-17576, 1225), (-17576, 1296), (-17576, 1369), (-17576, 1444), (-17576, 1521), (-17576, 1600), (-17576, 1681), (-17576, 1764), (-17576, 1849), (-17576, 1936), (-17576, 2025), (-17576, 2116), (-17576, 2209), (-17576, 2304), (-17576, 2401), (-15625, 2500), (-15625, 2401), (-15625, 2304), (-15625, 2209), (-15625, 2116), (-15625, 2025), (-15625, 1936), (-15625, 1849), (-15625, 1764), (-15625, 1681), (-15625, 1600), (-15625, 1521), (-15625, 1444), (-15625, 1369), (-15625, 1296), (-15625, 1225), (-15625, 1156), (-15625, 1089), (-15625, 1024), (-15625, 961), (-15625, 900), (-15625, 841), (-15625, 784), (-15625, 729), (-15625, 676), (-15625, 625), (-15625, 576), (-15625, 529), (-15625, 484), (-15625, 441), (-15625, 400), (-15625, 361), (-15625, 324), (-15625, 289), (-15625, 256), (-15625, 225), (-15625, 196), (-15625, 169), (-15625, 144), (-15625, 121), (-15625, 100), (-15625, 81), (-15625, 64), (-15625, 49), (-15625, 36), (-15625, 25), (-15625, 16), (-15625, 9), (-15625, 4), (-15625, 1), (-15625, 0), (-15625, 1), (-15625, 4), (-15625, 9), (-15625, 16), (-15625, 25), (-15625, 36), (-15625, 49), (-15625, 64), (-15625, 81), (-15625, 100), (-15625, 121), (-15625, 144), (-15625, 169), (-15625, 196), (-15625, 225), (-15625, 256), (-15625, 289), (-15625, 324), (-15625, 361), (-15625, 400), (-15625, 441), (-15625, 484), (-15625, 529), (-15625, 576), (-15625, 625), (-15625, 676), (-15625, 729), (-15625, 784), (-15625, 841), (-15625, 900), (-15625, 961), (-15625, 1024), (-15625, 1089), (-15625, 1156), (-15625, 1225), (-15625, 1296), (-15625, 1369), (-15625, 1444), (-15625, 1521), (-15625, 1600), (-15625, 1681), (-15625, 1764), (-15625, 1849), (-15625, 1936), (-15625, 2025), (-15625, 2116), (-15625, 2209), (-15625, 2304), (-15625, 2401), (-13824, 2500), (-13824, 2401), (-13824, 2304), (-13824, 2209), (-13824, 2116), (-13824, 2025), (-13824, 1936), (-13824, 1849), (-13824, 1764), (-13824, 1681), (-13824, 1600), (-13824, 1521), (-13824, 1444), (-13824, 1369), (-13824, 1296), (-13824, 1225), (-13824, 1156), (-13824, 1089), (-13824, 1024), (-13824, 961), (-13824, 900), (-13824, 841), (-13824, 784), (-13824, 729), (-13824, 676), (-13824, 625), (-13824, 576), (-13824, 529), (-13824, 484), (-13824, 441), (-13824, 400), (-13824, 361), (-13824, 324), (-13824, 289), (-13824, 256), (-13824, 225), (-13824, 196), (-13824, 169), (-13824, 144), (-13824, 121), (-13824, 100), (-13824, 81), (-13824, 64), (-13824, 49), (-13824, 36), (-13824, 25), (-13824, 16), (-13824, 9), (-13824, 4), (-13824, 1), (-13824, 0), (-13824, 1), (-13824, 4), (-13824, 9), (-13824, 16), (-13824, 25), (-13824, 36), (-13824, 49), (-13824, 64), (-13824, 81), (-13824, 100), (-13824, 121), (-13824, 144), (-13824, 169), (-13824, 196), (-13824, 225), (-13824, 256), (-13824, 289), (-13824, 324), (-13824, 361), (-13824, 400), (-13824, 441), (-13824, 484), (-13824, 529), (-13824, 576), (-13824, 625), (-13824, 676), (-13824, 729), (-13824, 784), (-13824, 841), (-13824, 900), (-13824, 961), (-13824, 1024), (-13824, 1089), (-13824, 1156), (-13824, 1225), (-13824, 1296), (-13824, 1369), (-13824, 1444), (-13824, 1521), (-13824, 1600), (-13824, 1681), (-13824, 1764), (-13824, 1849), (-13824, 1936), (-13824, 2025), (-13824, 2116), (-13824, 2209), (-13824, 2304), (-13824, 2401), (-12167, 2500), (-12167, 2401), (-12167, 2304), (-12167, 2209), (-12167, 2116), (-12167, 2025), (-12167, 1936), (-12167, 1849), (-12167, 1764), (-12167, 1681), (-12167, 1600), (-12167, 1521), (-12167, 1444), (-12167, 1369), (-12167, 1296), (-12167, 1225), (-12167, 1156), (-12167, 1089), (-12167, 1024), (-12167, 961), (-12167, 900), (-12167, 841), (-12167, 784), (-12167, 729), (-12167, 676), (-12167, 625), (-12167, 576), (-12167, 529), (-12167, 484), (-12167, 441), (-12167, 400), (-12167, 361), (-12167, 324), (-12167, 289), (-12167, 256), (-12167, 225), (-12167, 196), (-12167, 169), (-12167, 144), (-12167, 121), (-12167, 100), (-12167, 81), (-12167, 64), (-12167, 49), (-12167, 36), (-12167, 25), (-12167, 16), (-12167, 9), (-12167, 4), (-12167, 1), (-12167, 0), (-12167, 1), (-12167, 4), (-12167, 9), (-12167, 16), (-12167, 25), (-12167, 36), (-12167, 49), (-12167, 64), (-12167, 81), (-12167, 100), (-12167, 121), (-12167, 144), (-12167, 169), (-12167, 196), (-12167, 225), (-12167, 256), (-12167, 289), (-12167, 324), (-12167, 361), (-12167, 400), (-12167, 441), (-12167, 484), (-12167, 529), (-12167, 576), (-12167, 625), (-12167, 676), (-12167, 729), (-12167, 784), (-12167, 841), (-12167, 900), (-12167, 961), (-12167, 1024), (-12167, 1089), (-12167, 1156), (-12167, 1225), (-12167, 1296), (-12167, 1369), (-12167, 1444), (-12167, 1521), (-12167, 1600), (-12167, 1681), (-12167, 1764), (-12167, 1849), (-12167, 1936), (-12167, 2025), (-12167, 2116), (-12167, 2209), (-12167, 2304), (-12167, 2401), (-10648, 2500), (-10648, 2401), (-10648, 2304), (-10648, 2209), (-10648, 2116), (-10648, 2025), (-10648, 1936), (-10648, 1849), (-10648, 1764), (-10648, 1681), (-10648, 1600), (-10648, 1521), (-10648, 1444), (-10648, 1369), (-10648, 1296), (-10648, 1225), (-10648, 1156), (-10648, 1089), (-10648, 1024), (-10648, 961), (-10648, 900), (-10648, 841), (-10648, 784), (-10648, 729), (-10648, 676), (-10648, 625), (-10648, 576), (-10648, 529), (-10648, 484), (-10648, 441), (-10648, 400), (-10648, 361), (-10648, 324), (-10648, 289), (-10648, 256), (-10648, 225), (-10648, 196), (-10648, 169), (-10648, 144), (-10648, 121), (-10648, 100), (-10648, 81), (-10648, 64), (-10648, 49), (-10648, 36), (-10648, 25), (-10648, 16), (-10648, 9), (-10648, 4), (-10648, 1), (-10648, 0), (-10648, 1), (-10648, 4), (-10648, 9), (-10648, 16), (-10648, 25), (-10648, 36), (-10648, 49), (-10648, 64), (-10648, 81), (-10648, 100), (-10648, 121), (-10648, 144), (-10648, 169), (-10648, 196), (-10648, 225), (-10648, 256), (-10648, 289), (-10648, 324), (-10648, 361), (-10648, 400), (-10648, 441), (-10648, 484), (-10648, 529), (-10648, 576), (-10648, 625), (-10648, 676), (-10648, 729), (-10648, 784), (-10648, 841), (-10648, 900), (-10648, 961), (-10648, 1024), (-10648, 1089), (-10648, 1156), (-10648, 1225), (-10648, 1296), (-10648, 1369), (-10648, 1444), (-10648, 1521), (-10648, 1600), (-10648, 1681), (-10648, 1764), (-10648, 1849), (-10648, 1936), (-10648, 2025), (-10648, 2116), (-10648, 2209), (-10648, 2304), (-10648, 2401), (-9261, 2500), (-9261, 2401), (-9261, 2304), (-9261, 2209), (-9261, 2116), (-9261, 2025), (-9261, 1936), (-9261, 1849), (-9261, 1764), (-9261, 1681), (-9261, 1600), (-9261, 1521), (-9261, 1444), (-9261, 1369), (-9261, 1296), (-9261, 1225), (-9261, 1156), (-9261, 1089), (-9261, 1024), (-9261, 961), (-9261, 900), (-9261, 841), (-9261, 784), (-9261, 729), (-9261, 676), (-9261, 625), (-9261, 576), (-9261, 529), (-9261, 484), (-9261, 441), (-9261, 400), (-9261, 361), (-9261, 324), (-9261, 289), (-9261, 256), (-9261, 225), (-9261, 196), (-9261, 169), (-9261, 144), (-9261, 121), (-9261, 100), (-9261, 81), (-9261, 64), (-9261, 49), (-9261, 36), (-9261, 25), (-9261, 16), (-9261, 9), (-9261, 4), (-9261, 1), (-9261, 0), (-9261, 1), (-9261, 4), (-9261, 9), (-9261, 16), (-9261, 25), (-9261, 36), (-9261, 49), (-9261, 64), (-9261, 81), (-9261, 100), (-9261, 121), (-9261, 144), (-9261, 169), (-9261, 196), (-9261, 225), (-9261, 256), (-9261, 289), (-9261, 324), (-9261, 361), (-9261, 400), (-9261, 441), (-9261, 484), (-9261, 529), (-9261, 576), (-9261, 625), (-9261, 676), (-9261, 729), (-9261, 784), (-9261, 841), (-9261, 900), (-9261, 961), (-9261, 1024), (-9261, 1089), (-9261, 1156), (-9261, 1225), (-9261, 1296), (-9261, 1369), (-9261, 1444), (-9261, 1521), (-9261, 1600), (-9261, 1681), (-9261, 1764), (-9261, 1849), (-9261, 1936), (-9261, 2025), (-9261, 2116), (-9261, 2209), (-9261, 2304), (-9261, 2401), (-8000, 2500), (-8000, 2401), (-8000, 2304), (-8000, 2209), (-8000, 2116), (-8000, 2025), (-8000, 1936), (-8000, 1849), (-8000, 1764), (-8000, 1681), (-8000, 1600), (-8000, 1521), (-8000, 1444), (-8000, 1369), (-8000, 1296), (-8000, 1225), (-8000, 1156), (-8000, 1089), (-8000, 1024), (-8000, 961), (-8000, 900), (-8000, 841), (-8000, 784), (-8000, 729), (-8000, 676), (-8000, 625), (-8000, 576), (-8000, 529), (-8000, 484), (-8000, 441), (-8000, 400), (-8000, 361), (-8000, 324), (-8000, 289), (-8000, 256), (-8000, 225), (-8000, 196), (-8000, 169), (-8000, 144), (-8000, 121), (-8000, 100), (-8000, 81), (-8000, 64), (-8000, 49), (-8000, 36), (-8000, 25), (-8000, 16), (-8000, 9), (-8000, 4), (-8000, 1), (-8000, 0), (-8000, 1), (-8000, 4), (-8000, 9), (-8000, 16), (-8000, 25), (-8000, 36), (-8000, 49), (-8000, 64), (-8000, 81), (-8000, 100), (-8000, 121), (-8000, 144), (-8000, 169), (-8000, 196), (-8000, 225), (-8000, 256), (-8000, 289), (-8000, 324), (-8000, 361), (-8000, 400), (-8000, 441), (-8000, 484), (-8000, 529), (-8000, 576), (-8000, 625), (-8000, 676), (-8000, 729), (-8000, 784), (-8000, 841), (-8000, 900), (-8000, 961), (-8000, 1024), (-8000, 1089), (-8000, 1156), (-8000, 1225), (-8000, 1296), (-8000, 1369), (-8000, 1444), (-8000, 1521), (-8000, 1600), (-8000, 1681), (-8000, 1764), (-8000, 1849), (-8000, 1936), (-8000, 2025), (-8000, 2116), (-8000, 2209), (-8000, 2304), (-8000, 2401), (-6859, 2500), (-6859, 2401), (-6859, 2304), (-6859, 2209), (-6859, 2116), (-6859, 2025), (-6859, 1936), (-6859, 1849), (-6859, 1764), (-6859, 1681), (-6859, 1600), (-6859, 1521), (-6859, 1444), (-6859, 1369), (-6859, 1296), (-6859, 1225), (-6859, 1156), (-6859, 1089), (-6859, 1024), (-6859, 961), (-6859, 900), (-6859, 841), (-6859, 784), (-6859, 729), (-6859, 676), (-6859, 625), (-6859, 576), (-6859, 529), (-6859, 484), (-6859, 441), (-6859, 400), (-6859, 361), (-6859, 324), (-6859, 289), (-6859, 256), (-6859, 225), (-6859, 196), (-6859, 169), (-6859, 144), (-6859, 121), (-6859, 100), (-6859, 81), (-6859, 64), (-6859, 49), (-6859, 36), (-6859, 25), (-6859, 16), (-6859, 9), (-6859, 4), (-6859, 1), (-6859, 0), (-6859, 1), (-6859, 4), (-6859, 9), (-6859, 16), (-6859, 25), (-6859, 36), (-6859, 49), (-6859, 64), (-6859, 81), (-6859, 100), (-6859, 121), (-6859, 144), (-6859, 169), (-6859, 196), (-6859, 225), (-6859, 256), (-6859, 289), (-6859, 324), (-6859, 361), (-6859, 400), (-6859, 441), (-6859, 484), (-6859, 529), (-6859, 576), (-6859, 625), (-6859, 676), (-6859, 729), (-6859, 784), (-6859, 841), (-6859, 900), (-6859, 961), (-6859, 1024), (-6859, 1089), (-6859, 1156), (-6859, 1225), (-6859, 1296), (-6859, 1369), (-6859, 1444), (-6859, 1521), (-6859, 1600), (-6859, 1681), (-6859, 1764), (-6859, 1849), (-6859, 1936), (-6859, 2025), (-6859, 2116), (-6859, 2209), (-6859, 2304), (-6859, 2401), (-5832, 2500), (-5832, 2401), (-5832, 2304), (-5832, 2209), (-5832, 2116), (-5832, 2025), (-5832, 1936), (-5832, 1849), (-5832, 1764), (-5832, 1681), (-5832, 1600), (-5832, 1521), (-5832, 1444), (-5832, 1369), (-5832, 1296), (-5832, 1225), (-5832, 1156), (-5832, 1089), (-5832, 1024), (-5832, 961), (-5832, 900), (-5832, 841), (-5832, 784), (-5832, 729), (-5832, 676), (-5832, 625), (-5832, 576), (-5832, 529), (-5832, 484), (-5832, 441), (-5832, 400), (-5832, 361), (-5832, 324), (-5832, 289), (-5832, 256), (-5832, 225), (-5832, 196), (-5832, 169), (-5832, 144), (-5832, 121), (-5832, 100), (-5832, 81), (-5832, 64), (-5832, 49), (-5832, 36), (-5832, 25), (-5832, 16), (-5832, 9), (-5832, 4), (-5832, 1), (-5832, 0), (-5832, 1), (-5832, 4), (-5832, 9), (-5832, 16), (-5832, 25), (-5832, 36), (-5832, 49), (-5832, 64), (-5832, 81), (-5832, 100), (-5832, 121), (-5832, 144), (-5832, 169), (-5832, 196), (-5832, 225), (-5832, 256), (-5832, 289), (-5832, 324), (-5832, 361), (-5832, 400), (-5832, 441), (-5832, 484), (-5832, 529), (-5832, 576), (-5832, 625), (-5832, 676), (-5832, 729), (-5832, 784), (-5832, 841), (-5832, 900), (-5832, 961), (-5832, 1024), (-5832, 1089), (-5832, 1156), (-5832, 1225), (-5832, 1296), (-5832, 1369), (-5832, 1444), (-5832, 1521), (-5832, 1600), (-5832, 1681), (-5832, 1764), (-5832, 1849), (-5832, 1936), (-5832, 2025), (-5832, 2116), (-5832, 2209), (-5832, 2304), (-5832, 2401), (-4913, 2500), (-4913, 2401), (-4913, 2304), (-4913, 2209), (-4913, 2116), (-4913, 2025), (-4913, 1936), (-4913, 1849), (-4913, 1764), (-4913, 1681), (-4913, 1600), (-4913, 1521), (-4913, 1444), (-4913, 1369), (-4913, 1296), (-4913, 1225), (-4913, 1156), (-4913, 1089), (-4913, 1024), (-4913, 961), (-4913, 900), (-4913, 841), (-4913, 784), (-4913, 729), (-4913, 676), (-4913, 625), (-4913, 576), (-4913, 529), (-4913, 484), (-4913, 441), (-4913, 400), (-4913, 361), (-4913, 324), (-4913, 289), (-4913, 256), (-4913, 225), (-4913, 196), (-4913, 169), (-4913, 144), (-4913, 121), (-4913, 100), (-4913, 81), (-4913, 64), (-4913, 49), (-4913, 36), (-4913, 25), (-4913, 16), (-4913, 9), (-4913, 4), (-4913, 1), (-4913, 0), (-4913, 1), (-4913, 4), (-4913, 9), (-4913, 16), (-4913, 25), (-4913, 36), (-4913, 49), (-4913, 64), (-4913, 81), (-4913, 100), (-4913, 121), (-4913, 144), (-4913, 169), (-4913, 196), (-4913, 225), (-4913, 256), (-4913, 289), (-4913, 324), (-4913, 361), (-4913, 400), (-4913, 441), (-4913, 484), (-4913, 529), (-4913, 576), (-4913, 625), (-4913, 676), (-4913, 729), (-4913, 784), (-4913, 841), (-4913, 900), (-4913, 961), (-4913, 1024), (-4913, 1089), (-4913, 1156), (-4913, 1225), (-4913, 1296), (-4913, 1369), (-4913, 1444), (-4913, 1521), (-4913, 1600), (-4913, 1681), (-4913, 1764), (-4913, 1849), (-4913, 1936), (-4913, 2025), (-4913, 2116), (-4913, 2209), (-4913, 2304), (-4913, 2401), (-4096, 2500), (-4096, 2401), (-4096, 2304), (-4096, 2209), (-4096, 2116), (-4096, 2025), (-4096, 1936), (-4096, 1849), (-4096, 1764), (-4096, 1681), (-4096, 1600), (-4096, 1521), (-4096, 1444), (-4096, 1369), (-4096, 1296), (-4096, 1225), (-4096, 1156), (-4096, 1089), (-4096, 1024), (-4096, 961), (-4096, 900), (-4096, 841), (-4096, 784), (-4096, 729), (-4096, 676), (-4096, 625), (-4096, 576), (-4096, 529), (-4096, 484), (-4096, 441), (-4096, 400), (-4096, 361), (-4096, 324), (-4096, 289), (-4096, 256), (-4096, 225), (-4096, 196), (-4096, 169), (-4096, 144), (-4096, 121), (-4096, 100), (-4096, 81), (-4096, 64), (-4096, 49), (-4096, 36), (-4096, 25), (-4096, 16), (-4096, 9), (-4096, 4), (-4096, 1), (-4096, 0), (-4096, 1), (-4096, 4), (-4096, 9), (-4096, 16), (-4096, 25), (-4096, 36), (-4096, 49), (-4096, 64), (-4096, 81), (-4096, 100), (-4096, 121), (-4096, 144), (-4096, 169), (-4096, 196), (-4096, 225), (-4096, 256), (-4096, 289), (-4096, 324), (-4096, 361), (-4096, 400), (-4096, 441), (-4096, 484), (-4096, 529), (-4096, 576), (-4096, 625), (-4096, 676), (-4096, 729), (-4096, 784), (-4096, 841), (-4096, 900), (-4096, 961), (-4096, 1024), (-4096, 1089), (-4096, 1156), (-4096, 1225), (-4096, 1296), (-4096, 1369), (-4096, 1444), (-4096, 1521), (-4096, 1600), (-4096, 1681), (-4096, 1764), (-4096, 1849), (-4096, 1936), (-4096, 2025), (-4096, 2116), (-4096, 2209), (-4096, 2304), (-4096, 2401), (-3375, 2500), (-3375, 2401), (-3375, 2304), (-3375, 2209), (-3375, 2116), (-3375, 2025), (-3375, 1936), (-3375, 1849), (-3375, 1764), (-3375, 1681), (-3375, 1600), (-3375, 1521), (-3375, 1444), (-3375, 1369), (-3375, 1296), (-3375, 1225), (-3375, 1156), (-3375, 1089), (-3375, 1024), (-3375, 961), (-3375, 900), (-3375, 841), (-3375, 784), (-3375, 729), (-3375, 676), (-3375, 625), (-3375, 576), (-3375, 529), (-3375, 484), (-3375, 441), (-3375, 400), (-3375, 361), (-3375, 324), (-3375, 289), (-3375, 256), (-3375, 225), (-3375, 196), (-3375, 169), (-3375, 144), (-3375, 121), (-3375, 100), (-3375, 81), (-3375, 64), (-3375, 49), (-3375, 36), (-3375, 25), (-3375, 16), (-3375, 9), (-3375, 4), (-3375, 1), (-3375, 0), (-3375, 1), (-3375, 4), (-3375, 9), (-3375, 16), (-3375, 25), (-3375, 36), (-3375, 49), (-3375, 64), (-3375, 81), (-3375, 100), (-3375, 121), (-3375, 144), (-3375, 169), (-3375, 196), (-3375, 225), (-3375, 256), (-3375, 289), (-3375, 324), (-3375, 361), (-3375, 400), (-3375, 441), (-3375, 484), (-3375, 529), (-3375, 576), (-3375, 625), (-3375, 676), (-3375, 729), (-3375, 784), (-3375, 841), (-3375, 900), (-3375, 961), (-3375, 1024), (-3375, 1089), (-3375, 1156), (-3375, 1225), (-3375, 1296), (-3375, 1369), (-3375, 1444), (-3375, 1521), (-3375, 1600), (-3375, 1681), (-3375, 1764), (-3375, 1849), (-3375, 1936), (-3375, 2025), (-3375, 2116), (-3375, 2209), (-3375, 2304), (-3375, 2401), (-2744, 2500), (-2744, 2401), (-2744, 2304), (-2744, 2209), (-2744, 2116), (-2744, 2025), (-2744, 1936), (-2744, 1849), (-2744, 1764), (-2744, 1681), (-2744, 1600), (-2744, 1521), (-2744, 1444), (-2744, 1369), (-2744, 1296), (-2744, 1225), (-2744, 1156), (-2744, 1089), (-2744, 1024), (-2744, 961), (-2744, 900), (-2744, 841), (-2744, 784), (-2744, 729), (-2744, 676), (-2744, 625), (-2744, 576), (-2744, 529), (-2744, 484), (-2744, 441), (-2744, 400), (-2744, 361), (-2744, 324), (-2744, 289), (-2744, 256), (-2744, 225), (-2744, 196), (-2744, 169), (-2744, 144), (-2744, 121), (-2744, 100), (-2744, 81), (-2744, 64), (-2744, 49), (-2744, 36), (-2744, 25), (-2744, 16), (-2744, 9), (-2744, 4), (-2744, 1), (-2744, 0), (-2744, 1), (-2744, 4), (-2744, 9), (-2744, 16), (-2744, 25), (-2744, 36), (-2744, 49), (-2744, 64), (-2744, 81), (-2744, 100), (-2744, 121), (-2744, 144), (-2744, 169), (-2744, 196), (-2744, 225), (-2744, 256), (-2744, 289), (-2744, 324), (-2744, 361), (-2744, 400), (-2744, 441), (-2744, 484), (-2744, 529), (-2744, 576), (-2744, 625), (-2744, 676), (-2744, 729), (-2744, 784), (-2744, 841), (-2744, 900), (-2744, 961), (-2744, 1024), (-2744, 1089), (-2744, 1156), (-2744, 1225), (-2744, 1296), (-2744, 1369), (-2744, 1444), (-2744, 1521), (-2744, 1600), (-2744, 1681), (-2744, 1764), (-2744, 1849), (-2744, 1936), (-2744, 2025), (-2744, 2116), (-2744, 2209), (-2744, 2304), (-2744, 2401), (-2197, 2500), (-2197, 2401), (-2197, 2304), (-2197, 2209), (-2197, 2116), (-2197, 2025), (-2197, 1936), (-2197, 1849), (-2197, 1764), (-2197, 1681), (-2197, 1600), (-2197, 1521), (-2197, 1444), (-2197, 1369), (-2197, 1296), (-2197, 1225), (-2197, 1156), (-2197, 1089), (-2197, 1024), (-2197, 961), (-2197, 900), (-2197, 841), (-2197, 784), (-2197, 729), (-2197, 676), (-2197, 625), (-2197, 576), (-2197, 529), (-2197, 484), (-2197, 441), (-2197, 400), (-2197, 361), (-2197, 324), (-2197, 289), (-2197, 256), (-2197, 225), (-2197, 196), (-2197, 169), (-2197, 144), (-2197, 121), (-2197, 100), (-2197, 81), (-2197, 64), (-2197, 49), (-2197, 36), (-2197, 25), (-2197, 16), (-2197, 9), (-2197, 4), (-2197, 1), (-2197, 0), (-2197, 1), (-2197, 4), (-2197, 9), (-2197, 16), (-2197, 25), (-2197, 36), (-2197, 49), (-2197, 64), (-2197, 81), (-2197, 100), (-2197, 121), (-2197, 144), (-2197, 169), (-2197, 196), (-2197, 225), (-2197, 256), (-2197, 289), (-2197, 324), (-2197, 361), (-2197, 400), (-2197, 441), (-2197, 484), (-2197, 529), (-2197, 576), (-2197, 625), (-2197, 676), (-2197, 729), (-2197, 784), (-2197, 841), (-2197, 900), (-2197, 961), (-2197, 1024), (-2197, 1089), (-2197, 1156), (-2197, 1225), (-2197, 1296), (-2197, 1369), (-2197, 1444), (-2197, 1521), (-2197, 1600), (-2197, 1681), (-2197, 1764), (-2197, 1849), (-2197, 1936), (-2197, 2025), (-2197, 2116), (-2197, 2209), (-2197, 2304), (-2197, 2401), (-1728, 2500), (-1728, 2401), (-1728, 2304), (-1728, 2209), (-1728, 2116), (-1728, 2025), (-1728, 1936), (-1728, 1849), (-1728, 1764), (-1728, 1681), (-1728, 1600), (-1728, 1521), (-1728, 1444), (-1728, 1369), (-1728, 1296), (-1728, 1225), (-1728, 1156), (-1728, 1089), (-1728, 1024), (-1728, 961), (-1728, 900), (-1728, 841), (-1728, 784), (-1728, 729), (-1728, 676), (-1728, 625), (-1728, 576), (-1728, 529), (-1728, 484), (-1728, 441), (-1728, 400), (-1728, 361), (-1728, 324), (-1728, 289), (-1728, 256), (-1728, 225), (-1728, 196), (-1728, 169), (-1728, 144), (-1728, 121), (-1728, 100), (-1728, 81), (-1728, 64), (-1728, 49), (-1728, 36), (-1728, 25), (-1728, 16), (-1728, 9), (-1728, 4), (-1728, 1), (-1728, 0), (-1728, 1), (-1728, 4), (-1728, 9), (-1728, 16), (-1728, 25), (-1728, 36), (-1728, 49), (-1728, 64), (-1728, 81), (-1728, 100), (-1728, 121), (-1728, 144), (-1728, 169), (-1728, 196), (-1728, 225), (-1728, 256), (-1728, 289), (-1728, 324), (-1728, 361), (-1728, 400), (-1728, 441), (-1728, 484), (-1728, 529), (-1728, 576), (-1728, 625), (-1728, 676), (-1728, 729), (-1728, 784), (-1728, 841), (-1728, 900), (-1728, 961), (-1728, 1024), (-1728, 1089), (-1728, 1156), (-1728, 1225), (-1728, 1296), (-1728, 1369), (-1728, 1444), (-1728, 1521), (-1728, 1600), (-1728, 1681), (-1728, 1764), (-1728, 1849), (-1728, 1936), (-1728, 2025), (-1728, 2116), (-1728, 2209), (-1728, 2304), (-1728, 2401), (-1331, 2500), (-1331, 2401), (-1331, 2304), (-1331, 2209), (-1331, 2116), (-1331, 2025), (-1331, 1936), (-1331, 1849), (-1331, 1764), (-1331, 1681), (-1331, 1600), (-1331, 1521), (-1331, 1444), (-1331, 1369), (-1331, 1296), (-1331, 1225), (-1331, 1156), (-1331, 1089), (-1331, 1024), (-1331, 961), (-1331, 900), (-1331, 841), (-1331, 784), (-1331, 729), (-1331, 676), (-1331, 625), (-1331, 576), (-1331, 529), (-1331, 484), (-1331, 441), (-1331, 400), (-1331, 361), (-1331, 324), (-1331, 289), (-1331, 256), (-1331, 225), (-1331, 196), (-1331, 169), (-1331, 144), (-1331, 121), (-1331, 100), (-1331, 81), (-1331, 64), (-1331, 49), (-1331, 36), (-1331, 25), (-1331, 16), (-1331, 9), (-1331, 4), (-1331, 1), (-1331, 0), (-1331, 1), (-1331, 4), (-1331, 9), (-1331, 16), (-1331, 25), (-1331, 36), (-1331, 49), (-1331, 64), (-1331, 81), (-1331, 100), (-1331, 121), (-1331, 144), (-1331, 169), (-1331, 196), (-1331, 225), (-1331, 256), (-1331, 289), (-1331, 324), (-1331, 361), (-1331, 400), (-1331, 441), (-1331, 484), (-1331, 529), (-1331, 576), (-1331, 625), (-1331, 676), (-1331, 729), (-1331, 784), (-1331, 841), (-1331, 900), (-1331, 961), (-1331, 1024), (-1331, 1089), (-1331, 1156), (-1331, 1225), (-1331, 1296), (-1331, 1369), (-1331, 1444), (-1331, 1521), (-1331, 1600), (-1331, 1681), (-1331, 1764), (-1331, 1849), (-1331, 1936), (-1331, 2025), (-1331, 2116), (-1331, 2209), (-1331, 2304), (-1331, 2401), (-1000, 2500), (-1000, 2401), (-1000, 2304), (-1000, 2209), (-1000, 2116), (-1000, 2025), (-1000, 1936), (-1000, 1849), (-1000, 1764), (-1000, 1681), (-1000, 1600), (-1000, 1521), (-1000, 1444), (-1000, 1369), (-1000, 1296), (-1000, 1225), (-1000, 1156), (-1000, 1089), (-1000, 1024), (-1000, 961), (-1000, 900), (-1000, 841), (-1000, 784), (-1000, 729), (-1000, 676), (-1000, 625), (-1000, 576), (-1000, 529), (-1000, 484), (-1000, 441), (-1000, 400), (-1000, 361), (-1000, 324), (-1000, 289), (-1000, 256), (-1000, 225), (-1000, 196), (-1000, 169), (-1000, 144), (-1000, 121), (-1000, 100), (-1000, 81), (-1000, 64), (-1000, 49), (-1000, 36), (-1000, 25), (-1000, 16), (-1000, 9), (-1000, 4), (-1000, 1), (-1000, 0), (-1000, 1), (-1000, 4), (-1000, 9), (-1000, 16), (-1000, 25), (-1000, 36), (-1000, 49), (-1000, 64), (-1000, 81), (-1000, 100), (-1000, 121), (-1000, 144), (-1000, 169), (-1000, 196), (-1000, 225), (-1000, 256), (-1000, 289), (-1000, 324), (-1000, 361), (-1000, 400), (-1000, 441), (-1000, 484), (-1000, 529), (-1000, 576), (-1000, 625), (-1000, 676), (-1000, 729), (-1000, 784), (-1000, 841), (-1000, 900), (-1000, 961), (-1000, 1024), (-1000, 1089), (-1000, 1156), (-1000, 1225), (-1000, 1296), (-1000, 1369), (-1000, 1444), (-1000, 1521), (-1000, 1600), (-1000, 1681), (-1000, 1764), (-1000, 1849), (-1000, 1936), (-1000, 2025), (-1000, 2116), (-1000, 2209), (-1000, 2304), (-1000, 2401), (-729, 2500), (-729, 2401), (-729, 2304), (-729, 2209), (-729, 2116), (-729, 2025), (-729, 1936), (-729, 1849), (-729, 1764), (-729, 1681), (-729, 1600), (-729, 1521), (-729, 1444), (-729, 1369), (-729, 1296), (-729, 1225), (-729, 1156), (-729, 1089), (-729, 1024), (-729, 961), (-729, 900), (-729, 841), (-729, 784), (-729, 729), (-729, 676), (-729, 625), (-729, 576), (-729, 529), (-729, 484), (-729, 441), (-729, 400), (-729, 361), (-729, 324), (-729, 289), (-729, 256), (-729, 225), (-729, 196), (-729, 169), (-729, 144), (-729, 121), (-729, 100), (-729, 81), (-729, 64), (-729, 49), (-729, 36), (-729, 25), (-729, 16), (-729, 9), (-729, 4), (-729, 1), (-729, 0), (-729, 1), (-729, 4), (-729, 9), (-729, 16), (-729, 25), (-729, 36), (-729, 49), (-729, 64), (-729, 81), (-729, 100), (-729, 121), (-729, 144), (-729, 169), (-729, 196), (-729, 225), (-729, 256), (-729, 289), (-729, 324), (-729, 361), (-729, 400), (-729, 441), (-729, 484), (-729, 529), (-729, 576), (-729, 625), (-729, 676), (-729, 729), (-729, 784), (-729, 841), (-729, 900), (-729, 961), (-729, 1024), (-729, 1089), (-729, 1156), (-729, 1225), (-729, 1296), (-729, 1369), (-729, 1444), (-729, 1521), (-729, 1600), (-729, 1681), (-729, 1764), (-729, 1849), (-729, 1936), (-729, 2025), (-729, 2116), (-729, 2209), (-729, 2304), (-729, 2401), (-512, 2500), (-512, 2401), (-512, 2304), (-512, 2209), (-512, 2116), (-512, 2025), (-512, 1936), (-512, 1849), (-512, 1764), (-512, 1681), (-512, 1600), (-512, 1521), (-512, 1444), (-512, 1369), (-512, 1296), (-512, 1225), (-512, 1156), (-512, 1089), (-512, 1024), (-512, 961), (-512, 900), (-512, 841), (-512, 784), (-512, 729), (-512, 676), (-512, 625), (-512, 576), (-512, 529), (-512, 484), (-512, 441), (-512, 400), (-512, 361), (-512, 324), (-512, 289), (-512, 256), (-512, 225), (-512, 196), (-512, 169), (-512, 144), (-512, 121), (-512, 100), (-512, 81), (-512, 64), (-512, 49), (-512, 36), (-512, 25), (-512, 16), (-512, 9), (-512, 4), (-512, 1), (-512, 0), (-512, 1), (-512, 4), (-512, 9), (-512, 16), (-512, 25), (-512, 36), (-512, 49), (-512, 64), (-512, 81), (-512, 100), (-512, 121), (-512, 144), (-512, 169), (-512, 196), (-512, 225), (-512, 256), (-512, 289), (-512, 324), (-512, 361), (-512, 400), (-512, 441), (-512, 484), (-512, 529), (-512, 576), (-512, 625), (-512, 676), (-512, 729), (-512, 784), (-512, 841), (-512, 900), (-512, 961), (-512, 1024), (-512, 1089), (-512, 1156), (-512, 1225), (-512, 1296), (-512, 1369), (-512, 1444), (-512, 1521), (-512, 1600), (-512, 1681), (-512, 1764), (-512, 1849), (-512, 1936), (-512, 2025), (-512, 2116), (-512, 2209), (-512, 2304), (-512, 2401), (-343, 2500), (-343, 2401), (-343, 2304), (-343, 2209), (-343, 2116), (-343, 2025), (-343, 1936), (-343, 1849), (-343, 1764), (-343, 1681), (-343, 1600), (-343, 1521), (-343, 1444), (-343, 1369), (-343, 1296), (-343, 1225), (-343, 1156), (-343, 1089), (-343, 1024), (-343, 961), (-343, 900), (-343, 841), (-343, 784), (-343, 729), (-343, 676), (-343, 625), (-343, 576), (-343, 529), (-343, 484), (-343, 441), (-343, 400), (-343, 361), (-343, 324), (-343, 289), (-343, 256), (-343, 225), (-343, 196), (-343, 169), (-343, 144), (-343, 121), (-343, 100), (-343, 81), (-343, 64), (-343, 49), (-343, 36), (-343, 25), (-343, 16), (-343, 9), (-343, 4), (-343, 1), (-343, 0), (-343, 1), (-343, 4), (-343, 9), (-343, 16), (-343, 25), (-343, 36), (-343, 49), (-343, 64), (-343, 81), (-343, 100), (-343, 121), (-343, 144), (-343, 169), (-343, 196), (-343, 225), (-343, 256), (-343, 289), (-343, 324), (-343, 361), (-343, 400), (-343, 441), (-343, 484), (-343, 529), (-343, 576), (-343, 625), (-343, 676), (-343, 729), (-343, 784), (-343, 841), (-343, 900), (-343, 961), (-343, 1024), (-343, 1089), (-343, 1156), (-343, 1225), (-343, 1296), (-343, 1369), (-343, 1444), (-343, 1521), (-343, 1600), (-343, 1681), (-343, 1764), (-343, 1849), (-343, 1936), (-343, 2025), (-343, 2116), (-343, 2209), (-343, 2304), (-343, 2401), (-216, 2500), (-216, 2401), (-216, 2304), (-216, 2209), (-216, 2116), (-216, 2025), (-216, 1936), (-216, 1849), (-216, 1764), (-216, 1681), (-216, 1600), (-216, 1521), (-216, 1444), (-216, 1369), (-216, 1296), (-216, 1225), (-216, 1156), (-216, 1089), (-216, 1024), (-216, 961), (-216, 900), (-216, 841), (-216, 784), (-216, 729), (-216, 676), (-216, 625), (-216, 576), (-216, 529), (-216, 484), (-216, 441), (-216, 400), (-216, 361), (-216, 324), (-216, 289), (-216, 256), (-216, 225), (-216, 196), (-216, 169), (-216, 144), (-216, 121), (-216, 100), (-216, 81), (-216, 64), (-216, 49), (-216, 36), (-216, 25), (-216, 16), (-216, 9), (-216, 4), (-216, 1), (-216, 0), (-216, 1), (-216, 4), (-216, 9), (-216, 16), (-216, 25), (-216, 36), (-216, 49), (-216, 64), (-216, 81), (-216, 100), (-216, 121), (-216, 144), (-216, 169), (-216, 196), (-216, 225), (-216, 256), (-216, 289), (-216, 324), (-216, 361), (-216, 400), (-216, 441), (-216, 484), (-216, 529), (-216, 576), (-216, 625), (-216, 676), (-216, 729), (-216, 784), (-216, 841), (-216, 900), (-216, 961), (-216, 1024), (-216, 1089), (-216, 1156), (-216, 1225), (-216, 1296), (-216, 1369), (-216, 1444), (-216, 1521), (-216, 1600), (-216, 1681), (-216, 1764), (-216, 1849), (-216, 1936), (-216, 2025), (-216, 2116), (-216, 2209), (-216, 2304), (-216, 2401), (-125, 2500), (-125, 2401), (-125, 2304), (-125, 2209), (-125, 2116), (-125, 2025), (-125, 1936), (-125, 1849), (-125, 1764), (-125, 1681), (-125, 1600), (-125, 1521), (-125, 1444), (-125, 1369), (-125, 1296), (-125, 1225), (-125, 1156), (-125, 1089), (-125, 1024), (-125, 961), (-125, 900), (-125, 841), (-125, 784), (-125, 729), (-125, 676), (-125, 625), (-125, 576), (-125, 529), (-125, 484), (-125, 441), (-125, 400), (-125, 361), (-125, 324), (-125, 289), (-125, 256), (-125, 225), (-125, 196), (-125, 169), (-125, 144), (-125, 121), (-125, 100), (-125, 81), (-125, 64), (-125, 49), (-125, 36), (-125, 25), (-125, 16), (-125, 9), (-125, 4), (-125, 1), (-125, 0), (-125, 1), (-125, 4), (-125, 9), (-125, 16), (-125, 25), (-125, 36), (-125, 49), (-125, 64), (-125, 81), (-125, 100), (-125, 121), (-125, 144), (-125, 169), (-125, 196), (-125, 225), (-125, 256), (-125, 289), (-125, 324), (-125, 361), (-125, 400), (-125, 441), (-125, 484), (-125, 529), (-125, 576), (-125, 625), (-125, 676), (-125, 729), (-125, 784), (-125, 841), (-125, 900), (-125, 961), (-125, 1024), (-125, 1089), (-125, 1156), (-125, 1225), (-125, 1296), (-125, 1369), (-125, 1444), (-125, 1521), (-125, 1600), (-125, 1681), (-125, 1764), (-125, 1849), (-125, 1936), (-125, 2025), (-125, 2116), (-125, 2209), (-125, 2304), (-125, 2401), (-64, 2500), (-64, 2401), (-64, 2304), (-64, 2209), (-64, 2116), (-64, 2025), (-64, 1936), (-64, 1849), (-64, 1764), (-64, 1681), (-64, 1600), (-64, 1521), (-64, 1444), (-64, 1369), (-64, 1296), (-64, 1225), (-64, 1156), (-64, 1089), (-64, 1024), (-64, 961), (-64, 900), (-64, 841), (-64, 784), (-64, 729), (-64, 676), (-64, 625), (-64, 576), (-64, 529), (-64, 484), (-64, 441), (-64, 400), (-64, 361), (-64, 324), (-64, 289), (-64, 256), (-64, 225), (-64, 196), (-64, 169), (-64, 144), (-64, 121), (-64, 100), (-64, 81), (-64, 64), (-64, 49), (-64, 36), (-64, 25), (-64, 16), (-64, 9), (-64, 4), (-64, 1), (-64, 0), (-64, 1), (-64, 4), (-64, 9), (-64, 16), (-64, 25), (-64, 36), (-64, 49), (-64, 64), (-64, 81), (-64, 100), (-64, 121), (-64, 144), (-64, 169), (-64, 196), (-64, 225), (-64, 256), (-64, 289), (-64, 324), (-64, 361), (-64, 400), (-64, 441), (-64, 484), (-64, 529), (-64, 576), (-64, 625), (-64, 676), (-64, 729), (-64, 784), (-64, 841), (-64, 900), (-64, 961), (-64, 1024), (-64, 1089), (-64, 1156), (-64, 1225), (-64, 1296), (-64, 1369), (-64, 1444), (-64, 1521), (-64, 1600), (-64, 1681), (-64, 1764), (-64, 1849), (-64, 1936), (-64, 2025), (-64, 2116), (-64, 2209), (-64, 2304), (-64, 2401), (-27, 2500), (-27, 2401), (-27, 2304), (-27, 2209), (-27, 2116), (-27, 2025), (-27, 1936), (-27, 1849), (-27, 1764), (-27, 1681), (-27, 1600), (-27, 1521), (-27, 1444), (-27, 1369), (-27, 1296), (-27, 1225), (-27, 1156), (-27, 1089), (-27, 1024), (-27, 961), (-27, 900), (-27, 841), (-27, 784), (-27, 729), (-27, 676), (-27, 625), (-27, 576), (-27, 529), (-27, 484), (-27, 441), (-27, 400), (-27, 361), (-27, 324), (-27, 289), (-27, 256), (-27, 225), (-27, 196), (-27, 169), (-27, 144), (-27, 121), (-27, 100), (-27, 81), (-27, 64), (-27, 49), (-27, 36), (-27, 25), (-27, 16), (-27, 9), (-27, 4), (-27, 1), (-27, 0), (-27, 1), (-27, 4), (-27, 9), (-27, 16), (-27, 25), (-27, 36), (-27, 49), (-27, 64), (-27, 81), (-27, 100), (-27, 121), (-27, 144), (-27, 169), (-27, 196), (-27, 225), (-27, 256), (-27, 289), (-27, 324), (-27, 361), (-27, 400), (-27, 441), (-27, 484), (-27, 529), (-27, 576), (-27, 625), (-27, 676), (-27, 729), (-27, 784), (-27, 841), (-27, 900), (-27, 961), (-27, 1024), (-27, 1089), (-27, 1156), (-27, 1225), (-27, 1296), (-27, 1369), (-27, 1444), (-27, 1521), (-27, 1600), (-27, 1681), (-27, 1764), (-27, 1849), (-27, 1936), (-27, 2025), (-27, 2116), (-27, 2209), (-27, 2304), (-27, 2401), (-8, 2500), (-8, 2401), (-8, 2304), (-8, 2209), (-8, 2116), (-8, 2025), (-8, 1936), (-8, 1849), (-8, 1764), (-8, 1681), (-8, 1600), (-8, 1521), (-8, 1444), (-8, 1369), (-8, 1296), (-8, 1225), (-8, 1156), (-8, 1089), (-8, 1024), (-8, 961), (-8, 900), (-8, 841), (-8, 784), (-8, 729), (-8, 676), (-8, 625), (-8, 576), (-8, 529), (-8, 484), (-8, 441), (-8, 400), (-8, 361), (-8, 324), (-8, 289), (-8, 256), (-8, 225), (-8, 196), (-8, 169), (-8, 144), (-8, 121), (-8, 100), (-8, 81), (-8, 64), (-8, 49), (-8, 36), (-8, 25), (-8, 16), (-8, 9), (-8, 4), (-8, 1), (-8, 0), (-8, 1), (-8, 4), (-8, 9), (-8, 16), (-8, 25), (-8, 36), (-8, 49), (-8, 64), (-8, 81), (-8, 100), (-8, 121), (-8, 144), (-8, 169), (-8, 196), (-8, 225), (-8, 256), (-8, 289), (-8, 324), (-8, 361), (-8, 400), (-8, 441), (-8, 484), (-8, 529), (-8, 576), (-8, 625), (-8, 676), (-8, 729), (-8, 784), (-8, 841), (-8, 900), (-8, 961), (-8, 1024), (-8, 1089), (-8, 1156), (-8, 1225), (-8, 1296), (-8, 1369), (-8, 1444), (-8, 1521), (-8, 1600), (-8, 1681), (-8, 1764), (-8, 1849), (-8, 1936), (-8, 2025), (-8, 2116), (-8, 2209), (-8, 2304), (-8, 2401), (-1, 2500), (-1, 2401), (-1, 2304), (-1, 2209), (-1, 2116), (-1, 2025), (-1, 1936), (-1, 1849), (-1, 1764), (-1, 1681), (-1, 1600), (-1, 1521), (-1, 1444), (-1, 1369), (-1, 1296), (-1, 1225), (-1, 1156), (-1, 1089), (-1, 1024), (-1, 961), (-1, 900), (-1, 841), (-1, 784), (-1, 729), (-1, 676), (-1, 625), (-1, 576), (-1, 529), (-1, 484), (-1, 441), (-1, 400), (-1, 361), (-1, 324), (-1, 289), (-1, 256), (-1, 225), (-1, 196), (-1, 169), (-1, 144), (-1, 121), (-1, 100), (-1, 81), (-1, 64), (-1, 49), (-1, 36), (-1, 25), (-1, 16), (-1, 9), (-1, 4), (-1, 1), (-1, 0), (-1, 1), (-1, 4), (-1, 9), (-1, 16), (-1, 25), (-1, 36), (-1, 49), (-1, 64), (-1, 81), (-1, 100), (-1, 121), (-1, 144), (-1, 169), (-1, 196), (-1, 225), (-1, 256), (-1, 289), (-1, 324), (-1, 361), (-1, 400), (-1, 441), (-1, 484), (-1, 529), (-1, 576), (-1, 625), (-1, 676), (-1, 729), (-1, 784), (-1, 841), (-1, 900), (-1, 961), (-1, 1024), (-1, 1089), (-1, 1156), (-1, 1225), (-1, 1296), (-1, 1369), (-1, 1444), (-1, 1521), (-1, 1600), (-1, 1681), (-1, 1764), (-1, 1849), (-1, 1936), (-1, 2025), (-1, 2116), (-1, 2209), (-1, 2304), (-1, 2401), (0, 2500), (0, 2401), (0, 2304), (0, 2209), (0, 2116), (0, 2025), (0, 1936), (0, 1849), (0, 1764), (0, 1681), (0, 1600), (0, 1521), (0, 1444), (0, 1369), (0, 1296), (0, 1225), (0, 1156), (0, 1089), (0, 1024), (0, 961), (0, 900), (0, 841), (0, 784), (0, 729), (0, 676), (0, 625), (0, 576), (0, 529), (0, 484), (0, 441), (0, 400), (0, 361), (0, 324), (0, 289), (0, 256), (0, 225), (0, 196), (0, 169), (0, 144), (0, 121), (0, 100), (0, 81), (0, 64), (0, 49), (0, 36), (0, 25), (0, 16), (0, 9), (0, 4), (0, 1), (0, 0), (0, 1), (0, 4), (0, 9), (0, 16), (0, 25), (0, 36), (0, 49), (0, 64), (0, 81), (0, 100), (0, 121), (0, 144), (0, 169), (0, 196), (0, 225), (0, 256), (0, 289), (0, 324), (0, 361), (0, 400), (0, 441), (0, 484), (0, 529), (0, 576), (0, 625), (0, 676), (0, 729), (0, 784), (0, 841), (0, 900), (0, 961), (0, 1024), (0, 1089), (0, 1156), (0, 1225), (0, 1296), (0, 1369), (0, 1444), (0, 1521), (0, 1600), (0, 1681), (0, 1764), (0, 1849), (0, 1936), (0, 2025), (0, 2116), (0, 2209), (0, 2304), (0, 2401), (1, 2500), (1, 2401), (1, 2304), (1, 2209), (1, 2116), (1, 2025), (1, 1936), (1, 1849), (1, 1764), (1, 1681), (1, 1600), (1, 1521), (1, 1444), (1, 1369), (1, 1296), (1, 1225), (1, 1156), (1, 1089), (1, 1024), (1, 961), (1, 900), (1, 841), (1, 784), (1, 729), (1, 676), (1, 625), (1, 576), (1, 529), (1, 484), (1, 441), (1, 400), (1, 361), (1, 324), (1, 289), (1, 256), (1, 225), (1, 196), (1, 169), (1, 144), (1, 121), (1, 100), (1, 81), (1, 64), (1, 49), (1, 36), (1, 25), (1, 16), (1, 9), (1, 4), (1, 1), (1, 0), (1, 1), (1, 4), (1, 9), (1, 16), (1, 25), (1, 36), (1, 49), (1, 64), (1, 81), (1, 100), (1, 121), (1, 144), (1, 169), (1, 196), (1, 225), (1, 256), (1, 289), (1, 324), (1, 361), (1, 400), (1, 441), (1, 484), (1, 529), (1, 576), (1, 625), (1, 676), (1, 729), (1, 784), (1, 841), (1, 900), (1, 961), (1, 1024), (1, 1089), (1, 1156), (1, 1225), (1, 1296), (1, 1369), (1, 1444), (1, 1521), (1, 1600), (1, 1681), (1, 1764), (1, 1849), (1, 1936), (1, 2025), (1, 2116), (1, 2209), (1, 2304), (1, 2401), (8, 2500), (8, 2401), (8, 2304), (8, 2209), (8, 2116), (8, 2025), (8, 1936), (8, 1849), (8, 1764), (8, 1681), (8, 1600), (8, 1521), (8, 1444), (8, 1369), (8, 1296), (8, 1225), (8, 1156), (8, 1089), (8, 1024), (8, 961), (8, 900), (8, 841), (8, 784), (8, 729), (8, 676), (8, 625), (8, 576), (8, 529), (8, 484), (8, 441), (8, 400), (8, 361), (8, 324), (8, 289), (8, 256), (8, 225), (8, 196), (8, 169), (8, 144), (8, 121), (8, 100), (8, 81), (8, 64), (8, 49), (8, 36), (8, 25), (8, 16), (8, 9), (8, 4), (8, 1), (8, 0), (8, 1), (8, 4), (8, 9), (8, 16), (8, 25), (8, 36), (8, 49), (8, 64), (8, 81), (8, 100), (8, 121), (8, 144), (8, 169), (8, 196), (8, 225), (8, 256), (8, 289), (8, 324), (8, 361), (8, 400), (8, 441), (8, 484), (8, 529), (8, 576), (8, 625), (8, 676), (8, 729), (8, 784), (8, 841), (8, 900), (8, 961), (8, 1024), (8, 1089), (8, 1156), (8, 1225), (8, 1296), (8, 1369), (8, 1444), (8, 1521), (8, 1600), (8, 1681), (8, 1764), (8, 1849), (8, 1936), (8, 2025), (8, 2116), (8, 2209), (8, 2304), (8, 2401), (27, 2500), (27, 2401), (27, 2304), (27, 2209), (27, 2116), (27, 2025), (27, 1936), (27, 1849), (27, 1764), (27, 1681), (27, 1600), (27, 1521), (27, 1444), (27, 1369), (27, 1296), (27, 1225), (27, 1156), (27, 1089), (27, 1024), (27, 961), (27, 900), (27, 841), (27, 784), (27, 729), (27, 676), (27, 625), (27, 576), (27, 529), (27, 484), (27, 441), (27, 400), (27, 361), (27, 324), (27, 289), (27, 256), (27, 225), (27, 196), (27, 169), (27, 144), (27, 121), (27, 100), (27, 81), (27, 64), (27, 49), (27, 36), (27, 25), (27, 16), (27, 9), (27, 4), (27, 1), (27, 0), (27, 1), (27, 4), (27, 9), (27, 16), (27, 25), (27, 36), (27, 49), (27, 64), (27, 81), (27, 100), (27, 121), (27, 144), (27, 169), (27, 196), (27, 225), (27, 256), (27, 289), (27, 324), (27, 361), (27, 400), (27, 441), (27, 484), (27, 529), (27, 576), (27, 625), (27, 676), (27, 729), (27, 784), (27, 841), (27, 900), (27, 961), (27, 1024), (27, 1089), (27, 1156), (27, 1225), (27, 1296), (27, 1369), (27, 1444), (27, 1521), (27, 1600), (27, 1681), (27, 1764), (27, 1849), (27, 1936), (27, 2025), (27, 2116), (27, 2209), (27, 2304), (27, 2401), (64, 2500), (64, 2401), (64, 2304), (64, 2209), (64, 2116), (64, 2025), (64, 1936), (64, 1849), (64, 1764), (64, 1681), (64, 1600), (64, 1521), (64, 1444), (64, 1369), (64, 1296), (64, 1225), (64, 1156), (64, 1089), (64, 1024), (64, 961), (64, 900), (64, 841), (64, 784), (64, 729), (64, 676), (64, 625), (64, 576), (64, 529), (64, 484), (64, 441), (64, 400), (64, 361), (64, 324), (64, 289), (64, 256), (64, 225), (64, 196), (64, 169), (64, 144), (64, 121), (64, 100), (64, 81), (64, 64), (64, 49), (64, 36), (64, 25), (64, 16), (64, 9), (64, 4), (64, 1), (64, 0), (64, 1), (64, 4), (64, 9), (64, 16), (64, 25), (64, 36), (64, 49), (64, 64), (64, 81), (64, 100), (64, 121), (64, 144), (64, 169), (64, 196), (64, 225), (64, 256), (64, 289), (64, 324), (64, 361), (64, 400), (64, 441), (64, 484), (64, 529), (64, 576), (64, 625), (64, 676), (64, 729), (64, 784), (64, 841), (64, 900), (64, 961), (64, 1024), (64, 1089), (64, 1156), (64, 1225), (64, 1296), (64, 1369), (64, 1444), (64, 1521), (64, 1600), (64, 1681), (64, 1764), (64, 1849), (64, 1936), (64, 2025), (64, 2116), (64, 2209), (64, 2304), (64, 2401), (125, 2500), (125, 2401), (125, 2304), (125, 2209), (125, 2116), (125, 2025), (125, 1936), (125, 1849), (125, 1764), (125, 1681), (125, 1600), (125, 1521), (125, 1444), (125, 1369), (125, 1296), (125, 1225), (125, 1156), (125, 1089), (125, 1024), (125, 961), (125, 900), (125, 841), (125, 784), (125, 729), (125, 676), (125, 625), (125, 576), (125, 529), (125, 484), (125, 441), (125, 400), (125, 361), (125, 324), (125, 289), (125, 256), (125, 225), (125, 196), (125, 169), (125, 144), (125, 121), (125, 100), (125, 81), (125, 64), (125, 49), (125, 36), (125, 25), (125, 16), (125, 9), (125, 4), (125, 1), (125, 0), (125, 1), (125, 4), (125, 9), (125, 16), (125, 25), (125, 36), (125, 49), (125, 64), (125, 81), (125, 100), (125, 121), (125, 144), (125, 169), (125, 196), (125, 225), (125, 256), (125, 289), (125, 324), (125, 361), (125, 400), (125, 441), (125, 484), (125, 529), (125, 576), (125, 625), (125, 676), (125, 729), (125, 784), (125, 841), (125, 900), (125, 961), (125, 1024), (125, 1089), (125, 1156), (125, 1225), (125, 1296), (125, 1369), (125, 1444), (125, 1521), (125, 1600), (125, 1681), (125, 1764), (125, 1849), (125, 1936), (125, 2025), (125, 2116), (125, 2209), (125, 2304), (125, 2401), (216, 2500), (216, 2401), (216, 2304), (216, 2209), (216, 2116), (216, 2025), (216, 1936), (216, 1849), (216, 1764), (216, 1681), (216, 1600), (216, 1521), (216, 1444), (216, 1369), (216, 1296), (216, 1225), (216, 1156), (216, 1089), (216, 1024), (216, 961), (216, 900), (216, 841), (216, 784), (216, 729), (216, 676), (216, 625), (216, 576), (216, 529), (216, 484), (216, 441), (216, 400), (216, 361), (216, 324), (216, 289), (216, 256), (216, 225), (216, 196), (216, 169), (216, 144), (216, 121), (216, 100), (216, 81), (216, 64), (216, 49), (216, 36), (216, 25), (216, 16), (216, 9), (216, 4), (216, 1), (216, 0), (216, 1), (216, 4), (216, 9), (216, 16), (216, 25), (216, 36), (216, 49), (216, 64), (216, 81), (216, 100), (216, 121), (216, 144), (216, 169), (216, 196), (216, 225), (216, 256), (216, 289), (216, 324), (216, 361), (216, 400), (216, 441), (216, 484), (216, 529), (216, 576), (216, 625), (216, 676), (216, 729), (216, 784), (216, 841), (216, 900), (216, 961), (216, 1024), (216, 1089), (216, 1156), (216, 1225), (216, 1296), (216, 1369), (216, 1444), (216, 1521), (216, 1600), (216, 1681), (216, 1764), (216, 1849), (216, 1936), (216, 2025), (216, 2116), (216, 2209), (216, 2304), (216, 2401), (343, 2500), (343, 2401), (343, 2304), (343, 2209), (343, 2116), (343, 2025), (343, 1936), (343, 1849), (343, 1764), (343, 1681), (343, 1600), (343, 1521), (343, 1444), (343, 1369), (343, 1296), (343, 1225), (343, 1156), (343, 1089), (343, 1024), (343, 961), (343, 900), (343, 841), (343, 784), (343, 729), (343, 676), (343, 625), (343, 576), (343, 529), (343, 484), (343, 441), (343, 400), (343, 361), (343, 324), (343, 289), (343, 256), (343, 225), (343, 196), (343, 169), (343, 144), (343, 121), (343, 100), (343, 81), (343, 64), (343, 49), (343, 36), (343, 25), (343, 16), (343, 9), (343, 4), (343, 1), (343, 0), (343, 1), (343, 4), (343, 9), (343, 16), (343, 25), (343, 36), (343, 49), (343, 64), (343, 81), (343, 100), (343, 121), (343, 144), (343, 169), (343, 196), (343, 225), (343, 256), (343, 289), (343, 324), (343, 361), (343, 400), (343, 441), (343, 484), (343, 529), (343, 576), (343, 625), (343, 676), (343, 729), (343, 784), (343, 841), (343, 900), (343, 961), (343, 1024), (343, 1089), (343, 1156), (343, 1225), (343, 1296), (343, 1369), (343, 1444), (343, 1521), (343, 1600), (343, 1681), (343, 1764), (343, 1849), (343, 1936), (343, 2025), (343, 2116), (343, 2209), (343, 2304), (343, 2401), (512, 2500), (512, 2401), (512, 2304), (512, 2209), (512, 2116), (512, 2025), (512, 1936), (512, 1849), (512, 1764), (512, 1681), (512, 1600), (512, 1521), (512, 1444), (512, 1369), (512, 1296), (512, 1225), (512, 1156), (512, 1089), (512, 1024), (512, 961), (512, 900), (512, 841), (512, 784), (512, 729), (512, 676), (512, 625), (512, 576), (512, 529), (512, 484), (512, 441), (512, 400), (512, 361), (512, 324), (512, 289), (512, 256), (512, 225), (512, 196), (512, 169), (512, 144), (512, 121), (512, 100), (512, 81), (512, 64), (512, 49), (512, 36), (512, 25), (512, 16), (512, 9), (512, 4), (512, 1), (512, 0), (512, 1), (512, 4), (512, 9), (512, 16), (512, 25), (512, 36), (512, 49), (512, 64), (512, 81), (512, 100), (512, 121), (512, 144), (512, 169), (512, 196), (512, 225), (512, 256), (512, 289), (512, 324), (512, 361), (512, 400), (512, 441), (512, 484), (512, 529), (512, 576), (512, 625), (512, 676), (512, 729), (512, 784), (512, 841), (512, 900), (512, 961), (512, 1024), (512, 1089), (512, 1156), (512, 1225), (512, 1296), (512, 1369), (512, 1444), (512, 1521), (512, 1600), (512, 1681), (512, 1764), (512, 1849), (512, 1936), (512, 2025), (512, 2116), (512, 2209), (512, 2304), (512, 2401), (729, 2500), (729, 2401), (729, 2304), (729, 2209), (729, 2116), (729, 2025), (729, 1936), (729, 1849), (729, 1764), (729, 1681), (729, 1600), (729, 1521), (729, 1444), (729, 1369), (729, 1296), (729, 1225), (729, 1156), (729, 1089), (729, 1024), (729, 961), (729, 900), (729, 841), (729, 784), (729, 729), (729, 676), (729, 625), (729, 576), (729, 529), (729, 484), (729, 441), (729, 400), (729, 361), (729, 324), (729, 289), (729, 256), (729, 225), (729, 196), (729, 169), (729, 144), (729, 121), (729, 100), (729, 81), (729, 64), (729, 49), (729, 36), (729, 25), (729, 16), (729, 9), (729, 4), (729, 1), (729, 0), (729, 1), (729, 4), (729, 9), (729, 16), (729, 25), (729, 36), (729, 49), (729, 64), (729, 81), (729, 100), (729, 121), (729, 144), (729, 169), (729, 196), (729, 225), (729, 256), (729, 289), (729, 324), (729, 361), (729, 400), (729, 441), (729, 484), (729, 529), (729, 576), (729, 625), (729, 676), (729, 729), (729, 784), (729, 841), (729, 900), (729, 961), (729, 1024), (729, 1089), (729, 1156), (729, 1225), (729, 1296), (729, 1369), (729, 1444), (729, 1521), (729, 1600), (729, 1681), (729, 1764), (729, 1849), (729, 1936), (729, 2025), (729, 2116), (729, 2209), (729, 2304), (729, 2401), (1000, 2500), (1000, 2401), (1000, 2304), (1000, 2209), (1000, 2116), (1000, 2025), (1000, 1936), (1000, 1849), (1000, 1764), (1000, 1681), (1000, 1600), (1000, 1521), (1000, 1444), (1000, 1369), (1000, 1296), (1000, 1225), (1000, 1156), (1000, 1089), (1000, 1024), (1000, 961), (1000, 900), (1000, 841), (1000, 784), (1000, 729), (1000, 676), (1000, 625), (1000, 576), (1000, 529), (1000, 484), (1000, 441), (1000, 400), (1000, 361), (1000, 324), (1000, 289), (1000, 256), (1000, 225), (1000, 196), (1000, 169), (1000, 144), (1000, 121), (1000, 100), (1000, 81), (1000, 64), (1000, 49), (1000, 36), (1000, 25), (1000, 16), (1000, 9), (1000, 4), (1000, 1), (1000, 0), (1000, 1), (1000, 4), (1000, 9), (1000, 16), (1000, 25), (1000, 36), (1000, 49), (1000, 64), (1000, 81), (1000, 100), (1000, 121), (1000, 144), (1000, 169), (1000, 196), (1000, 225), (1000, 256), (1000, 289), (1000, 324), (1000, 361), (1000, 400), (1000, 441), (1000, 484), (1000, 529), (1000, 576), (1000, 625), (1000, 676), (1000, 729), (1000, 784), (1000, 841), (1000, 900), (1000, 961), (1000, 1024), (1000, 1089), (1000, 1156), (1000, 1225), (1000, 1296), (1000, 1369), (1000, 1444), (1000, 1521), (1000, 1600), (1000, 1681), (1000, 1764), (1000, 1849), (1000, 1936), (1000, 2025), (1000, 2116), (1000, 2209), (1000, 2304), (1000, 2401), (1331, 2500), (1331, 2401), (1331, 2304), (1331, 2209), (1331, 2116), (1331, 2025), (1331, 1936), (1331, 1849), (1331, 1764), (1331, 1681), (1331, 1600), (1331, 1521), (1331, 1444), (1331, 1369), (1331, 1296), (1331, 1225), (1331, 1156), (1331, 1089), (1331, 1024), (1331, 961), (1331, 900), (1331, 841), (1331, 784), (1331, 729), (1331, 676), (1331, 625), (1331, 576), (1331, 529), (1331, 484), (1331, 441), (1331, 400), (1331, 361), (1331, 324), (1331, 289), (1331, 256), (1331, 225), (1331, 196), (1331, 169), (1331, 144), (1331, 121), (1331, 100), (1331, 81), (1331, 64), (1331, 49), (1331, 36), (1331, 25), (1331, 16), (1331, 9), (1331, 4), (1331, 1), (1331, 0), (1331, 1), (1331, 4), (1331, 9), (1331, 16), (1331, 25), (1331, 36), (1331, 49), (1331, 64), (1331, 81), (1331, 100), (1331, 121), (1331, 144), (1331, 169), (1331, 196), (1331, 225), (1331, 256), (1331, 289), (1331, 324), (1331, 361), (1331, 400), (1331, 441), (1331, 484), (1331, 529), (1331, 576), (1331, 625), (1331, 676), (1331, 729), (1331, 784), (1331, 841), (1331, 900), (1331, 961), (1331, 1024), (1331, 1089), (1331, 1156), (1331, 1225), (1331, 1296), (1331, 1369), (1331, 1444), (1331, 1521), (1331, 1600), (1331, 1681), (1331, 1764), (1331, 1849), (1331, 1936), (1331, 2025), (1331, 2116), (1331, 2209), (1331, 2304), (1331, 2401), (1728, 2500), (1728, 2401), (1728, 2304), (1728, 2209), (1728, 2116), (1728, 2025), (1728, 1936), (1728, 1849), (1728, 1764), (1728, 1681), (1728, 1600), (1728, 1521), (1728, 1444), (1728, 1369), (1728, 1296), (1728, 1225), (1728, 1156), (1728, 1089), (1728, 1024), (1728, 961), (1728, 900), (1728, 841), (1728, 784), (1728, 729), (1728, 676), (1728, 625), (1728, 576), (1728, 529), (1728, 484), (1728, 441), (1728, 400), (1728, 361), (1728, 324), (1728, 289), (1728, 256), (1728, 225), (1728, 196), (1728, 169), (1728, 144), (1728, 121), (1728, 100), (1728, 81), (1728, 64), (1728, 49), (1728, 36), (1728, 25), (1728, 16), (1728, 9), (1728, 4), (1728, 1), (1728, 0), (1728, 1), (1728, 4), (1728, 9), (1728, 16), (1728, 25), (1728, 36), (1728, 49), (1728, 64), (1728, 81), (1728, 100), (1728, 121), (1728, 144), (1728, 169), (1728, 196), (1728, 225), (1728, 256), (1728, 289), (1728, 324), (1728, 361), (1728, 400), (1728, 441), (1728, 484), (1728, 529), (1728, 576), (1728, 625), (1728, 676), (1728, 729), (1728, 784), (1728, 841), (1728, 900), (1728, 961), (1728, 1024), (1728, 1089), (1728, 1156), (1728, 1225), (1728, 1296), (1728, 1369), (1728, 1444), (1728, 1521), (1728, 1600), (1728, 1681), (1728, 1764), (1728, 1849), (1728, 1936), (1728, 2025), (1728, 2116), (1728, 2209), (1728, 2304), (1728, 2401), (2197, 2500), (2197, 2401), (2197, 2304), (2197, 2209), (2197, 2116), (2197, 2025), (2197, 1936), (2197, 1849), (2197, 1764), (2197, 1681), (2197, 1600), (2197, 1521), (2197, 1444), (2197, 1369), (2197, 1296), (2197, 1225), (2197, 1156), (2197, 1089), (2197, 1024), (2197, 961), (2197, 900), (2197, 841), (2197, 784), (2197, 729), (2197, 676), (2197, 625), (2197, 576), (2197, 529), (2197, 484), (2197, 441), (2197, 400), (2197, 361), (2197, 324), (2197, 289), (2197, 256), (2197, 225), (2197, 196), (2197, 169), (2197, 144), (2197, 121), (2197, 100), (2197, 81), (2197, 64), (2197, 49), (2197, 36), (2197, 25), (2197, 16), (2197, 9), (2197, 4), (2197, 1), (2197, 0), (2197, 1), (2197, 4), (2197, 9), (2197, 16), (2197, 25), (2197, 36), (2197, 49), (2197, 64), (2197, 81), (2197, 100), (2197, 121), (2197, 144), (2197, 169), (2197, 196), (2197, 225), (2197, 256), (2197, 289), (2197, 324), (2197, 361), (2197, 400), (2197, 441), (2197, 484), (2197, 529), (2197, 576), (2197, 625), (2197, 676), (2197, 729), (2197, 784), (2197, 841), (2197, 900), (2197, 961), (2197, 1024), (2197, 1089), (2197, 1156), (2197, 1225), (2197, 1296), (2197, 1369), (2197, 1444), (2197, 1521), (2197, 1600), (2197, 1681), (2197, 1764), (2197, 1849), (2197, 1936), (2197, 2025), (2197, 2116), (2197, 2209), (2197, 2304), (2197, 2401), (2744, 2500), (2744, 2401), (2744, 2304), (2744, 2209), (2744, 2116), (2744, 2025), (2744, 1936), (2744, 1849), (2744, 1764), (2744, 1681), (2744, 1600), (2744, 1521), (2744, 1444), (2744, 1369), (2744, 1296), (2744, 1225), (2744, 1156), (2744, 1089), (2744, 1024), (2744, 961), (2744, 900), (2744, 841), (2744, 784), (2744, 729), (2744, 676), (2744, 625), (2744, 576), (2744, 529), (2744, 484), (2744, 441), (2744, 400), (2744, 361), (2744, 324), (2744, 289), (2744, 256), (2744, 225), (2744, 196), (2744, 169), (2744, 144), (2744, 121), (2744, 100), (2744, 81), (2744, 64), (2744, 49), (2744, 36), (2744, 25), (2744, 16), (2744, 9), (2744, 4), (2744, 1), (2744, 0), (2744, 1), (2744, 4), (2744, 9), (2744, 16), (2744, 25), (2744, 36), (2744, 49), (2744, 64), (2744, 81), (2744, 100), (2744, 121), (2744, 144), (2744, 169), (2744, 196), (2744, 225), (2744, 256), (2744, 289), (2744, 324), (2744, 361), (2744, 400), (2744, 441), (2744, 484), (2744, 529), (2744, 576), (2744, 625), (2744, 676), (2744, 729), (2744, 784), (2744, 841), (2744, 900), (2744, 961), (2744, 1024), (2744, 1089), (2744, 1156), (2744, 1225), (2744, 1296), (2744, 1369), (2744, 1444), (2744, 1521), (2744, 1600), (2744, 1681), (2744, 1764), (2744, 1849), (2744, 1936), (2744, 2025), (2744, 2116), (2744, 2209), (2744, 2304), (2744, 2401), (3375, 2500), (3375, 2401), (3375, 2304), (3375, 2209), (3375, 2116), (3375, 2025), (3375, 1936), (3375, 1849), (3375, 1764), (3375, 1681), (3375, 1600), (3375, 1521), (3375, 1444), (3375, 1369), (3375, 1296), (3375, 1225), (3375, 1156), (3375, 1089), (3375, 1024), (3375, 961), (3375, 900), (3375, 841), (3375, 784), (3375, 729), (3375, 676), (3375, 625), (3375, 576), (3375, 529), (3375, 484), (3375, 441), (3375, 400), (3375, 361), (3375, 324), (3375, 289), (3375, 256), (3375, 225), (3375, 196), (3375, 169), (3375, 144), (3375, 121), (3375, 100), (3375, 81), (3375, 64), (3375, 49), (3375, 36), (3375, 25), (3375, 16), (3375, 9), (3375, 4), (3375, 1), (3375, 0), (3375, 1), (3375, 4), (3375, 9), (3375, 16), (3375, 25), (3375, 36), (3375, 49), (3375, 64), (3375, 81), (3375, 100), (3375, 121), (3375, 144), (3375, 169), (3375, 196), (3375, 225), (3375, 256), (3375, 289), (3375, 324), (3375, 361), (3375, 400), (3375, 441), (3375, 484), (3375, 529), (3375, 576), (3375, 625), (3375, 676), (3375, 729), (3375, 784), (3375, 841), (3375, 900), (3375, 961), (3375, 1024), (3375, 1089), (3375, 1156), (3375, 1225), (3375, 1296), (3375, 1369), (3375, 1444), (3375, 1521), (3375, 1600), (3375, 1681), (3375, 1764), (3375, 1849), (3375, 1936), (3375, 2025), (3375, 2116), (3375, 2209), (3375, 2304), (3375, 2401), (4096, 2500), (4096, 2401), (4096, 2304), (4096, 2209), (4096, 2116), (4096, 2025), (4096, 1936), (4096, 1849), (4096, 1764), (4096, 1681), (4096, 1600), (4096, 1521), (4096, 1444), (4096, 1369), (4096, 1296), (4096, 1225), (4096, 1156), (4096, 1089), (4096, 1024), (4096, 961), (4096, 900), (4096, 841), (4096, 784), (4096, 729), (4096, 676), (4096, 625), (4096, 576), (4096, 529), (4096, 484), (4096, 441), (4096, 400), (4096, 361), (4096, 324), (4096, 289), (4096, 256), (4096, 225), (4096, 196), (4096, 169), (4096, 144), (4096, 121), (4096, 100), (4096, 81), (4096, 64), (4096, 49), (4096, 36), (4096, 25), (4096, 16), (4096, 9), (4096, 4), (4096, 1), (4096, 0), (4096, 1), (4096, 4), (4096, 9), (4096, 16), (4096, 25), (4096, 36), (4096, 49), (4096, 64), (4096, 81), (4096, 100), (4096, 121), (4096, 144), (4096, 169), (4096, 196), (4096, 225), (4096, 256), (4096, 289), (4096, 324), (4096, 361), (4096, 400), (4096, 441), (4096, 484), (4096, 529), (4096, 576), (4096, 625), (4096, 676), (4096, 729), (4096, 784), (4096, 841), (4096, 900), (4096, 961), (4096, 1024), (4096, 1089), (4096, 1156), (4096, 1225), (4096, 1296), (4096, 1369), (4096, 1444), (4096, 1521), (4096, 1600), (4096, 1681), (4096, 1764), (4096, 1849), (4096, 1936), (4096, 2025), (4096, 2116), (4096, 2209), (4096, 2304), (4096, 2401), (4913, 2500), (4913, 2401), (4913, 2304), (4913, 2209), (4913, 2116), (4913, 2025), (4913, 1936), (4913, 1849), (4913, 1764), (4913, 1681), (4913, 1600), (4913, 1521), (4913, 1444), (4913, 1369), (4913, 1296), (4913, 1225), (4913, 1156), (4913, 1089), (4913, 1024), (4913, 961), (4913, 900), (4913, 841), (4913, 784), (4913, 729), (4913, 676), (4913, 625), (4913, 576), (4913, 529), (4913, 484), (4913, 441), (4913, 400), (4913, 361), (4913, 324), (4913, 289), (4913, 256), (4913, 225), (4913, 196), (4913, 169), (4913, 144), (4913, 121), (4913, 100), (4913, 81), (4913, 64), (4913, 49), (4913, 36), (4913, 25), (4913, 16), (4913, 9), (4913, 4), (4913, 1), (4913, 0), (4913, 1), (4913, 4), (4913, 9), (4913, 16), (4913, 25), (4913, 36), (4913, 49), (4913, 64), (4913, 81), (4913, 100), (4913, 121), (4913, 144), (4913, 169), (4913, 196), (4913, 225), (4913, 256), (4913, 289), (4913, 324), (4913, 361), (4913, 400), (4913, 441), (4913, 484), (4913, 529), (4913, 576), (4913, 625), (4913, 676), (4913, 729), (4913, 784), (4913, 841), (4913, 900), (4913, 961), (4913, 1024), (4913, 1089), (4913, 1156), (4913, 1225), (4913, 1296), (4913, 1369), (4913, 1444), (4913, 1521), (4913, 1600), (4913, 1681), (4913, 1764), (4913, 1849), (4913, 1936), (4913, 2025), (4913, 2116), (4913, 2209), (4913, 2304), (4913, 2401), (5832, 2500), (5832, 2401), (5832, 2304), (5832, 2209), (5832, 2116), (5832, 2025), (5832, 1936), (5832, 1849), (5832, 1764), (5832, 1681), (5832, 1600), (5832, 1521), (5832, 1444), (5832, 1369), (5832, 1296), (5832, 1225), (5832, 1156), (5832, 1089), (5832, 1024), (5832, 961), (5832, 900), (5832, 841), (5832, 784), (5832, 729), (5832, 676), (5832, 625), (5832, 576), (5832, 529), (5832, 484), (5832, 441), (5832, 400), (5832, 361), (5832, 324), (5832, 289), (5832, 256), (5832, 225), (5832, 196), (5832, 169), (5832, 144), (5832, 121), (5832, 100), (5832, 81), (5832, 64), (5832, 49), (5832, 36), (5832, 25), (5832, 16), (5832, 9), (5832, 4), (5832, 1), (5832, 0), (5832, 1), (5832, 4), (5832, 9), (5832, 16), (5832, 25), (5832, 36), (5832, 49), (5832, 64), (5832, 81), (5832, 100), (5832, 121), (5832, 144), (5832, 169), (5832, 196), (5832, 225), (5832, 256), (5832, 289), (5832, 324), (5832, 361), (5832, 400), (5832, 441), (5832, 484), (5832, 529), (5832, 576), (5832, 625), (5832, 676), (5832, 729), (5832, 784), (5832, 841), (5832, 900), (5832, 961), (5832, 1024), (5832, 1089), (5832, 1156), (5832, 1225), (5832, 1296), (5832, 1369), (5832, 1444), (5832, 1521), (5832, 1600), (5832, 1681), (5832, 1764), (5832, 1849), (5832, 1936), (5832, 2025), (5832, 2116), (5832, 2209), (5832, 2304), (5832, 2401), (6859, 2500), (6859, 2401), (6859, 2304), (6859, 2209), (6859, 2116), (6859, 2025), (6859, 1936), (6859, 1849), (6859, 1764), (6859, 1681), (6859, 1600), (6859, 1521), (6859, 1444), (6859, 1369), (6859, 1296), (6859, 1225), (6859, 1156), (6859, 1089), (6859, 1024), (6859, 961), (6859, 900), (6859, 841), (6859, 784), (6859, 729), (6859, 676), (6859, 625), (6859, 576), (6859, 529), (6859, 484), (6859, 441), (6859, 400), (6859, 361), (6859, 324), (6859, 289), (6859, 256), (6859, 225), (6859, 196), (6859, 169), (6859, 144), (6859, 121), (6859, 100), (6859, 81), (6859, 64), (6859, 49), (6859, 36), (6859, 25), (6859, 16), (6859, 9), (6859, 4), (6859, 1), (6859, 0), (6859, 1), (6859, 4), (6859, 9), (6859, 16), (6859, 25), (6859, 36), (6859, 49), (6859, 64), (6859, 81), (6859, 100), (6859, 121), (6859, 144), (6859, 169), (6859, 196), (6859, 225), (6859, 256), (6859, 289), (6859, 324), (6859, 361), (6859, 400), (6859, 441), (6859, 484), (6859, 529), (6859, 576), (6859, 625), (6859, 676), (6859, 729), (6859, 784), (6859, 841), (6859, 900), (6859, 961), (6859, 1024), (6859, 1089), (6859, 1156), (6859, 1225), (6859, 1296), (6859, 1369), (6859, 1444), (6859, 1521), (6859, 1600), (6859, 1681), (6859, 1764), (6859, 1849), (6859, 1936), (6859, 2025), (6859, 2116), (6859, 2209), (6859, 2304), (6859, 2401), (8000, 2500), (8000, 2401), (8000, 2304), (8000, 2209), (8000, 2116), (8000, 2025), (8000, 1936), (8000, 1849), (8000, 1764), (8000, 1681), (8000, 1600), (8000, 1521), (8000, 1444), (8000, 1369), (8000, 1296), (8000, 1225), (8000, 1156), (8000, 1089), (8000, 1024), (8000, 961), (8000, 900), (8000, 841), (8000, 784), (8000, 729), (8000, 676), (8000, 625), (8000, 576), (8000, 529), (8000, 484), (8000, 441), (8000, 400), (8000, 361), (8000, 324), (8000, 289), (8000, 256), (8000, 225), (8000, 196), (8000, 169), (8000, 144), (8000, 121), (8000, 100), (8000, 81), (8000, 64), (8000, 49), (8000, 36), (8000, 25), (8000, 16), (8000, 9), (8000, 4), (8000, 1), (8000, 0), (8000, 1), (8000, 4), (8000, 9), (8000, 16), (8000, 25), (8000, 36), (8000, 49), (8000, 64), (8000, 81), (8000, 100), (8000, 121), (8000, 144), (8000, 169), (8000, 196), (8000, 225), (8000, 256), (8000, 289), (8000, 324), (8000, 361), (8000, 400), (8000, 441), (8000, 484), (8000, 529), (8000, 576), (8000, 625), (8000, 676), (8000, 729), (8000, 784), (8000, 841), (8000, 900), (8000, 961), (8000, 1024), (8000, 1089), (8000, 1156), (8000, 1225), (8000, 1296), (8000, 1369), (8000, 1444), (8000, 1521), (8000, 1600), (8000, 1681), (8000, 1764), (8000, 1849), (8000, 1936), (8000, 2025), (8000, 2116), (8000, 2209), (8000, 2304), (8000, 2401), (9261, 2500), (9261, 2401), (9261, 2304), (9261, 2209), (9261, 2116), (9261, 2025), (9261, 1936), (9261, 1849), (9261, 1764), (9261, 1681), (9261, 1600), (9261, 1521), (9261, 1444), (9261, 1369), (9261, 1296), (9261, 1225), (9261, 1156), (9261, 1089), (9261, 1024), (9261, 961), (9261, 900), (9261, 841), (9261, 784), (9261, 729), (9261, 676), (9261, 625), (9261, 576), (9261, 529), (9261, 484), (9261, 441), (9261, 400), (9261, 361), (9261, 324), (9261, 289), (9261, 256), (9261, 225), (9261, 196), (9261, 169), (9261, 144), (9261, 121), (9261, 100), (9261, 81), (9261, 64), (9261, 49), (9261, 36), (9261, 25), (9261, 16), (9261, 9), (9261, 4), (9261, 1), (9261, 0), (9261, 1), (9261, 4), (9261, 9), (9261, 16), (9261, 25), (9261, 36), (9261, 49), (9261, 64), (9261, 81), (9261, 100), (9261, 121), (9261, 144), (9261, 169), (9261, 196), (9261, 225), (9261, 256), (9261, 289), (9261, 324), (9261, 361), (9261, 400), (9261, 441), (9261, 484), (9261, 529), (9261, 576), (9261, 625), (9261, 676), (9261, 729), (9261, 784), (9261, 841), (9261, 900), (9261, 961), (9261, 1024), (9261, 1089), (9261, 1156), (9261, 1225), (9261, 1296), (9261, 1369), (9261, 1444), (9261, 1521), (9261, 1600), (9261, 1681), (9261, 1764), (9261, 1849), (9261, 1936), (9261, 2025), (9261, 2116), (9261, 2209), (9261, 2304), (9261, 2401), (10648, 2500), (10648, 2401), (10648, 2304), (10648, 2209), (10648, 2116), (10648, 2025), (10648, 1936), (10648, 1849), (10648, 1764), (10648, 1681), (10648, 1600), (10648, 1521), (10648, 1444), (10648, 1369), (10648, 1296), (10648, 1225), (10648, 1156), (10648, 1089), (10648, 1024), (10648, 961), (10648, 900), (10648, 841), (10648, 784), (10648, 729), (10648, 676), (10648, 625), (10648, 576), (10648, 529), (10648, 484), (10648, 441), (10648, 400), (10648, 361), (10648, 324), (10648, 289), (10648, 256), (10648, 225), (10648, 196), (10648, 169), (10648, 144), (10648, 121), (10648, 100), (10648, 81), (10648, 64), (10648, 49), (10648, 36), (10648, 25), (10648, 16), (10648, 9), (10648, 4), (10648, 1), (10648, 0), (10648, 1), (10648, 4), (10648, 9), (10648, 16), (10648, 25), (10648, 36), (10648, 49), (10648, 64), (10648, 81), (10648, 100), (10648, 121), (10648, 144), (10648, 169), (10648, 196), (10648, 225), (10648, 256), (10648, 289), (10648, 324), (10648, 361), (10648, 400), (10648, 441), (10648, 484), (10648, 529), (10648, 576), (10648, 625), (10648, 676), (10648, 729), (10648, 784), (10648, 841), (10648, 900), (10648, 961), (10648, 1024), (10648, 1089), (10648, 1156), (10648, 1225), (10648, 1296), (10648, 1369), (10648, 1444), (10648, 1521), (10648, 1600), (10648, 1681), (10648, 1764), (10648, 1849), (10648, 1936), (10648, 2025), (10648, 2116), (10648, 2209), (10648, 2304), (10648, 2401), (12167, 2500), (12167, 2401), (12167, 2304), (12167, 2209), (12167, 2116), (12167, 2025), (12167, 1936), (12167, 1849), (12167, 1764), (12167, 1681), (12167, 1600), (12167, 1521), (12167, 1444), (12167, 1369), (12167, 1296), (12167, 1225), (12167, 1156), (12167, 1089), (12167, 1024), (12167, 961), (12167, 900), (12167, 841), (12167, 784), (12167, 729), (12167, 676), (12167, 625), (12167, 576), (12167, 529), (12167, 484), (12167, 441), (12167, 400), (12167, 361), (12167, 324), (12167, 289), (12167, 256), (12167, 225), (12167, 196), (12167, 169), (12167, 144), (12167, 121), (12167, 100), (12167, 81), (12167, 64), (12167, 49), (12167, 36), (12167, 25), (12167, 16), (12167, 9), (12167, 4), (12167, 1), (12167, 0), (12167, 1), (12167, 4), (12167, 9), (12167, 16), (12167, 25), (12167, 36), (12167, 49), (12167, 64), (12167, 81), (12167, 100), (12167, 121), (12167, 144), (12167, 169), (12167, 196), (12167, 225), (12167, 256), (12167, 289), (12167, 324), (12167, 361), (12167, 400), (12167, 441), (12167, 484), (12167, 529), (12167, 576), (12167, 625), (12167, 676), (12167, 729), (12167, 784), (12167, 841), (12167, 900), (12167, 961), (12167, 1024), (12167, 1089), (12167, 1156), (12167, 1225), (12167, 1296), (12167, 1369), (12167, 1444), (12167, 1521), (12167, 1600), (12167, 1681), (12167, 1764), (12167, 1849), (12167, 1936), (12167, 2025), (12167, 2116), (12167, 2209), (12167, 2304), (12167, 2401), (13824, 2500), (13824, 2401), (13824, 2304), (13824, 2209), (13824, 2116), (13824, 2025), (13824, 1936), (13824, 1849), (13824, 1764), (13824, 1681), (13824, 1600), (13824, 1521), (13824, 1444), (13824, 1369), (13824, 1296), (13824, 1225), (13824, 1156), (13824, 1089), (13824, 1024), (13824, 961), (13824, 900), (13824, 841), (13824, 784), (13824, 729), (13824, 676), (13824, 625), (13824, 576), (13824, 529), (13824, 484), (13824, 441), (13824, 400), (13824, 361), (13824, 324), (13824, 289), (13824, 256), (13824, 225), (13824, 196), (13824, 169), (13824, 144), (13824, 121), (13824, 100), (13824, 81), (13824, 64), (13824, 49), (13824, 36), (13824, 25), (13824, 16), (13824, 9), (13824, 4), (13824, 1), (13824, 0), (13824, 1), (13824, 4), (13824, 9), (13824, 16), (13824, 25), (13824, 36), (13824, 49), (13824, 64), (13824, 81), (13824, 100), (13824, 121), (13824, 144), (13824, 169), (13824, 196), (13824, 225), (13824, 256), (13824, 289), (13824, 324), (13824, 361), (13824, 400), (13824, 441), (13824, 484), (13824, 529), (13824, 576), (13824, 625), (13824, 676), (13824, 729), (13824, 784), (13824, 841), (13824, 900), (13824, 961), (13824, 1024), (13824, 1089), (13824, 1156), (13824, 1225), (13824, 1296), (13824, 1369), (13824, 1444), (13824, 1521), (13824, 1600), (13824, 1681), (13824, 1764), (13824, 1849), (13824, 1936), (13824, 2025), (13824, 2116), (13824, 2209), (13824, 2304), (13824, 2401), (15625, 2500), (15625, 2401), (15625, 2304), (15625, 2209), (15625, 2116), (15625, 2025), (15625, 1936), (15625, 1849), (15625, 1764), (15625, 1681), (15625, 1600), (15625, 1521), (15625, 1444), (15625, 1369), (15625, 1296), (15625, 1225), (15625, 1156), (15625, 1089), (15625, 1024), (15625, 961), (15625, 900), (15625, 841), (15625, 784), (15625, 729), (15625, 676), (15625, 625), (15625, 576), (15625, 529), (15625, 484), (15625, 441), (15625, 400), (15625, 361), (15625, 324), (15625, 289), (15625, 256), (15625, 225), (15625, 196), (15625, 169), (15625, 144), (15625, 121), (15625, 100), (15625, 81), (15625, 64), (15625, 49), (15625, 36), (15625, 25), (15625, 16), (15625, 9), (15625, 4), (15625, 1), (15625, 0), (15625, 1), (15625, 4), (15625, 9), (15625, 16), (15625, 25), (15625, 36), (15625, 49), (15625, 64), (15625, 81), (15625, 100), (15625, 121), (15625, 144), (15625, 169), (15625, 196), (15625, 225), (15625, 256), (15625, 289), (15625, 324), (15625, 361), (15625, 400), (15625, 441), (15625, 484), (15625, 529), (15625, 576), (15625, 625), (15625, 676), (15625, 729), (15625, 784), (15625, 841), (15625, 900), (15625, 961), (15625, 1024), (15625, 1089), (15625, 1156), (15625, 1225), (15625, 1296), (15625, 1369), (15625, 1444), (15625, 1521), (15625, 1600), (15625, 1681), (15625, 1764), (15625, 1849), (15625, 1936), (15625, 2025), (15625, 2116), (15625, 2209), (15625, 2304), (15625, 2401), (17576, 2500), (17576, 2401), (17576, 2304), (17576, 2209), (17576, 2116), (17576, 2025), (17576, 1936), (17576, 1849), (17576, 1764), (17576, 1681), (17576, 1600), (17576, 1521), (17576, 1444), (17576, 1369), (17576, 1296), (17576, 1225), (17576, 1156), (17576, 1089), (17576, 1024), (17576, 961), (17576, 900), (17576, 841), (17576, 784), (17576, 729), (17576, 676), (17576, 625), (17576, 576), (17576, 529), (17576, 484), (17576, 441), (17576, 400), (17576, 361), (17576, 324), (17576, 289), (17576, 256), (17576, 225), (17576, 196), (17576, 169), (17576, 144), (17576, 121), (17576, 100), (17576, 81), (17576, 64), (17576, 49), (17576, 36), (17576, 25), (17576, 16), (17576, 9), (17576, 4), (17576, 1), (17576, 0), (17576, 1), (17576, 4), (17576, 9), (17576, 16), (17576, 25), (17576, 36), (17576, 49), (17576, 64), (17576, 81), (17576, 100), (17576, 121), (17576, 144), (17576, 169), (17576, 196), (17576, 225), (17576, 256), (17576, 289), (17576, 324), (17576, 361), (17576, 400), (17576, 441), (17576, 484), (17576, 529), (17576, 576), (17576, 625), (17576, 676), (17576, 729), (17576, 784), (17576, 841), (17576, 900), (17576, 961), (17576, 1024), (17576, 1089), (17576, 1156), (17576, 1225), (17576, 1296), (17576, 1369), (17576, 1444), (17576, 1521), (17576, 1600), (17576, 1681), (17576, 1764), (17576, 1849), (17576, 1936), (17576, 2025), (17576, 2116), (17576, 2209), (17576, 2304), (17576, 2401), (19683, 2500), (19683, 2401), (19683, 2304), (19683, 2209), (19683, 2116), (19683, 2025), (19683, 1936), (19683, 1849), (19683, 1764), (19683, 1681), (19683, 1600), (19683, 1521), (19683, 1444), (19683, 1369), (19683, 1296), (19683, 1225), (19683, 1156), (19683, 1089), (19683, 1024), (19683, 961), (19683, 900), (19683, 841), (19683, 784), (19683, 729), (19683, 676), (19683, 625), (19683, 576), (19683, 529), (19683, 484), (19683, 441), (19683, 400), (19683, 361), (19683, 324), (19683, 289), (19683, 256), (19683, 225), (19683, 196), (19683, 169), (19683, 144), (19683, 121), (19683, 100), (19683, 81), (19683, 64), (19683, 49), (19683, 36), (19683, 25), (19683, 16), (19683, 9), (19683, 4), (19683, 1), (19683, 0), (19683, 1), (19683, 4), (19683, 9), (19683, 16), (19683, 25), (19683, 36), (19683, 49), (19683, 64), (19683, 81), (19683, 100), (19683, 121), (19683, 144), (19683, 169), (19683, 196), (19683, 225), (19683, 256), (19683, 289), (19683, 324), (19683, 361), (19683, 400), (19683, 441), (19683, 484), (19683, 529), (19683, 576), (19683, 625), (19683, 676), (19683, 729), (19683, 784), (19683, 841), (19683, 900), (19683, 961), (19683, 1024), (19683, 1089), (19683, 1156), (19683, 1225), (19683, 1296), (19683, 1369), (19683, 1444), (19683, 1521), (19683, 1600), (19683, 1681), (19683, 1764), (19683, 1849), (19683, 1936), (19683, 2025), (19683, 2116), (19683, 2209), (19683, 2304), (19683, 2401), (21952, 2500), (21952, 2401), (21952, 2304), (21952, 2209), (21952, 2116), (21952, 2025), (21952, 1936), (21952, 1849), (21952, 1764), (21952, 1681), (21952, 1600), (21952, 1521), (21952, 1444), (21952, 1369), (21952, 1296), (21952, 1225), (21952, 1156), (21952, 1089), (21952, 1024), (21952, 961), (21952, 900), (21952, 841), (21952, 784), (21952, 729), (21952, 676), (21952, 625), (21952, 576), (21952, 529), (21952, 484), (21952, 441), (21952, 400), (21952, 361), (21952, 324), (21952, 289), (21952, 256), (21952, 225), (21952, 196), (21952, 169), (21952, 144), (21952, 121), (21952, 100), (21952, 81), (21952, 64), (21952, 49), (21952, 36), (21952, 25), (21952, 16), (21952, 9), (21952, 4), (21952, 1), (21952, 0), (21952, 1), (21952, 4), (21952, 9), (21952, 16), (21952, 25), (21952, 36), (21952, 49), (21952, 64), (21952, 81), (21952, 100), (21952, 121), (21952, 144), (21952, 169), (21952, 196), (21952, 225), (21952, 256), (21952, 289), (21952, 324), (21952, 361), (21952, 400), (21952, 441), (21952, 484), (21952, 529), (21952, 576), (21952, 625), (21952, 676), (21952, 729), (21952, 784), (21952, 841), (21952, 900), (21952, 961), (21952, 1024), (21952, 1089), (21952, 1156), (21952, 1225), (21952, 1296), (21952, 1369), (21952, 1444), (21952, 1521), (21952, 1600), (21952, 1681), (21952, 1764), (21952, 1849), (21952, 1936), (21952, 2025), (21952, 2116), (21952, 2209), (21952, 2304), (21952, 2401), (24389, 2500), (24389, 2401), (24389, 2304), (24389, 2209), (24389, 2116), (24389, 2025), (24389, 1936), (24389, 1849), (24389, 1764), (24389, 1681), (24389, 1600), (24389, 1521), (24389, 1444), (24389, 1369), (24389, 1296), (24389, 1225), (24389, 1156), (24389, 1089), (24389, 1024), (24389, 961), (24389, 900), (24389, 841), (24389, 784), (24389, 729), (24389, 676), (24389, 625), (24389, 576), (24389, 529), (24389, 484), (24389, 441), (24389, 400), (24389, 361), (24389, 324), (24389, 289), (24389, 256), (24389, 225), (24389, 196), (24389, 169), (24389, 144), (24389, 121), (24389, 100), (24389, 81), (24389, 64), (24389, 49), (24389, 36), (24389, 25), (24389, 16), (24389, 9), (24389, 4), (24389, 1), (24389, 0), (24389, 1), (24389, 4), (24389, 9), (24389, 16), (24389, 25), (24389, 36), (24389, 49), (24389, 64), (24389, 81), (24389, 100), (24389, 121), (24389, 144), (24389, 169), (24389, 196), (24389, 225), (24389, 256), (24389, 289), (24389, 324), (24389, 361), (24389, 400), (24389, 441), (24389, 484), (24389, 529), (24389, 576), (24389, 625), (24389, 676), (24389, 729), (24389, 784), (24389, 841), (24389, 900), (24389, 961), (24389, 1024), (24389, 1089), (24389, 1156), (24389, 1225), (24389, 1296), (24389, 1369), (24389, 1444), (24389, 1521), (24389, 1600), (24389, 1681), (24389, 1764), (24389, 1849), (24389, 1936), (24389, 2025), (24389, 2116), (24389, 2209), (24389, 2304), (24389, 2401), (27000, 2500), (27000, 2401), (27000, 2304), (27000, 2209), (27000, 2116), (27000, 2025), (27000, 1936), (27000, 1849), (27000, 1764), (27000, 1681), (27000, 1600), (27000, 1521), (27000, 1444), (27000, 1369), (27000, 1296), (27000, 1225), (27000, 1156), (27000, 1089), (27000, 1024), (27000, 961), (27000, 900), (27000, 841), (27000, 784), (27000, 729), (27000, 676), (27000, 625), (27000, 576), (27000, 529), (27000, 484), (27000, 441), (27000, 400), (27000, 361), (27000, 324), (27000, 289), (27000, 256), (27000, 225), (27000, 196), (27000, 169), (27000, 144), (27000, 121), (27000, 100), (27000, 81), (27000, 64), (27000, 49), (27000, 36), (27000, 25), (27000, 16), (27000, 9), (27000, 4), (27000, 1), (27000, 0), (27000, 1), (27000, 4), (27000, 9), (27000, 16), (27000, 25), (27000, 36), (27000, 49), (27000, 64), (27000, 81), (27000, 100), (27000, 121), (27000, 144), (27000, 169), (27000, 196), (27000, 225), (27000, 256), (27000, 289), (27000, 324), (27000, 361), (27000, 400), (27000, 441), (27000, 484), (27000, 529), (27000, 576), (27000, 625), (27000, 676), (27000, 729), (27000, 784), (27000, 841), (27000, 900), (27000, 961), (27000, 1024), (27000, 1089), (27000, 1156), (27000, 1225), (27000, 1296), (27000, 1369), (27000, 1444), (27000, 1521), (27000, 1600), (27000, 1681), (27000, 1764), (27000, 1849), (27000, 1936), (27000, 2025), (27000, 2116), (27000, 2209), (27000, 2304), (27000, 2401), (29791, 2500), (29791, 2401), (29791, 2304), (29791, 2209), (29791, 2116), (29791, 2025), (29791, 1936), (29791, 1849), (29791, 1764), (29791, 1681), (29791, 1600), (29791, 1521), (29791, 1444), (29791, 1369), (29791, 1296), (29791, 1225), (29791, 1156), (29791, 1089), (29791, 1024), (29791, 961), (29791, 900), (29791, 841), (29791, 784), (29791, 729), (29791, 676), (29791, 625), (29791, 576), (29791, 529), (29791, 484), (29791, 441), (29791, 400), (29791, 361), (29791, 324), (29791, 289), (29791, 256), (29791, 225), (29791, 196), (29791, 169), (29791, 144), (29791, 121), (29791, 100), (29791, 81), (29791, 64), (29791, 49), (29791, 36), (29791, 25), (29791, 16), (29791, 9), (29791, 4), (29791, 1), (29791, 0), (29791, 1), (29791, 4), (29791, 9), (29791, 16), (29791, 25), (29791, 36), (29791, 49), (29791, 64), (29791, 81), (29791, 100), (29791, 121), (29791, 144), (29791, 169), (29791, 196), (29791, 225), (29791, 256), (29791, 289), (29791, 324), (29791, 361), (29791, 400), (29791, 441), (29791, 484), (29791, 529), (29791, 576), (29791, 625), (29791, 676), (29791, 729), (29791, 784), (29791, 841), (29791, 900), (29791, 961), (29791, 1024), (29791, 1089), (29791, 1156), (29791, 1225), (29791, 1296), (29791, 1369), (29791, 1444), (29791, 1521), (29791, 1600), (29791, 1681), (29791, 1764), (29791, 1849), (29791, 1936), (29791, 2025), (29791, 2116), (29791, 2209), (29791, 2304), (29791, 2401), (32768, 2500), (32768, 2401), (32768, 2304), (32768, 2209), (32768, 2116), (32768, 2025), (32768, 1936), (32768, 1849), (32768, 1764), (32768, 1681), (32768, 1600), (32768, 1521), (32768, 1444), (32768, 1369), (32768, 1296), (32768, 1225), (32768, 1156), (32768, 1089), (32768, 1024), (32768, 961), (32768, 900), (32768, 841), (32768, 784), (32768, 729), (32768, 676), (32768, 625), (32768, 576), (32768, 529), (32768, 484), (32768, 441), (32768, 400), (32768, 361), (32768, 324), (32768, 289), (32768, 256), (32768, 225), (32768, 196), (32768, 169), (32768, 144), (32768, 121), (32768, 100), (32768, 81), (32768, 64), (32768, 49), (32768, 36), (32768, 25), (32768, 16), (32768, 9), (32768, 4), (32768, 1), (32768, 0), (32768, 1), (32768, 4), (32768, 9), (32768, 16), (32768, 25), (32768, 36), (32768, 49), (32768, 64), (32768, 81), (32768, 100), (32768, 121), (32768, 144), (32768, 169), (32768, 196), (32768, 225), (32768, 256), (32768, 289), (32768, 324), (32768, 361), (32768, 400), (32768, 441), (32768, 484), (32768, 529), (32768, 576), (32768, 625), (32768, 676), (32768, 729), (32768, 784), (32768, 841), (32768, 900), (32768, 961), (32768, 1024), (32768, 1089), (32768, 1156), (32768, 1225), (32768, 1296), (32768, 1369), (32768, 1444), (32768, 1521), (32768, 1600), (32768, 1681), (32768, 1764), (32768, 1849), (32768, 1936), (32768, 2025), (32768, 2116), (32768, 2209), (32768, 2304), (32768, 2401), (35937, 2500), (35937, 2401), (35937, 2304), (35937, 2209), (35937, 2116), (35937, 2025), (35937, 1936), (35937, 1849), (35937, 1764), (35937, 1681), (35937, 1600), (35937, 1521), (35937, 1444), (35937, 1369), (35937, 1296), (35937, 1225), (35937, 1156), (35937, 1089), (35937, 1024), (35937, 961), (35937, 900), (35937, 841), (35937, 784), (35937, 729), (35937, 676), (35937, 625), (35937, 576), (35937, 529), (35937, 484), (35937, 441), (35937, 400), (35937, 361), (35937, 324), (35937, 289), (35937, 256), (35937, 225), (35937, 196), (35937, 169), (35937, 144), (35937, 121), (35937, 100), (35937, 81), (35937, 64), (35937, 49), (35937, 36), (35937, 25), (35937, 16), (35937, 9), (35937, 4), (35937, 1), (35937, 0), (35937, 1), (35937, 4), (35937, 9), (35937, 16), (35937, 25), (35937, 36), (35937, 49), (35937, 64), (35937, 81), (35937, 100), (35937, 121), (35937, 144), (35937, 169), (35937, 196), (35937, 225), (35937, 256), (35937, 289), (35937, 324), (35937, 361), (35937, 400), (35937, 441), (35937, 484), (35937, 529), (35937, 576), (35937, 625), (35937, 676), (35937, 729), (35937, 784), (35937, 841), (35937, 900), (35937, 961), (35937, 1024), (35937, 1089), (35937, 1156), (35937, 1225), (35937, 1296), (35937, 1369), (35937, 1444), (35937, 1521), (35937, 1600), (35937, 1681), (35937, 1764), (35937, 1849), (35937, 1936), (35937, 2025), (35937, 2116), (35937, 2209), (35937, 2304), (35937, 2401), (39304, 2500), (39304, 2401), (39304, 2304), (39304, 2209), (39304, 2116), (39304, 2025), (39304, 1936), (39304, 1849), (39304, 1764), (39304, 1681), (39304, 1600), (39304, 1521), (39304, 1444), (39304, 1369), (39304, 1296), (39304, 1225), (39304, 1156), (39304, 1089), (39304, 1024), (39304, 961), (39304, 900), (39304, 841), (39304, 784), (39304, 729), (39304, 676), (39304, 625), (39304, 576), (39304, 529), (39304, 484), (39304, 441), (39304, 400), (39304, 361), (39304, 324), (39304, 289), (39304, 256), (39304, 225), (39304, 196), (39304, 169), (39304, 144), (39304, 121), (39304, 100), (39304, 81), (39304, 64), (39304, 49), (39304, 36), (39304, 25), (39304, 16), (39304, 9), (39304, 4), (39304, 1), (39304, 0), (39304, 1), (39304, 4), (39304, 9), (39304, 16), (39304, 25), (39304, 36), (39304, 49), (39304, 64), (39304, 81), (39304, 100), (39304, 121), (39304, 144), (39304, 169), (39304, 196), (39304, 225), (39304, 256), (39304, 289), (39304, 324), (39304, 361), (39304, 400), (39304, 441), (39304, 484), (39304, 529), (39304, 576), (39304, 625), (39304, 676), (39304, 729), (39304, 784), (39304, 841), (39304, 900), (39304, 961), (39304, 1024), (39304, 1089), (39304, 1156), (39304, 1225), (39304, 1296), (39304, 1369), (39304, 1444), (39304, 1521), (39304, 1600), (39304, 1681), (39304, 1764), (39304, 1849), (39304, 1936), (39304, 2025), (39304, 2116), (39304, 2209), (39304, 2304), (39304, 2401), (42875, 2500), (42875, 2401), (42875, 2304), (42875, 2209), (42875, 2116), (42875, 2025), (42875, 1936), (42875, 1849), (42875, 1764), (42875, 1681), (42875, 1600), (42875, 1521), (42875, 1444), (42875, 1369), (42875, 1296), (42875, 1225), (42875, 1156), (42875, 1089), (42875, 1024), (42875, 961), (42875, 900), (42875, 841), (42875, 784), (42875, 729), (42875, 676), (42875, 625), (42875, 576), (42875, 529), (42875, 484), (42875, 441), (42875, 400), (42875, 361), (42875, 324), (42875, 289), (42875, 256), (42875, 225), (42875, 196), (42875, 169), (42875, 144), (42875, 121), (42875, 100), (42875, 81), (42875, 64), (42875, 49), (42875, 36), (42875, 25), (42875, 16), (42875, 9), (42875, 4), (42875, 1), (42875, 0), (42875, 1), (42875, 4), (42875, 9), (42875, 16), (42875, 25), (42875, 36), (42875, 49), (42875, 64), (42875, 81), (42875, 100), (42875, 121), (42875, 144), (42875, 169), (42875, 196), (42875, 225), (42875, 256), (42875, 289), (42875, 324), (42875, 361), (42875, 400), (42875, 441), (42875, 484), (42875, 529), (42875, 576), (42875, 625), (42875, 676), (42875, 729), (42875, 784), (42875, 841), (42875, 900), (42875, 961), (42875, 1024), (42875, 1089), (42875, 1156), (42875, 1225), (42875, 1296), (42875, 1369), (42875, 1444), (42875, 1521), (42875, 1600), (42875, 1681), (42875, 1764), (42875, 1849), (42875, 1936), (42875, 2025), (42875, 2116), (42875, 2209), (42875, 2304), (42875, 2401), (46656, 2500), (46656, 2401), (46656, 2304), (46656, 2209), (46656, 2116), (46656, 2025), (46656, 1936), (46656, 1849), (46656, 1764), (46656, 1681), (46656, 1600), (46656, 1521), (46656, 1444), (46656, 1369), (46656, 1296), (46656, 1225), (46656, 1156), (46656, 1089), (46656, 1024), (46656, 961), (46656, 900), (46656, 841), (46656, 784), (46656, 729), (46656, 676), (46656, 625), (46656, 576), (46656, 529), (46656, 484), (46656, 441), (46656, 400), (46656, 361), (46656, 324), (46656, 289), (46656, 256), (46656, 225), (46656, 196), (46656, 169), (46656, 144), (46656, 121), (46656, 100), (46656, 81), (46656, 64), (46656, 49), (46656, 36), (46656, 25), (46656, 16), (46656, 9), (46656, 4), (46656, 1), (46656, 0), (46656, 1), (46656, 4), (46656, 9), (46656, 16), (46656, 25), (46656, 36), (46656, 49), (46656, 64), (46656, 81), (46656, 100), (46656, 121), (46656, 144), (46656, 169), (46656, 196), (46656, 225), (46656, 256), (46656, 289), (46656, 324), (46656, 361), (46656, 400), (46656, 441), (46656, 484), (46656, 529), (46656, 576), (46656, 625), (46656, 676), (46656, 729), (46656, 784), (46656, 841), (46656, 900), (46656, 961), (46656, 1024), (46656, 1089), (46656, 1156), (46656, 1225), (46656, 1296), (46656, 1369), (46656, 1444), (46656, 1521), (46656, 1600), (46656, 1681), (46656, 1764), (46656, 1849), (46656, 1936), (46656, 2025), (46656, 2116), (46656, 2209), (46656, 2304), (46656, 2401), (50653, 2500), (50653, 2401), (50653, 2304), (50653, 2209), (50653, 2116), (50653, 2025), (50653, 1936), (50653, 1849), (50653, 1764), (50653, 1681), (50653, 1600), (50653, 1521), (50653, 1444), (50653, 1369), (50653, 1296), (50653, 1225), (50653, 1156), (50653, 1089), (50653, 1024), (50653, 961), (50653, 900), (50653, 841), (50653, 784), (50653, 729), (50653, 676), (50653, 625), (50653, 576), (50653, 529), (50653, 484), (50653, 441), (50653, 400), (50653, 361), (50653, 324), (50653, 289), (50653, 256), (50653, 225), (50653, 196), (50653, 169), (50653, 144), (50653, 121), (50653, 100), (50653, 81), (50653, 64), (50653, 49), (50653, 36), (50653, 25), (50653, 16), (50653, 9), (50653, 4), (50653, 1), (50653, 0), (50653, 1), (50653, 4), (50653, 9), (50653, 16), (50653, 25), (50653, 36), (50653, 49), (50653, 64), (50653, 81), (50653, 100), (50653, 121), (50653, 144), (50653, 169), (50653, 196), (50653, 225), (50653, 256), (50653, 289), (50653, 324), (50653, 361), (50653, 400), (50653, 441), (50653, 484), (50653, 529), (50653, 576), (50653, 625), (50653, 676), (50653, 729), (50653, 784), (50653, 841), (50653, 900), (50653, 961), (50653, 1024), (50653, 1089), (50653, 1156), (50653, 1225), (50653, 1296), (50653, 1369), (50653, 1444), (50653, 1521), (50653, 1600), (50653, 1681), (50653, 1764), (50653, 1849), (50653, 1936), (50653, 2025), (50653, 2116), (50653, 2209), (50653, 2304), (50653, 2401), (54872, 2500), (54872, 2401), (54872, 2304), (54872, 2209), (54872, 2116), (54872, 2025), (54872, 1936), (54872, 1849), (54872, 1764), (54872, 1681), (54872, 1600), (54872, 1521), (54872, 1444), (54872, 1369), (54872, 1296), (54872, 1225), (54872, 1156), (54872, 1089), (54872, 1024), (54872, 961), (54872, 900), (54872, 841), (54872, 784), (54872, 729), (54872, 676), (54872, 625), (54872, 576), (54872, 529), (54872, 484), (54872, 441), (54872, 400), (54872, 361), (54872, 324), (54872, 289), (54872, 256), (54872, 225), (54872, 196), (54872, 169), (54872, 144), (54872, 121), (54872, 100), (54872, 81), (54872, 64), (54872, 49), (54872, 36), (54872, 25), (54872, 16), (54872, 9), (54872, 4), (54872, 1), (54872, 0), (54872, 1), (54872, 4), (54872, 9), (54872, 16), (54872, 25), (54872, 36), (54872, 49), (54872, 64), (54872, 81), (54872, 100), (54872, 121), (54872, 144), (54872, 169), (54872, 196), (54872, 225), (54872, 256), (54872, 289), (54872, 324), (54872, 361), (54872, 400), (54872, 441), (54872, 484), (54872, 529), (54872, 576), (54872, 625), (54872, 676), (54872, 729), (54872, 784), (54872, 841), (54872, 900), (54872, 961), (54872, 1024), (54872, 1089), (54872, 1156), (54872, 1225), (54872, 1296), (54872, 1369), (54872, 1444), (54872, 1521), (54872, 1600), (54872, 1681), (54872, 1764), (54872, 1849), (54872, 1936), (54872, 2025), (54872, 2116), (54872, 2209), (54872, 2304), (54872, 2401), (59319, 2500), (59319, 2401), (59319, 2304), (59319, 2209), (59319, 2116), (59319, 2025), (59319, 1936), (59319, 1849), (59319, 1764), (59319, 1681), (59319, 1600), (59319, 1521), (59319, 1444), (59319, 1369), (59319, 1296), (59319, 1225), (59319, 1156), (59319, 1089), (59319, 1024), (59319, 961), (59319, 900), (59319, 841), (59319, 784), (59319, 729), (59319, 676), (59319, 625), (59319, 576), (59319, 529), (59319, 484), (59319, 441), (59319, 400), (59319, 361), (59319, 324), (59319, 289), (59319, 256), (59319, 225), (59319, 196), (59319, 169), (59319, 144), (59319, 121), (59319, 100), (59319, 81), (59319, 64), (59319, 49), (59319, 36), (59319, 25), (59319, 16), (59319, 9), (59319, 4), (59319, 1), (59319, 0), (59319, 1), (59319, 4), (59319, 9), (59319, 16), (59319, 25), (59319, 36), (59319, 49), (59319, 64), (59319, 81), (59319, 100), (59319, 121), (59319, 144), (59319, 169), (59319, 196), (59319, 225), (59319, 256), (59319, 289), (59319, 324), (59319, 361), (59319, 400), (59319, 441), (59319, 484), (59319, 529), (59319, 576), (59319, 625), (59319, 676), (59319, 729), (59319, 784), (59319, 841), (59319, 900), (59319, 961), (59319, 1024), (59319, 1089), (59319, 1156), (59319, 1225), (59319, 1296), (59319, 1369), (59319, 1444), (59319, 1521), (59319, 1600), (59319, 1681), (59319, 1764), (59319, 1849), (59319, 1936), (59319, 2025), (59319, 2116), (59319, 2209), (59319, 2304), (59319, 2401), (64000, 2500), (64000, 2401), (64000, 2304), (64000, 2209), (64000, 2116), (64000, 2025), (64000, 1936), (64000, 1849), (64000, 1764), (64000, 1681), (64000, 1600), (64000, 1521), (64000, 1444), (64000, 1369), (64000, 1296), (64000, 1225), (64000, 1156), (64000, 1089), (64000, 1024), (64000, 961), (64000, 900), (64000, 841), (64000, 784), (64000, 729), (64000, 676), (64000, 625), (64000, 576), (64000, 529), (64000, 484), (64000, 441), (64000, 400), (64000, 361), (64000, 324), (64000, 289), (64000, 256), (64000, 225), (64000, 196), (64000, 169), (64000, 144), (64000, 121), (64000, 100), (64000, 81), (64000, 64), (64000, 49), (64000, 36), (64000, 25), (64000, 16), (64000, 9), (64000, 4), (64000, 1), (64000, 0), (64000, 1), (64000, 4), (64000, 9), (64000, 16), (64000, 25), (64000, 36), (64000, 49), (64000, 64), (64000, 81), (64000, 100), (64000, 121), (64000, 144), (64000, 169), (64000, 196), (64000, 225), (64000, 256), (64000, 289), (64000, 324), (64000, 361), (64000, 400), (64000, 441), (64000, 484), (64000, 529), (64000, 576), (64000, 625), (64000, 676), (64000, 729), (64000, 784), (64000, 841), (64000, 900), (64000, 961), (64000, 1024), (64000, 1089), (64000, 1156), (64000, 1225), (64000, 1296), (64000, 1369), (64000, 1444), (64000, 1521), (64000, 1600), (64000, 1681), (64000, 1764), (64000, 1849), (64000, 1936), (64000, 2025), (64000, 2116), (64000, 2209), (64000, 2304), (64000, 2401), (68921, 2500), (68921, 2401), (68921, 2304), (68921, 2209), (68921, 2116), (68921, 2025), (68921, 1936), (68921, 1849), (68921, 1764), (68921, 1681), (68921, 1600), (68921, 1521), (68921, 1444), (68921, 1369), (68921, 1296), (68921, 1225), (68921, 1156), (68921, 1089), (68921, 1024), (68921, 961), (68921, 900), (68921, 841), (68921, 784), (68921, 729), (68921, 676), (68921, 625), (68921, 576), (68921, 529), (68921, 484), (68921, 441), (68921, 400), (68921, 361), (68921, 324), (68921, 289), (68921, 256), (68921, 225), (68921, 196), (68921, 169), (68921, 144), (68921, 121), (68921, 100), (68921, 81), (68921, 64), (68921, 49), (68921, 36), (68921, 25), (68921, 16), (68921, 9), (68921, 4), (68921, 1), (68921, 0), (68921, 1), (68921, 4), (68921, 9), (68921, 16), (68921, 25), (68921, 36), (68921, 49), (68921, 64), (68921, 81), (68921, 100), (68921, 121), (68921, 144), (68921, 169), (68921, 196), (68921, 225), (68921, 256), (68921, 289), (68921, 324), (68921, 361), (68921, 400), (68921, 441), (68921, 484), (68921, 529), (68921, 576), (68921, 625), (68921, 676), (68921, 729), (68921, 784), (68921, 841), (68921, 900), (68921, 961), (68921, 1024), (68921, 1089), (68921, 1156), (68921, 1225), (68921, 1296), (68921, 1369), (68921, 1444), (68921, 1521), (68921, 1600), (68921, 1681), (68921, 1764), (68921, 1849), (68921, 1936), (68921, 2025), (68921, 2116), (68921, 2209), (68921, 2304), (68921, 2401), (74088, 2500), (74088, 2401), (74088, 2304), (74088, 2209), (74088, 2116), (74088, 2025), (74088, 1936), (74088, 1849), (74088, 1764), (74088, 1681), (74088, 1600), (74088, 1521), (74088, 1444), (74088, 1369), (74088, 1296), (74088, 1225), (74088, 1156), (74088, 1089), (74088, 1024), (74088, 961), (74088, 900), (74088, 841), (74088, 784), (74088, 729), (74088, 676), (74088, 625), (74088, 576), (74088, 529), (74088, 484), (74088, 441), (74088, 400), (74088, 361), (74088, 324), (74088, 289), (74088, 256), (74088, 225), (74088, 196), (74088, 169), (74088, 144), (74088, 121), (74088, 100), (74088, 81), (74088, 64), (74088, 49), (74088, 36), (74088, 25), (74088, 16), (74088, 9), (74088, 4), (74088, 1), (74088, 0), (74088, 1), (74088, 4), (74088, 9), (74088, 16), (74088, 25), (74088, 36), (74088, 49), (74088, 64), (74088, 81), (74088, 100), (74088, 121), (74088, 144), (74088, 169), (74088, 196), (74088, 225), (74088, 256), (74088, 289), (74088, 324), (74088, 361), (74088, 400), (74088, 441), (74088, 484), (74088, 529), (74088, 576), (74088, 625), (74088, 676), (74088, 729), (74088, 784), (74088, 841), (74088, 900), (74088, 961), (74088, 1024), (74088, 1089), (74088, 1156), (74088, 1225), (74088, 1296), (74088, 1369), (74088, 1444), (74088, 1521), (74088, 1600), (74088, 1681), (74088, 1764), (74088, 1849), (74088, 1936), (74088, 2025), (74088, 2116), (74088, 2209), (74088, 2304), (74088, 2401), (79507, 2500), (79507, 2401), (79507, 2304), (79507, 2209), (79507, 2116), (79507, 2025), (79507, 1936), (79507, 1849), (79507, 1764), (79507, 1681), (79507, 1600), (79507, 1521), (79507, 1444), (79507, 1369), (79507, 1296), (79507, 1225), (79507, 1156), (79507, 1089), (79507, 1024), (79507, 961), (79507, 900), (79507, 841), (79507, 784), (79507, 729), (79507, 676), (79507, 625), (79507, 576), (79507, 529), (79507, 484), (79507, 441), (79507, 400), (79507, 361), (79507, 324), (79507, 289), (79507, 256), (79507, 225), (79507, 196), (79507, 169), (79507, 144), (79507, 121), (79507, 100), (79507, 81), (79507, 64), (79507, 49), (79507, 36), (79507, 25), (79507, 16), (79507, 9), (79507, 4), (79507, 1), (79507, 0), (79507, 1), (79507, 4), (79507, 9), (79507, 16), (79507, 25), (79507, 36), (79507, 49), (79507, 64), (79507, 81), (79507, 100), (79507, 121), (79507, 144), (79507, 169), (79507, 196), (79507, 225), (79507, 256), (79507, 289), (79507, 324), (79507, 361), (79507, 400), (79507, 441), (79507, 484), (79507, 529), (79507, 576), (79507, 625), (79507, 676), (79507, 729), (79507, 784), (79507, 841), (79507, 900), (79507, 961), (79507, 1024), (79507, 1089), (79507, 1156), (79507, 1225), (79507, 1296), (79507, 1369), (79507, 1444), (79507, 1521), (79507, 1600), (79507, 1681), (79507, 1764), (79507, 1849), (79507, 1936), (79507, 2025), (79507, 2116), (79507, 2209), (79507, 2304), (79507, 2401), (85184, 2500), (85184, 2401), (85184, 2304), (85184, 2209), (85184, 2116), (85184, 2025), (85184, 1936), (85184, 1849), (85184, 1764), (85184, 1681), (85184, 1600), (85184, 1521), (85184, 1444), (85184, 1369), (85184, 1296), (85184, 1225), (85184, 1156), (85184, 1089), (85184, 1024), (85184, 961), (85184, 900), (85184, 841), (85184, 784), (85184, 729), (85184, 676), (85184, 625), (85184, 576), (85184, 529), (85184, 484), (85184, 441), (85184, 400), (85184, 361), (85184, 324), (85184, 289), (85184, 256), (85184, 225), (85184, 196), (85184, 169), (85184, 144), (85184, 121), (85184, 100), (85184, 81), (85184, 64), (85184, 49), (85184, 36), (85184, 25), (85184, 16), (85184, 9), (85184, 4), (85184, 1), (85184, 0), (85184, 1), (85184, 4), (85184, 9), (85184, 16), (85184, 25), (85184, 36), (85184, 49), (85184, 64), (85184, 81), (85184, 100), (85184, 121), (85184, 144), (85184, 169), (85184, 196), (85184, 225), (85184, 256), (85184, 289), (85184, 324), (85184, 361), (85184, 400), (85184, 441), (85184, 484), (85184, 529), (85184, 576), (85184, 625), (85184, 676), (85184, 729), (85184, 784), (85184, 841), (85184, 900), (85184, 961), (85184, 1024), (85184, 1089), (85184, 1156), (85184, 1225), (85184, 1296), (85184, 1369), (85184, 1444), (85184, 1521), (85184, 1600), (85184, 1681), (85184, 1764), (85184, 1849), (85184, 1936), (85184, 2025), (85184, 2116), (85184, 2209), (85184, 2304), (85184, 2401), (91125, 2500), (91125, 2401), (91125, 2304), (91125, 2209), (91125, 2116), (91125, 2025), (91125, 1936), (91125, 1849), (91125, 1764), (91125, 1681), (91125, 1600), (91125, 1521), (91125, 1444), (91125, 1369), (91125, 1296), (91125, 1225), (91125, 1156), (91125, 1089), (91125, 1024), (91125, 961), (91125, 900), (91125, 841), (91125, 784), (91125, 729), (91125, 676), (91125, 625), (91125, 576), (91125, 529), (91125, 484), (91125, 441), (91125, 400), (91125, 361), (91125, 324), (91125, 289), (91125, 256), (91125, 225), (91125, 196), (91125, 169), (91125, 144), (91125, 121), (91125, 100), (91125, 81), (91125, 64), (91125, 49), (91125, 36), (91125, 25), (91125, 16), (91125, 9), (91125, 4), (91125, 1), (91125, 0), (91125, 1), (91125, 4), (91125, 9), (91125, 16), (91125, 25), (91125, 36), (91125, 49), (91125, 64), (91125, 81), (91125, 100), (91125, 121), (91125, 144), (91125, 169), (91125, 196), (91125, 225), (91125, 256), (91125, 289), (91125, 324), (91125, 361), (91125, 400), (91125, 441), (91125, 484), (91125, 529), (91125, 576), (91125, 625), (91125, 676), (91125, 729), (91125, 784), (91125, 841), (91125, 900), (91125, 961), (91125, 1024), (91125, 1089), (91125, 1156), (91125, 1225), (91125, 1296), (91125, 1369), (91125, 1444), (91125, 1521), (91125, 1600), (91125, 1681), (91125, 1764), (91125, 1849), (91125, 1936), (91125, 2025), (91125, 2116), (91125, 2209), (91125, 2304), (91125, 2401), (97336, 2500), (97336, 2401), (97336, 2304), (97336, 2209), (97336, 2116), (97336, 2025), (97336, 1936), (97336, 1849), (97336, 1764), (97336, 1681), (97336, 1600), (97336, 1521), (97336, 1444), (97336, 1369), (97336, 1296), (97336, 1225), (97336, 1156), (97336, 1089), (97336, 1024), (97336, 961), (97336, 900), (97336, 841), (97336, 784), (97336, 729), (97336, 676), (97336, 625), (97336, 576), (97336, 529), (97336, 484), (97336, 441), (97336, 400), (97336, 361), (97336, 324), (97336, 289), (97336, 256), (97336, 225), (97336, 196), (97336, 169), (97336, 144), (97336, 121), (97336, 100), (97336, 81), (97336, 64), (97336, 49), (97336, 36), (97336, 25), (97336, 16), (97336, 9), (97336, 4), (97336, 1), (97336, 0), (97336, 1), (97336, 4), (97336, 9), (97336, 16), (97336, 25), (97336, 36), (97336, 49), (97336, 64), (97336, 81), (97336, 100), (97336, 121), (97336, 144), (97336, 169), (97336, 196), (97336, 225), (97336, 256), (97336, 289), (97336, 324), (97336, 361), (97336, 400), (97336, 441), (97336, 484), (97336, 529), (97336, 576), (97336, 625), (97336, 676), (97336, 729), (97336, 784), (97336, 841), (97336, 900), (97336, 961), (97336, 1024), (97336, 1089), (97336, 1156), (97336, 1225), (97336, 1296), (97336, 1369), (97336, 1444), (97336, 1521), (97336, 1600), (97336, 1681), (97336, 1764), (97336, 1849), (97336, 1936), (97336, 2025), (97336, 2116), (97336, 2209), (97336, 2304), (97336, 2401), (103823, 2500), (103823, 2401), (103823, 2304), (103823, 2209), (103823, 2116), (103823, 2025), (103823, 1936), (103823, 1849), (103823, 1764), (103823, 1681), (103823, 1600), (103823, 1521), (103823, 1444), (103823, 1369), (103823, 1296), (103823, 1225), (103823, 1156), (103823, 1089), (103823, 1024), (103823, 961), (103823, 900), (103823, 841), (103823, 784), (103823, 729), (103823, 676), (103823, 625), (103823, 576), (103823, 529), (103823, 484), (103823, 441), (103823, 400), (103823, 361), (103823, 324), (103823, 289), (103823, 256), (103823, 225), (103823, 196), (103823, 169), (103823, 144), (103823, 121), (103823, 100), (103823, 81), (103823, 64), (103823, 49), (103823, 36), (103823, 25), (103823, 16), (103823, 9), (103823, 4), (103823, 1), (103823, 0), (103823, 1), (103823, 4), (103823, 9), (103823, 16), (103823, 25), (103823, 36), (103823, 49), (103823, 64), (103823, 81), (103823, 100), (103823, 121), (103823, 144), (103823, 169), (103823, 196), (103823, 225), (103823, 256), (103823, 289), (103823, 324), (103823, 361), (103823, 400), (103823, 441), (103823, 484), (103823, 529), (103823, 576), (103823, 625), (103823, 676), (103823, 729), (103823, 784), (103823, 841), (103823, 900), (103823, 961), (103823, 1024), (103823, 1089), (103823, 1156), (103823, 1225), (103823, 1296), (103823, 1369), (103823, 1444), (103823, 1521), (103823, 1600), (103823, 1681), (103823, 1764), (103823, 1849), (103823, 1936), (103823, 2025), (103823, 2116), (103823, 2209), (103823, 2304), (103823, 2401), (110592, 2500), (110592, 2401), (110592, 2304), (110592, 2209), (110592, 2116), (110592, 2025), (110592, 1936), (110592, 1849), (110592, 1764), (110592, 1681), (110592, 1600), (110592, 1521), (110592, 1444), (110592, 1369), (110592, 1296), (110592, 1225), (110592, 1156), (110592, 1089), (110592, 1024), (110592, 961), (110592, 900), (110592, 841), (110592, 784), (110592, 729), (110592, 676), (110592, 625), (110592, 576), (110592, 529), (110592, 484), (110592, 441), (110592, 400), (110592, 361), (110592, 324), (110592, 289), (110592, 256), (110592, 225), (110592, 196), (110592, 169), (110592, 144), (110592, 121), (110592, 100), (110592, 81), (110592, 64), (110592, 49), (110592, 36), (110592, 25), (110592, 16), (110592, 9), (110592, 4), (110592, 1), (110592, 0), (110592, 1), (110592, 4), (110592, 9), (110592, 16), (110592, 25), (110592, 36), (110592, 49), (110592, 64), (110592, 81), (110592, 100), (110592, 121), (110592, 144), (110592, 169), (110592, 196), (110592, 225), (110592, 256), (110592, 289), (110592, 324), (110592, 361), (110592, 400), (110592, 441), (110592, 484), (110592, 529), (110592, 576), (110592, 625), (110592, 676), (110592, 729), (110592, 784), (110592, 841), (110592, 900), (110592, 961), (110592, 1024), (110592, 1089), (110592, 1156), (110592, 1225), (110592, 1296), (110592, 1369), (110592, 1444), (110592, 1521), (110592, 1600), (110592, 1681), (110592, 1764), (110592, 1849), (110592, 1936), (110592, 2025), (110592, 2116), (110592, 2209), (110592, 2304), (110592, 2401), (117649, 2500), (117649, 2401), (117649, 2304), (117649, 2209), (117649, 2116), (117649, 2025), (117649, 1936), (117649, 1849), (117649, 1764), (117649, 1681), (117649, 1600), (117649, 1521), (117649, 1444), (117649, 1369), (117649, 1296), (117649, 1225), (117649, 1156), (117649, 1089), (117649, 1024), (117649, 961), (117649, 900), (117649, 841), (117649, 784), (117649, 729), (117649, 676), (117649, 625), (117649, 576), (117649, 529), (117649, 484), (117649, 441), (117649, 400), (117649, 361), (117649, 324), (117649, 289), (117649, 256), (117649, 225), (117649, 196), (117649, 169), (117649, 144), (117649, 121), (117649, 100), (117649, 81), (117649, 64), (117649, 49), (117649, 36), (117649, 25), (117649, 16), (117649, 9), (117649, 4), (117649, 1), (117649, 0), (117649, 1), (117649, 4), (117649, 9), (117649, 16), (117649, 25), (117649, 36), (117649, 49), (117649, 64), (117649, 81), (117649, 100), (117649, 121), (117649, 144), (117649, 169), (117649, 196), (117649, 225), (117649, 256), (117649, 289), (117649, 324), (117649, 361), (117649, 400), (117649, 441), (117649, 484), (117649, 529), (117649, 576), (117649, 625), (117649, 676), (117649, 729), (117649, 784), (117649, 841), (117649, 900), (117649, 961), (117649, 1024), (117649, 1089), (117649, 1156), (117649, 1225), (117649, 1296), (117649, 1369), (117649, 1444), (117649, 1521), (117649, 1600), (117649, 1681), (117649, 1764), (117649, 1849), (117649, 1936), (117649, 2025), (117649, 2116), (117649, 2209), (117649, 2304), (117649, 2401)]\"]]", 
      "solution": "def najblizji(t):\n    \"\"\"Vrni par indeksov (i,j), da je (t[i], t[j]) par najbli\u017ejih to\u010dk.\"\"\"\n\n    ix = uredi_po_x(t) # _indeksi_ to\u010dk iz t, urejeni po osi x\n    iy = uredi_po_y(t) # _indexi_ to\u010dk iz t, urejeni po osi y\n\n    def dist2(u,v):\n        \"\"\"Kvadrat razdalje med to\u010dkama u in v.\"\"\"\n        dx = u[0] - v[0]\n        dy = u[1] - v[1]\n        return dx*dx + dy*dy\n\n    def isci(i,j):\n        '''V podtabeli a[ix[i]:ix[(j+1)]] poi\u0161\u010di par najbli\u017ejih to\u010dk.'''\n        if i >= j:\n            # podtabela ima 0 ali 1 element\n            return None\n        elif i + 1 == j:\n            # podtabela ima 2 elementa\n            return (ix[i], iy[j])\n        else: # podtabela ima ve\u010d kot dva elementa\n\n            # deli\n\n            k = (i + j) // 2 # sredina podtabele\n            levo = isci(i,k)\n            desno = isci(k+1,j)\n\n            # vladaj\n\n            # ugotovimo, ali je bolj\u0161i kandidat na levi ali na desni\n            if levo is None:\n                (i_min, j_min) = desno\n            elif desno is None:\n                (i_min, j_min) = levo\n            else:\n                (i_levo, j_levo) = levo\n                (i_desno, j_desno) = desno\n                d_levo = dist2(t[i_levo], t[j_levo])\n                d_desno = dist2(t[i_desno], t[j_desno])\n                if d_levo < d_desno:\n                    (i_min, j_min) = (i_levo, j_levo)\n                else:\n                    (i_min, j_min) = (i_desno, j_desno)\n            d = dist2(t[i_min], t[j_min])\n            # zdaj je (i_min, j_min) indeks najbolj\u0161ega kandidata in d kvadrat razdalje\n            # med t[i_min] in t[j_min]\n\n            # izra\u010dunamo pas debeline 2*d\n            x = (t[ix[k]][0] + t[ix[k+1]][0]) / 2 # koordinata vertikale, ki deli obmo\u010dje\n            pas = [j for j in iy if abs(t[j][0] - x)**2 <= d]\n            # po pasu i\u0161\u010demo bolj\u0161ega kandidata od (i_min, j_min)\n            for p in range(len(pas)):\n                r = p + 1\n                while r < len(pas) and (t[iy[r]][1] - t[iy[p]][1])**2 < d and r - p <= 6:\n                    e = dist2(t[iy[p]], t[iy[r]])\n                    if e < d:\n                        d = e\n                        i_min = p\n                        j_min = r\n                    r = r + 1\n            return (i_min, j_min)\n\n    return isci(0,len(t)-1)", 
      "problem": 53, 
      "validation": "Check.equal(\"\"\"najblizji([])\"\"\", None)\nCheck.equal(\"\"\"najblizji([(1,2)])\"\"\", None)\nCheck.equal(\"\"\"najblizji([(1,2), (3,4)])\"\"\", (0,1))\nCheck.equal(\"\"\"najblizji([(1,2), (3,4), (10, 20)])\"\"\", (0,1))\nCheck.equal(\"\"\"najblizji([(i*i, 0) for i in range(0,10)])\"\"\", (0,1))\nCheck.equal(\"\"\"najblizji([(0, i*i) for i in range(0,10)])\"\"\", (0,1))\nCheck.equal(\"\"\"najblizji([(i**3, i) for i in range(-10,10) if i != 1])\"\"\", (8,9))\n\nCheck.challenge([(i*i*i, j*j) for i in range(50) for j in range(50)])\nCheck.challenge([(i*i*i, j*j) for i in range(-50,50) for j in range(-50,50)])"
    }
  }, 
  {
    "pk": 755, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Niz je _antipalindrom_, kadar ima znake na vseh mestih razli\u010dne od svojega\nobrata. Tako je beseda `mama` antipalindrom, saj se noben znak ne ujema\nz znakom na istem mestu v besedi `amam`, beseda `anketa` pa ni antipalindrom,\nsaj ima prvem in zadnjem mestu enako \u010drko kot njen obrat `atekna`.\n\nSestavite funkcijo `jeAntipalindrom(niz)`, ki vrne `True`, \u010de je niz\nantipalindrom, in `False` \u010de ni.", 
      "timestamp": "2012-07-14 21:25:49", 
      "challenge": "[]", 
      "solution": "def jeAntipalindrom(niz):\n    return all(z1 != z2 for z1, z2 in zip(niz, obrni(niz)))", 
      "problem": 240, 
      "validation": "Check.equal(\"jeAntipalindrom('veselica')\", True)\nCheck.equal(\"jeAntipalindrom('Perica re\u017ee raci rep.')\", False)\nCheck.equal(\"jeAntipalindrom('pericare\u017eeracirep')\", False)\nCheck.equal(\"jeAntipalindrom('atamaradmamo')\", False)\nCheck.equal(\"jeAntipalindrom('mama')\", True)\nCheck.equal(\"jeAntipalindrom('anketa')\", False)"
    }
  }, 
  {
    "pk": 798, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `dolzineMesecev(leto)`, ki vrne seznam dol\u017eine 12,\nki ima za elemente \u0161tevila dni po posameznih mesecih v danem letu.", 
      "timestamp": "2012-10-01 12:26:03", 
      "challenge": "[[\"None\", \"[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\"], [\"None\", \"[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\"], [\"None\", \"[31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\"], [\"None\", \"[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\"], [\"None\", \"[31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\"], [\"None\", \"[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\"], [\"None\", \"[31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\"], [\"None\", \"[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\"], [\"None\", \"[31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\"], [\"None\", \"[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\"], [\"None\", \"[31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\"], [\"None\", \"[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\"], [\"None\", \"[31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\"], [\"None\", \"[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\"], [\"None\", \"[31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\"], [\"None\", \"[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\"], [\"None\", \"[31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\"], [\"None\", \"[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\"], [\"None\", \"[31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\"], [\"None\", \"[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\"]]", 
      "solution": "def dolzineMesecev(leto):\n    return [\n        31, 29 if jePrestopno(leto) else 28, 31, 30, 31, 30,\n        31, 31, 30, 31, 30, 31\n    ]", 
      "problem": 253, 
      "validation": "Check.equal('dolzineMesecev(1900)', [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31])\nCheck.equal('dolzineMesecev(2000)', [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31])\nCheck.equal('dolzineMesecev(2004)', [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31])\nCheck.equal('dolzineMesecev(2011)', [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31])\n\nfor leto in range(1900, 2100, 10):\n    Check.challenge(dolzineMesecev(leto))"
    }
  }, 
  {
    "pk": 353, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavi funkcijo `tekociMaxAbs`, ki zgradi in vrne seznam enake\ndol\u017eine kot je bil vhodni vektor. Novi seznam naj za vsak element\nprvotnega seznama vsebuje do sedaj po absolutni vrednosti najve\u010dje\n\u0161tevilo. Primer:\n\n    >>> tekociMaxAbs([5, -3, 7, 3, -9, -4, -12, 60, 1, -33, 12])\n    [5, 5, 7, 7, -9, -9, -12, 60, 60, 60, 60]", 
      "timestamp": "2012-03-30 12:07:17", 
      "challenge": "[]", 
      "solution": "def tekociMaxAbs(sez):\n    rezultat = []\n    for el in sez:\n        if rezultat == [] or abs(rezultat[-1]) < abs(el):\n            rezultat.append(el)\n        else:\n            rezultat.append(rezultat[-1])\n    return rezultat", 
      "problem": 121, 
      "validation": "Check.equal('tekociMaxAbs([5, -3, 7, 3, -9, -4, -12, 60, 1, -33, 12])', [5, 5, 7, 7, -9, -9, -12, 60, 60, 60, 60])"
    }
  }, 
  {
    "pk": 904, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `najdaljsa_vrstica(ime_datoteke)`, ki vrne najdalj\u0161o\nvrstico v datoteki z danim imenom.", 
      "timestamp": "2013-01-16 17:44:13", 
      "challenge": "[]", 
      "solution": "def najdaljsa_vrstica(ime_datoteke):\n    with open(ime_datoteke) as f:\n        _, max_vrs = max((len(vrs), vrs) for vrs in f)\n        return max_vrs.rstrip()", 
      "problem": 307, 
      "validation": "Check.equal(\"najdaljsa_vrstica('test1.txt')\", \"so trte vince nam sladk\u00f3,\")\nCheck.equal(\"najdaljsa_vrstica('test2.txt')\", \"vsak, kar nas dobrih je ljudi!\")"
    }
  }, 
  {
    "pk": 527, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Vpi\u0161ite \u0161tevilo, ki je uradna re\u0161itev prve podnaloge.\n\nUradno re\u0161itev lahko na Tomotu vidite takrat, ko podnalogo pravilno\nre\u0161ite. Uradno re\u0161itev se vam vedno spla\u010da pogledati in jo primerjati s\nsvojo re\u0161itvijo.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "192837465", 
      "problem": 173, 
      "validation": "try:\n    if int(Check.current[\"solution\"]) != 192837465:\n        Check.error(\"\u0160tevilo, ki ste ga vpisali, je napa\u010dno.\")\nexcept ValueError:\n    Check.error(\"Napisati morate \u0161tevilo.\")"
    }
  }, 
  {
    "pk": 535, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite metodo `maksimalniPretok(graf, zacetek, konec)`, ki vrne\nvrednost maksimalnega (`zacetek`, `konec`)-toka v danem grafu.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "class Omrezje(Omrezje):\n    def maksimalniPretok(graf, zacetek, konec):\n        p = graf.poisciPot(zacetek, konec)\n        while p:\n            graf.povecajVzdolz(p)\n            p = graf.poisciPot(zacetek, konec)\n        return sum(graf.tok[p][2] for p in graf.povezave[zacetek])", 
      "problem": 175, 
      "validation": "o = Omrezje()\nfor i in [1, 2, 3, 4, 5, 6]:\n    o.dodajTocko(i)\nfor i, (z, k, kap) in enumerate([(1, 2, 6), (2, 3, 3), (3, 4, 10), (1, 5, 4), (5, 6, 2), (6, 4, 1), (2, 6, 5), (5, 3, 1)]):\n    o.dodajPovezavo(i, z, k, kap)\nCheck.equal(\"o.maksimalniPretok(1, 4)\", 5, env={'o': o})"
    }
  }, 
  {
    "pk": 41, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `uporabi(mat, v)`, ki matriko `mat` uporabi na\nvektorju `v`.", 
      "timestamp": "2012-10-11 12:20:47", 
      "challenge": "[]", 
      "solution": "def uporabi(mat, v):\n    m, n = len(mat), len(mat[0])\n    return [sum(mat[i][j] * v[j] for j in range(n)) for i in range(m)]", 
      "problem": 20, 
      "validation": "Check.equal('uporabi([[1, 3], [2, 4]], [5, 6])', [23, 34])\nCheck.equal('uporabi([[1], [5]], [5])', [5, 25])\nCheck.equal('uporabi([[1, 3, 6], [2, 4, 8]], [0, 1, 0])', [3, 4])\n##Check.challenge(uporabi([[i ** 2 + 3 * j for i in range(8)] for j in range(8)], [16 - i for i in range(10)]))"
    }
  }, 
  {
    "pk": 329, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `divergencaHarmonicne(n)`, ki izra\u010duna \u0161tevilo\n\u010dlenov harmoni\u010dne vrste, ki jih je treba se\u0161teti, da bo njihova delna\nvsota ve\u010dja od \u0161tevila `n`.", 
      "timestamp": "2012-03-14 09:53:33", 
      "challenge": "[]", 
      "solution": "def divergencaHarmonicne(n):\n    vsota = 0\n    i = 0\n    while vsota < n:\n        i += 1\n        vsota += 1 / i\n    return i", 
      "problem": 109, 
      "validation": "Check.equal('divergencaHarmonicne(3)', 11)\nCheck.equal('divergencaHarmonicne(4)', 31)\nCheck.equal('divergencaHarmonicne(5)', 83)"
    }
  }, 
  {
    "pk": 644, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavi funkcijo 'premaga', ki kot parametra dobi dve mno\u017eici 5-ih kart in vrne\r\nTrue, \u010de prva mno\u017eica premaga drugo in False sicer. Neka mno\u017eica kart\r\npremaga drugo, \u010de je njena vrednost ve\u010dja. Vrednost izra\u010dunamo tako,\r\nda se\u0161tejemo vrednosti vseh \u0161tevk in vsoto delimo s \u0161tevilom razli\u010dnih\r\n\u010drk. Tako je npr. vrednost mno\u017eice kart {'A1', 'D3', 'B7', 'A8', 'A2'}\r\nenaka (1+3+7+8+2)/3 = 7.0\r\nPrimer:\r\n    >>> premaga({'A8', 'A5', 'B4', 'B5', 'C7'}, {'C9', 'B7', 'D2', 'A6', 'C4'})\r\n    True", 
      "timestamp": "2012-03-27 08:56:49", 
      "challenge": "[]", 
      "solution": "def _vrednost(karte):\r\n    suma = 0\r\n    crke = set()\r\n    for k in karte:\r\n        suma += int(k[1])\r\n        crke.add(k[0])\r\n    return suma / len(crke)\r\n\r\ndef premaga(k1, k2):\r\n    return _vrednost(k1) > _vrednost(k2)", 
      "problem": 210, 
      "validation": "Check.equal(\"premaga({'A8', 'A5', 'B4', 'B5', 'C7'}, {'C9', 'B7', 'D2', 'A6', 'C4'})\", True)\r\nCheck.equal(\"premaga({'C9', 'B7', 'D2', 'A6', 'C4'}, {'A8', 'A5', 'B4', 'B5', 'C7'})\", False)\r\nCheck.equal(\"premaga({'C1', 'B1', 'C3', 'C5', 'D1'}, {'D6', 'D3', 'A2', 'B9', 'B7'})\", False)"
    }
  }, 
  {
    "pk": 211, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavi funkcijo `sudoku(t)`, ki sprejme delno re\u0161eni sudoku in ga\nre\u0161i. Funkcija naj vrne re\u0161eni sudoku ali None, \u010de re\u0161itve ni.\nFunkcija sme spreminjati tabelo `t`", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"None\", \"[[5, 3, 4, 6, 7, 8, 9, 1, 2], [6, 7, 2, 1, 9, 5, 3, 4, 8], [1, 9, 8, 3, 4, 2, 5, 6, 7], [8, 5, 9, 7, 6, 1, 4, 2, 3], [4, 2, 6, 8, 5, 3, 7, 9, 1], [7, 1, 3, 9, 2, 4, 8, 5, 6], [9, 6, 1, 5, 3, 7, 2, 8, 4], [2, 8, 7, 4, 1, 9, 6, 3, 5], [3, 4, 5, 2, 8, 6, 1, 7, 9]]\"]]", 
      "solution": "def sudoku(t):\n    \"\"\"Re\u0161i dani sudoku. Vrni re\u0161itev, ali None, \u010de je sudoku nere\u0161ljiv.\"\"\"\n\n    def sestopaj(p):\n        \"\"\"S sestopanjem re\u0161i sudoku t, pri \u010demer je p seznam \u0161e nezapolnjenih polj.\"\"\"\n        if len(p) == 0:\n            # Zapolnili smo vse, sudoku je re\u0161en\n            return True\n        else:\n            # V seznamu potez p poi\u0161\u010demo tisto, ki ima najmanj mo\u017enih polj\n            k = 0\n            s = mozne_poteze(t, p[0][0], p[0][1])\n            for m in range(1,len(p)):\n                r = mozne_poteze(t, p[m][0], p[m][1])\n                if len(r) < len(s): (s,k) = (r,m)\n            (i,j) = p.pop(k)\n            for n in mozne_poteze(t,i,j):\n                t[i][j] = n\n                if sestopaj(p):\n                    return True # nasli smo resitev\n                else:\n                    t[i][j] = None # odstranimo potezo\n            # Pregledali smo vse poteze, ni resitve\n            return False\n\n    # telo funkcije\n    if sestopaj([(i,j) for i in range(9) for j in range(9) if t[i][j] is None]):\n        return t\n    else:\n        return None", 
      "problem": 63, 
      "validation": "Check.equal(\"\"\"sudoku(\n    [[ 5  , 3  ,None,  None, 7  ,None,  None,None,None],\n     [ 6  ,None,None,   1  , 9  , 5  ,  None,None,None],\n     [None, 9  , 8  ,  None,None,None,  None, 6  ,None],\n     \n     [ 8  ,None,None,  None, 6  ,None,  None,None, 3  ],\n     [ 4  ,None,None,   8  ,None, 3  ,  None,None, 1  ],\n     [ 7  ,None,None,  None, 2  ,None,  None,None, 6  ],\n      \n     [None, 6  ,None,  None,None,None,   2  , 8  ,None],\n     [None,None,None,   4  , 1  , 9  ,  None,None, 5  ],\n     [None,None,None,  None, 8  ,None,  None, 7  , 9  ]])\"\"\",\n    [[5, 3, 4, 6, 7, 8, 9, 1, 2],\n     [6, 7, 2, 1, 9, 5, 3, 4, 8],\n     [1, 9, 8, 3, 4, 2, 5, 6, 7],\n     [8, 5, 9, 7, 6, 1, 4, 2, 3],\n     [4, 2, 6, 8, 5, 3, 7, 9, 1],\n     [7, 1, 3, 9, 2, 4, 8, 5, 6],\n     [9, 6, 1, 5, 3, 7, 2, 8, 4],\n     [2, 8, 7, 4, 1, 9, 6, 3, 5],\n     [3, 4, 5, 2, 8, 6, 1, 7, 9]])\n\nCheck.equal(\"\"\"sudoku(\n    [[ 5  , 4  ,None,  None, 7  ,None,  None,None,None],\n     [ 6  ,None,None,   1  , 9  , 5  ,  None,None,None],\n     [None, 9  , 8  ,  None,None,None,  None, 6  ,None],\n      \n     [ 8  ,None,None,  None, 6  ,None,  None,None, 3  ],\n     [ 4  ,None,None,   8  ,None, 3  ,  None,None, 1  ],\n     [ 7  ,None,None,  None, 2  ,None,  None,None, 6  ],\n     \n     [None, 6  ,None,  None,None,None,   2  , 8  ,None],\n     [None,None,None,   4  , 1  , 9  ,  None,None, 5  ],\n     [None,None,None,  None, 8  ,None,  None, 7  , 9  ]])\"\"\", \n   None)\n\nCheck.challenge(sudoku(\n    [[ 5  , 3  ,None,  None, 7  ,None,  None,None,None],\n     [ 6  ,None,None,   1  , 9  , 5  ,  None,None,None],\n     [None, 9  , 8  ,  None,None,None,  None, 6  ,None],\n     \n     [ 8  ,None,None,  None, 6  ,None,  None,None, 3  ],\n     [ 4  ,None,None,   8  ,None, 3  ,  None,None, 1  ],\n     [ 7  ,None,None,  None, 2  ,None,  None,None, 6  ],\n      \n     [None, 6  ,None,  None,None,None,   2  , 8  ,None],\n     [None,None,None,   4  , 1  , 9  ,  None,None, 5  ],\n     [None,None,None,  None, 8  ,None,  None, 7  , 9  ]]))"
    }
  }, 
  {
    "pk": 676, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Popravite va\u0161i funkciji tako, da bo kot, za katerega se zavrtite,\nparameter. Ker za \u017eelvo velja, da vrtenje v levo za negativni kot pomeni\nvrtenje v desno in obratno, lahko obe prej\u0161nji funkciji zdru\u017eite v\neno samo. Poimenujte to funkcijo `HilbertFi(n, d, fi)`, kjer je\nfi ta kot. Za vrednost $fi=90$ se naj funkcija obna\u0161a tako kot\n`Hi`, za kot $fi=-90$ pa kot `iH`. Privzeta vrednost za `fi` naj\nbo 90. Opazujte krivulje, ki jih dobite za razli\u010dne vrednosti kota.\nZanimive so predvsem vrednosti $> 90$.", 
      "timestamp": "2012-05-27 22:38:18", 
      "challenge": "[]", 
      "solution": "def HilbertFi(n, d, fi=90):\n    if n==0: return\n    T.rt(fi)\n    HilbertFi(n-1, d, -fi)\n    T.fd(d)\n    T.lt(fi)\n    HilbertFi(n-1, d, fi)\n    T.fd(d)\n    HilbertFi(n-1, d, fi)\n    T.lt(fi)\n    T.fd(d)\n    HilbertFi(n-1,d, -fi)\n    T.rt(fi)", 
      "problem": 218, 
      "validation": "T.clear()\nT.rt(T.heading())\nT.pu()\nT.goto(-200,70)\nT.pd()\nHilbertFi(5,12,90)\nT.update()\nCheck.equal(\"print('Preverite, da dobite enako krivuljo za n=5 in d=12 kot prej.')\", None)\njunk=input('Pritisnite Enter za nadaljevanje.')\n\nT.clear()\nT.rt(T.heading())\nT.pu()\nT.goto(-200,70)\nT.pd()\nT.write('n=7, d=2, fi=88')\nHilbertFi(7,2,88)\nT.update()"
    }
  }, 
  {
    "pk": 632, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavi funkcijo `stolpec(slovar, y)`, ki kot parametra dobi slovar\r\nzasedenosti in stolpec y, vrne pa nov slovar, ki vsebuje tiste ljudi,\r\nki sedijo v tem stolpcu. Klju\u010di slovarja naj bodo vrste, v katerih\r\nsedijo ljudje, vrednosti pa njihove vi\u0161ine.", 
      "timestamp": "2012-03-27 08:52:49", 
      "challenge": "[]", 
      "solution": "def stolpec(s,y):\r\n    return dict((x, v) for (x, y0), v in s.items() if y0 == y)", 
      "problem": 207, 
      "validation": "Check.equal('stolpec({(1, 2): 17.5, (2, 2): 16.5, (3, 4): 16.5}, 2)', { 1: 17.5, 2:16.5})\r\nCheck.equal('stolpec({(1, 2): 17.5, (2, 2): 16.5, (3, 4): 16.5}, 3)', { })\r\nCheck.equal('stolpec({(1, 2): 16.5, (2, 2): 17.5, (3, 2): 16.5}, 2)', { 1: 16.5, 2:17.5, 3:16.5})"
    }
  }, 
  {
    "pk": 311, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavi program, ki bo izra\u010dunal manj\u0161ega izmed kotov med urnim in\nminutnim kazalcem ob danem \u010dasu. \u010cas je podan z uro in minutami.\nUpo\u0161tevaj, da se vsako minuto tudi urni kazalec malo prestavi.\nTrenutno uro in minuto ima\u0161 podano v spremenljivkah z imenoma `ura`\nin `minuta`. Kot naj bo izpisan v obliki\n \n    Kot med urnim in minutnim kazalcem je x stopinj in y minut.\n\nkjer sta `x` in `y` celi \u0161tevili (minut ne zaokro\u017euj, ampak samo odre\u017ei\ndecimalni del).\n\nPrimer: za vrednosti\n\n    ura = 17\n    minuta = 47\n\nnaj program izpi\u0161e\n\n    Kot med urnim in minutnim kazalcem je 108 stopinj in 30 minut.", 
      "timestamp": "2013-02-25 04:08:28", 
      "challenge": "[]", 
      "solution": "ura = ura % 12\nalfa = 60*(6*minuta)\nbeta = 60*(30*ura + 0.5*minuta)\nbeta = int(beta)\nminute = abs(alfa - beta)\nminute = min(minute, 360*60 - minute)\nstopinje = minute // 60\nminute = minute % 60\nprint(\"Kot med urnim in minutnim kazalcem je\", stopinje, \"stopinj in\", minute, \"minut.\")", 
      "problem": 100, 
      "validation": "import random \n\nsource = Check.current[\"solution\"]\nd = dict()\nura = random.randint(1, 23)\nminuta = random.randint(0, 59)   \nd[\"ura\"] = ura\nd[\"minuta\"] = minuta\n(d, izpis) = izvedi(source, d)\nura = ura % 12\nalfa = 60*(6*minuta)\nbeta = 60*(30*ura + 0.5*minuta)\nbeta = int(beta)\nminute = abs(alfa - beta)\nminute = min(minute, 360*60 - minute)\nstopinje = minute // 60\nminute = minute % 60\npizpis = \"Kot med urnim in minutnim kazalcem je {0} stopinj in {1} minut.\".format(stopinje, minute)\n\nif izpis.strip() != pizpis:\n    Check.error(\"Za ura = {0} in minuta = {1} izpis ni prave oblike: \\n\".format(ura, minuta) + izpis.strip())"
    }
  }, 
  {
    "pk": 873, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Inverzija v tabeli $[a_1, a_2, \\dots, a_n]$ je par indeksov $i < j$, tako\r\nda velja $a_j < a_i$. \u010ce je tabela urejena nara\u0161\u010dajo\u010de, v njej ni\r\ninverzij, \u010de pa je urejena padajo\u010de, pa jih je ${n \\choose 2}$.\r\n\r\nSestavite funkcijo `inverzije(a)`, ki pre\u0161teje vse inverzije v `a`.", 
      "timestamp": "2012-11-29 10:54:26", 
      "challenge": "[]", 
      "solution": "def zlij(sez_l, sez_r):\r\n    i = j = 0\r\n    sez = []\r\n    inv = 0\r\n    while i < len(sez_l) and j < len(sez_r):\r\n        if sez_l[i] <= sez_r[j]:\r\n            sez.append(sez_l[i])\r\n            i += 1\r\n        else:\r\n            sez.append(sez_r[j])\r\n            j += 1\r\n            inv += len(sez_l) - i\r\n    sez += sez_l[i:] + sez_r[j:]\r\n    return sez, inv\r\n\r\ndef inverzije(a):\r\n    def pomozna(a):\r\n        if len(a) <= 1:\r\n            return a, 0\r\n        else:\r\n            k = len(a) // 2\r\n            sez_l, inv_l = pomozna(a[:k])\r\n            sez_r, inv_r = pomozna(a[k:])\r\n            sez, inv = zlij(sez_l, sez_r)\r\n            return sez, inv_l + inv_r + inv\r\n    _, inv = pomozna(a)\r\n    return inv", 
      "problem": 290, 
      "validation": "Check.equal(\"inverzije([1, 2, 3, 4, 5, 6])\", 0)\r\nCheck.equal(\"inverzije([6, 5, 4, 3, 2, 1])\", 15)\r\nCheck.equal(\"inverzije([1, 5, 3, 2, 6, 4])\", 5)"
    }
  }, 
  {
    "pk": 87, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "V tabeli `a` \u017eelimo poiskati vrednost `k`-tega elementa po velikosti.\nNa primer, \u010de je\n\n    >>> a = [10, 4, 5, 15, 11, 3, 17, 2, 18]\n\npotem je tretji element po velikosti enak 5, ker so od njega man\u0161i\nelementi 2, 3 in 4. Pri tem \u0161tejemo indekse od 0 naprej, se pravi\n\"ni\u010dti\" element je 2.\n\nSestavite funkcijo `po_velikosti(a, k)`, ki v tabeli `a` poi\u0161\u010de\n`k`-ti element po velikosti. Funkcija sme spremeniti tabelo `a` in naj\ndeluje takole:\n\n1. \u010ce je `k` manj\u0161i od `0` ali ve\u010dji ali enak `len(a)`, vrnemo `None`.\n2. \u010ce ima `a` samo en element in je `k == 0`, vrnemo `a[0]`.\n3. Tabelo preuredimo tako, da je `a[0]` pivot, recimo na `i`. mestu.\n2. \u010ce je `k == i`, vrnemo `a[i]`.\n4. \u010ce je `k < i`, rekurzivno kli\u010demo `po_velikosti(a[:i], k)`.\n5. \u010ce je `k > i`, rekurzivno kli\u010demo `po_velikosti(a[i + 1:], k - i - 1)`.", 
      "timestamp": "2012-10-24 09:46:15", 
      "challenge": "[]", 
      "solution": "def po_velikosti(a, k):\n    if k < 0 or k >= len(a):\n        return\n    elif len(a) == 1 and k == 0:\n        return a[0]\n    else:\n        i = premeci(a)\n        if k == i:\n            return a[i]\n        elif k < i:\n            return po_velikosti(list(a[:i]), k)\n        else:\n            return po_velikosti(list(a[i + 1:]), k - i - 1)", 
      "problem": 37, 
      "validation": "Check.equal(\"\"\"po_velikosti([0, 1, 2, 3, 4, 5], 0)\"\"\", 0)\nCheck.equal(\"\"\"po_velikosti([0, 1, 2, 3, 4, 5], 1)\"\"\", 1)\nCheck.equal(\"\"\"po_velikosti([0, 1, 2, 3, 4, 5], 4)\"\"\", 4)\nCheck.equal(\"\"\"po_velikosti([0, 1, 2, 3, 4, 5], 5)\"\"\", 5)\nCheck.equal(\"\"\"po_velikosti([0, 1, 2, 3, 4, 5], -1)\"\"\", None)\nCheck.equal(\"\"\"po_velikosti([0, 1, 2, 3, 4, 5], 6)\"\"\", None)\nCheck.equal(\"\"\"po_velikosti([42], 0)\"\"\", 42)\nCheck.equal(\"\"\"po_velikosti([], 0)\"\"\", None)\nCheck.equal(\"\"\"po_velikosti([10, 4, 5, 15, 11, 3, 17, 2, 18], 3)\"\"\", 5)\nCheck.equal(\"\"\"po_velikosti([10, 4, 5, 15, 11, 3, 17, 2, 18], 8)\"\"\", 18)"
    }
  }, 
  {
    "pk": 300, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Osemvrsti\u010dno smre\u010dico izpi\u0161ite z enim samim klicem funkcije `print`.\n\n*Namig*: znak za prelom vrstice je `\"\\n\"`.", 
      "timestamp": "2013-02-25 00:45:43", 
      "challenge": "[]", 
      "solution": "print(1 * znak + \"\\n\" +\n      2 * znak + \"\\n\" +\n      3 * znak + \"\\n\" +\n      4 * znak + \"\\n\" +\n      5 * znak + \"\\n\" +\n      6 * znak + \"\\n\" +\n      7 * znak + \"\\n\" +\n      8 * znak)", 
      "problem": 97, 
      "validation": "def izpis(source):\n    import io, sys\n    old_stdout = sys.stdout\n    new_stdout = io.StringIO()\n    sys.stdout = new_stdout\n    exec(source)\n    sys.stdout = old_stdout\n    return new_stdout.getvalue()\n\ndef preveriSmrecico(smrecica, levi, desni, dovoljeni):\n    vrstice = smrecica.splitlines()\n    if len(vrstice) != 8:\n        Check.error(\"Smre\u010dica nima osmih vrstic.\")\n    for i in range(0, min(8, len(vrstice))):\n        vrstica = vrstice[i]\n        if not vrstica.startswith((levi[i] - 1) * \" \"):\n            Check.error(\"{0}. vrstica se ne za\u010dne na {1}. znaku.\".format(i + 1, levi[i]))\n        if len(vrstica.rstrip()) != desni[i]:\n            Check.error(\"{0}. vrstica se ne kon\u010da na {1}. znaku.\".format(i + 1, desni[i]))\n        znaki = vrstica.replace(\" \", \"\")\n        if len(znaki) != i + 1:\n            Check.error(\"{0}. vrstica ni sestavljena iz {0} znakov.\".format(i + 1))\n        if any(znak not in dovoljeni for znak in znaki):\n            Check.error(\"{0}. vrstica vsebuje nedovoljene znake.\".format(i + 1))\n    if len([znak for znak in dovoljeni if znak in smrecica]) > 1:\n        Check.error(\"Smre\u010dica je sestavljena iz razli\u010dnih dovoljenih znakov.\")\n\ndovoljeni = \"*.#$@oO+=\"\nsource = Check.current[\"solution\"]\npreveriSmrecico(izpis(source), 8 * [0], range(1, 9), dovoljeni)\nif re.sub(r'#.*', '', source).count(\"print(\") > 1:\n    Check.error(\"Program vsebuje ve\u010d kot en klic funkcije print.\")"
    }
  }, 
  {
    "pk": 281, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "V razpredelnico `druzine` dodajte stolpec povpre\u010dje, ki pove velikost\npovpre\u010dne dru\u017eine v dani ob\u010dini. Pri ra\u010dunanju povpre\u010dja lahko za\ndru\u017eine z ve\u010d kot tremi otroki predpostavite, da imajo \u0161tiri otroke.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "druzine$povprecje <- (druzine$en + 2 * druzine$dva + 3 * druzine$tri + 4 * druzine$stiri) / rowSums(druzine)", 
      "problem": 87, 
      "validation": "check$equal(druzine[\"Koper\", ]$povprecje, 1.479497)\ncheck$equal(druzine[\"Gorenja vas - Poljane\", ]$povprecje, 1.98241)"
    }
  }, 
  {
    "pk": 305, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Napi\u0161ite program, ki izpi\u0161e \u0161ahovsko desko razse\u017enosti $2n \\times 2n$.\n\u010crna polja naj bodo sestavljena iz znakov `\"@\"`, bela polja pa iz znakov\n`\".\"`. Velikost polj naj bo shranjena v spremenljivki `m`. Tudi\nspremenljivka `n` mora biti podana.\n\nNa primer, \u010de je `m = 2` in `n = 3`, naj se izpi\u0161e:\n\n    @@..@@..@@..\n    @@..@@..@@..\n    ..@@..@@..@@\n    ..@@..@@..@@\n    @@..@@..@@..\n    @@..@@..@@..\n    ..@@..@@..@@\n    ..@@..@@..@@\n    @@..@@..@@..\n    @@..@@..@@..\n    ..@@..@@..@@\n    ..@@..@@..@@", 
      "timestamp": "2013-02-25 02:15:49", 
      "challenge": "[]", 
      "solution": "m = 2\nn = 3\nvzorec1 = ((m*'@'+m*'.')*n+'\\n')*m\nvzorec2 = ((m*'.'+m*'@')*n+'\\n')*m\nkvadrat = (vzorec1+vzorec2)*n\nprint(kvadrat)", 
      "problem": 98, 
      "validation": "def izpis(source):\n    import io, sys\n    old_stdout = sys.stdout\n    new_stdout = io.StringIO()\n    sys.stdout = new_stdout\n    glob = {}\n    loc = {}\n    exec(source,glob,loc)\n    sys.stdout = old_stdout\n    return (new_stdout.getvalue().strip(),loc)\n\ndef preveriKvadrat(kvadrat, m, n):\n    vrstice = kvadrat.splitlines()\n\n    soda=((m*'@'+m*'.')*n+'\\n')*m\n    liha=((m*'.'+m*'@')*n+'\\n')*m\n    pravikvadrat=(soda+liha)*n\n    pravevrstice = pravikvadrat.splitlines()\n\n    if len(vrstice) != 2*m*n:\n        Check.error(\"Kvadrat nima {0} vrstic.\".format(2*m*n))\n    for i in range(1, min(2*m*n, len(vrstice))):\n        if pravevrstice[i] != vrstice[i]:\n            Check.error(\"{0}. vrstica nima pravega vzorca.\".format(i + 1))\n    \n(resitev,okolje)=izpis(Check.current[\"solution\"])\npreveriKvadrat(resitev, int(okolje[\"m\"]), int(okolje[\"n\"]))"
    }
  }, 
  {
    "pk": 272, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite generator `poVrsti`, ki na\u0161teje vse podatke v drevesu od\nnajmanj\u0161ega do najve\u010djega.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"None\", \"[1, 4, 7, 13, 16, 25, 28, 31, 37, 40, 43, 52, 55, 61, 67, 73, 76, 79, 85, 88, 91, 97, 100, 103, 112, 115, 121, 127, 133, 136, 145, 148, 151, 157, 160, 163, 172, 175, 181, 187, 193, 196, 205, 208, 211, 217, 220, 223, 229, 232, 235, 241, 247, 253, 256, 265, 268, 271, 277, 280, 283, 292, 295]\"], [\"None\", \"[4, 13, 52, 61, 67, 79, 85, 100, 148, 151, 163, 193, 196, 229, 265, 292, 337, 340, 343, 355, 373, 379, 388, 397, 421, 427, 436, 481, 487, 511, 529, 532, 535, 553, 571, 580, 628, 676, 679, 715, 745, 757, 772, 820, 823, 829, 841, 847, 868, 895, 901, 907, 916, 925, 931, 979, 991, 1003, 1012, 1033, 1060, 1075, 1105, 1108, 1117, 1129, 1156, 1177, 1183]\"], [\"None\", \"[4, 25, 28, 79, 100, 112, 133, 151, 208, 220, 232, 280, 301, 304, 307, 316, 328, 436, 460, 556, 571, 604, 631, 637, 652, 679, 685, 712, 781, 787, 793, 829, 841, 868, 943, 952, 976, 1045, 1057, 1096, 1111, 1117, 1192, 1195, 1204, 1261, 1267, 1279, 1300, 1303, 1327, 1432, 1435, 1504, 1555, 1576, 1672, 1705, 1708, 1729, 1747, 1780, 1813, 1816, 1840, 1879, 1888, 1891, 1897, 1948, 1960, 1963, 1975, 2029, 2056, 2068, 2083, 2104, 2140, 2179, 2215, 2221, 2272, 2296, 2323, 2329, 2353, 2365, 2377, 2404, 2473, 2488, 2536, 2548, 2620, 2692]\"], [\"None\", \"[4, 61, 196, 265, 388, 529, 580, 772, 841, 847, 901, 979, 1003, 1156, 1183, 1279, 1348, 1393, 1540, 1573, 1627, 1681, 1687, 1711, 1732, 1915, 2095, 2116, 2305, 2308, 2317, 2329, 2467, 2485, 2500, 2551, 2629, 2692, 2779, 3076, 3079, 3157, 3223, 3268, 3307, 3331, 3391, 3433, 3460, 3613, 3652, 3763, 3937, 3943, 3955, 3979, 3997, 4021, 4036, 4129, 4135, 4153, 4171, 4228, 4345, 4420, 4429, 4525, 4612, 4675, 4777]\"]]", 
      "solution": "class IskalnoDrevo(IskalnoDrevo):\n\n    def poVrsti(self):\n        if not self.prazno:\n            for n in self.levo.poVrsti(): yield n\n            yield self.vsebina\n            for n in self.desno.poVrsti(): yield n", 
      "problem": 82, 
      "validation": "Check.equal(\"\"\"list(IskalnoDrevo([1, 8, 3, 7, 9, 2, 4, 5, 6]).poVrsti())\"\"\", [1, 2, 3, 4, 5, 6, 7, 8, 9])\n\nfor i in range(1, 5):\n    Check.challenge(list(IskalnoDrevo({(3 * (n + 4) ** 7 + 4) % (300 * i ** 2) for n in range(100)}).poVrsti()))"
    }
  }, 
  {
    "pk": 348, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `premesaj(s)`, ki iz danega seznama sestavi in vrne\nnov seznam, ki bo sestavljen iz elementov prvotnega seznama v\npreme\u0161anem vrstnem redu. Pri sestavljanju novega seznama naj izmeni\u010dno\njemlje po en element iz za\u010detka in s konca seznama.", 
      "timestamp": "2012-03-30 12:04:48", 
      "challenge": "[]", 
      "solution": "def premesaj(s):\n    premesan = []\n    n = len(s)\n    for i in range(n // 2):\n        premesan.append(s[i])\n        premesan.append(s[n - i - 1])\n    if n % 2 != 0:\n        premesan.append(s[n // 2])\n    return premesan", 
      "problem": 119, 
      "validation": "Check.equal('premesaj([1, 2, 3, 4, 5, 6])', [1, 6, 2, 5, 3, 4])\nCheck.equal('premesaj([1, 2, 3, 4, 5, 6, 7])', [1, 7, 2, 6, 3, 5, 4])"
    }
  }, 
  {
    "pk": 794, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `vsoteSosedov(sez)`, ki vrne seznam vsot sosednjih\nelementov seznama `sez`. Na primer:\n\n    >>> vsoteSosedov([1, 10, 20, 5])\n    [11, 30, 25]\n    >>> vsoteSosedov([1, 3, 3, 1])\n    [4, 6, 4]", 
      "timestamp": "2012-09-05 11:43:47", 
      "challenge": "[[\"[1, 1, 8, 343, 1, 1, 64, 343, 343, 729]\", \"[2, 9, 351, 344, 2, 65, 407, 686, 1072]\"], [\"[8, 64, 1, 64, 343, 8, 27, 64, 1728, 512]\", \"[72, 65, 65, 407, 351, 35, 91, 1792, 2240]\"], [\"[1, 27, 64, 125, 216, 1, 125, 729, 1728, 1331]\", \"[28, 91, 189, 341, 217, 126, 854, 2457, 3059]\"], [\"[64, 0, 27, 8, 216, 64, 512, 216, 343, 1000]\", \"[64, 27, 35, 224, 280, 576, 728, 559, 1343]\"], [\"[27, 1, 8, 27, 64, 27, 8, 343, 0, 729]\", \"[28, 9, 35, 91, 91, 35, 351, 343, 729]\"], [\"[64, 64, 8, 0, 1, 64, 1, 64, 1728, 8]\", \"[128, 72, 8, 1, 65, 65, 65, 1792, 1736]\"], [\"[64, 125, 125, 1, 512, 729, 0, 125, 343, 125]\", \"[189, 250, 126, 513, 1241, 729, 125, 468, 468]\"], [\"[8, 8, 0, 216, 8, 8, 343, 8, 125, 0]\", \"[16, 8, 216, 224, 16, 351, 351, 133, 125]\"], [\"[64, 27, 8, 343, 216, 729, 512, 27, 1, 729]\", \"[91, 35, 351, 559, 945, 1241, 539, 28, 730]\"], [\"[64, 8, 125, 64, 125, 64, 64, 512, 216, 1728]\", \"[72, 133, 189, 189, 189, 128, 576, 728, 1944]\"], [\"[8, 27, 125, 125, 0, 343, 8, 729, 729, 125]\", \"[35, 152, 250, 125, 343, 351, 737, 1458, 854]\"], [\"[8, 0, 8, 8, 0, 8, 64, 216, 343, 8]\", \"[8, 8, 16, 8, 8, 72, 280, 559, 351]\"], [\"[0, 1, 64, 27, 1, 125, 343, 343, 512, 1331]\", \"[1, 65, 91, 28, 126, 468, 686, 855, 1843]\"], [\"[64, 0, 125, 0, 216, 64, 1000, 0, 1, 1728]\", \"[64, 125, 125, 216, 280, 1064, 1000, 1, 1729]\"], [\"[0, 1, 125, 1, 343, 125, 1000, 1, 0, 125]\", \"[1, 126, 126, 344, 468, 1125, 1001, 1, 125]\"], [\"[1, 0, 1, 216, 27, 216, 0, 216, 1000, 512]\", \"[1, 1, 217, 243, 243, 216, 216, 1216, 1512]\"], [\"[27, 27, 27, 343, 216, 27, 729, 27, 512, 27]\", \"[54, 54, 370, 559, 243, 756, 756, 539, 539]\"], [\"[64, 0, 27, 64, 216, 64, 343, 0, 729, 1000]\", \"[64, 27, 91, 280, 280, 407, 343, 729, 1729]\"], [\"[8, 27, 64, 125, 216, 343, 729, 729, 125, 1331]\", \"[35, 91, 189, 341, 559, 1072, 1458, 854, 1456]\"], [\"[0, 64, 125, 8, 343, 0, 1000, 1000, 1331, 1728]\", \"[64, 189, 133, 351, 343, 1000, 2000, 2331, 3059]\"], [\"[64, 125, 1, 27, 8, 729, 8, 1331, 8, 1]\", \"[189, 126, 28, 35, 737, 737, 1339, 1339, 9]\"], [\"[27, 0, 27, 0, 27, 512, 729, 0, 1331, 1000]\", \"[27, 27, 27, 27, 539, 1241, 729, 1331, 2331]\"], [\"[0, 1, 0, 1, 1, 125, 1000, 1, 343, 343]\", \"[1, 1, 1, 2, 126, 1125, 1001, 344, 686]\"], [\"[0, 64, 125, 216, 64, 0, 512, 1000, 1331, 1728]\", \"[64, 189, 341, 280, 64, 512, 1512, 2331, 3059]\"], [\"[8, 27, 64, 343, 27, 343, 512, 27, 729, 1331]\", \"[35, 91, 407, 370, 370, 855, 539, 756, 2060]\"], [\"[1, 8, 8, 64, 512, 216, 216, 512, 125, 8]\", \"[9, 16, 72, 576, 728, 432, 728, 637, 133]\"], [\"[64, 1, 27, 125, 1, 729, 216, 1, 343, 27]\", \"[65, 28, 152, 126, 730, 945, 217, 344, 370]\"], [\"[8, 0, 27, 8, 216, 8, 216, 216, 512, 1000]\", \"[8, 27, 35, 224, 224, 224, 432, 728, 1512]\"], [\"[64, 1, 8, 27, 1, 729, 343, 343, 125, 729]\", \"[65, 9, 35, 28, 730, 1072, 686, 468, 854]\"], [\"[1, 64, 8, 0, 1, 216, 0, 64, 8, 8]\", \"[65, 72, 8, 1, 217, 216, 64, 72, 16]\"], [\"[1, 27, 27, 1, 0, 1, 1, 729, 1000, 27]\", \"[28, 54, 28, 1, 1, 2, 730, 1729, 1027]\"], [\"[8, 0, 1, 216, 216, 8, 343, 216, 729, 512]\", \"[8, 1, 217, 432, 224, 351, 559, 945, 1241]\"], [\"[0, 1, 0, 343, 343, 125, 125, 343, 216, 343]\", \"[1, 1, 343, 686, 468, 250, 468, 559, 559]\"], [\"[8, 8, 216, 64, 8, 8, 125, 512, 0, 216]\", \"[16, 224, 280, 72, 16, 133, 637, 512, 216]\"], [\"[0, 1, 216, 125, 1, 125, 1, 1, 125, 2197]\", \"[1, 217, 341, 126, 126, 126, 2, 126, 2322]\"], [\"[8, 0, 27, 8, 216, 8, 8, 216, 0, 1000]\", \"[8, 27, 35, 224, 224, 16, 224, 216, 1000]\"], [\"[64, 1, 1, 27, 1, 729, 64, 343, 216, 1]\", \"[65, 2, 28, 28, 730, 793, 407, 559, 217]\"], [\"[0, 64, 216, 0, 64, 0, 125, 64, 125, 216]\", \"[64, 280, 216, 64, 64, 125, 189, 189, 341]\"], [\"[27, 27, 1, 1, 27, 27, 1000, 729, 1, 1]\", \"[54, 28, 2, 28, 54, 1027, 1729, 730, 2]\"], [\"[1, 8, 1, 216, 125, 216, 64, 8, 1728, 512]\", \"[9, 9, 217, 341, 341, 280, 72, 1736, 2240]\"], [\"[64, 1, 64, 343, 343, 729, 125, 343, 1000, 1331]\", \"[65, 65, 407, 686, 1072, 854, 468, 1343, 2331]\"], [\"[1, 64, 125, 64, 343, 216, 125, 64, 64, 1728]\", \"[65, 189, 189, 407, 559, 341, 189, 128, 1792]\"], [\"[27, 125, 125, 125, 512, 27, 27, 125, 1728, 125]\", \"[152, 250, 250, 637, 539, 54, 152, 1853, 1853]\"], [\"[8, 8, 216, 8, 512, 8, 0, 8, 1000, 216]\", \"[16, 224, 224, 520, 520, 8, 8, 1008, 1216]\"], [\"[1, 125, 8, 27, 8, 1, 512, 1331, 64, 729]\", \"[126, 133, 35, 35, 9, 513, 1843, 1395, 793]\"], [\"[27, 0, 0, 0, 0, 512, 27, 0, 1, 0]\", \"[27, 0, 0, 0, 512, 539, 27, 1, 1]\"], [\"[64, 27, 125, 1, 0, 729, 1000, 729, 125, 125]\", \"[91, 152, 126, 1, 729, 1729, 1729, 854, 250]\"], [\"[64, 64, 27, 216, 343, 64, 216, 1000, 1, 1000]\", \"[128, 91, 243, 559, 407, 280, 1216, 1001, 1001]\"], [\"[64, 27, 8, 343, 27, 729, 343, 27, 216, 729]\", \"[91, 35, 351, 370, 756, 1072, 370, 243, 945]\"], [\"[8, 8, 125, 64, 125, 8, 27, 512, 512, 1728]\", \"[16, 133, 189, 189, 133, 35, 539, 1024, 2240]\"], [\"[1, 1, 64, 125, 343, 1, 64, 1, 1331, 1331]\", \"[2, 65, 189, 468, 344, 65, 65, 1332, 2662]\"]]", 
      "solution": "def vsoteSosedov(sez):\n    return [vsotaSosedov(sez, i) for i in range(len(sez) - 1)]", 
      "problem": 252, 
      "validation": "Check.equal(\"\"\"vsoteSosedov([1, 10, 20, 5])\"\"\", [11, 30, 25])\nCheck.equal(\"\"\"vsoteSosedov([1, 3, 3, 1])\"\"\", [4, 6, 4])\nCheck.equal(\"\"\"vsoteSosedov([1, 2, 1])\"\"\", [3, 3])\n\n_rng=[1287631]\nfor i in range(50): _rng.append((_rng[-1]*1103515245+12345)%2**32)\nfor i in _rng:\n    sez = []\n    for j in range(10):\n        sez.append((i % (j + 5)) ** 3)\n    Check.challenge(vsoteSosedov(sez), sez)"
    }
  }, 
  {
    "pk": 538, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `prestopno(leto)`, ki vrne `True`, \u010de je leto `leto`\nprestopno, sicer pa vrne `False`.", 
      "timestamp": "2012-03-05 09:19:00", 
      "challenge": "[[\"None\", \"[False, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False]\"]]", 
      "solution": "def prestopno(leto):\n    return (leto % 400 == 0) or (leto % 4 == 0 and leto % 100 != 0)", 
      "problem": 176, 
      "validation": "Check.equal(\"prestopno(2011)\", False)\nCheck.equal(\"prestopno(2000)\", True)\nCheck.equal(\"prestopno(1900)\", False)\nCheck.equal(\"prestopno(2004)\", True)\n\nCheck.challenge([prestopno(leto) for leto in range(1500, 2000)])"
    }
  }, 
  {
    "pk": 747, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `razsiriMnozice(mnozice, x)`, ki sprejme seznam\nmno\u017eic `mnozice` in vrne seznam teh mno\u017eic, raz\u0161irjenim z elementom `x`.", 
      "timestamp": "2012-07-12 09:32:19", 
      "challenge": "[]", 
      "solution": "def razsiriMnozice(mnozice, x):\n    return [razsiriMnozico(mnozica, x) for mnozica in mnozice]", 
      "problem": 237, 
      "validation": "Check.equal(\"razsiriMnozice([set(), {2}], 3)\", [{3}, {2, 3}])\nCheck.equal(\"razsiriMnozice([{1, 2}, {1, 2}], 3)\", [{1, 2, 3}, {1, 2, 3}])\nCheck.equal(\"razsiriMnozice([set(), {2}, {3}, {2, 3}], 1)\", [{1}, {1, 2}, {1, 3}, {1, 2, 3}])"
    }
  }, 
  {
    "pk": 774, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `vsoteSosedov(sez)`, ki vrne seznam vsot sosednjih\nelementov seznama `sez`. Na primer:\n\n    >>> vsoteSosedov([1, 10, 20, 5])\n    [11, 30, 25]\n    >>> vsoteSosedov([1, 3, 3, 1])\n    [4, 6, 4]", 
      "timestamp": "2012-09-05 09:37:58", 
      "challenge": "[[\"[1, 1, 8, 343, 1, 1, 64, 343, 343, 729]\", \"[2, 9, 351, 344, 2, 65, 407, 686, 1072]\"], [\"[8, 64, 1, 64, 343, 8, 27, 64, 1728, 512]\", \"[72, 65, 65, 407, 351, 35, 91, 1792, 2240]\"], [\"[1, 27, 64, 125, 216, 1, 125, 729, 1728, 1331]\", \"[28, 91, 189, 341, 217, 126, 854, 2457, 3059]\"], [\"[64, 0, 27, 8, 216, 64, 512, 216, 343, 1000]\", \"[64, 27, 35, 224, 280, 576, 728, 559, 1343]\"], [\"[27, 1, 8, 27, 64, 27, 8, 343, 0, 729]\", \"[28, 9, 35, 91, 91, 35, 351, 343, 729]\"], [\"[64, 64, 8, 0, 1, 64, 1, 64, 1728, 8]\", \"[128, 72, 8, 1, 65, 65, 65, 1792, 1736]\"], [\"[64, 125, 125, 1, 512, 729, 0, 125, 343, 125]\", \"[189, 250, 126, 513, 1241, 729, 125, 468, 468]\"], [\"[8, 8, 0, 216, 8, 8, 343, 8, 125, 0]\", \"[16, 8, 216, 224, 16, 351, 351, 133, 125]\"], [\"[64, 27, 8, 343, 216, 729, 512, 27, 1, 729]\", \"[91, 35, 351, 559, 945, 1241, 539, 28, 730]\"], [\"[64, 8, 125, 64, 125, 64, 64, 512, 216, 1728]\", \"[72, 133, 189, 189, 189, 128, 576, 728, 1944]\"], [\"[8, 27, 125, 125, 0, 343, 8, 729, 729, 125]\", \"[35, 152, 250, 125, 343, 351, 737, 1458, 854]\"], [\"[8, 0, 8, 8, 0, 8, 64, 216, 343, 8]\", \"[8, 8, 16, 8, 8, 72, 280, 559, 351]\"], [\"[0, 1, 64, 27, 1, 125, 343, 343, 512, 1331]\", \"[1, 65, 91, 28, 126, 468, 686, 855, 1843]\"], [\"[64, 0, 125, 0, 216, 64, 1000, 0, 1, 1728]\", \"[64, 125, 125, 216, 280, 1064, 1000, 1, 1729]\"], [\"[0, 1, 125, 1, 343, 125, 1000, 1, 0, 125]\", \"[1, 126, 126, 344, 468, 1125, 1001, 1, 125]\"], [\"[1, 0, 1, 216, 27, 216, 0, 216, 1000, 512]\", \"[1, 1, 217, 243, 243, 216, 216, 1216, 1512]\"], [\"[27, 27, 27, 343, 216, 27, 729, 27, 512, 27]\", \"[54, 54, 370, 559, 243, 756, 756, 539, 539]\"], [\"[64, 0, 27, 64, 216, 64, 343, 0, 729, 1000]\", \"[64, 27, 91, 280, 280, 407, 343, 729, 1729]\"], [\"[8, 27, 64, 125, 216, 343, 729, 729, 125, 1331]\", \"[35, 91, 189, 341, 559, 1072, 1458, 854, 1456]\"], [\"[0, 64, 125, 8, 343, 0, 1000, 1000, 1331, 1728]\", \"[64, 189, 133, 351, 343, 1000, 2000, 2331, 3059]\"], [\"[64, 125, 1, 27, 8, 729, 8, 1331, 8, 1]\", \"[189, 126, 28, 35, 737, 737, 1339, 1339, 9]\"], [\"[27, 0, 27, 0, 27, 512, 729, 0, 1331, 1000]\", \"[27, 27, 27, 27, 539, 1241, 729, 1331, 2331]\"], [\"[0, 1, 0, 1, 1, 125, 1000, 1, 343, 343]\", \"[1, 1, 1, 2, 126, 1125, 1001, 344, 686]\"], [\"[0, 64, 125, 216, 64, 0, 512, 1000, 1331, 1728]\", \"[64, 189, 341, 280, 64, 512, 1512, 2331, 3059]\"], [\"[8, 27, 64, 343, 27, 343, 512, 27, 729, 1331]\", \"[35, 91, 407, 370, 370, 855, 539, 756, 2060]\"], [\"[1, 8, 8, 64, 512, 216, 216, 512, 125, 8]\", \"[9, 16, 72, 576, 728, 432, 728, 637, 133]\"], [\"[64, 1, 27, 125, 1, 729, 216, 1, 343, 27]\", \"[65, 28, 152, 126, 730, 945, 217, 344, 370]\"], [\"[8, 0, 27, 8, 216, 8, 216, 216, 512, 1000]\", \"[8, 27, 35, 224, 224, 224, 432, 728, 1512]\"], [\"[64, 1, 8, 27, 1, 729, 343, 343, 125, 729]\", \"[65, 9, 35, 28, 730, 1072, 686, 468, 854]\"], [\"[1, 64, 8, 0, 1, 216, 0, 64, 8, 8]\", \"[65, 72, 8, 1, 217, 216, 64, 72, 16]\"], [\"[1, 27, 27, 1, 0, 1, 1, 729, 1000, 27]\", \"[28, 54, 28, 1, 1, 2, 730, 1729, 1027]\"], [\"[8, 0, 1, 216, 216, 8, 343, 216, 729, 512]\", \"[8, 1, 217, 432, 224, 351, 559, 945, 1241]\"], [\"[0, 1, 0, 343, 343, 125, 125, 343, 216, 343]\", \"[1, 1, 343, 686, 468, 250, 468, 559, 559]\"], [\"[8, 8, 216, 64, 8, 8, 125, 512, 0, 216]\", \"[16, 224, 280, 72, 16, 133, 637, 512, 216]\"], [\"[0, 1, 216, 125, 1, 125, 1, 1, 125, 2197]\", \"[1, 217, 341, 126, 126, 126, 2, 126, 2322]\"], [\"[8, 0, 27, 8, 216, 8, 8, 216, 0, 1000]\", \"[8, 27, 35, 224, 224, 16, 224, 216, 1000]\"], [\"[64, 1, 1, 27, 1, 729, 64, 343, 216, 1]\", \"[65, 2, 28, 28, 730, 793, 407, 559, 217]\"], [\"[0, 64, 216, 0, 64, 0, 125, 64, 125, 216]\", \"[64, 280, 216, 64, 64, 125, 189, 189, 341]\"], [\"[27, 27, 1, 1, 27, 27, 1000, 729, 1, 1]\", \"[54, 28, 2, 28, 54, 1027, 1729, 730, 2]\"], [\"[1, 8, 1, 216, 125, 216, 64, 8, 1728, 512]\", \"[9, 9, 217, 341, 341, 280, 72, 1736, 2240]\"], [\"[64, 1, 64, 343, 343, 729, 125, 343, 1000, 1331]\", \"[65, 65, 407, 686, 1072, 854, 468, 1343, 2331]\"], [\"[1, 64, 125, 64, 343, 216, 125, 64, 64, 1728]\", \"[65, 189, 189, 407, 559, 341, 189, 128, 1792]\"], [\"[27, 125, 125, 125, 512, 27, 27, 125, 1728, 125]\", \"[152, 250, 250, 637, 539, 54, 152, 1853, 1853]\"], [\"[8, 8, 216, 8, 512, 8, 0, 8, 1000, 216]\", \"[16, 224, 224, 520, 520, 8, 8, 1008, 1216]\"], [\"[1, 125, 8, 27, 8, 1, 512, 1331, 64, 729]\", \"[126, 133, 35, 35, 9, 513, 1843, 1395, 793]\"], [\"[27, 0, 0, 0, 0, 512, 27, 0, 1, 0]\", \"[27, 0, 0, 0, 512, 539, 27, 1, 1]\"], [\"[64, 27, 125, 1, 0, 729, 1000, 729, 125, 125]\", \"[91, 152, 126, 1, 729, 1729, 1729, 854, 250]\"], [\"[64, 64, 27, 216, 343, 64, 216, 1000, 1, 1000]\", \"[128, 91, 243, 559, 407, 280, 1216, 1001, 1001]\"], [\"[64, 27, 8, 343, 27, 729, 343, 27, 216, 729]\", \"[91, 35, 351, 370, 756, 1072, 370, 243, 945]\"], [\"[8, 8, 125, 64, 125, 8, 27, 512, 512, 1728]\", \"[16, 133, 189, 189, 133, 35, 539, 1024, 2240]\"], [\"[1, 1, 64, 125, 343, 1, 64, 1, 1331, 1331]\", \"[2, 65, 189, 468, 344, 65, 65, 1332, 2662]\"]]", 
      "solution": "def vsoteSosedov(sez):\n    return [vsotaSosedov(sez, i) for i in range(len(sez) - 1)]", 
      "problem": 246, 
      "validation": "Check.equal(\"\"\"vsoteSosedov([1, 10, 20, 5])\"\"\", [11, 30, 25])\nCheck.equal(\"\"\"vsoteSosedov([1, 3, 3, 1])\"\"\", [4, 6, 4])\nCheck.equal(\"\"\"vsoteSosedov([1, 2, 1])\"\"\", [3, 3])\n\n_rng=[1287631]\nfor i in range(50): _rng.append((_rng[-1]*1103515245+12345)%2**32)\nfor i in _rng:\n    sez = []\n    for j in range(10):\n        sez.append((i % (j + 5)) ** 3)\n    Check.challenge(vsoteSosedov(sez), sez)"
    }
  }, 
  {
    "pk": 620, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `vsote(vhod, izhod)`, ki kot parametra dobi imeni\r\ndveh datotek. Iz prve naj prebere vrstice s podatki, ki so lo\u010deni z\r\nvejicami, nato pa naj izra\u010duna vsoto to\u010dk za vsako vrstico in v drugo\r\ndatoteko shrani podatke `Ime Priimek,vsota`. Za vsako vrstico v vhodni\r\ndatoteki morate shraniti ustrezno vrstico v izhodno datoteko.", 
      "timestamp": "2012-05-16 15:11:48", 
      "challenge": "[]", 
      "solution": "def vsote(vhod,izhod):\r\n    s=naloziCSV(vhod)\r\n    f=open(izhod,\"w\")\r\n    for student in s:\r\n        print(\"{0},{1}\".format(student[0],sum(student[1:])), file=f)\r\n    f.close()", 
      "problem": 204, 
      "validation": "def _makefile1(ime):\r\n    with open(ime, \"w\") as f:\r\n        print(\"Janez Novak,1,3,3,2,0\", file=f)\r\n        print(\"Micka Kovaceva,0,3,2,2,3\", file=f)\r\n        print(\"Peter Klepec,1,0,1,2,1\", file=f)\r\n\r\ndef _makefile2(ime):\r\n    with open(ime, \"w\") as f:\r\n        print(\"Janez Novak,9\", file=f)\r\n        print(\"Micka Kovaceva,10\", file=f)\r\n        print(\"Peter Klepec,5\", file=f)\r\n\r\ndef _istedatoteke(ena,dva):\r\n    with open(ena) as f1, open(dva) as f2:\r\n        return f1.read().strip() == f2.read().strip()\r\n    \r\ndef _removefiles(*ime):\r\n    import os\r\n    for i in ime: os.remove(i)\r\n_makefile1(\"_test.csv\")\r\n_makefile2(\"_test2.csv\")\r\nvsote(\"_test.csv\",\"_test1.csv\")\r\nif not _istedatoteke(\"_test1.csv\", \"_test2.csv\"):\r\n    Check.error(\"Izhodna datoteka je napa\u010dna\")\r\n_removefiles(\"_test.csv\", \"_test1.csv\",\"_test2.csv\")"
    }
  }, 
  {
    "pk": 707, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Pri obrestno obrestnem ra\u010dunu s fiksno letno obrestno mero $r$ se zraven\r\nglavnice obrestujejo tudi obresti. Za glavnico $A_0$ je vrednost po $n$\r\nmesecih podana s formulo\r\n$$A = A_0(1+m)^n,$$\r\nkjer je $m$ pripadajo\u010da mese\u010dna obrestna mera.\r\n\r\nSestavite funkcijo `vrednostObrestno(A0, r, n)`, ki izra\u010duna vrednost\r\ndenarja na ra\u010dunu, \u010de je glavnica $A_0$, obrestuje se po letni obrestni\r\nmeri $r$ in je na ra\u010dunu $n$ mesecev.\r\n\r\nPrimeri:\r\n\r\n    >>> vrednostObrestno(100, 10, 0)\r\n    100.0\r\n    >>> vrednostObrestno(100, 10, 1)\r\n    100.83333333333333\r\n    >>> vrednostObrestno(100, 12, 12)\r\n    112.68250301319698", 
      "timestamp": "2012-06-09 22:21:06", 
      "challenge": "[[\"(2345, 8.135646577844163, 13)\", \"2560.299255\"], [\"(9934, 8.514242941905412, 34)\", \"12633.453237\"], [\"(1135, 6.295240863159901, 59)\", \"1545.487852\"], [\"(7628, 4.660416896679251, 48)\", \"9187.844006\"], [\"(8917, 3.7347400482442845, 9)\", \"9169.902185\"], [\"(8490, 9.237067144727964, 18)\", \"9746.560534\"], [\"(3083, 5.0200911506694625, 51)\", \"3814.509138\"], [\"(5224, 9.59005714047218, 4)\", \"5393.007411\"], [\"(2001, 17.04358544361328, 1)\", \"2029.420179\"], [\"(8726, 11.9609551515499, 10)\", \"9635.827913\"], [\"(839, 8.526021871424712, 39)\", \"1105.802584\"], [\"(5780, 9.079508290405004, 28)\", \"7138.205546\"], [\"(6189, 12.355660294183425, 41)\", \"9419.356135\"], [\"(6722, 12.245537806322742, 6)\", \"7144.216334\"], [\"(9139, 18.685308923108032, 43)\", \"17759.995725\"], [\"(4832, 2.892390459913164, 32)\", \"5218.959577\"], [\"(5161, 1.3353982472476513, 57)\", \"5498.781421\"], [\"(2366, 16.198261346740452, 26)\", \"3352.865845\"], [\"(6943, 6.222922812890802, 39)\", \"8494.818227\"], [\"(3052, 9.733493792206142, 20)\", \"3587.184465\"], [\"(7461, 1.5812452499270204, 41)\", \"7874.894352\"], [\"(4266, 15.369663393994148, 34)\", \"6575.727489\"], [\"(4251, 7.454182535198449, 59)\", \"6125.852571\"], [\"(3896, 14.771783270354936, 52)\", \"7360.686537\"], [\"(5489, 4.891024528168203, 17)\", \"5881.987878\"], [\"(1158, 5.612848194938995, 18)\", \"1259.469768\"], [\"(6023, 5.39594668719893, 7)\", \"6215.15878\"], [\"(2068, 7.385075020403733, 4)\", \"2119.379662\"], [\"(1229, 15.129116788797463, 41)\", \"2054.188638\"], [\"(7906, 15.723673155814238, 22)\", \"10527.775507\"], [\"(2419, 3.8851474458617483, 19)\", \"2572.220927\"], [\"(1568, 12.220899888189772, 28)\", \"2082.383224\"], [\"(9033, 9.866814343718636, 33)\", \"11835.606584\"], [\"(7470, 6.305204992449606, 50)\", \"9707.745582\"], [\"(7855, 15.905394037746305, 3)\", \"8171.500404\"], [\"(6796, 11.650310369878781, 4)\", \"7063.786714\"], [\"(9365, 16.15710780067204, 29)\", \"13802.330903\"], [\"(4362, 16.129252991576767, 58)\", \"9462.328735\"], [\"(3115, 3.441233475301475, 19)\", \"3289.176972\"], [\"(1832, 13.952325724259067, 52)\", \"3341.838915\"], [\"(6401, 4.082472999345116, 37)\", \"7258.090981\"], [\"(3542, 4.982242252701348, 18)\", \"3816.258373\"], [\"(3959, 1.872284659844043, 27)\", \"4129.205615\"], [\"(8788, 14.772980326504893, 44)\", \"15055.689772\"], [\"(5149, 19.25386306837334, 13)\", \"6332.723363\"], [\"(7698, 1.08518063627586, 54)\", \"8083.068914\"], [\"(4115, 14.628460564107725, 3)\", \"4267.332277\"], [\"(8336, 15.876995479274148, 4)\", \"8786.001809\"], [\"(5705, 7.011488248194395, 9)\", \"6012.112071\"], [\"(9438, 12.110501688982131, 6)\", \"10024.109001\"], [\"(8111, 1.4381692067084464, 27)\", \"8377.592626\"], [\"(3436, 19.33986956385397, 0)\", \"3436.0\"], [\"(4773, 0.3935733891219559, 53)\", \"4856.679688\"], [\"(2282, 16.855474632623263, 42)\", \"4099.598449\"], [\"(6043, 17.56011999501401, 27)\", \"8945.407919\"], [\"(8424, 10.66561572692254, 56)\", \"13826.881312\"], [\"(1937, 14.232962354717847, 17)\", \"2366.915478\"], [\"(6294, 8.406453156442609, 58)\", \"9435.62226\"], [\"(5047, 14.453554639161492, 35)\", \"7673.995781\"], [\"(8132, 19.58177180864371, 32)\", \"13650.45368\"], [\"(941, 6.346657797882354, 13)\", \"1007.792342\"], [\"(9154, 14.468397446598237, 46)\", \"15886.917018\"], [\"(2403, 11.586290301663011, 23)\", \"2997.334218\"], [\"(1776, 1.0378878711285302, 12)\", \"1794.520827\"], [\"(9001, 0.8421206412250654, 29)\", \"9185.992721\"], [\"(2414, 15.516344185844876, 10)\", \"2744.939861\"], [\"(5471, 19.373641967752675, 55)\", \"13201.471742\"], [\"(9372, 16.544372685751885, 16)\", \"11667.548367\"], [\"(1573, 1.9125014303586345, 1)\", \"1575.506971\"], [\"(9018, 17.615399201804554, 18)\", \"11722.768211\"], [\"(3211, 11.49131624543764, 59)\", \"5634.362898\"], [\"(1512, 6.779531477468054, 12)\", \"1617.752438\"], [\"(8177, 3.890535320093252, 5)\", \"8310.41608\"], [\"(3846, 9.891058871168742, 50)\", \"5797.761447\"], [\"(1959, 19.006182273771064, 35)\", \"3395.452118\"], [\"(5540, 6.9158941346787115, 24)\", \"6359.281049\"], [\"(2493, 16.963335501414576, 25)\", \"3541.020809\"], [\"(5938, 13.318837951447692, 6)\", \"6344.572434\"], [\"(6003, 12.330289663063585, 51)\", \"10110.986974\"], [\"(2048, 5.2739915706191685, 40)\", \"2440.683774\"], [\"(1129, 2.8615213737451444, 37)\", \"1233.008968\"], [\"(5918, 0.9926069543752682, 30)\", \"6066.631267\"], [\"(351, 14.756256995616404, 19)\", \"442.748594\"], [\"(2972, 5.724616805575949, 56)\", \"3879.664621\"], [\"(1701, 11.239134120437335, 37)\", \"2401.619994\"], [\"(1178, 6.9313301474693025, 46)\", \"1535.344303\"], [\"(3963, 3.188687395808318, 43)\", \"4442.028188\"], [\"(5640, 6.259217924910464, 24)\", \"6390.056263\"], [\"(5569, 19.67251933922635, 33)\", \"9524.078743\"], [\"(6550, 12.908738672146564, 46)\", \"10715.137131\"], [\"(1223, 9.723176494060437, 55)\", \"1906.285693\"], [\"(3364, 2.551086421311635, 56)\", \"3788.821707\"], [\"(7373, 18.882614419419227, 17)\", \"9614.242095\"], [\"(6930, 0.6142656743641496, 10)\", \"6965.555668\"], [\"(611, 9.794127497570297, 7)\", \"646.774356\"], [\"(1904, 19.957050715492606, 16)\", \"2479.017936\"], [\"(57, 16.712650140551244, 9)\", \"64.555887\"], [\"(4046, 9.517762970014315, 14)\", \"4519.183175\"], [\"(8479, 0.5074192909859547, 55)\", \"8678.461966\"], [\"(7164, 11.823314527220264, 32)\", \"9804.228463\"], [\"(3109, 10.725253517983138, 9)\", \"3368.215868\"]]", 
      "solution": "def vrednostObrestno(A0, r, n):\r\n    m=obrestnaMera(r)\r\n    return A0*(1+m)**n", 
      "problem": 224, 
      "validation": "Check.equal(\"vrednostObrestno(100,10,0)\", 100)\r\nCheck.equal(\"vrednostObrestno(100,10,1)\", 100.8333333)\r\nCheck.equal(\"vrednostObrestno(100,12,12)\", 112.682503)\r\n\r\n_rng=[63112345]\r\nfor i in range(300): _rng.append((_rng[-1]*1103515245+12345)%2**32)\r\n_m=max(_rng)/20\r\n_rng=[(x%10000,y/_m,z%60) for x,y,z in zip(_rng, _rng[100:], _rng[200:])]\r\n\r\nfor v in _rng:\r\n    Check.challenge(vrednostObrestno(*v),v)"
    }
  }, 
  {
    "pk": 912, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `mejniki(s)`, ki za dani seznam celih \u0161tevil\n$s=(a_0, \\ldots, a_n)$ vrne seznam indeksov\n$i_0 = 0, i_1, \\dots, i_k = n$ da so vsote od $a_{i_j}$ do $a_{i_{j + 1}}$\nenake $0$.\n\u010ce tak seznam ne obstaja, naj vrne `None`.", 
      "timestamp": "2013-01-18 13:18:00", 
      "challenge": "[]", 
      "solution": "def mejniki(s):\n    i = 0\n    r = [0]\n    j = poisci(s,i)\n    while j != None and j > i:\n        r.append(j)\n        i = j\n        j = poisci(s,i)\n    if j == None and i== len(s)-1:\n        return r\n    else:\n        return None", 
      "problem": 305, 
      "validation": "Check.equal(\"\"\"mejniki([1, -2, 1, -1, 2, -1])\"\"\", [0, 2, 3, 5])\nCheck.equal(\"\"\"mejniki([1, -2, 1, -1, 2])\"\"\", None)\nCheck.equal(\"\"\"mejniki([0, 1])\"\"\", None)"
    }
  }, 
  {
    "pk": 289, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `prikazi(x, y, r, leto)`, ki sprejme razpredelnice\n`x`, `y` in `r` ter s krogi prika\u017ee porazdelitev podatkov v danem\nletu.\nRazpredelnici `x` in `y` bosta predstavljali podatke, ki jih \u017eelimo\nprimerjati, razpredelnica `r` pa bo obi\u010dajno velikost prebivalstva.\nPazite, da bo vrednost `r` premo-sorazmerna povr\u0161ini krogov.\n\nNamig: `symbols`", 
      "timestamp": "2013-01-02 09:44:07", 
      "challenge": "[]", 
      "solution": "prikazi <- function(x, y, velikost, leto) {\n  leto <- paste(\"X\", leto, sep = \"\")\n  symbols(x[[leto]], y[[leto]], sqrt(velikost[[leto]]), inches = 1 / 3)\n}", 
      "problem": 92, 
      "validation": ""
    }
  }, 
  {
    "pk": 640, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "S katero funkcijo si lahko pomagamo, \u010de \u017eelimo me\u0161ati karte?\r\n\r\n1) randomize iz modula random\r\n\r\n2) choice iz modula random\r\n\r\n3) randomcards iz modula random \t\r\n\r\n4) random iz modula random\r\n\r\n5) shift iz modula math\r\n\r\n6) seed iz modula random\r\n\r\n7) shuffle iz modula random\r\n\r\nSestavite funkcijo naloga15, ki kot rezultat vrne mno\u017eico pravilnih\r\nodgovorov (teh je lahko od 0 do 7, \u010de noben odgovor ni pravilen, naj\r\nfunkcija vrne prazno mno\u017eico)", 
      "timestamp": "2012-03-27 08:53:13", 
      "challenge": "[]", 
      "solution": "def naloga15():\r\n    return {1,3,7}", 
      "problem": 209, 
      "validation": "Check.equal('md5(str(naloga15()).encode()).hexdigest()', 'ae2c66a5f437e6b37bdc5340f83cf14b', \"Odgovor je napa\u010den\")"
    }
  }, 
  {
    "pk": 541, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `vektorskaRazdalja(v1, v2)`, ki vrne razdaljo med\nvektorjema `v1` in `v2`, podanima s seznamom komponent. Do komponent\nseznama dostopamo s pomo\u010djo oglatih oklepajev, \u0161teti pa za\u010dnemo pri 0. Tako\n je prva komponenta vektorja `v` kar `v[0]`, druga komponenta je `v[1]`, \ntretja komponenta pa `v[2]`.\n\n    >>> vektorskaRazdalja([0, 0, 1], [2, 1, 3])\n    3", 
      "timestamp": "2012-03-04 16:51:44", 
      "challenge": "[[\"None\", \"86.60254\"], [\"None\", \"84.308956\"], [\"None\", \"83.186537\"], [\"None\", \"82.097503\"], [\"None\", \"79.724526\"], [\"None\", \"79.724526\"], [\"None\", \"79.724526\"], [\"None\", \"82.097503\"], [\"None\", \"83.186537\"], [\"None\", \"79.724526\"], [\"None\", \"71.133677\"], [\"None\", \"73.457471\"], [\"None\", \"79.724526\"], [\"None\", \"79.724526\"], [\"None\", \"79.724526\"], [\"None\", \"82.097503\"], [\"None\", \"58.137767\"], [\"None\", \"73.783467\"], [\"None\", \"68.731361\"], [\"None\", \"70.114193\"], [\"None\", \"79.724526\"], [\"None\", \"71.133677\"], [\"None\", \"71.358251\"], [\"None\", \"73.457471\"], [\"None\", \"50.75431\"], [\"None\", \"79.724526\"], [\"None\", \"74.752926\"], [\"None\", \"67.557383\"], [\"None\", \"54.147945\"], [\"None\", \"79.724526\"], [\"None\", \"58.855756\"], [\"None\", \"70.342022\"], [\"None\", \"58.957612\"], [\"None\", \"50.635956\"], [\"None\", \"79.724526\"], [\"None\", \"49.193496\"], [\"None\", \"52.952809\"], [\"None\", \"50.950957\"], [\"None\", \"79.724526\"], [\"None\", \"66.603303\"], [\"None\", \"56.885851\"], [\"None\", \"79.724526\"], [\"None\", \"54.918121\"], [\"None\", \"58.957612\"], [\"None\", \"67.941151\"], [\"None\", \"71.358251\"], [\"None\", \"57.201399\"], [\"None\", \"66.603303\"], [\"None\", \"65.023073\"], [\"None\", \"58.957612\"], [\"None\", \"56.356011\"], [\"None\", \"65.391131\"], [\"None\", \"50.039984\"], [\"None\", \"54.735729\"], [\"None\", \"76.785415\"], [\"None\", \"67.557383\"], [\"None\", \"59.866518\"], [\"None\", \"54.147945\"], [\"None\", \"69.310894\"], [\"None\", \"66.603303\"], [\"None\", \"50.159745\"], [\"None\", \"84.023806\"], [\"None\", \"77.588659\"], [\"None\", \"70.342022\"], [\"None\", \"79.724526\"], [\"None\", \"58.957612\"], [\"None\", \"82.800966\"], [\"None\", \"90.972523\"], [\"None\", \"76.341339\"], [\"None\", \"79.724526\"], [\"None\", \"50.159745\"], [\"None\", \"78.511146\"], [\"None\", \"67.557383\"], [\"None\", \"110.797112\"], [\"None\", \"68.381284\"], [\"None\", \"125.171882\"], [\"None\", \"55.497748\"], [\"None\", \"79.724526\"], [\"None\", \"76.863515\"], [\"None\", \"66.603303\"], [\"None\", \"74.752926\"], [\"None\", \"153.531756\"], [\"None\", \"106.226174\"], [\"None\", \"75.392307\"], [\"None\", \"90.972523\"], [\"None\", \"77.071395\"], [\"None\", \"70.028566\"], [\"None\", \"58.957612\"], [\"None\", \"103.884551\"], [\"None\", \"100.975244\"], [\"None\", \"79.724526\"], [\"None\", \"87.567117\"], [\"None\", \"58.855756\"], [\"None\", \"127.451952\"], [\"None\", \"50.950957\"], [\"None\", \"72.138755\"], [\"None\", \"62.385896\"], [\"None\", \"106.226174\"], [\"None\", \"109.19707\"]]", 
      "solution": "def vektorskaRazdalja(v1, v2):\n    # Spodnja re\u0161itev bo bolj razumljiva, ko bomo obravnavali sezname\n    return (sum((x1 - x2) ** 2 for (x1, x2) in zip(v1, v2))) ** (1 / 2)", 
      "problem": 177, 
      "validation": "Check.equal('vektorskaRazdalja([0, 0, 1], [2, 1, 3])', 3)\nCheck.equal('vektorskaRazdalja([1, 2, 0], [3, 4, 0])', 8 ** (1 / 2))\nfor i in range(1, 100):\n    Check.challenge(vektorskaRazdalja(\n        [(k ** 13) % i for k in range(1, 4)],\n        [50 - (k ** 13) % i for k in range(1, 4)]\n    ))"
    }
  }, 
  {
    "pk": 136, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `dolzineMesecev(leto)`, ki vrne seznam dol\u017eine 12,\nki ima za elemente \u0161tevila dni po posameznih mesecih v danem letu.", 
      "timestamp": "2012-10-24 13:30:16", 
      "challenge": "[[\"1900\", \"[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\"], [\"1910\", \"[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\"], [\"1920\", \"[31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\"], [\"1930\", \"[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\"], [\"1940\", \"[31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\"], [\"1950\", \"[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\"], [\"1960\", \"[31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\"], [\"1970\", \"[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\"], [\"1980\", \"[31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\"], [\"1990\", \"[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\"], [\"2000\", \"[31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\"], [\"2010\", \"[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\"], [\"2020\", \"[31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\"], [\"2030\", \"[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\"], [\"2040\", \"[31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\"], [\"2050\", \"[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\"], [\"2060\", \"[31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\"], [\"2070\", \"[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\"], [\"2080\", \"[31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\"], [\"2090\", \"[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\"]]", 
      "solution": "def dolzineMesecev(leto):\n    return [\n        31, 29 if jePrestopno(leto) else 28, 31, 30, 31, 30,\n        31, 31, 30, 31, 30, 31\n    ]", 
      "problem": 48, 
      "validation": "Check.equal('dolzineMesecev(1900)', [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31])\nCheck.equal('dolzineMesecev(2000)', [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31])\nCheck.equal('dolzineMesecev(2004)', [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31])\nCheck.equal('dolzineMesecev(2011)', [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31])\n\nfor leto in range(1900, 2100, 10):\n    Check.challenge(dolzineMesecev(leto), leto)"
    }
  }, 
  {
    "pk": 545, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Napi\u0161ite funkcijo `okvir`, ki kot parameter sprejme velikost kvadrata\nin vrne niz, ki izpi\u0161e prazen kvadrat, obrobljen z znakom `\"+\"`. \nNa primer, klic `print(okvir(4))` naj izpi\u0161e\n\n    ++++\n    +  +\n    +  +\n    ++++", 
      "timestamp": "2012-03-05 11:51:28", 
      "challenge": "[[\"None\", \"['+\\\\n+\\\\n', '++\\\\n++\\\\n', '+++\\\\n+ +\\\\n+++\\\\n', '++++\\\\n+  +\\\\n+  +\\\\n++++\\\\n', '+++++\\\\n+   +\\\\n+   +\\\\n+   +\\\\n+++++\\\\n', '++++++\\\\n+    +\\\\n+    +\\\\n+    +\\\\n+    +\\\\n++++++\\\\n', '+++++++\\\\n+     +\\\\n+     +\\\\n+     +\\\\n+     +\\\\n+     +\\\\n+++++++\\\\n']\"]]", 
      "solution": "def okvir(n):\n    polna = n * \"+\" + \"\\n\"\n    prazna = \"+\" + (n - 2) * \" \" + \"+\" + \"\\n\"\n    return polna + (n - 2) * prazna + polna", 
      "problem": 178, 
      "validation": "import random\n\nCheck.equal(\"\"\"okvir(4)\"\"\", \"++++\\n+  +\\n+  +\\n++++\\n\")\nCheck.challenge([okvir(a) for a in range(1,8)])"
    }
  }, 
  {
    "pk": 260, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `riemann(f, a, b, n)`, ki nari\u0161e sliko spodnjih\nRiemannovih vsot za funkcijo `f` na intervalu [`a`, `b`], razdeljenem\nna `n` delov.\n\nPrimer slike za `riemann(function(x) 3 * x - x^2 + sin(5 * x), 0, 3, 30)`:\n    ![primer](http://i.imgur.com/n1bUk.png)", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "riemann <- function(f, a, b, n) {\n  # narisemo funkcijo in koordinatni sistem\n  curve(f, a, b, xlab = \"x\", ylab = \"f(x)\")\n  abline(h = 0, v = 0, col = \"gray\", lwd = 0.5)\n\n  # interval [a, b] razdelimo na n delov\n  x <- seq(a, b, length.out = n + 1)\n  # leva kraji\u0161\u010da so vse delilne to\u010dke razen zadnje\n  levi <- x[-(n + 1)]\n  # desna kraji\u0161\u010da so vse delilne to\u010dke razen prve\n  desni <- x[-1]\n\n  # funkcija, ki izracuna minimum f na intervalu [x1, x2]\n  min.f <- function(x1, x2) {\n      min(f(seq(x1, x2, length.out = 100)))\n  }\n\n  # izracunamo minimum na vseh podintervalih\n  min.y <- mapply(min.f, levi, desni)\n\n  # narisemo kvadrate\n  rect(levi, 0, desni, min.y, col = \"red\")\n}", 
      "problem": 75, 
      "validation": ""
    }
  }, 
  {
    "pk": 723, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `nesrecniki(omrezje)`, ki vrne mno\u017eico oseb, ki\nsovra\u017eijo same sebe.", 
      "timestamp": "2012-06-11 11:01:07", 
      "challenge": "[]", 
      "solution": "def nesrecniki(omrezje):\n    return {oseba for oseba, sovrazniki in omrezje.items()\n            if oseba in sovrazniki}", 
      "problem": 230, 
      "validation": "Check.equal(\"nesrecniki(primerOmrezja1)\", {\"Ugo\"})\nCheck.equal(\"nesrecniki(primerOmrezja2)\", {\"Anka\", \"Evgen\"})"
    }
  }, 
  {
    "pk": 790, 
    "model": "tomo.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `prepis(a, vhod, izhod)`, ki prebere tekstovno\ndatoteko `vhod` ter pre\u0161teje \u0161tevilo znakov `a` v vsaki vrstici in doda\nto \u0161tevilo v oklepaju na konec vsake vrstice.\n\n\u010ce je npr. v eni vrstici zapisano `Banane so rumene.`, bo v tej vrstici\npo klicu `prepis(\"n\", vhod, izhod)` v novi datoteki pisalo\n`Banane so rumene. (3)`", 
      "timestamp": "2012-09-05 11:43:37", 
      "challenge": "[]", 
      "solution": "def prepis(a,vhod,izhod):\n    with open(vhod) as f:\n        with open(izhod,'w') as g:\n            for vrstica in f:\n                v = vrstica.strip('\\n')\n                print(v,\" (\",prestej(a,v),\")\", sep='', file=g)", 
      "problem": 251, 
      "validation": "_d=\"\"\"ena (1)\\nbanana (2)\\nse (0)\\nena (1)\\nbanana (2)\\nin en kup n-jev!! (3)\"\"\"\nwith open(\"_test.2\",\"w\") as _f:\n    _f.write(_d)\n\nprepis('n','_test.1','_test.1o')\nif not _istedatoteke('_test.1o','_test.2'):\n    Check.error('Izhodna datoteka je napa\u010dna.')"
    }
  }, 
  {
    "pk": 306, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Napi\u0161ite program, ki izpi\u0161e \u0161ahovsko desko razse\u017enosti $2n \\times 2n$,\nna kateri so \u010drna polja oblike\n\n    ####\n    ####\n    ####\n    ####\n\nbela pa oblike\n\n    ++++\n    +  +\n    +  +\n    ++++\n\nVelikost polj naj bo shranjena v spremenljivki `m`. Tudi spremenljivka\n`n` mora biti podana.\n\nNa primer, \u010de je `m=3` in `n=2`, naj se izpi\u0161e:\n\n    ###+++###+++\n    ###+ +###+ +\n    ###+++###+++\n    +++###+++###\n    + +###+ +###\n    +++###+++###\n    ###+++###+++\n    ###+ +###+ +\n    ###+++###+++\n    +++###+++###\n    + +###+ +###\n    +++###+++###", 
      "timestamp": "2013-02-25 02:15:49", 
      "challenge": "[]", 
      "solution": "m=3\nn=2\ncrna=m*'#'\nbela=m*'+'\nprazna='+'+(m-2)*' '+'+'\nvzorec1=(crna+bela)*n+'\\n'+((crna+prazna)*n+'\\n')*(m-2)+(crna+bela)*n+'\\n'\nvzorec2=(bela+crna)*n+'\\n'+((prazna+crna)*n+'\\n')*(m-2)+(bela+crna)*n+'\\n'\nkvadrat = (vzorec1+vzorec2)*n\nprint(kvadrat)", 
      "problem": 98, 
      "validation": "def izpis(source):\n    import io, sys\n    old_stdout = sys.stdout\n    new_stdout = io.StringIO()\n    sys.stdout = new_stdout\n    glob={}\n    loc={}\n    exec(source,glob,loc)\n    sys.stdout = old_stdout\n    return (new_stdout.getvalue().strip(),loc)\n\ndef preveriKvadrat(kvadrat, m, n):\n    vrstice = kvadrat.splitlines()\n \n    crna=m*'#'\n    bela=m*'+'\n    prazna='+'+(m-2)*' '+'+'\n    vzorec1=(crna+bela)*n+'\\n'+((crna+prazna)*n+'\\n')*(m-2)+(crna+bela)*n+'\\n'\n    vzorec2=(bela+crna)*n+'\\n'+((prazna+crna)*n+'\\n')*(m-2)+(bela+crna)*n+'\\n'\n    pravikvadrat = (vzorec1+vzorec2)*n\n    pravevrstice = pravikvadrat.splitlines()\n\n    if len(vrstice) != 2*m*n:\n        Check.error(\"Kvadrat nima {0} vrstic.\".format(2*m*n))\n    for i in range(1, min(2*m*n, len(vrstice))):\n        if pravevrstice[i] != vrstice[i]:\n            Check.error(\"{0}. vrstica nima pravega vzorca.\".format(i + 1))\n    \n(resitev,okolje)=izpis(Check.current[\"solution\"])\npreveriKvadrat(resitev, int(okolje[\"m\"]), int(okolje[\"n\"]))"
    }
  }, 
  {
    "pk": 206, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Dodajte metodo `odrezi(self, n)`, ki odstrani vsa vozli\u0161\u010da, ki le\u017eijo\nna nivojih, ve\u010djih od `n`.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"None\", \"Drevo(8,\\n      levo = Drevo(7,\\n                   levo = Drevo(6,\\n                                levo = Drevo(5,\\n                                             levo = Drevo(4,\\n                                                          levo = Drevo(3,\\n                                                                       levo = Drevo(2,\\n                                                                                    levo = Drevo(1),\\n                                                                                    desno = Drevo(1)),\\n                                                                       desno = Drevo(2,\\n                                                                                     levo = Drevo(1),\\n                                                                                     desno = Drevo(1))),\\n                                                          desno = Drevo(3,\\n                                                                        levo = Drevo(2,\\n                                                                                     levo = Drevo(1),\\n                                                                                     desno = Drevo(1)),\\n                                                                        desno = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)))),\\n                                             desno = Drevo(4,\\n                                                           levo = Drevo(3,\\n                                                                        levo = Drevo(2,\\n                                                                                     levo = Drevo(1),\\n                                                                                     desno = Drevo(1)),\\n                                                                        desno = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1))),\\n                                                           desno = Drevo(3,\\n                                                                         levo = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)),\\n                                                                         desno = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1))))),\\n                                desno = Drevo(5,\\n                                              levo = Drevo(4,\\n                                                           levo = Drevo(3,\\n                                                                        levo = Drevo(2,\\n                                                                                     levo = Drevo(1),\\n                                                                                     desno = Drevo(1)),\\n                                                                        desno = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1))),\\n                                                           desno = Drevo(3,\\n                                                                         levo = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)),\\n                                                                         desno = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)))),\\n                                              desno = Drevo(4,\\n                                                            levo = Drevo(3,\\n                                                                         levo = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)),\\n                                                                         desno = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1))),\\n                                                            desno = Drevo(3,\\n                                                                          levo = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)),\\n                                                                          desno = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1)))))),\\n                   desno = Drevo(6,\\n                                 levo = Drevo(5,\\n                                              levo = Drevo(4,\\n                                                           levo = Drevo(3,\\n                                                                        levo = Drevo(2,\\n                                                                                     levo = Drevo(1),\\n                                                                                     desno = Drevo(1)),\\n                                                                        desno = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1))),\\n                                                           desno = Drevo(3,\\n                                                                         levo = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)),\\n                                                                         desno = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)))),\\n                                              desno = Drevo(4,\\n                                                            levo = Drevo(3,\\n                                                                         levo = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)),\\n                                                                         desno = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1))),\\n                                                            desno = Drevo(3,\\n                                                                          levo = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)),\\n                                                                          desno = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1))))),\\n                                 desno = Drevo(5,\\n                                               levo = Drevo(4,\\n                                                            levo = Drevo(3,\\n                                                                         levo = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)),\\n                                                                         desno = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1))),\\n                                                            desno = Drevo(3,\\n                                                                          levo = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)),\\n                                                                          desno = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1)))),\\n                                               desno = Drevo(4,\\n                                                             levo = Drevo(3,\\n                                                                          levo = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)),\\n                                                                          desno = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1))),\\n                                                             desno = Drevo(3,\\n                                                                           levo = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1)),\\n                                                                           desno = Drevo(2,\\n                                                                                         levo = Drevo(1),\\n                                                                                         desno = Drevo(1))))))),\\n      desno = Drevo(7,\\n                    levo = Drevo(6,\\n                                 levo = Drevo(5,\\n                                              levo = Drevo(4,\\n                                                           levo = Drevo(3,\\n                                                                        levo = Drevo(2,\\n                                                                                     levo = Drevo(1),\\n                                                                                     desno = Drevo(1)),\\n                                                                        desno = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1))),\\n                                                           desno = Drevo(3,\\n                                                                         levo = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)),\\n                                                                         desno = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)))),\\n                                              desno = Drevo(4,\\n                                                            levo = Drevo(3,\\n                                                                         levo = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)),\\n                                                                         desno = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1))),\\n                                                            desno = Drevo(3,\\n                                                                          levo = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)),\\n                                                                          desno = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1))))),\\n                                 desno = Drevo(5,\\n                                               levo = Drevo(4,\\n                                                            levo = Drevo(3,\\n                                                                         levo = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)),\\n                                                                         desno = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1))),\\n                                                            desno = Drevo(3,\\n                                                                          levo = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)),\\n                                                                          desno = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1)))),\\n                                               desno = Drevo(4,\\n                                                             levo = Drevo(3,\\n                                                                          levo = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)),\\n                                                                          desno = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1))),\\n                                                             desno = Drevo(3,\\n                                                                           levo = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1)),\\n                                                                           desno = Drevo(2,\\n                                                                                         levo = Drevo(1),\\n                                                                                         desno = Drevo(1)))))),\\n                    desno = Drevo(6,\\n                                  levo = Drevo(5,\\n                                               levo = Drevo(4,\\n                                                            levo = Drevo(3,\\n                                                                         levo = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)),\\n                                                                         desno = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1))),\\n                                                            desno = Drevo(3,\\n                                                                          levo = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)),\\n                                                                          desno = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1)))),\\n                                               desno = Drevo(4,\\n                                                             levo = Drevo(3,\\n                                                                          levo = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)),\\n                                                                          desno = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1))),\\n                                                             desno = Drevo(3,\\n                                                                           levo = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1)),\\n                                                                           desno = Drevo(2,\\n                                                                                         levo = Drevo(1),\\n                                                                                         desno = Drevo(1))))),\\n                                  desno = Drevo(5,\\n                                                levo = Drevo(4,\\n                                                             levo = Drevo(3,\\n                                                                          levo = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)),\\n                                                                          desno = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1))),\\n                                                             desno = Drevo(3,\\n                                                                           levo = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1)),\\n                                                                           desno = Drevo(2,\\n                                                                                         levo = Drevo(1),\\n                                                                                         desno = Drevo(1)))),\\n                                                desno = Drevo(4,\\n                                                              levo = Drevo(3,\\n                                                                           levo = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1)),\\n                                                                           desno = Drevo(2,\\n                                                                                         levo = Drevo(1),\\n                                                                                         desno = Drevo(1))),\\n                                                              desno = Drevo(3,\\n                                                                            levo = Drevo(2,\\n                                                                                         levo = Drevo(1),\\n                                                                                         desno = Drevo(1)),\\n                                                                            desno = Drevo(2,\\n                                                                                          levo = Drevo(1),\\n                                                                                          desno = Drevo(1))))))))\"], [\"None\", \"Drevo(8,\\n      levo = Drevo(7,\\n                   levo = Drevo(6,\\n                                levo = Drevo(5,\\n                                             levo = Drevo(4,\\n                                                          levo = Drevo(3,\\n                                                                       levo = Drevo(2,\\n                                                                                    levo = Drevo(1),\\n                                                                                    desno = Drevo(1)),\\n                                                                       desno = Drevo(2,\\n                                                                                     levo = Drevo(1),\\n                                                                                     desno = Drevo(1))),\\n                                                          desno = Drevo(3,\\n                                                                        levo = Drevo(2,\\n                                                                                     levo = Drevo(1),\\n                                                                                     desno = Drevo(1)),\\n                                                                        desno = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)))),\\n                                             desno = Drevo(4,\\n                                                           levo = Drevo(3,\\n                                                                        levo = Drevo(2,\\n                                                                                     levo = Drevo(1),\\n                                                                                     desno = Drevo(1)),\\n                                                                        desno = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1))),\\n                                                           desno = Drevo(3,\\n                                                                         levo = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)),\\n                                                                         desno = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1))))),\\n                                desno = Drevo(5,\\n                                              levo = Drevo(4,\\n                                                           levo = Drevo(3,\\n                                                                        levo = Drevo(2,\\n                                                                                     levo = Drevo(1),\\n                                                                                     desno = Drevo(1)),\\n                                                                        desno = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1))),\\n                                                           desno = Drevo(3,\\n                                                                         levo = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)),\\n                                                                         desno = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)))),\\n                                              desno = Drevo(4,\\n                                                            levo = Drevo(3,\\n                                                                         levo = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)),\\n                                                                         desno = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1))),\\n                                                            desno = Drevo(3,\\n                                                                          levo = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)),\\n                                                                          desno = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1)))))),\\n                   desno = Drevo(6,\\n                                 levo = Drevo(5,\\n                                              levo = Drevo(4,\\n                                                           levo = Drevo(3,\\n                                                                        levo = Drevo(2,\\n                                                                                     levo = Drevo(1),\\n                                                                                     desno = Drevo(1)),\\n                                                                        desno = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1))),\\n                                                           desno = Drevo(3,\\n                                                                         levo = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)),\\n                                                                         desno = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)))),\\n                                              desno = Drevo(4,\\n                                                            levo = Drevo(3,\\n                                                                         levo = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)),\\n                                                                         desno = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1))),\\n                                                            desno = Drevo(3,\\n                                                                          levo = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)),\\n                                                                          desno = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1))))),\\n                                 desno = Drevo(5,\\n                                               levo = Drevo(4,\\n                                                            levo = Drevo(3,\\n                                                                         levo = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)),\\n                                                                         desno = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1))),\\n                                                            desno = Drevo(3,\\n                                                                          levo = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)),\\n                                                                          desno = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1)))),\\n                                               desno = Drevo(4,\\n                                                             levo = Drevo(3,\\n                                                                          levo = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)),\\n                                                                          desno = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1))),\\n                                                             desno = Drevo(3,\\n                                                                           levo = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1)),\\n                                                                           desno = Drevo(2,\\n                                                                                         levo = Drevo(1),\\n                                                                                         desno = Drevo(1))))))),\\n      desno = Drevo(7,\\n                    levo = Drevo(6,\\n                                 levo = Drevo(5,\\n                                              levo = Drevo(4,\\n                                                           levo = Drevo(3,\\n                                                                        levo = Drevo(2,\\n                                                                                     levo = Drevo(1),\\n                                                                                     desno = Drevo(1)),\\n                                                                        desno = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1))),\\n                                                           desno = Drevo(3,\\n                                                                         levo = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)),\\n                                                                         desno = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)))),\\n                                              desno = Drevo(4,\\n                                                            levo = Drevo(3,\\n                                                                         levo = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)),\\n                                                                         desno = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1))),\\n                                                            desno = Drevo(3,\\n                                                                          levo = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)),\\n                                                                          desno = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1))))),\\n                                 desno = Drevo(5,\\n                                               levo = Drevo(4,\\n                                                            levo = Drevo(3,\\n                                                                         levo = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)),\\n                                                                         desno = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1))),\\n                                                            desno = Drevo(3,\\n                                                                          levo = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)),\\n                                                                          desno = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1)))),\\n                                               desno = Drevo(4,\\n                                                             levo = Drevo(3,\\n                                                                          levo = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)),\\n                                                                          desno = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1))),\\n                                                             desno = Drevo(3,\\n                                                                           levo = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1)),\\n                                                                           desno = Drevo(2,\\n                                                                                         levo = Drevo(1),\\n                                                                                         desno = Drevo(1)))))),\\n                    desno = Drevo(6,\\n                                  levo = Drevo(5,\\n                                               levo = Drevo(4,\\n                                                            levo = Drevo(3,\\n                                                                         levo = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)),\\n                                                                         desno = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1))),\\n                                                            desno = Drevo(3,\\n                                                                          levo = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)),\\n                                                                          desno = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1)))),\\n                                               desno = Drevo(4,\\n                                                             levo = Drevo(3,\\n                                                                          levo = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)),\\n                                                                          desno = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1))),\\n                                                             desno = Drevo(3,\\n                                                                           levo = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1)),\\n                                                                           desno = Drevo(2,\\n                                                                                         levo = Drevo(1),\\n                                                                                         desno = Drevo(1))))),\\n                                  desno = Drevo(5,\\n                                                levo = Drevo(4,\\n                                                             levo = Drevo(3,\\n                                                                          levo = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)),\\n                                                                          desno = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1))),\\n                                                             desno = Drevo(3,\\n                                                                           levo = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1)),\\n                                                                           desno = Drevo(2,\\n                                                                                         levo = Drevo(1),\\n                                                                                         desno = Drevo(1)))),\\n                                                desno = Drevo(4,\\n                                                              levo = Drevo(3,\\n                                                                           levo = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1)),\\n                                                                           desno = Drevo(2,\\n                                                                                         levo = Drevo(1),\\n                                                                                         desno = Drevo(1))),\\n                                                              desno = Drevo(3,\\n                                                                            levo = Drevo(2,\\n                                                                                         levo = Drevo(1),\\n                                                                                         desno = Drevo(1)),\\n                                                                            desno = Drevo(2,\\n                                                                                          levo = Drevo(1),\\n                                                                                          desno = Drevo(1))))))))\"], [\"None\", \"Drevo(8,\\n      levo = Drevo(7,\\n                   levo = Drevo(6,\\n                                levo = Drevo(5,\\n                                             levo = Drevo(4,\\n                                                          levo = Drevo(3,\\n                                                                       levo = Drevo(2,\\n                                                                                    levo = Drevo(1),\\n                                                                                    desno = Drevo(1)),\\n                                                                       desno = Drevo(2,\\n                                                                                     levo = Drevo(1),\\n                                                                                     desno = Drevo(1))),\\n                                                          desno = Drevo(3,\\n                                                                        levo = Drevo(2,\\n                                                                                     levo = Drevo(1),\\n                                                                                     desno = Drevo(1)),\\n                                                                        desno = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)))),\\n                                             desno = Drevo(4,\\n                                                           levo = Drevo(3,\\n                                                                        levo = Drevo(2,\\n                                                                                     levo = Drevo(1),\\n                                                                                     desno = Drevo(1)),\\n                                                                        desno = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1))),\\n                                                           desno = Drevo(3,\\n                                                                         levo = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)),\\n                                                                         desno = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1))))),\\n                                desno = Drevo(5,\\n                                              levo = Drevo(4,\\n                                                           levo = Drevo(3,\\n                                                                        levo = Drevo(2,\\n                                                                                     levo = Drevo(1),\\n                                                                                     desno = Drevo(1)),\\n                                                                        desno = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1))),\\n                                                           desno = Drevo(3,\\n                                                                         levo = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)),\\n                                                                         desno = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)))),\\n                                              desno = Drevo(4,\\n                                                            levo = Drevo(3,\\n                                                                         levo = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)),\\n                                                                         desno = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1))),\\n                                                            desno = Drevo(3,\\n                                                                          levo = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)),\\n                                                                          desno = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1)))))),\\n                   desno = Drevo(6,\\n                                 levo = Drevo(5,\\n                                              levo = Drevo(4,\\n                                                           levo = Drevo(3,\\n                                                                        levo = Drevo(2,\\n                                                                                     levo = Drevo(1),\\n                                                                                     desno = Drevo(1)),\\n                                                                        desno = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1))),\\n                                                           desno = Drevo(3,\\n                                                                         levo = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)),\\n                                                                         desno = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)))),\\n                                              desno = Drevo(4,\\n                                                            levo = Drevo(3,\\n                                                                         levo = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)),\\n                                                                         desno = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1))),\\n                                                            desno = Drevo(3,\\n                                                                          levo = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)),\\n                                                                          desno = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1))))),\\n                                 desno = Drevo(5,\\n                                               levo = Drevo(4,\\n                                                            levo = Drevo(3,\\n                                                                         levo = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)),\\n                                                                         desno = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1))),\\n                                                            desno = Drevo(3,\\n                                                                          levo = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)),\\n                                                                          desno = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1)))),\\n                                               desno = Drevo(4,\\n                                                             levo = Drevo(3,\\n                                                                          levo = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)),\\n                                                                          desno = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1))),\\n                                                             desno = Drevo(3,\\n                                                                           levo = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1)),\\n                                                                           desno = Drevo(2,\\n                                                                                         levo = Drevo(1),\\n                                                                                         desno = Drevo(1))))))),\\n      desno = Drevo(7,\\n                    levo = Drevo(6,\\n                                 levo = Drevo(5,\\n                                              levo = Drevo(4,\\n                                                           levo = Drevo(3,\\n                                                                        levo = Drevo(2,\\n                                                                                     levo = Drevo(1),\\n                                                                                     desno = Drevo(1)),\\n                                                                        desno = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1))),\\n                                                           desno = Drevo(3,\\n                                                                         levo = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)),\\n                                                                         desno = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)))),\\n                                              desno = Drevo(4,\\n                                                            levo = Drevo(3,\\n                                                                         levo = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)),\\n                                                                         desno = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1))),\\n                                                            desno = Drevo(3,\\n                                                                          levo = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)),\\n                                                                          desno = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1))))),\\n                                 desno = Drevo(5,\\n                                               levo = Drevo(4,\\n                                                            levo = Drevo(3,\\n                                                                         levo = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)),\\n                                                                         desno = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1))),\\n                                                            desno = Drevo(3,\\n                                                                          levo = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)),\\n                                                                          desno = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1)))),\\n                                               desno = Drevo(4,\\n                                                             levo = Drevo(3,\\n                                                                          levo = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)),\\n                                                                          desno = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1))),\\n                                                             desno = Drevo(3,\\n                                                                           levo = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1)),\\n                                                                           desno = Drevo(2,\\n                                                                                         levo = Drevo(1),\\n                                                                                         desno = Drevo(1)))))),\\n                    desno = Drevo(6,\\n                                  levo = Drevo(5,\\n                                               levo = Drevo(4,\\n                                                            levo = Drevo(3,\\n                                                                         levo = Drevo(2,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)),\\n                                                                         desno = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1))),\\n                                                            desno = Drevo(3,\\n                                                                          levo = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)),\\n                                                                          desno = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1)))),\\n                                               desno = Drevo(4,\\n                                                             levo = Drevo(3,\\n                                                                          levo = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)),\\n                                                                          desno = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1))),\\n                                                             desno = Drevo(3,\\n                                                                           levo = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1)),\\n                                                                           desno = Drevo(2,\\n                                                                                         levo = Drevo(1),\\n                                                                                         desno = Drevo(1))))),\\n                                  desno = Drevo(5,\\n                                                levo = Drevo(4,\\n                                                             levo = Drevo(3,\\n                                                                          levo = Drevo(2,\\n                                                                                       levo = Drevo(1),\\n                                                                                       desno = Drevo(1)),\\n                                                                          desno = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1))),\\n                                                             desno = Drevo(3,\\n                                                                           levo = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1)),\\n                                                                           desno = Drevo(2,\\n                                                                                         levo = Drevo(1),\\n                                                                                         desno = Drevo(1)))),\\n                                                desno = Drevo(4,\\n                                                              levo = Drevo(3,\\n                                                                           levo = Drevo(2,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1)),\\n                                                                           desno = Drevo(2,\\n                                                                                         levo = Drevo(1),\\n                                                                                         desno = Drevo(1))),\\n                                                              desno = Drevo(3,\\n                                                                            levo = Drevo(2,\\n                                                                                         levo = Drevo(1),\\n                                                                                         desno = Drevo(1)),\\n                                                                            desno = Drevo(2,\\n                                                                                          levo = Drevo(1),\\n                                                                                          desno = Drevo(1))))))))\"], [\"None\", \"Drevo(8,\\n      levo = Drevo(7,\\n                   levo = Drevo(6,\\n                                levo = Drevo(5,\\n                                             levo = Drevo(4,\\n                                                          levo = Drevo(3,\\n                                                                       levo = Drevo(2),\\n                                                                       desno = Drevo(2)),\\n                                                          desno = Drevo(3,\\n                                                                        levo = Drevo(2),\\n                                                                        desno = Drevo(2))),\\n                                             desno = Drevo(4,\\n                                                           levo = Drevo(3,\\n                                                                        levo = Drevo(2),\\n                                                                        desno = Drevo(2)),\\n                                                           desno = Drevo(3,\\n                                                                         levo = Drevo(2),\\n                                                                         desno = Drevo(2)))),\\n                                desno = Drevo(5,\\n                                              levo = Drevo(4,\\n                                                           levo = Drevo(3,\\n                                                                        levo = Drevo(2),\\n                                                                        desno = Drevo(2)),\\n                                                           desno = Drevo(3,\\n                                                                         levo = Drevo(2),\\n                                                                         desno = Drevo(2))),\\n                                              desno = Drevo(4,\\n                                                            levo = Drevo(3,\\n                                                                         levo = Drevo(2),\\n                                                                         desno = Drevo(2)),\\n                                                            desno = Drevo(3,\\n                                                                          levo = Drevo(2),\\n                                                                          desno = Drevo(2))))),\\n                   desno = Drevo(6,\\n                                 levo = Drevo(5,\\n                                              levo = Drevo(4,\\n                                                           levo = Drevo(3,\\n                                                                        levo = Drevo(2),\\n                                                                        desno = Drevo(2)),\\n                                                           desno = Drevo(3,\\n                                                                         levo = Drevo(2),\\n                                                                         desno = Drevo(2))),\\n                                              desno = Drevo(4,\\n                                                            levo = Drevo(3,\\n                                                                         levo = Drevo(2),\\n                                                                         desno = Drevo(2)),\\n                                                            desno = Drevo(3,\\n                                                                          levo = Drevo(2),\\n                                                                          desno = Drevo(2)))),\\n                                 desno = Drevo(5,\\n                                               levo = Drevo(4,\\n                                                            levo = Drevo(3,\\n                                                                         levo = Drevo(2),\\n                                                                         desno = Drevo(2)),\\n                                                            desno = Drevo(3,\\n                                                                          levo = Drevo(2),\\n                                                                          desno = Drevo(2))),\\n                                               desno = Drevo(4,\\n                                                             levo = Drevo(3,\\n                                                                          levo = Drevo(2),\\n                                                                          desno = Drevo(2)),\\n                                                             desno = Drevo(3,\\n                                                                           levo = Drevo(2),\\n                                                                           desno = Drevo(2)))))),\\n      desno = Drevo(7,\\n                    levo = Drevo(6,\\n                                 levo = Drevo(5,\\n                                              levo = Drevo(4,\\n                                                           levo = Drevo(3,\\n                                                                        levo = Drevo(2),\\n                                                                        desno = Drevo(2)),\\n                                                           desno = Drevo(3,\\n                                                                         levo = Drevo(2),\\n                                                                         desno = Drevo(2))),\\n                                              desno = Drevo(4,\\n                                                            levo = Drevo(3,\\n                                                                         levo = Drevo(2),\\n                                                                         desno = Drevo(2)),\\n                                                            desno = Drevo(3,\\n                                                                          levo = Drevo(2),\\n                                                                          desno = Drevo(2)))),\\n                                 desno = Drevo(5,\\n                                               levo = Drevo(4,\\n                                                            levo = Drevo(3,\\n                                                                         levo = Drevo(2),\\n                                                                         desno = Drevo(2)),\\n                                                            desno = Drevo(3,\\n                                                                          levo = Drevo(2),\\n                                                                          desno = Drevo(2))),\\n                                               desno = Drevo(4,\\n                                                             levo = Drevo(3,\\n                                                                          levo = Drevo(2),\\n                                                                          desno = Drevo(2)),\\n                                                             desno = Drevo(3,\\n                                                                           levo = Drevo(2),\\n                                                                           desno = Drevo(2))))),\\n                    desno = Drevo(6,\\n                                  levo = Drevo(5,\\n                                               levo = Drevo(4,\\n                                                            levo = Drevo(3,\\n                                                                         levo = Drevo(2),\\n                                                                         desno = Drevo(2)),\\n                                                            desno = Drevo(3,\\n                                                                          levo = Drevo(2),\\n                                                                          desno = Drevo(2))),\\n                                               desno = Drevo(4,\\n                                                             levo = Drevo(3,\\n                                                                          levo = Drevo(2),\\n                                                                          desno = Drevo(2)),\\n                                                             desno = Drevo(3,\\n                                                                           levo = Drevo(2),\\n                                                                           desno = Drevo(2)))),\\n                                  desno = Drevo(5,\\n                                                levo = Drevo(4,\\n                                                             levo = Drevo(3,\\n                                                                          levo = Drevo(2),\\n                                                                          desno = Drevo(2)),\\n                                                             desno = Drevo(3,\\n                                                                           levo = Drevo(2),\\n                                                                           desno = Drevo(2))),\\n                                                desno = Drevo(4,\\n                                                              levo = Drevo(3,\\n                                                                           levo = Drevo(2),\\n                                                                           desno = Drevo(2)),\\n                                                              desno = Drevo(3,\\n                                                                            levo = Drevo(2),\\n                                                                            desno = Drevo(2)))))))\"], [\"None\", \"Drevo(8,\\n      levo = Drevo(7,\\n                   levo = Drevo(6,\\n                                levo = Drevo(5,\\n                                             levo = Drevo(4,\\n                                                          levo = Drevo(3),\\n                                                          desno = Drevo(3)),\\n                                             desno = Drevo(4,\\n                                                           levo = Drevo(3),\\n                                                           desno = Drevo(3))),\\n                                desno = Drevo(5,\\n                                              levo = Drevo(4,\\n                                                           levo = Drevo(3),\\n                                                           desno = Drevo(3)),\\n                                              desno = Drevo(4,\\n                                                            levo = Drevo(3),\\n                                                            desno = Drevo(3)))),\\n                   desno = Drevo(6,\\n                                 levo = Drevo(5,\\n                                              levo = Drevo(4,\\n                                                           levo = Drevo(3),\\n                                                           desno = Drevo(3)),\\n                                              desno = Drevo(4,\\n                                                            levo = Drevo(3),\\n                                                            desno = Drevo(3))),\\n                                 desno = Drevo(5,\\n                                               levo = Drevo(4,\\n                                                            levo = Drevo(3),\\n                                                            desno = Drevo(3)),\\n                                               desno = Drevo(4,\\n                                                             levo = Drevo(3),\\n                                                             desno = Drevo(3))))),\\n      desno = Drevo(7,\\n                    levo = Drevo(6,\\n                                 levo = Drevo(5,\\n                                              levo = Drevo(4,\\n                                                           levo = Drevo(3),\\n                                                           desno = Drevo(3)),\\n                                              desno = Drevo(4,\\n                                                            levo = Drevo(3),\\n                                                            desno = Drevo(3))),\\n                                 desno = Drevo(5,\\n                                               levo = Drevo(4,\\n                                                            levo = Drevo(3),\\n                                                            desno = Drevo(3)),\\n                                               desno = Drevo(4,\\n                                                             levo = Drevo(3),\\n                                                             desno = Drevo(3)))),\\n                    desno = Drevo(6,\\n                                  levo = Drevo(5,\\n                                               levo = Drevo(4,\\n                                                            levo = Drevo(3),\\n                                                            desno = Drevo(3)),\\n                                               desno = Drevo(4,\\n                                                             levo = Drevo(3),\\n                                                             desno = Drevo(3))),\\n                                  desno = Drevo(5,\\n                                                levo = Drevo(4,\\n                                                             levo = Drevo(3),\\n                                                             desno = Drevo(3)),\\n                                                desno = Drevo(4,\\n                                                              levo = Drevo(3),\\n                                                              desno = Drevo(3))))))\"], [\"None\", \"Drevo(8,\\n      levo = Drevo(7,\\n                   levo = Drevo(6,\\n                                levo = Drevo(5,\\n                                             levo = Drevo(4),\\n                                             desno = Drevo(4)),\\n                                desno = Drevo(5,\\n                                              levo = Drevo(4),\\n                                              desno = Drevo(4))),\\n                   desno = Drevo(6,\\n                                 levo = Drevo(5,\\n                                              levo = Drevo(4),\\n                                              desno = Drevo(4)),\\n                                 desno = Drevo(5,\\n                                               levo = Drevo(4),\\n                                               desno = Drevo(4)))),\\n      desno = Drevo(7,\\n                    levo = Drevo(6,\\n                                 levo = Drevo(5,\\n                                              levo = Drevo(4),\\n                                              desno = Drevo(4)),\\n                                 desno = Drevo(5,\\n                                               levo = Drevo(4),\\n                                               desno = Drevo(4))),\\n                    desno = Drevo(6,\\n                                  levo = Drevo(5,\\n                                               levo = Drevo(4),\\n                                               desno = Drevo(4)),\\n                                  desno = Drevo(5,\\n                                                levo = Drevo(4),\\n                                                desno = Drevo(4)))))\"], [\"None\", \"Drevo(8,\\n      levo = Drevo(7,\\n                   levo = Drevo(6,\\n                                levo = Drevo(5),\\n                                desno = Drevo(5)),\\n                   desno = Drevo(6,\\n                                 levo = Drevo(5),\\n                                 desno = Drevo(5))),\\n      desno = Drevo(7,\\n                    levo = Drevo(6,\\n                                 levo = Drevo(5),\\n                                 desno = Drevo(5)),\\n                    desno = Drevo(6,\\n                                  levo = Drevo(5),\\n                                  desno = Drevo(5))))\"], [\"None\", \"Drevo(8,\\n      levo = Drevo(7,\\n                   levo = Drevo(6),\\n                   desno = Drevo(6)),\\n      desno = Drevo(7,\\n                    levo = Drevo(6),\\n                    desno = Drevo(6)))\"], [\"None\", \"Drevo(8,\\n      levo = Drevo(7),\\n      desno = Drevo(7))\"]]", 
      "solution": "class Drevo(Drevo):\n    def odrezi(self, n):\n        # \u010de je drevo prazno, ne naredimo ni\u010desar\n        if self.prazno:\n            pass\n        # \u010de je nivo padel pod ena, drevo izpraznimo\n        elif n < 1:\n            self.prazno = True\n            del self.vsebina\n            del self.levo\n            del self.desno\n        # sicer pore\u017eemo sinova\n        else:\n            self.levo.odrezi(n - 1)\n            self.desno.odrezi(n - 1)", 
      "problem": 61, 
      "validation": "Check.run([\n    \"d = Drevo(5, levo=Drevo(4, desno=Drevo(2)), desno=Drevo(3, levo=Drevo(4), desno=Drevo(4)))\",\n    \"d.odrezi(1)\"\n    ], {'d': Drevo(5)})\nCheck.run([\n    \"d = Drevo(5, levo=Drevo(4, desno=Drevo(2)), desno=Drevo(3, levo=Drevo(4), desno=Drevo(4)))\",\n    \"d.odrezi(2)\"\n    ], {'d': Drevo(5, levo=Drevo(4), desno=Drevo(3))})\nCheck.run([\n    \"d = Drevo(5, levo=Drevo(4, desno=Drevo(2)), desno=Drevo(3, levo=Drevo(4), desno=Drevo(4)))\",\n    \"d.odrezi(3)\"\n    ], {'d': Drevo(5, levo=Drevo(4, desno=Drevo(2)), desno=Drevo(3, levo=Drevo(4), desno=Drevo(4)))})\n_drevesa = [Drevo(), Drevo()]\nfor i in range(1, 10):\n    _drevesa.append(Drevo(i, levo=_drevesa[-1], desno=_drevesa[-1]))\nfor i in range(10, 1, -1):\n    _drevesa[9].odrezi(i)\n    Check.challenge(_drevesa[9])"
    }
  }, 
  {
    "pk": 282, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Z ukazom `obcine$povprecna.druzina <- druzine$povprecje` zemljevid\nopremite s podatki o velikosti dru\u017ein, nato pa z ukazom\n`spplot(obcine, \"povprecna.druzina\")` nari\u0161ite zemljevid, s katerega\nse vidi dru\u017einska politika.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "obcine$povprecna.druzina <- druzine$povprecje\nspplot(obcine, \"povprecna.druzina\")", 
      "problem": 87, 
      "validation": ""
    }
  }, 
  {
    "pk": 218, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "S pomo\u010djo ukazov `factor` in `ordered` spremenite barvo o\u010di v imensko,\r\noceno mase pa v urejenostno spremenljivko.", 
      "timestamp": "2012-11-19 13:43:16", 
      "challenge": "[]", 
      "solution": "podatki$barva.oci <- factor(podatki$barva.oci)\r\npodatki$ocena.mase <-\r\n    ordered(podatki$ocena.mase,\r\n            levels = c(\"znizana\", \"normalna\", \"zvisana\", \"debelost\"))", 
      "problem": 65, 
      "validation": "if(!(\"factor\" %in% attr(podatki$barva.oci, \"class\")))\r\n  check$error(\"Ocena mase ni imenska spremenljivka.\")\r\nif(!(\"ordered\" %in% attr(podatki$ocena.mase, \"class\")))\r\n  check$error(\"Ocena mase ni urejenostna spremenljivka.\")\r\ncheck$equal(levels(podatki$ocena.mase), c(\"znizana\", \"normalna\", \"zvisana\", \"debelost\"))"
    }
  }, 
  {
    "pk": 165, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Definirajte metodo  `__eq__`, ki vrne `True` \u010de sta dva ulomka\nenaka, in `False` sicer.", 
      "timestamp": "2012-10-24 13:43:41", 
      "challenge": "[]", 
      "solution": "class Ulomek(Ulomek):\n    def __eq__(self, other):\n        return self.st == other.st and self.im == other.im", 
      "problem": 50, 
      "validation": "Check.equal('Ulomek(20, 6) == Ulomek(10, 3)', True)\nCheck.equal('Ulomek(-10, 3) == Ulomek(10, 3)', False)\nCheck.equal('Ulomek(1, 4) == Ulomek(4, 1)', False)"
    }
  }, 
  {
    "pk": 459, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Popravi funkcijo `nizi3` tako, da bo upo\u0161tevala \"\" kot en narekovaj,\nki je del niza, \u010de se nahaja v nizu. \u0160e vedno pa naj ne upo\u0161teva\nnarekovajev, pred katerimi se nahaja znak '\\'. Funkcija naj se imenuje\n`nizi4`.\n\nPrimer: \u010ce je v vhodni datoteki vrstica\n    abc \"\" def \"nekaj \"\" in to\" je vse\npotem mora va\u0161a funkcija v izhodno datoteko zapisati\n    nekaj \" in to", 
      "timestamp": "2012-05-13 08:42:51", 
      "challenge": "[]", 
      "solution": "def nizi4(vhod, izhod):\n    with open(vhod) as fv, open(izhod, \"w\") as fi:\n        vNizu=False\n        ignoriraj=False\n        narekovaj=False\n        niz=\"\"\n        for vrstica in fv:\n            for z in vrstica:\n                if z=='\\\\':\n                    ignoriraj=True\n                    narekovaj=False\n                elif z=='\"' and not ignoriraj:\n                    if narekovaj: # dvojni narekovaj!\n                        narekovaj=False\n                        vNizu= not vNizu\n                        if vNizu: # ce smo v nizu, dodajmo en narekovaj\n                            niz+=z\n                            continue\n                    else:\n                        narekovaj=True\n                        vNizu= not vNizu\n                        continue\n                else:\n                    ignoriraj=False # znak ni nagibnica ali narekovaj\n                    narekovaj=False\n                if vNizu:\n                    niz+=z\n                elif len(niz)>0: # nismo ve\u010d v nizu\n                    print(niz, file=fi)\n                    niz=\"\"", 
      "problem": 152, 
      "validation": "_makefile1(\"_test1.txt\")\nnizi4(\"_test1.txt\",\"_test2.txt\")\n_makefile4(\"_test3.txt\")\nif not _istedatoteke(\"_test2.txt\",\"_test3.txt\",\"_test1.txt\"):\n    Check.error(\"Izhodna datoteka je napa\u010dna\")\n_removefiles(\"_test1.txt\",\"_test2.txt\",\"_test3.txt\")"
    }
  }, 
  {
    "pk": 247, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Definirajte metodo  `__eq__`, ki vrne `True` \u010de sta dva ulomka\nenaka, in `False` sicer.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "# def __eq__(self, other):\n#     return self.st == other.st and self.im == other.im", 
      "problem": 73, 
      "validation": "Check.equal('Ulomek(20, 6) == Ulomek(10, 3)', True)\nCheck.equal('Ulomek(-10, 3) == Ulomek(10, 3)', False)\nCheck.equal('Ulomek(1, 4) == Ulomek(4, 1)', False)"
    }
  }, 
  {
    "pk": 812, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavite funkcijo `sestej(mat1, mat2)`, ki se\u0161teje matriki\n`mat1` in `mat2`.", 
      "timestamp": "2012-10-01 12:27:45", 
      "challenge": "[[\"None\", \"[[0, 2, 8, 18, 32, 50, 72, 98], [6, 8, 14, 24, 38, 56, 78, 104], [12, 14, 20, 30, 44, 62, 84, 110], [18, 20, 26, 36, 50, 68, 90, 116], [24, 26, 32, 42, 56, 74, 96, 122], [30, 32, 38, 48, 62, 80, 102, 128], [36, 38, 44, 54, 68, 86, 108, 134], [42, 44, 50, 60, 74, 92, 114, 140]]\"]]", 
      "solution": "def sestej(mat1, mat2):\n    return [[x+y for (x,y) in zip(u,v)] for (u,v) in zip(mat1,mat2)]", 
      "problem": 254, 
      "validation": "Check.equal('sestej([[1, 3], [2, 4]], [[5, 6], [7, 8]])', [[6, 9], [9, 12]])\nCheck.equal('sestej([[1], [5]], [[5], [1]])', [[6], [6]])\nCheck.challenge(sestej(_mat, _mat))"
    }
  }, 
  {
    "pk": 887, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Matrika $P$ ima posebno lastnost, saj se njene vrstice se\u0161tejejo v $1$.\nTaki matriki pravimo tudi Markovska matrika. Stvari postanejo zanimive,\n\u010de tako matriko potenciramo. \u010ce se spomnimo, nam matrika $P$ poda\nverjetnosti za premik v naslednji potezi. Matrika $P^2$ pa nam podaja\nverjetnosti za premik v naslednjih dveh potezah, $P^3$ v naslednjih\ntreh in tako naprej.\n\n\u010ce matriko potenciramo na dovolj veliko \u0161tevilo (ali pa \u010de izra\u010dunamo\nustrezen lastni vektor), dobimo verjetnost, da pristanemo na danem\npolju, ko gre \u0161tevilo metov proti neskon\u010dnosti.\n\nIzra\u010dunajte vektor `verjetnosti.polj`, ki za vsa polja vsebuje\nverjetnosti, da se po dovolj velikem \u0161tevilu metov znajdemo na njih.", 
      "timestamp": "2012-12-21 10:24:50", 
      "challenge": "[[\"NA\", \"0.024643\"], [\"NA\", \"0.017094\"], [\"NA\", \"0.017283\"], [\"NA\", \"0.017452\"], [\"NA\", \"0.018758\"], [\"NA\", \"0.022913\"], [\"NA\", \"0.018234\"], [\"NA\", \"0.018596\"], [\"NA\", \"0.018645\"], [\"NA\", \"0.018504\"], [\"NA\", \"0.018263\"], [\"NA\", \"0.02197\"], [\"NA\", \"0.024845\"], [\"NA\", \"0.017443\"], [\"NA\", \"0.022221\"], [\"NA\", \"0.019157\"], [\"NA\", \"0.023281\"], [\"NA\", \"0.019045\"], [\"NA\", \"0.024473\"], [\"NA\", \"0.021883\"], [\"NA\", \"0.025382\"], [\"NA\", \"0.02085\"], [\"NA\", \"0.025816\"], [\"NA\", \"0.0213\"], [\"NA\", \"0.024988\"], [\"NA\", \"0.022725\"], [\"NA\", \"0.02118\"], [\"NA\", \"0.021148\"], [\"NA\", \"0.022526\"], [\"NA\", \"0.020637\"], [\"NA\", \"0.021007\"], [\"NA\", \"0.02123\"], [\"NA\", \"0.020745\"], [\"NA\", \"0.021339\"], [\"NA\", \"0.019748\"], [\"NA\", \"0.019225\"], [\"NA\", \"0.018313\"], [\"NA\", \"0.01738\"], [\"NA\", \"0.017364\"], [\"NA\", \"0.021203\"], [\"NA\", \"0.171191\"]]", 
      "solution": "lastni <- Re(eigen(t(verjetnosti))$vectors[, 1])\nverjetnosti.polj <- lastni / sum(lastni)", 
      "problem": 293, 
      "validation": "verj.polj <- c(0.025, 0.017, 0.017, 0.017, 0.019, 0.023, 0.018, \n          0.019, 0.019, 0.019, 0.018, 0.022, 0.025, 0.017, 0.022, 0.019, \n          0.023, 0.019, 0.024, 0.022, 0.025, 0.021, 0.026, 0.021, 0.025, \n          0.023, 0.021, 0.021, 0.023, 0.021, 0.021, 0.021, 0.021, 0.021, \n          0.02, 0.019, 0.018, 0.017, 0.017, 0.021, 0.171)\n\nnapake <- 0\nfor(i in 1 : 41) {\n  if(napake > 10) break\n  if(round(verjetnosti.polj[i], 3) != verj.polj[i]) {\n    check$error(\"Verjetnost polja %s je pribli\u017eno %.3f namesto %.3f.\",\n                imena.polj[i], verjetnosti.polj[i], verj.polj[i])\n    napake <- napake + 1\n  }\n}\n\nfor(i in 1 : 41)\n  check$challenge(verjetnosti.polj[i])"
    }
  }, 
  {
    "pk": 290, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavite funkcijo `lepo.prikazi(...)`, ki ponuja \u010dim bolj\u0161i\nuporabni\u0161ki vmesnik do \u010dim lep\u0161e predstavitve podatkov.\nPoskusite narediti logaritemske lestvice, barvanje, izbiranje dr\u017eav,\npove\u010davo okna, in tako naprej.\n\nNamig: `manipulate` (le v RStudiu), `locator`, \u2026", 
      "timestamp": "2013-01-02 09:44:07", 
      "challenge": "[]", 
      "solution": "library(manipulate)\n\nlog.lestvice <- function(logx, logy) {\n  paste(c(\"x\", \"y\")[c(logx, logy)], collapse = \"\")\n}\n\nlepo.prikazi <- function(x, y, velikost) {\n  prikazi <- function(x, y, velikost, leto, inch = 1/3, ...) {\n    leto <- paste(\"X\", leto, sep = \"\")\n    plot(c(), xlim = c(min(x, na.rm=TRUE), max(x, na.rm=TRUE)),\n            ylim = c(min(y, na.rm=TRUE), max(y, na.rm=TRUE)), ...)\n    symbols(x[[leto]], y[[leto]], sqrt(velikost[[leto]]), bg = 1:nrow(x),\n            inches = inch, add=TRUE)\n  }\n  manipulate(prikazi(x, y, velikost, leto,\n                    log=log.lestvice(logx,logy)),\n             leto=slider(1900,2010), logx=checkbox(), logy=checkbox())\n}", 
      "problem": 92, 
      "validation": ""
    }
  }, 
  {
    "pk": 28, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavite funkcijo `tarca(meti)`, ki za parameter dobi seznam koordinat\nzadetkov v tar\u010do, ter vrne skupno \u0161tevilo dose\u017eenih to\u010dk.\nKoordinate so predstavljene s pari `(x, y)` in so merjene v centimetrih\nrelativno glede na sredino tar\u010de (z drugimi besedami, sredina tar\u010de ima\nkoordinate `(0, 0)`).\n\nPravila to\u010dkovanja: \u010de je zadetek od sredi\u0161\u010da oddaljen manj kot 1 cm,\ndobi 10 to\u010dk. \u010ce je odmaknjen vsaj 1 cm, a manj kot 2 cm, dobi 9 to\u010dk.\n\u010ce je odmaknjen vsaj 2 cm, a manj kot 3 cm, dobi 8 to\u010dk, in tako naprej.\nZadetki, oddaljeni 10 cm in ve\u010d, ne dobijo to\u010dk.\n\nV spodnjem primeru je prvi zadetek vreden 10, drugi 5, tretji 10 in\nzadnji 0 to\u010dk.\n\n    >>> tarca([(-0.5, 0.3), (4, 3), (0, 0), (100, 20)])\n    25", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"None\", \"0\"], [\"None\", \"5\"], [\"None\", \"6\"], [\"None\", \"5\"], [\"None\", \"8\"], [\"None\", \"8\"], [\"None\", \"9\"], [\"None\", \"6\"], [\"None\", \"8\"], [\"None\", \"13\"], [\"None\", \"13\"], [\"None\", \"12\"], [\"None\", \"13\"], [\"None\", \"13\"], [\"None\", \"13\"], [\"None\", \"7\"], [\"None\", \"17\"], [\"None\", \"12\"], [\"None\", \"17\"], [\"None\", \"16\"], [\"None\", \"13\"], [\"None\", \"19\"], [\"None\", \"22\"], [\"None\", \"14\"], [\"None\", \"19\"], [\"None\", \"13\"], [\"None\", \"14\"], [\"None\", \"16\"], [\"None\", \"22\"], [\"None\", \"13\"], [\"None\", \"19\"], [\"None\", \"11\"], [\"None\", \"22\"], [\"None\", \"20\"], [\"None\", \"13\"], [\"None\", \"15\"], [\"None\", \"21\"], [\"None\", \"21\"], [\"None\", \"13\"], [\"None\", \"18\"], [\"None\", \"23\"], [\"None\", \"13\"], [\"None\", \"22\"], [\"None\", \"23\"], [\"None\", \"16\"], [\"None\", \"21\"], [\"None\", \"23\"], [\"None\", \"16\"], [\"None\", \"16\"], [\"None\", \"23\"], [\"None\", \"21\"], [\"None\", \"16\"], [\"None\", \"13\"], [\"None\", \"20\"], [\"None\", \"16\"], [\"None\", \"16\"], [\"None\", \"20\"], [\"None\", \"25\"], [\"None\", \"19\"], [\"None\", \"16\"], [\"None\", \"15\"], [\"None\", \"14\"], [\"None\", \"14\"], [\"None\", \"11\"], [\"None\", \"13\"], [\"None\", \"13\"], [\"None\", \"12\"], [\"None\", \"16\"], [\"None\", \"18\"], [\"None\", \"13\"], [\"None\", \"18\"], [\"None\", \"13\"], [\"None\", \"14\"], [\"None\", \"14\"], [\"None\", \"10\"], [\"None\", \"15\"], [\"None\", \"13\"], [\"None\", \"13\"], [\"None\", \"14\"], [\"None\", \"14\"], [\"None\", \"11\"], [\"None\", \"8\"], [\"None\", \"7\"], [\"None\", \"13\"], [\"None\", \"10\"], [\"None\", \"14\"], [\"None\", \"17\"], [\"None\", \"14\"], [\"None\", \"10\"], [\"None\", \"13\"], [\"None\", \"13\"], [\"None\", \"13\"], [\"None\", \"16\"], [\"None\", \"20\"], [\"None\", \"15\"], [\"None\", \"11\"], [\"None\", \"17\"], [\"None\", \"8\"], [\"None\", \"16\"]]", 
      "solution": "def tarca(meti):\n    tocke = lambda r: max(0, 10 - int(r))\n    return sum([tocke(ravninskaRazdalja(0, 0, x, y)) for x, y in meti])", 
      "problem": 4, 
      "validation": "Check.equal('tarca([(-0.5, 0.3), (4, 3), (0, 0), (100, 20)])', 25)\nCheck.equal('tarca([(1, 2), (4, 3), (5, 6), (8, 7), (9, 10)])', 16)\nCheck.equal('tarca([])', 0)\nfor i in range(1, 100):\n    Check.challenge(int(tarca(\n        [(((k ** 13) % i) / 5, (50 - (k ** 13) % i) / 5) for k in range(1, 10)]\n    )))"
    }
  }, 
  {
    "pk": 267, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavite generator `poGlobini(self)`, ki po globini na\u0161teje vsa\nvozli\u0161\u010da v drevesu.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"None\", \"[1]\"], [\"None\", \"[2, 1]\"], [\"None\", \"[3, 2, 1, 1]\"], [\"None\", \"[4, 3, 2, 1, 1, 2, 1]\"], [\"None\", \"[5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1]\"], [\"None\", \"[6, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 4, 3, 2, 1, 1, 2, 1]\"], [\"None\", \"[7, 6, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 4, 3, 2, 1, 1, 2, 1, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1]\"], [\"None\", \"[8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 4, 3, 2, 1, 1, 2, 1, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 6, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 4, 3, 2, 1, 1, 2, 1]\"], [\"None\", \"[9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 4, 3, 2, 1, 1, 2, 1, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 6, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 4, 3, 2, 1, 1, 2, 1, 7, 6, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 4, 3, 2, 1, 1, 2, 1, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1]\"], [\"None\", \"[10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 4, 3, 2, 1, 1, 2, 1, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 6, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 4, 3, 2, 1, 1, 2, 1, 7, 6, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 4, 3, 2, 1, 1, 2, 1, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 4, 3, 2, 1, 1, 2, 1, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 6, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 4, 3, 2, 1, 1, 2, 1]\"], [\"None\", \"[11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 4, 3, 2, 1, 1, 2, 1, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 6, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 4, 3, 2, 1, 1, 2, 1, 7, 6, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 4, 3, 2, 1, 1, 2, 1, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 4, 3, 2, 1, 1, 2, 1, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 6, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 4, 3, 2, 1, 1, 2, 1, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 4, 3, 2, 1, 1, 2, 1, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 6, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 4, 3, 2, 1, 1, 2, 1, 7, 6, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 4, 3, 2, 1, 1, 2, 1, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1]\"]]", 
      "solution": "class Drevo(Drevo):\n    def poGlobini(self):\n        if not self.prazno:\n            yield self.vsebina\n            for n in self.levo.poGlobini(): yield n\n            for n in self.desno.poGlobini(): yield n", 
      "problem": 79, 
      "validation": "Check.equal('list(Drevo(5, levo=Drevo(4, desno=Drevo(2)), desno=Drevo(3)).poGlobini())', [5, 4, 2, 3])\nCheck.equal('sum(Drevo(5, levo=Drevo(4, desno=Drevo(2)), desno=Drevo(3)).poGlobini())', 14)\nCheck.equal('list(Drevo(5, levo=Drevo(4, desno=Drevo(2)), desno=Drevo(3, levo=Drevo(4), desno=Drevo(4))).poGlobini())', [5, 4, 2, 3, 4, 4])\n_drevesa = [Drevo(), Drevo()]\nfor i in range(1, 12):\n    _drevesa.append(Drevo(i, levo=_drevesa[-1], desno=_drevesa[-2]))\n    Check.challenge(list(_drevesa[-1].poGlobini()))"
    }
  }, 
  {
    "pk": 37, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavite funkcijo `cikli(permutacija)`, ki vrne seznam disjunktnih\nciklov dane permutacije. Vsak cikel naj se za\u010dne z najmanj\u0161im \u0161tevilom\nv ciklu, cikli pa naj bodo urejeni po za\u010detnem \u0161tevilu.\n\n    >>> cikli([3, 2, 1])\n    [[1, 3], [2]]", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"None\", \"[[1, 99], [2, 98], [3, 97], [4, 96], [5, 95], [6, 94], [7, 93], [8, 92], [9, 91], [10, 90], [11, 89], [12, 88], [13, 87], [14, 86], [15, 85], [16, 84], [17, 83], [18, 82], [19, 81], [20, 80], [21, 79], [22, 78], [23, 77], [24, 76], [25, 75], [26, 74], [27, 73], [28, 72], [29, 71], [30, 70], [31, 69], [32, 68], [33, 67], [34, 66], [35, 65], [36, 64], [37, 63], [38, 62], [39, 61], [40, 60], [41, 59], [42, 58], [43, 57], [44, 56], [45, 55], [46, 54], [47, 53], [48, 52], [49, 51], [50]]\"]]", 
      "solution": "def cikli(permutacija):\n    cikli = []\n    stevila = []\n    for i in range(1, len(permutacija) + 1):\n        if i not in stevila:\n            c = cikel(permutacija, i)\n            cikli.append(c)\n            stevila += c\n    return cikli", 
      "problem": 19, 
      "validation": "Check.equal('cikli([3, 4, 2, 1])', [[1, 3, 2, 4]])\nCheck.equal('cikli([3, 2, 1])', [[1, 3], [2]])\nCheck.challenge(cikli([100 - k for k in range(1, 100)]))"
    }
  }, 
  {
    "pk": 256, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavite metodo `__mul__` za mno\u017eenje polinomov.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"None\", \"[1]\"], [\"None\", \"[1, 2]\"], [\"None\", \"[1, 5, 9, 9]\"], [\"None\", \"[1, 5, 9, 13, 12]\"], [\"None\", \"[1, 5, 14, 23, 32, 35, 25]\"], [\"None\", \"[1, 5, 14, 23, 32, 41, 43, 30]\"], [\"None\", \"[1, 5, 14, 30, 46, 62, 78, 86, 77, 49]\"], [\"None\", \"[1, 5, 14, 30, 46, 62, 78, 94, 101, 89, 56]\"], [\"None\", \"[1, 5, 14, 30, 55, 80, 105, 130, 155, 170, 164, 135, 81]\"], [\"None\", \"[1, 5, 14, 30, 55, 80, 105, 130, 155, 180, 194, 185, 151, 90]\"], [\"None\", \"[1, 5, 14, 30, 55, 91, 127, 163, 199, 235, 271, 295, 294, 266, 209, 121]\"], [\"None\", \"[1, 5, 14, 30, 55, 91, 127, 163, 199, 235, 271, 307, 330, 326, 293, 229, 132]\"], [\"None\", \"[1, 5, 14, 30, 55, 91, 140, 189, 238, 287, 336, 385, 434, 469, 475, 450, 392, 299, 169]\"], [\"None\", \"[1, 5, 14, 30, 55, 91, 140, 189, 238, 287, 336, 385, 434, 483, 517, 520, 490, 425, 323, 182]\"], [\"None\", \"[1, 5, 14, 30, 55, 91, 140, 204, 268, 332, 396, 460, 524, 588, 652, 700, 715, 695, 638, 542, 405, 225]\"], [\"None\", \"[1, 5, 14, 30, 55, 91, 140, 204, 268, 332, 396, 460, 524, 588, 652, 716, 763, 775, 750, 686, 581, 433, 240]\"], [\"None\", \"[1, 5, 14, 30, 55, 91, 140, 204, 285, 366, 447, 528, 609, 690, 771, 852, 933, 996, 1022, 1009, 955, 858, 716, 527, 289]\"], [\"None\", \"[1, 5, 14, 30, 55, 91, 140, 204, 285, 366, 447, 528, 609, 690, 771, 852, 933, 1014, 1076, 1099, 1081, 1020, 914, 761, 559, 306]\"], [\"None\", \"[1, 5, 14, 30, 55, 91, 140, 204, 285, 385, 485, 585, 685, 785, 885, 985, 1085, 1185, 1285, 1365, 1404, 1400, 1351, 1255, 1110, 914, 665, 361]\"], [\"None\", \"[1, 5, 14, 30, 55, 91, 140, 204, 285, 385, 485, 585, 685, 785, 885, 985, 1085, 1185, 1285, 1385, 1464, 1500, 1491, 1435, 1330, 1174, 965, 701, 380]\"], [\"None\", \"[1, 5, 14, 30, 55, 91, 140, 204, 285, 385, 506, 627, 748, 869, 990, 1111, 1232, 1353, 1474, 1595, 1716, 1815, 1869, 1876, 1834, 1741, 1595, 1394, 1136, 819, 441]\"], [\"None\", \"[1, 5, 14, 30, 55, 91, 140, 204, 285, 385, 506, 627, 748, 869, 990, 1111, 1232, 1353, 1474, 1595, 1716, 1837, 1935, 1986, 1988, 1939, 1837, 1680, 1466, 1193, 859, 462]\"], [\"None\", \"[1, 5, 14, 30, 55, 91, 140, 204, 285, 385, 506, 650, 794, 938, 1082, 1226, 1370, 1514, 1658, 1802, 1946, 2090, 2234, 2354, 2425, 2445, 2412, 2324, 2179, 1975, 1710, 1382, 989, 529]\"], [\"None\", \"[1, 5, 14, 30, 55, 91, 140, 204, 285, 385, 506, 650, 794, 938, 1082, 1226, 1370, 1514, 1658, 1802, 1946, 2090, 2234, 2378, 2497, 2565, 2580, 2540, 2443, 2287, 2070, 1790, 1445, 1033, 552]\"], [\"None\", \"[1, 5, 14, 30, 55, 91, 140, 204, 285, 385, 506, 650, 819, 988, 1157, 1326, 1495, 1664, 1833, 2002, 2171, 2340, 2509, 2678, 2847, 2990, 3080, 3115, 3093, 3012, 2870, 2665, 2395, 2058, 1652, 1175, 625]\"], [\"None\", \"[1, 5, 14, 30, 55, 91, 140, 204, 285, 385, 506, 650, 819, 988, 1157, 1326, 1495, 1664, 1833, 2002, 2171, 2340, 2509, 2678, 2847, 3016, 3158, 3245, 3275, 3246, 3156, 3003, 2785, 2500, 2146, 1721, 1223, 650]\"], [\"None\", \"[1, 5, 14, 30, 55, 91, 140, 204, 285, 385, 506, 650, 819, 1015, 1211, 1407, 1603, 1799, 1995, 2191, 2387, 2583, 2779, 2975, 3171, 3367, 3563, 3731, 3842, 3894, 3885, 3813, 3676, 3472, 3199, 2855, 2438, 1946, 1377, 729]\"], [\"None\", \"[1, 5, 14, 30, 55, 91, 140, 204, 285, 385, 506, 650, 819, 1015, 1211, 1407, 1603, 1799, 1995, 2191, 2387, 2583, 2779, 2975, 3171, 3367, 3563, 3759, 3926, 4034, 4081, 4065, 3984, 3836, 3619, 3331, 2970, 2534, 2021, 1429, 756]\"]]", 
      "solution": "# def __mul__(self, other):\n#     # \u010de je eden od polinomov ni\u010delen, je ni\u010delen tudi produkt\n#     if not self.koef or not other.koef: return Polinom([])\n#     # oba polinoma z ni\u010dlami podalj\u0161amo do iste dol\u017eine\n#     levi = self.koef + len(other.koef) * [0]\n#     desni = other.koef + len(self.koef) * [0]\n#     koef_prod = [\n#         sum(levi[i] * desni[n - i] for i in range(n + 1))\n#         for n in range(len(levi))\n#     ]\n#     return Polinom(koef_prod)", 
      "problem": 74, 
      "validation": "Check.equal('(Polinom([1, 2, 3]) * Polinom([2])).koef', [2, 4, 6])\nCheck.equal('(Polinom([1, 2, 1]) * Polinom([1, 1])).koef', [1, 3, 3, 1])\nCheck.equal('(Polinom([1, 2, 3]) * Polinom([0, 0, 0])).koef', [])\n\nfor i in range(2, 30):\n    Check.challenge((Polinom(list(range(1, i))) * Polinom(list(range(1, i, 2)))).koef)"
    }
  }, 
  {
    "pk": 201, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "**Negativni cikli v grafu**\n\n\u010ce v grafu dovolimo povezave z *negativno* ceno, se lahko zgodi, da\nse v grafu pojavi *negativni cikel*, to je tako zaporedje povezav\n\n$$i_1 \\to i_2 \\to \\cdots i_k \\to i_1,$$\n\nda je vsota cen negativna. \u010ce gremov ve\u010dkrat naokoli po negativnem\nciklu, lahko naredimo pot s poljubno majhno (negativno) ceno.\n\nSestavi funkcijo `negativni_cikel(g)`, ki sprejme graf `g`, predstavljen\nz matriko razdalj, in vrne negativni cikel, \u010de ta obstaja, sicer `None`.\n\nNamig: na grafu `g` izvedemo Floyd-Warshallov algoritem. Kak\u0161ne bodo vrednosti\nna diagonali vrnjene matrike `d`, \u010de v grafu `g` obstaja negativni cikel?", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "##def negativni_cikel(g):\n##    n = len(g)\n##    (d,p) = floyd_warshall_poti(g)\n##    for i in range(n):\n##        if d[i][i] < 0:\n##            return najkrajsa_pot((d,p), i, i)\n##    return None\n##\n##", 
      "problem": 59, 
      "validation": "##Check.equal(\"\"\"negativni_cikel([[0, -2], [3, 0]])\"\"\", None)\n#Check.equal(\"\"\"negativni_cikel([[0, -2], [1, 0]])\"\"\", None)"
    }
  }, 
  {
    "pk": 109, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavite funkcijo `sestej(mat1, mat2)`, ki se\u0161teje matriki\n`mat1` in `mat2`.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"None\", \"[[0, 2, 8, 18, 32, 50, 72, 98], [6, 8, 14, 24, 38, 56, 78, 104], [12, 14, 20, 30, 44, 62, 84, 110], [18, 20, 26, 36, 50, 68, 90, 116], [24, 26, 32, 42, 56, 74, 96, 122], [30, 32, 38, 48, 62, 80, 102, 128], [36, 38, 44, 54, 68, 86, 108, 134], [42, 44, 50, 60, 74, 92, 114, 140]]\"]]", 
      "solution": "def sestej(mat1, mat2):\n    return [[x+y for (x,y) in zip(u,v)] for (u,v) in zip(mat1,mat2)]", 
      "problem": 41, 
      "validation": "Check.equal('sestej([[1, 3], [2, 4]], [[5, 6], [7, 8]])', [[6, 9], [9, 12]])\nCheck.equal('sestej([[1], [5]], [[5], [1]])', [[6], [6]])\nCheck.challenge(sestej(_mat, _mat))"
    }
  }, 
  {
    "pk": 105, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Ta naloge je malce te\u017eja. Sestavite funkcijo `vsote(n)`, ki\r\nizra\u010duna, na koliko na\u010dinov lahko zapi\u0161emo naravno \u0161tevilo `n` kot\r\nvsoto nara\u0161\u010dajo\u010dega zaporedja naravnih \u0161tevil. Na primer, `vsote(7)`\r\nvrne 5, ker lahko 7 zapi\u0161emo z naslednjimi vsotami:\r\n\r\n    7 = 7\r\n    7 = 1 + 6\r\n    7 = 2 + 5\r\n    7 = 3 + 4\r\n    7 = 1 + 2 + 4", 
      "timestamp": "2012-11-05 01:06:47", 
      "challenge": "[[\"None\", \"[64, 76, 89, 104, 122, 142, 165, 192, 222, 256, 296, 340, 390, 448, 512, 585, 668, 760, 864, 982]\"]]", 
      "solution": "def vsote(n):\r\n    # Pomo\u017ena funkcija, ki \u0161teje vsote \u0161tevila `m`, pri \u010demer mora biti\r\n    # prvi \u010dlen v vsoti ve\u010dji ali enak `j`\r\n    def stej(m,j):\r\n        if m == 0: return 1\r\n        elif j > m: return 0\r\n        else:\r\n            return sum([stej(m-i,i+1) for i in range(j,m+1)])\r\n\r\n    return stej(n,1)", 
      "problem": 29, 
      "validation": "Check.equal(\"vsote(1)\", 1)\r\nCheck.equal(\"vsote(2)\", 1)\r\nCheck.equal(\"vsote(3)\", 2)\r\nCheck.equal(\"vsote(5)\", 3)\r\nCheck.equal(\"vsote(7)\", 5)\r\nCheck.equal(\"vsote(9)\", 8)\r\nCheck.equal(\"vsote(10)\", 10)\r\n\r\nCheck.challenge([vsote(n) for n in range(20,40)])"
    }
  }, 
  {
    "pk": 210, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavite metodo`poGlobini(self)`, ki vrne generator, ki po\r\nglobini na\u0161teje vsa vozli\u0161\u010da v drevesu.", 
      "timestamp": "2012-11-22 12:11:41", 
      "challenge": "[[\"None\", \"[1]\"], [\"None\", \"[2, 1]\"], [\"None\", \"[3, 2, 1, 1]\"], [\"None\", \"[4, 3, 2, 1, 1, 2, 1]\"], [\"None\", \"[5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1]\"], [\"None\", \"[6, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 4, 3, 2, 1, 1, 2, 1]\"], [\"None\", \"[7, 6, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 4, 3, 2, 1, 1, 2, 1, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1]\"], [\"None\", \"[8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 4, 3, 2, 1, 1, 2, 1, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 6, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 4, 3, 2, 1, 1, 2, 1]\"], [\"None\", \"[9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 4, 3, 2, 1, 1, 2, 1, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 6, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 4, 3, 2, 1, 1, 2, 1, 7, 6, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 4, 3, 2, 1, 1, 2, 1, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1]\"], [\"None\", \"[10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 4, 3, 2, 1, 1, 2, 1, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 6, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 4, 3, 2, 1, 1, 2, 1, 7, 6, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 4, 3, 2, 1, 1, 2, 1, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 4, 3, 2, 1, 1, 2, 1, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 6, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 4, 3, 2, 1, 1, 2, 1]\"], [\"None\", \"[11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 4, 3, 2, 1, 1, 2, 1, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 6, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 4, 3, 2, 1, 1, 2, 1, 7, 6, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 4, 3, 2, 1, 1, 2, 1, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 4, 3, 2, 1, 1, 2, 1, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 6, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 4, 3, 2, 1, 1, 2, 1, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 4, 3, 2, 1, 1, 2, 1, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 6, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 4, 3, 2, 1, 1, 2, 1, 7, 6, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 4, 3, 2, 1, 1, 2, 1, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1]\"]]", 
      "solution": "class Drevo(Drevo):\r\n    def poGlobini(self):\r\n        if not self.prazno:\r\n            yield self.vsebina\r\n            for n in self.levo.poGlobini(): yield n\r\n            for n in self.desno.poGlobini(): yield n", 
      "problem": 60, 
      "validation": "Check.equal('list(Drevo(5, levo=Drevo(4, desno=Drevo(2)), desno=Drevo(3)).poGlobini())', [5, 4, 2, 3])\r\nCheck.equal('sum(Drevo(5, levo=Drevo(4, desno=Drevo(2)), desno=Drevo(3)).poGlobini())', 14)\r\nCheck.equal('list(Drevo(5, levo=Drevo(4, desno=Drevo(2)), desno=Drevo(3, levo=Drevo(4), desno=Drevo(4))).poGlobini())', [5, 4, 2, 3, 4, 4])\r\n_drevesa = [Drevo(), Drevo()]\r\nfor i in range(1, 12):\r\n    _drevesa.append(Drevo(i, levo=_drevesa[-1], desno=_drevesa[-2]))\r\n    Check.challenge(list(_drevesa[-1].poGlobini()))"
    }
  }, 
  {
    "pk": 133, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "V spremenljivko `tocke.skupno` shranite vektor s skupnim \u0161tevilom\ndose\u017eenih to\u010dk, urejen od skakalca z najve\u010d do tistega z najmanj\ndose\u017eenimi to\u010dkami.", 
      "timestamp": "2012-12-03 14:09:30", 
      "challenge": "[[\"1\", \"282.5\"], [\"2\", \"279.9\"], [\"3\", \"276.9\"], [\"4\", \"276.3\"], [\"5\", \"274.4\"], [\"6\", \"272.7\"], [\"7\", \"271.3\"], [\"8\", \"270\"], [\"9\", \"267\"], [\"10\", \"266.6\"], [\"11\", \"261.5\"], [\"12\", \"258.6\"], [\"13\", \"254.3\"], [\"14\", \"253.6\"], [\"15\", \"249.3\"], [\"16\", \"246.9\"], [\"17\", \"246\"], [\"18\", \"241.2\"], [\"19\", \"239.4\"], [\"20\", \"235.7\"], [\"21\", \"231.8\"], [\"22\", \"223.6\"], [\"23\", \"219.4\"], [\"24\", \"216.4\"], [\"25\", \"215.3\"], [\"26\", \"213.9\"], [\"27\", \"192.5\"], [\"28\", \"191.2\"], [\"29\", \"154.9\"], [\"30\", \"145.5\"]]", 
      "solution": "skupno <- apply(tocke, 1, sum)\nskupno <- skupno[order(-skupno)]", 
      "problem": 47, 
      "validation": "check$equal(skupno[1:3], structure(c(282.5, 279.9, 276.9), .Names = c(\"Severin Freund\", \n\"Dimitry Vassiliev\", \"Simon Ammann\")))\nfor(i in 1:30)\n  check$challenge(skupno[i], i)"
    }
  }, 
  {
    "pk": 138, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Definirajte razred `Datum`, s katerim predstavimo datum.\nNajprej sestavite konstruktor `__init__(self, dan, mesec, leto)`.", 
      "timestamp": "2012-10-24 13:30:16", 
      "challenge": "[]", 
      "solution": "class Datum:\n    def __init__(self, dan, mesec, leto):\n        self.dan = dan\n        self.mesec = mesec\n        self.leto = leto", 
      "problem": 48, 
      "validation": "Check.equal('Datum(14, 12, 1982).dan', 14)\nCheck.equal('Datum(14, 12, 1982).mesec', 12)\nCheck.equal('Datum(14, 12, 1982).leto', 1982)"
    }
  }, 
  {
    "pk": 32, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavite funkcijo `besede(niz)`, ki sestavi in vrne seznam parov\nindeksov (za\u010detek, konec), ki dolo\u010dajo, kje v danem nizu se nahajajo\nposamezne besede. Beseda je maksimalno zaporedje znakov, ki ne vsebuje\npresledka.\n\n    >>> besede('Danes je lep dan, saj ne de\u017euje.')\n    [(0, 4), (6, 7), (9, 11), (13, 16), (18, 20), (22, 23), (25, 31)]\n    >>> besede(' abc  abc  abc ')\n    [(1, 3), (6, 8), (11, 13)]", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"None\", \"[(0, 0)]\"], [\"None\", \"[(0, 0)]\"], [\"None\", \"[(0, 0)]\"], [\"None\", \"[(0, 1)]\"], [\"None\", \"[(0, 1)]\"], [\"None\", \"[(0, 1)]\"], [\"None\", \"[(0, 2)]\"], [\"None\", \"[(0, 2)]\"], [\"None\", \"[(1, 2)]\"], [\"None\", \"[(0, 2)]\"], [\"None\", \"[(0, 3)]\"], [\"None\", \"[(0, 3)]\"], [\"None\", \"[(0, 3)]\"], [\"None\", \"[(0, 3)]\"], [\"None\", \"[(0, 3)]\"], [\"None\", \"[(0, 2)]\"], [\"None\", \"[(0, 3)]\"], [\"None\", \"[(0, 3)]\"], [\"None\", \"[(1, 3)]\"], [\"None\", \"[(0, 1), (3, 3)]\"], [\"None\", \"[(0, 3)]\"], [\"None\", \"[(0, 3)]\"], [\"None\", \"[(0, 4)]\"], [\"None\", \"[(0, 4)]\"], [\"None\", \"[(0, 4)]\"], [\"None\", \"[(0, 0), (2, 3)]\"], [\"None\", \"[(0, 1), (3, 4)]\"], [\"None\", \"[(0, 4)]\"], [\"None\", \"[(0, 2), (4, 4)]\"], [\"None\", \"[(0, 4)]\"], [\"None\", \"[(0, 4)]\"], [\"None\", \"[(0, 4)]\"], [\"None\", \"[(0, 4)]\"], [\"None\", \"[(0, 0), (2, 4)]\"], [\"None\", \"[(0, 4)]\"], [\"None\", \"[(0, 3)]\"], [\"None\", \"[(0, 2), (4, 4)]\"], [\"None\", \"[(1, 2), (4, 4)]\"], [\"None\", \"[(1, 4)]\"], [\"None\", \"[(1, 4)]\"], [\"None\", \"[(0, 4)]\"], [\"None\", \"[(0, 4)]\"], [\"None\", \"[(0, 4)]\"], [\"None\", \"[(0, 1), (3, 4)]\"], [\"None\", \"[(0, 0), (2, 4)]\"], [\"None\", \"[(0, 3)]\"], [\"None\", \"[(0, 4)]\"], [\"None\", \"[(0, 5)]\"], [\"None\", \"[(0, 2), (4, 5)]\"], [\"None\", \"[(0, 5)]\"], [\"None\", \"[(0, 1), (3, 5)]\"], [\"None\", \"[(0, 3), (5, 5)]\"], [\"None\", \"[(0, 5)]\"], [\"None\", \"[(0, 5)]\"], [\"None\", \"[(0, 0), (2, 5)]\"], [\"None\", \"[(0, 4)]\"], [\"None\", \"[(0, 1), (3, 5)]\"], [\"None\", \"[(0, 1), (3, 5)]\"], [\"None\", \"[(0, 1), (3, 5)]\"], [\"None\", \"[(0, 1), (3, 5)]\"], [\"None\", \"[(0, 5)]\"], [\"None\", \"[(0, 5)]\"], [\"None\", \"[(0, 5)]\"], [\"None\", \"[(0, 0), (2, 5)]\"], [\"None\", \"[(0, 5)]\"], [\"None\", \"[(0, 4)]\"], [\"None\", \"[(0, 5)]\"], [\"None\", \"[(0, 5)]\"], [\"None\", \"[(0, 5)]\"], [\"None\", \"[(0, 2), (4, 5)]\"], [\"None\", \"[(0, 5)]\"], [\"None\", \"[(0, 0), (2, 5)]\"], [\"None\", \"[(0, 5)]\"], [\"None\", \"[(0, 5)]\"], [\"None\", \"[(0, 1), (3, 5)]\"], [\"None\", \"[(0, 4)]\"], [\"None\", \"[(0, 5)]\"], [\"None\", \"[(0, 0), (2, 2), (4, 5)]\"], [\"None\", \"[(0, 2), (5, 5)]\"], [\"None\", \"[(0, 5)]\"], [\"None\", \"[(1, 5)]\"], [\"None\", \"[(1, 5)]\"], [\"None\", \"[(2, 5)]\"], [\"None\", \"[(1, 5)]\"], [\"None\", \"[(1, 5)]\"], [\"None\", \"[(0, 4)]\"], [\"None\", \"[(0, 3), (5, 5)]\"], [\"None\", \"[(0, 0), (2, 2), (4, 5)]\"], [\"None\", \"[(0, 5)]\"], [\"None\", \"[(0, 5)]\"], [\"None\", \"[(0, 5)]\"], [\"None\", \"[(0, 0), (2, 2), (4, 5)]\"], [\"None\", \"[(0, 5)]\"], [\"None\", \"[(0, 3), (5, 5)]\"], [\"None\", \"[(0, 2), (4, 5)]\"], [\"None\", \"[(0, 0), (2, 4)]\"], [\"None\", \"[(0, 5)]\"], [\"None\", \"[(0, 5)]\"], [\"None\", \"[(0, 5)]\"], [\"None\", \"[(0, 5)]\"]]", 
      "solution": "def besede(stavek):\n    indeksi = []\n    # ali smo na\u0161li besedo, ali smo pri presledkih\n    smo_v_besedi = False\n    # zacetek trenutne besede\n    zacetek = 0\n    for i, z in enumerate(stavek):\n        # \u010de smo v besedi in najdemo presledek, dodamo njene indekse v seznam\n        if smo_v_besedi and z == ' ':\n            smo_v_besedi = False\n            indeksi.append((zacetek, i - 1))\n        # \u010de nismo v besedi in najdemo znak, za\u010dnemo z besedo\n        elif not smo_v_besedi and z != ' ':\n            smo_v_besedi = True\n            zacetek = i\n    # \u010de smo na koncu zanke \u0161e vedno v besedi, ta beseda sega do konca\n    if smo_v_besedi:\n        indeksi.append((zacetek, len(stavek) - 1))\n    return indeksi", 
      "problem": 18, 
      "validation": "Check.equal(\"besede('Danes je lep dan, saj ne de\u017euje.')\", [(0, 4), (6, 7), (9, 11), (13, 16), (18, 20), (22, 23), (25, 31)])\nCheck.equal(\"besede(' abc  abc  abc ')\", [(1, 3), (6, 8), (11, 13)])\nfor i in range(100):\n    Check.challenge(besede(str(i ** 3).replace('5', ' ')))"
    }
  }, 
  {
    "pk": 11, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "\u0160tevilo je popolnomaNepopolno, kadar je njegova nepopolnost ve\u010dja od\nnjega samega.\n\nSestavite funkcijo `popolnomaNepopolno(n)`, ki vrne prvo popolnoma\nnepopolno \u0161tevilo, ve\u010dje ali enako `n`.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"None\", \"240\"], [\"None\", \"240\"], [\"None\", \"240\"], [\"None\", \"240\"], [\"None\", \"240\"], [\"None\", \"240\"], [\"None\", \"240\"], [\"None\", \"240\"], [\"None\", \"240\"], [\"None\", \"240\"], [\"None\", \"240\"], [\"None\", \"360\"], [\"None\", \"360\"], [\"None\", \"360\"], [\"None\", \"360\"], [\"None\", \"360\"], [\"None\", \"360\"], [\"None\", \"360\"], [\"None\", \"360\"], [\"None\", \"360\"], [\"None\", \"360\"], [\"None\", \"360\"], [\"None\", \"360\"], [\"None\", \"360\"], [\"None\", \"360\"], [\"None\", \"360\"], [\"None\", \"360\"], [\"None\", \"360\"], [\"None\", \"360\"], [\"None\", \"360\"]]", 
      "solution": "def popolnomaNepopolno(n):\n    while(nepopolnost(n) <= n):\n        n += 1\n    return n", 
      "problem": 8, 
      "validation": "Check.equal('popolnomaNepopolno(181)', 240)\nCheck.equal('popolnomaNepopolno(241)', 360)\nCheck.equal('popolnomaNepopolno(361)', 420)\nfor i in range(230, 260):\n    Check.challenge(popolnomaNepopolno(i))"
    }
  }, 
  {
    "pk": 752, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavite funkcijo `okrajsajVseUcinkovito(niz)`, ki vra\u010da enak rezultat\nkot prej\u0161nja funkcija, vendar u\u010dinkovito tudi za zelo dolge nize.\n\n_Pozor_: testi pri tej nalogi bodo pri u\u010dinkoviti re\u0161itvi opravljeni\ntakoj, pri neu\u010dinkoviti pa v ve\u010d kot eni uri.", 
      "timestamp": "2012-07-12 08:25:27", 
      "challenge": "[[\"None\", \"\"], [\"None\", \"\"], [\"None\", \"\"], [\"None\", \"\"], [\"None\", \"\"], [\"None\", \"\"], [\"None\", \"\"], [\"None\", \"\"], [\"None\", \"\"], [\"None\", \"\"]]", 
      "solution": "def okrajsajVseUcinkovito(niz):\n    sklad = []\n    for znak in niz:\n        if sklad and znak == sklad[-1]:\n            sklad.pop()\n        else:\n            sklad.append(znak)\n    return \"\".join(sklad)", 
      "problem": 236, 
      "validation": "Check.equal(\"okrajsajVseUcinkovito('oddih')\", \"oih\")\nCheck.equal(\"okrajsajVseUcinkovito('aabbcc')\", \"\")\nCheck.equal(\"okrajsajVseUcinkovito('www.yahoo.com')\", \"w.yah.com\")\nCheck.equal(\"okrajsajVseUcinkovito('abcde')\", \"abcde\")\nCheck.equal(\"okrajsajVseUcinkovito('abcdeedcba')\", \"\")\nfor i in range(10):\n    Check.challenge(okrajsajVseUcinkovito((1000 * i) * \"ab\" + (1000 * i) * \"ba\"))"
    }
  }, 
  {
    "pk": 197, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavite metodo `__add__` za se\u0161tevanje polinomov.\n*Pozor:* pri se\u0161tevanju se lahko zgodi, da se nekateri za\u010detni\nkoeficienti pokraj\u0161ajo: $(x^3 + 2 x + 7) + (- x^3 - 2 x + 10) = 17$", 
      "timestamp": "2012-10-26 10:34:05", 
      "challenge": "[]", 
      "solution": "class Polinom(Polinom):\n    def __add__(self, other):\n        # predpostavimo, da ima levi polinom vsaj toliko \u010dlenov kot desni\n        if len(self.koef) < len(other.koef):\n            return other + self\n\n        # nato vzamemo levi polinom in kosoma pri\u0161tevamo desnega\n        koef_vsote = self.koef\n        for n, a in enumerate(other.koef):\n            koef_vsote[n] += a\n\n        return Polinom(koef_vsote)", 
      "problem": 55, 
      "validation": "Check.equal('Polinom([1, 2, 3]) + Polinom([4, 5])', Polinom([5, 7, 3]))\nCheck.equal('Polinom([1, 2, 3]) + Polinom([-1, -2])', Polinom([0, 0, 3]))\nCheck.equal('Polinom([1, 2, 3]) + Polinom([0, 0, -3])', Polinom([1, 2]))"
    }
  }, 
  {
    "pk": 42, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavite funkcijo `zlij`, ki sprejme urejeni tabeli ter ju zlije\nv urejeno tabelo, ki jo vrne.", 
      "timestamp": "2012-10-11 12:20:47", 
      "challenge": "[]", 
      "solution": "def zlij(u,v):\n    \"\"\"Zlij urejeni tabeli u in v in vrni novo urejeno tabelo.\"\"\"\n    m = len(u)\n    n = len(v)\n    w = [0] * (m + n)\n    i = 0\n    j = 0\n    k = 0\n    while k < m + n:\n        if i < m and (j >= n or u[i] < v[j]):\n            w[k] = u[i]\n            i = i + 1\n        else:\n            w[k] = v[j]\n            j = j + 1\n        k = k + 1\n    return w", 
      "problem": 20, 
      "validation": "Check.equal(\"zlij([1,2,3],[4,5,6,7])\", [1,2,3,4,5,6,7])\nCheck.equal(\"zlij([2,4,6,8], [1,3,5,7])\", [1,2,3,4,5,6,7,8])\nCheck.equal(\"zlij([], [2,5,10])\", [2,5,10])\nCheck.equal(\"zlij([1], [])\", [1])\nCheck.equal(\"zlij([1,2,3], [1,2,3])\", [1,1,2,2,3,3])\nCheck.equal(\"zlij([1,1,2,3,4,4], [2,3])\", [1,1,2,2,3,3,4,4])\n\n##Check.challenge(zlij([i * i + 7 for i in range(0,10)], [17 * j + 3 for j in range(0,50)]))\n##Check.challenge(zlij([7] * 13, [7] * 15))"
    }
  }, 
  {
    "pk": 645, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavi funkcijo' verjetnostZmage', ki s pomo\u010djo metode Monte Carlo izra\u010duna verjetnost,\r\nda zmagamo z neko mno\u017eico kart. Funkcija kot parametra dobi mno\u017eico\r\n5 kart in \u0161tevilo ponovitev N, nato pa N krat generira 5 naklju\u010dnih\r\nkart, razli\u010dnih od podanih in pre\u0161teje, kolikokrat podani nabor premaga\r\nnaklju\u010den nabor. Funkcija naj vrne verjetnost, da zmagamo (tj. razmerje\r\nmed \u0161tevilom zmag in \u0161t. poskusov).\r\nPrimer:\r\n    >>> verjetnostZmage({'D6', 'D3', 'A2', 'B9', 'B7'}, 1000)\r\n    0.659", 
      "timestamp": "2012-03-27 08:56:49", 
      "challenge": "[]", 
      "solution": "def verjetnostZmage(karte, N):\r\n    zmagam = 0\r\n    for i in range(N):\r\n        nasprotnik = roka(karte)\r\n        if premaga(karte, nasprotnik):\r\n            zmagam += 1\r\n    return zmagam / N", 
      "problem": 210, 
      "validation": "Check.equal(\"abs(verjetnostZmage({'D6', 'D3', 'A2', 'B9', 'B7'}, 1000)-0.68) < 0.2\", True)\r\nCheck.equal(\"abs(verjetnostZmage({'B4', 'C9', 'A5', 'A7', 'A6'}, 1000)-0.82) < 0.1\", True)"
    }
  }, 
  {
    "pk": 748, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavite funkcijo `potencnaMnozica(mnozica)`, ki vrne seznam vseh\npodmno\u017eic mno\u017eice `mnozica`. Vrstni red mno\u017eic v seznamu ni pomemben.", 
      "timestamp": "2012-07-12 09:32:19", 
      "challenge": "[]", 
      "solution": "def potencnaMnozica(mnozica):\n    if len(mnozica) == 0:\n        return [set()]\n    else:\n        x = mnozica.pop()\n        podmnoziceManjse = potencnaMnozica(mnozica)\n        return podmnoziceManjse + razsiriMnozice(podmnoziceManjse, x)", 
      "problem": 237, 
      "validation": "def vSeznamSeznamov(potencna):\n    return sorted([sorted(list(mnozica)) for mnozica in potencna])\nCheck.equal(\"potencnaMnozica(set())\", [set()], clean=vSeznamSeznamov)\nCheck.equal(\"potencnaMnozica({1})\", [set(), {1}], clean=vSeznamSeznamov)\nCheck.equal(\"potencnaMnozica({'A', 'B'})\", [set(), {'A'}, {'B'}, {'A', 'B'}], clean=vSeznamSeznamov)\nCheck.equal(\"potencnaMnozica({4, 5, 6})\", [set(), {6}, {5}, {5, 6}, {4}, {4, 6}, {4, 5}, {4, 5, 6}], clean=vSeznamSeznamov)"
    }
  }, 
  {
    "pk": 767, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavite funkcijo `s(m)`, ki vrne seznam \u0161tevil $x$, za katere velja\n$f(x)=m$. \u010ce takih \u0161tevil ni, naj funkcija vrne prazen seznam.", 
      "timestamp": "2012-09-05 09:34:47", 
      "challenge": "[[\"None\", \"[]\"], [\"None\", \"[529]\"], [\"None\", \"[]\"], [\"None\", \"[]\"], [\"None\", \"[]\"], [\"None\", \"[]\"], [\"None\", \"[]\"], [\"None\", \"[343]\"], [\"None\", \"[]\"], [\"None\", \"[]\"], [\"None\", \"[]\"], [\"None\", \"[]\"], [\"None\", \"[]\"], [\"None\", \"[93]\"], [\"None\", \"[521]\"], [\"None\", \"[]\"], [\"None\", \"[]\"], [\"None\", \"[307]\"], [\"None\", \"[]\"], [\"None\", \"[]\"], [\"None\", \"[]\"], [\"None\", \"[]\"], [\"None\", \"[513]\"], [\"None\", \"[]\"], [\"None\", \"[]\"], [\"None\", \"[108]\"], [\"None\", \"[]\"], [\"None\", \"[]\"], [\"None\", \"[333, 339]\"], [\"None\", \"[]\"], [\"None\", \"[]\"], [\"None\", \"[165, 171]\"], [\"None\", \"[]\"], [\"None\", \"[]\"], [\"None\", \"[]\"], [\"None\", \"[152]\"], [\"None\", \"[]\"], [\"None\", \"[]\"], [\"None\", \"[572]\"], [\"None\", \"[]\"], [\"None\", \"[]\"], [\"None\", \"[]\"], [\"None\", \"[]\"], [\"None\", \"[]\"], [\"None\", \"[]\"], [\"None\", \"[]\"], [\"None\", \"[419, 425]\"], [\"None\", \"[]\"], [\"None\", \"[]\"], [\"None\", \"[]\"], [\"None\", \"[]\"]]", 
      "solution": "def s(m):\n    return [x for x in range ((m-41)//6, m//6+1) if f(x)==m]", 
      "problem": 245, 
      "validation": "Check.equal(\"s(0)\",[-6,0])\nCheck.equal(\"s(7)\",[-5,1])\nCheck.equal(\"s(63)\",[9])\nCheck.equal(\"s(70)\",[10])\nCheck.equal(\"s(301)\",[49])\n\n_rng=[991]\nfor i in range(50): _rng.append((_rng[-1]*1103515245+12345)%2**32)\nfor i in _rng:\n    Check.challenge(s((i%500)*7+i%11))"
    }
  }, 
  {
    "pk": 756, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavite funkcijo `vsebovaniAntipalindromi(niz)`, ki vrne mno\u017eico vseh\nstrnjenih podnizov niza `niz`, ki so antipalindromi.", 
      "timestamp": "2012-07-14 21:25:49", 
      "challenge": "[]", 
      "solution": "def vsebovaniAntipalindromi(niz):\n    antipalindromi = set()\n    for i in range(len(niz)):\n        for j in range(i + 1, len(niz)+1):\n            podniz = niz[i:j]\n            if jeAntipalindrom(podniz):\n                antipalindromi.add(podniz)\n    return antipalindromi", 
      "problem": 240, 
      "validation": "Check.equal(\"vsebovaniAntipalindromi('veselica')\", {'el', 've', 'selica', 'lica', 'ca', 'elic', 'li', 'vese', 'veseli', 'se', 'veselica', 'eselic', 'ic', 'esel', 'es', 'seli'})\nCheck.equal(\"vsebovaniAntipalindromi('mama')\", {'mama','am', 'ma'})\nCheck.equal(\"vsebovaniAntipalindromi('anketa')\", {'nket', 'nk', 'anke', 'ke', 'keta', 'an', 'et', 'ta'})"
    }
  }, 
  {
    "pk": 716, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Eksponentna funkcija ima to lepo lastnost, da je $$e^x = \\left(e^{\\frac{x}{2}}\\right)^2$$\nTorej lahko z normalizacijo iz prej\u0161nje podnaloge vedno dose\u017eemo, da\nra\u010dunamo vrsto z argumentom, manj\u0161im od 1, pravi rezultat pa potem\ndobimo tako, da na koncu ustrezno mnogokrat kvadriramo.\nSestavite funkcijo `eksp(x)`, ki s pomo\u010djo normalizacije izra\u010duna\nvrednost $e^x$, pri \u010demer se\u0161teje 20 \u010dlenov vrste za normalizirano\nvrednost.", 
      "timestamp": "2012-06-11 15:40:13", 
      "challenge": "[[\"5.778523489932886\", \"323.281509\"], [\"-2.6711409395973154\", \"0.069173\"], [\"-18.986577181208055\", \"0.0\"], [\"-2.684563758389262\", \"0.068251\"], [\"-3.966442953020134\", \"0.018941\"], [\"8.630872483221477\", \"5601.963741\"], [\"13.738255033557047\", \"925653.296375\"], [\"-20.268456375838927\", \"0.0\"], [\"1.1073825503355705\", \"3.026426\"], [\"2.3758389261744965\", \"10.760036\"], [\"-14.046979865771812\", \"1e-06\"], [\"16.697986577181208\", \"17858436.314163\"], [\"16.38255033557047\", \"13027203.88575\"], [\"20.926174496644297\", \"1224960574.868397\"], [\"11.483221476510067\", \"97073.283915\"], [\"9.315436241610739\", \"11108.170989\"], [\"22.476510067114095\", \"5773302248.067025\"], [\"19.12751677852349\", \"202756595.070799\"], [\"9.738255033557047\", \"16953.931513\"], [\"14.013422818791947\", \"1218855.447762\"], [\"-6.328859060402684\", \"0.001784\"], [\"6.912751677852349\", \"1005.008902\"], [\"0.47651006711409394\", \"1.610444\"], [\"-9.691275167785236\", \"6.2e-05\"], [\"-1.308724832214765\", \"0.270164\"], [\"12.738255033557047\", \"340528.817389\"], [\"21.87248322147651\", \"3155722225.985439\"], [\"-14.442953020134228\", \"1e-06\"], [\"-21.201342281879196\", \"0.0\"], [\"-3.825503355704698\", \"0.021807\"], [\"-8.114093959731544\", \"0.000299\"], [\"-10.496644295302014\", \"2.8e-05\"], [\"18.073825503355703\", \"70690765.238136\"], [\"-1.8657718120805369\", \"0.154777\"], [\"-18.02013422818792\", \"0.0\"], [\"13.422818791946309\", \"675236.846455\"], [\"15.36241610738255\", \"4696913.305328\"], [\"-13.48993288590604\", \"1e-06\"], [\"9.281879194630873\", \"10741.598516\"], [\"-0.1342281879194631\", \"0.874391\"], [\"9.644295302013424\", \"15433.493079\"], [\"-14.644295302013424\", \"0.0\"], [\"-17.322147651006713\", \"0.0\"], [\"16.268456375838927\", \"11622534.208462\"], [\"6.02013422818792\", \"411.633845\"], [\"-3.771812080536913\", \"0.02301\"], [\"8.476510067114093\", \"4800.666623\"], [\"3.248322147651007\", \"25.747104\"], [\"-16.02013422818792\", \"0.0\"], [\"9.140939597315436\", \"9329.527013\"], [\"-4.006711409395973\", \"0.018193\"], [\"15.946308724832214\", \"8421585.960471\"], [\"-11.053691275167786\", \"1.6e-05\"], [\"2.563758389261745\", \"12.984527\"], [\"-7.201342281879195\", \"0.000746\"], [\"-16.026845637583893\", \"0.0\"], [\"15.013422818791947\", \"3313192.615169\"], [\"-19.959731543624162\", \"0.0\"], [\"12.100671140939598\", \"179992.622143\"], [\"-15.570469798657719\", \"0.0\"], [\"21.697986577181208\", \"2650426950.017115\"], [\"10.080536912751677\", \"23873.800249\"], [\"-15.25503355704698\", \"0.0\"], [\"-6.25503355704698\", \"0.001921\"], [\"4.489932885906041\", \"89.115465\"], [\"-1.919463087248322\", \"0.146686\"], [\"3.8322147651006713\", \"46.164669\"], [\"-20.563758389261746\", \"0.0\"], [\"-2.3557046979865772\", \"0.094827\"], [\"12.926174496644295\", \"410928.493522\"], [\"21.523489932885905\", \"2226039719.064101\"], [\"12.590604026845638\", \"293785.15881\"], [\"3.6308724832214767\", \"37.745735\"], [\"-17.38255033557047\", \"0.0\"], [\"15.536912751677852\", \"5592364.547551\"], [\"-3.9731543624161074\", \"0.018814\"], [\"-19.644295302013422\", \"0.0\"], [\"-18.322147651006713\", \"0.0\"], [\"4.503355704697986\", \"90.31971\"], [\"-6.899328859060403\", \"0.001008\"], [\"6.530201342281879\", \"685.536225\"], [\"11.073825503355705\", \"64461.633952\"], [\"15.590604026845638\", \"5900832.654771\"], [\"9.234899328859061\", \"10248.630121\"], [\"18.369127516778523\", \"94975309.594365\"], [\"-8.389261744966444\", \"0.000227\"], [\"-17.29530201342282\", \"0.0\"], [\"15.651006711409396\", \"6268243.384592\"], [\"-3.9932885906040267\", \"0.018439\"], [\"-15.93288590604027\", \"0.0\"], [\"-17.644295302013422\", \"0.0\"], [\"13.315436241610739\", \"606485.586241\"], [\"-7.026845637583893\", \"0.000888\"], [\"-10.483221476510067\", \"2.8e-05\"], [\"-0.6510067114093959\", \"0.52152\"], [\"-18.120805369127517\", \"0.0\"], [\"-6.89261744966443\", \"0.001015\"], [\"1.8926174496644295\", \"6.636717\"], [\"-2.3422818791946307\", \"0.096108\"], [\"-14.711409395973154\", \"0.0\"], [\"2.7986577181208054\", \"16.422588\"]]", 
      "solution": "def eksp(x):\n    (y,m)=normaliziraj(x)\n    v=e(y,20)\n    while m>0:\n        v=v**2\n        m-=1\n    return v", 
      "problem": 227, 
      "validation": "Check.equal(\"eksp(1)\", 2.7182818284590438)\nCheck.equal(\"eksp(10)\", 22026.465794806718)\nCheck.equal(\"eksp(100)\", 2.688117141816068e+43)\nCheck.equal(\"eksp(-.3)\",0.7408182206817178)\nCheck.equal(\"eksp(-12)\", 6.144212353328232e-06)\n\n_rng=[8271361]\nfor _i in range(100): _rng.append((_rng[-1]*1103515245+12345)%2**32)\nfor _x in _rng:\n    _v = (_x%7000-3500)/149\n    Check.challenge(eksp(_v),_v)"
    }
  }, 
  {
    "pk": 744, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavite funkcijo `uredi(vhod, izhod)`, ki iz vhodne datoteke prebere\nizdelke, nato pa v izhodno datoteko za vsak izdelek zapi\u0161e ime in \u0161tevilo\npojavitev tega izdelka v vhodni datoteki. Podatka v vsaki vrstici naj\nbosta lo\u010dena s podpi\u010djem (npr. `moka, 1kg;3`), imena izdelkov pa naj\nbodo urejena nara\u0161\u010dajo\u010de po abecedi. V izhodni datoteki se mora\nvsak izdelek pojaviti samo v eni vrstici.", 
      "timestamp": "2012-07-12 11:25:09", 
      "challenge": "[]", 
      "solution": "def uredi(vhod,izhod):\n    skladisce=vSlovar(preberi(vhod))\n    with open(izhod,'w') as f:\n        for izdelek in sorted(skladisce):\n            print('{0};{1}'.format(izdelek,skladisce[izdelek]),file=f)", 
      "problem": 239, 
      "validation": "_d=\"\"\"kruh;3\\nmleko, 1L;2\\nmoka, 1kg;3\"\"\"\n\nwith open(\"_test.12\",\"w\") as _f:\n    _f.write(_d)\n\nuredi('_test.1','_test.11')\nif not _istedatoteke('_test.11', '_test.12'):\n    Check.error(\"Izhodna datoteka je napa\u010dna.\")"
    }
  }, 
  {
    "pk": 381, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Kot pri predprej\u0161nji nalogi generiraj naklju\u010dno besedilo, pri \u010demer tokrat \r\nuporabi frekvence digramov.\r\n\r\nPozor: \u010de za prvi digram naklju\u010dno izberemo \"AN\", potem se mora\r\nnaslednji digram za\u010deti z \"N\", besedi pa nato dodamo samo drugo\r\n\u010drko izbranega digrama (npr. za NA bi tako dobili besedo ANA).\r\n\r\nIme metode naj bo nakljucnoBesedilo2. Besedilo naj vrne v obliki\r\nniza dol\u017eine n, kjer n sprejme kot argument metode.\r\n", 
      "timestamp": "2012-05-12 23:21:53", 
      "challenge": "[]", 
      "solution": "def nakljucnoBesedilo2(dolzina):\r\n    slovar = digrami(\"besedilo.txt\")\r\n    # Sestavimo slovar slovarjev za dane za\u010detke digramov\r\n    superslovar=dict()\r\n    for k in slovar:\r\n        d=superslovar.get(k[0])\r\n        if d==None:\r\n            superslovar[k[0]]=dict()\r\n        superslovar[k[0]][k]=slovar[k]\r\n    # \u0160e normalizacija\r\n    for sl in superslovar.values():\r\n        vsota=sum(sl.values())\r\n        if vsota==0: vsota=1\r\n        for k,v in sl.items():\r\n            sl[k]=v/vsota\r\n    digram=rndd(slovar) # Izberemo naklju\u010den za\u010detni digram\r\n    rezultat=[digram]\r\n    st=2 # \u0160t. znakov do zdaj\r\n    while st < dolzina:\r\n        novi=rndd(superslovar[digram[1]])\r\n        rezultat.append(novi[1])\r\n        digram=novi\r\n        st+=1\r\n    return ''.join(rezultat)", 
      "problem": 132, 
      "validation": ""
    }
  }, 
  {
    "pk": 467, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Borzni posrednik je nekako uspe priti do \u010dasovnega stroja, tako\nda ima podatke o vrednosti delnice za vsak dan za naslednjih nekaj\nmesecev. Sestavi funkcijo `kolikoLahkoZasluzi(cene)`, ki poi\u0161\u010de najve\u010dji\nmo\u017eni zaslu\u017eek. Vrne naj tri podatke: dan, na katerega naj posrednik\nkupi delnice (kot indeks v seznamu), dan, kdaj jih naj proda, ter kak\u0161en\nzaslu\u017eek bo imel. Vrne naj jih kot nabor.\nMetoda kot parameter dobi seznam z vrednostmi delnice po dnevih.\n\u010ce z nakupom delnic ne more zaslu\u017eiti ni\u010desar (npr. \u010de njihova vrednost\nneprestano pada), naj metoda vrne nabor (0,0,0).\nPrimer:\n\n     >>> kolikoLahkoZasluzi([2,3,2])\n     (0, 1, 1)", 
      "timestamp": "2012-04-16 12:56:47", 
      "challenge": "[]", 
      "solution": "def kolikoLahkoZasluzi(cene):\n    (kupim, prodam, maxZasluzek) = (0, 0, 0)\n    for i in range(len(cene)):\n        for j in range(i,len(cene)):\n            zasluzim = cene[j]-cene[i]\n            if zasluzim > maxZasluzek:\n                (kupim, prodam, maxZasluzek) = (i, j, zasluzim)\n    return (kupim, prodam, maxZasluzek)", 
      "problem": 154, 
      "validation": "Check.equal('kolikoLahkoZasluzi([2,3,2])', (0,1,1))\nCheck.equal('kolikoLahkoZasluzi([30, 27, 36, 48, 54, 41, 26, 12, 8, 8])', (1,4,27))\nCheck.equal('kolikoLahkoZasluzi([124, 125, 177, 155, 156, 154, 191, 156, 130, 190, 168, 194, 173, 142, 106, 128, 142, 114, 115, 197, 151, 119, 116, 188, 146, 178, 141, 146, 146, 151, 105, 152, 101, 109, 151, 118, 117, 181, 199, 162, 120, 183, 162, 136, 145, 143, 185, 161, 193, 157, 170, 193, 107, 152, 133, 175, 121, 114, 182, 147, 143, 129, 126, 146, 146, 158, 197, 133, 135, 134, 164, 170, 194, 105, 121, 190, 134, 170, 131, 178, 135, 144, 148, 189, 144, 101, 158, 177, 175, 117, 161, 195, 144, 123, 125, 143, 157, 162, 192, 186])', (32, 38, 98))"
    }
  }, 
  {
    "pk": 704, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Napi\u0161ite funkcijo `poisciMonotone(imena)`, ki danem seznamu imen \npoi\u0161\u010de vse, katerih te\u017ea \u010drk predstavlja monotono zaporedje.", 
      "timestamp": "2012-06-10 01:11:13", 
      "challenge": "[]", 
      "solution": "def jeMonotono( zaporedje ):\n    if len(zaporedje) < 2:\n        return True\n    else:\n        pada = 0\n        narasca = 0\n        for i in range(1,len(zaporedje)):\n            if zaporedje[i-1]<zaporedje[i]:\n                narasca += 1\n            elif zaporedje[i-1]>zaporedje[i]:\n                pada += 1\n        return pada * narasca == 0\n\ndef poisciMonotone( imena ):\n    return [ime for ime in imena if jeMonotono(crkePoVrsti(ime)) ]", 
      "problem": 228, 
      "validation": "Check.equal('poisciMonotone( [\"Ana\",\"Beno\",\"Maja\",\"\u017diga\"] )', [\"Beno\",\"\u017diga\"] )"
    }
  }, 
  {
    "pk": 451, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavi funkcijo `najvecjidvig(seznam)`, ki za dani seznam glasov\npoi\u0161\u010de najve\u010dji relativni dvig glasov.", 
      "timestamp": "2012-04-16 12:30:21", 
      "challenge": "[]", 
      "solution": "def najvecjidvig(s):\n    s[0]\n    p=0\n    for i in range(len(s)):\n        if p+s[i] > 0:\n            p+= s[i]\n            if p > m: m=p\n        else:\n            if s[i] > m: m=s[i]\n            p=0\n    return m\n\n# nalogo lahko re\u0161imo tudi s pomo\u010djo izpeljanih seznamov\ndef najvecjidvig(s):\n    return max( [sum(s[i:j+1]) for i in range(len(s)) for j in range(i,len(s))])", 
      "problem": 150, 
      "validation": "Check.equal('najvecjidvig([1, 2, -3, 1])', 3)\nCheck.equal('najvecjidvig([1, -5, -2, 3, 4])', 7)\nCheck.equal('najvecjidvig([1, -5, -2, 3, 4, 2, -1, 5, -3, 4])', 14)"
    }
  }, 
  {
    "pk": 455, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavite funkcijo `vsota(m, k, a, b)`, ki vrne predstavnika za vsoto\nelementov `a` in `b` v mno\u017eici `m` po modulu `k`. \u010ce takega\npredstavnika ni, ali pa \u010de `a` in `b` nista veljavna predstavnika, naj\nfunkcija vrne `None`.", 
      "timestamp": "2012-05-04 11:25:27", 
      "challenge": "[]", 
      "solution": "def vsota(m, k, a, b):\n    veljavni = predstavniki(m, k).values()\n    if a not in veljavni or b not in veljavni:\n        return None\n    else:\n        return predstavnik(m, k, (a + b) % k)", 
      "problem": 151, 
      "validation": "Check.equal('vsota({1, 2, 12, 7, 5, 9, 15}, 4, 1, 7)', 12)\nCheck.equal('vsota({0, 2, 4}, 5, 2, 3)', None)\nCheck.equal('vsota({-11, 11, 7, 3, 10, 19}, 7, 11, -11)', 7)"
    }
  }, 
  {
    "pk": 463, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavi funkcijo `povprecno`, ki pove, koliko je povpre\u010dni skupni\r\npri\u010dakovani \u010das \u010dakanja ladje pred mostovi za dane odpiralne \u010dase.\r\nSprejme naj \u0161tevilo iteracij N ter poljubno \u0161tevilo odpiralnih \u010dasov\r\nmostov. Nato naj N-krat naklju\u010dno iz\u017ereba prihode ladje k mostovom ter\r\nnazadnje vrne povpre\u010dni skupni \u010dakalni \u010das teh N-iteracij. Skupni \u010dakalni\r\n\u010das je vsota vseh posameznih \u010dakalnih \u010dasov. Predpostavi\u0161 lahko, da je N>0.\r\n", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "def povprecno(N, *mostovi):\r\n    cas = 0\r\n    for i in range(N):\r\n        cas += sum(cakanja(*mostovi))\r\n    return cas/N\r\n", 
      "problem": 153, 
      "validation": "Check.equal('sum([povprecno(59) for i in range(100)])', 0, \"Funkcija vra\u010da napa\u010dne vrednosti\")\r\nfor i in [randint(5,50) for _ in range(5)]:\r\nCheck.equal('len(set([povprecno(100,{}) for l in range(50)]))>25'.format(i), True, \"Funkcija ne vra\u010da naklju\u010dnih vrednosti\")\r\nfor i,j,k,l in [(randint(10,50), randint(10,50), randint(10,50), randint(10,50)) for x in range(10)]:\r\nCheck.equal('_jeblizu(povprecno(100,{0},{1},{2},{3}),{4},.2)'.format(i,j,k,l, 118-i-j-k-l+(i*i+j*j+k*k+l*l+i+j+k+l)/120),True, \"Funkcija vra\u010da napa\u010dne vrednosti\")"
    }
  }, 
  {
    "pk": 688, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavite funkcijo `inverz(cikli)`, ki vrne seznam ciklov, ki predstavlja\ninverzno permutacijo permutacije, podane s seznamom ciklov `cikli`.\nVsak cikel inverza naj se pri\u010dne z najmanj\u0161im elementom v ciklu, cikli\npa naj bodo urejeni po prvem elementu.", 
      "timestamp": "2012-06-10 18:18:09", 
      "challenge": "[]", 
      "solution": "def inverz(cikli):\n    def urediCikel(cikel):\n        indeksNajmanjsega = cikel.index(min(cikel))\n        return cikel[indeksNajmanjsega:] + cikel[:indeksNajmanjsega]\n    inverz = [urediCikel(cikel[::-1]) for cikel in cikli]\n    inverz.sort(key=lambda cikel: cikel[0])\n    return inverz", 
      "problem": 223, 
      "validation": "Check.equal('inverz([[1, 4], [2, 5, 3]])', [[1, 4], [2, 3, 5]])\nCheck.equal('inverz([[1, 4, 2, 5, 3]])', [[1, 3, 5, 2, 4]])\nCheck.equal('inverz([[1], [4], [2], [5], [3]])', [[1], [2], [3], [4], [5]])\nCheck.equal('inverz([[2, 4, 5], [1, 3]])', [[1, 3], [2, 5, 4]])"
    }
  }, 
  {
    "pk": 602, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavite funkcijo `cikli(permutacija)`, ki vrne seznam disjunktnih\nciklov dane permutacije. Vsak cikel naj se za\u010dne z najmanj\u0161im \u0161tevilom\nv ciklu, cikli pa naj bodo urejeni po za\u010detnem \u0161tevilu.\n\n    >>> cikli({1: 3, 2: 2, 3: 1})\n    [[1, 3], [2]]", 
      "timestamp": "2012-05-07 01:21:59", 
      "challenge": "[]", 
      "solution": "def cikli(permutacija):\n    # V seznam cikli si shranjujemo do sedaj izra\u010dunane cikle, v mno\u017eico\n    # ugotovljena pa vsa tista \u0161tevila, za katera smo \u017ee ugotovili, kateremu\n    # ciklu pripadajo.\n    cikli = []\n    ugotovljena = set()\n    # Nato gremo zaporedoma \u010dez vsa \u0161tevila od 1 do n. \u010ce za neko \u0161tevilo\n    # \u0161e nismo ugotovili, kam spada, je najmanj\u0161e v svojem ciklu. Zato\n    # izra\u010dunamo njegov cikel, ga dodamo k ciklom, vsa \u0161tevila iz cikla pa\n    # dodamo med ugotovljena.\n    for i in range(1, len(permutacija) + 1):\n        if i not in ugotovljena:\n            c = cikel(permutacija, i)\n            cikli.append(c)\n            ugotovljena.update(c)\n    return cikli", 
      "problem": 199, 
      "validation": "Check.equal('cikli({1: 3, 2: 4, 3: 2, 4: 1})', [[1, 3, 2, 4]])\nCheck.equal('cikli({1: 3, 2: 2, 3: 1})', [[1, 3], [2]])\nCheck.equal('cikli({1: 3, 2: 5, 3: 2, 4: 1, 5: 4})', [[1, 3, 2, 5, 4]])\nCheck.equal('cikli({1: 3, 2: 1, 3: 2, 4: 5, 5: 4})', [[1, 3, 2], [4, 5]])"
    }
  }, 
  {
    "pk": 621, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavite funkcijo `rezultati(vhod, izhod)`, ki kot parametra dobi imeni\r\ndveh datotek. Iz prve naj prebere vrstice s podatki, v drugo pa naj\r\nshrani originalne podatke, skupaj z vsotami (dodano na koncu), v zadnji\r\nvrstici pa naj doda \u0161e povpre\u010dne ocene po posameznih stolpcih, zaokro\u017eene\r\nna dve decimalni mesti. Ime v tej vrstici naj bo `Povprecen Student`.\r\nV izhodni datoteki naj bodo vrstice urejene po priimkih (razen zadnje\r\nvrstice, v kateri so povpre\u010dja). Ne pozabite na povpre\u010dje vsot!", 
      "timestamp": "2012-05-16 15:11:48", 
      "challenge": "[]", 
      "solution": "def rezultati(vhod, izhod):\r\n    s=naloziCSV(vhod)\r\n    f=open(izhod,\"w\")\r\n    # Izra\u010dunamo vsote po vrsticah:\r\n    N=len(s)\r\n    for i in range(N):\r\n        s[i]=s[i]+(sum(s[i][1:]),)\r\n    # Sortiramo po priimkih\r\n    s.sort(key=lambda x: x[0].split(' ')[1])\r\n    # Izra\u010dunamo povpre\u010dja po stolpcih\r\n    M=len(s[0])\r\n    popv=[\"Povpre\u010den \u0160tudent\"]+[round(sum(s[i][j] for i in range(N))/N,2) for j in range(1,M)]\r\n    s.append(tuple(popv))\r\n    # Zapi\u0161emo podatke\r\n    for vrstica in s:\r\n        print(','.join(str(x) for x in vrstica),file=f)\r\n    f.close()", 
      "problem": 204, 
      "validation": "def _makefile1(ime):\r\n    with open(ime, \"w\") as f:\r\n        print(\"Janez Novak,1,3,3,2,0\", file=f)\r\n        print(\"Micka Kovaceva,0,3,2,2,3\", file=f)\r\n        print(\"Peter Klepec,1,0,1,2,1\", file=f)\r\n\r\ndef _makefile3(ime):\r\n    with open(ime, \"w\") as f:\r\n        print(\"Peter Klepec,1,0,1,2,1,5\", file=f)\r\n        print(\"Micka Kovaceva,0,3,2,2,3,10\", file=f)\r\n        print(\"Janez Novak,1,3,3,2,0,9\", file=f)\r\n        print(\"Povprecen Student,0.67,2.0,2.0,2.0,1.33,8.0\", file=f)\r\n\r\ndef _istedatoteke(ena,dva):\r\n    with open(ena) as f1, open(dva) as f2:\r\n        return f1.read().strip() == f2.read().strip()\r\n    \r\ndef _removefiles(*ime):\r\n    import os\r\n    for i in ime: os.remove(i)\r\n\r\n_makefile1(\"_test.csv\")\r\n_makefile3(\"_test2.csv\")\r\nrezultati(\"_test.csv\",\"_test1.csv\")\r\nif not _istedatoteke(\"_test1.csv\", \"_test2.csv\"):\r\n    Check.error(\"Izhodna datoteka je napa\u010dna\")\r\n_removefiles(\"_test.csv\", \"_test1.csv\",\"_test2.csv\")"
    }
  }, 
  {
    "pk": 649, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavite metodo `povprecjeKalorij(vhod, izhod)`, ki kot argumente dobi\ndve datoteki: vhodno in izhodno. Na izhodno datoteko naj za vsako\nvrstico na vhodni datoteki izpi\u0161e \u0161tevilko vrstice (\u0161teti se za\u010dno z\nena), ter povpre\u010dno kalori\u010dno vrednost hrane, ki jo je Tina tisti dan\nzau\u017eila. V zadnjo vrstico pa naj zapi\u0161e povpre\u010dje dnevno pou\u017eitih\nkalorij.", 
      "timestamp": "2012-05-14 06:35:19", 
      "challenge": "[]", 
      "solution": "def povprecjeKalorij(vhod,izhod):\n    suma = 0\n    stevilo = 0\n    with open(vhod) as f:\n        with open(izhod, \"w\") as g:\n            for vrstica in f:\n                izdatki = vrniKalorije(vrstica)\n                stevilo += 1\n                suma += round(sum(izdatki) / len(izdatki))\n                print(stevilo, round(sum(izdatki) / len(izdatki)), file = g)\n            print(round(suma / stevilo), file = g)", 
      "problem": 211, 
      "validation": "def _makefile2(ime):\n    with open(ime, \"w\") as f:\n        print(\"2,35,18,5,78\", file=f)\n        print(\"13,20\", file=f)\n        print(\"8\", file=f)\n        print(\"15,84,2,4,5,16,78,44,21\", file=f)\n        print(\"10,5,50,40\", file=f)\n\ndef _makefile4(ime):\n    with open(ime, \"w\") as f:                                                                                                                                                                     \n        print(\"1 28\", file=f)\n        print(\"2 16\", file=f)\n        print(\"3 8\", file=f)\n        print(\"4 30\", file=f)\n        print(\"5 26\", file=f)\n        print(\"22\", file=f)\n\n\ndef _istedatoteke(ena,dva):\n    with open(ena) as f1, open(dva) as f2:\n        vrste1 = f1.read().strip()\n        vrste2 = f2.read().strip()\n        if vrste1 == vrste2:\n            return True\n        else:\n            print(\"Izhodna datoteka vsebuje naslednje vrstice: \")\n            print(vrste1)\n            print(\"Morala pa bi vsebovati naslednje vrstice: \")\n            print(vrste2)\n    \ndef _removefiles(*ime):\n    import os\n    for i in ime: os.remove(i)\n\n_makefile2(\"_3d.in\")\n_makefile4(\"_3do.out\")\npovprecjeKalorij(\"_3d.in\",\"_3d.out\")\nif not _istedatoteke(\"_3d.out\", \"_3do.out\"):\n    Check.error(\"Izhodna datoteka je napa\u010dna\")\n_removefiles(\"_3d.in\", \"_3do.out\",\"_3d.out\")"
    }
  }, 
  {
    "pk": 700, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Napi\u0161ite metodo `kjeJeZogica(datoteka, zacetek, ovire)`, ki\r\nvrne vektor od za\u010denega do kon\u010dnega polo\u017eaja ali None,\r\n\u010de \u017eogica kdaj vmes pade v oviro.\r\nPosamezni udarci so v polarnih koordinatah zapisani na datoteko, za\u010detek pa je\r\npodan kot par `(x,y)`.", 
      "timestamp": "2012-06-10 15:59:41", 
      "challenge": "[]", 
      "solution": "def kjeJeZogica(datoteka, zacetek, ovire):\r\n    x,y=zacetek\r\n    pot = []\r\n    pot.add((x,y))\r\n    with open(vhod) as f:\r\n        vrstice = f.readlines()\r\n    for vrstica in vrstice:\r\n        polarnekoordinate = vrstica.strip('\\n').split(' ')\r\n        r = int(polarnekoordinate[0])\r\n        fi = int(polarnekoordinate[1])\r\n        x += r * cos(fi * pi / 180)\r\n        y += r * sin(fi * pi / 180)\r\n        pot.add((x,y))\r\n    if not seIzogne(pot, ovire):\r\n        return None\r\n    else:\r\n        return (x-zacetek[0],y-zacetek[0])", 
      "problem": 221, 
      "validation": ""
    }
  }, 
  {
    "pk": 506, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavite funkcijo `najvecVhodnih(g)`, ki vrne tisto vozli\u0161\u010de\nusmerjenega grafa `g`, v katero vodi najve\u010d povezav.\n\u010ce je takih vozli\u0161\u010d ve\u010d, lahko funkcija vrne poljubno izmed njih.", 
      "timestamp": "2012-05-31 11:35:12", 
      "challenge": "[]", 
      "solution": "def najvecVhodnih(g):\n    return najvecIzhodnih(obrni(g))", 
      "problem": 164, 
      "validation": "Check.equal('najvecVhodnih({1: {3}, 2: {1, 3}, 3: set()})', 3)\nCheck.equal('najvecVhodnih({1: {3}, 2: set(), 3: set()})', 3)\nCheck.equal('najvecVhodnih({1: {3, 2}, 2: {1}, 3: {1}})', 1)"
    }
  }, 
  {
    "pk": 684, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavite funkcijo `permanenta(mat)`, ki izra\u010duna permanento\nmatrike `mat`. Predpostavite lahko, da bo `mat` kvadratna matrika.", 
      "timestamp": "2012-06-10 10:06:08", 
      "challenge": "[[\"[[1, 8], [8, 10]]\", \"74\"], [\"[[8, 10, 13], [10, 13, 6], [13, 6, 12]]\", \"6493\"], [\"[[10, 13, 6, 12], [13, 6, 12, 3], [6, 12, 3, 2], [12, 3, 2, 15]]\", \"107647\"], [\"[[13, 6, 12, 3, 2], [6, 12, 3, 2, 15], [12, 3, 2, 15, 14], [3, 2, 15, 14, 5], [2, 15, 14, 5, 11]]\", \"5400031\"], [\"[[6]]\", \"6\"], [\"[[12, 3], [3, 2]]\", \"33\"], [\"[[3, 2, 15], [2, 15, 14], [15, 14, 5]]\", \"5048\"], [\"[[2, 15, 14, 5], [15, 14, 5, 11], [14, 5, 11, 4], [5, 11, 4, 7]]\", \"144690\"], [\"[[15, 14, 5, 11, 4], [14, 5, 11, 4, 7], [5, 11, 4, 7, 9], [11, 4, 7, 9, 16], [4, 7, 9, 16, 0]]\", \"5244942\"], [\"[[14]]\", \"14\"], [\"[[5, 11], [11, 4]]\", \"141\"], [\"[[11, 4, 7], [4, 7, 9], [7, 9, 16]]\", \"3226\"], [\"[[4, 7, 9, 16], [7, 9, 16, 0], [9, 16, 0, 1], [16, 0, 1, 8]]\", \"101949\"], [\"[[7, 9, 16, 0, 1], [9, 16, 0, 1, 8], [16, 0, 1, 8, 10], [0, 1, 8, 10, 13], [1, 8, 10, 13, 6]]\", \"2555278\"], [\"[[9]]\", \"9\"], [\"[[16, 0], [0, 1]]\", \"16\"], [\"[[0, 1, 8], [1, 8, 10], [8, 10, 13]]\", \"685\"], [\"[[1, 8, 10, 13], [8, 10, 13, 6], [10, 13, 6, 12], [13, 6, 12, 3]]\", \"169060\"], [\"[[8, 10, 13, 6, 12], [10, 13, 6, 12, 3], [13, 6, 12, 3, 2], [6, 12, 3, 2, 15], [12, 3, 2, 15, 14]]\", \"5933395\"], [\"[[10]]\", \"10\"], [\"[[13, 6], [6, 12]]\", \"192\"], [\"[[6, 12, 3], [12, 3, 2], [3, 2, 15]]\", \"2625\"], [\"[[12, 3, 2, 15], [3, 2, 15, 14], [2, 15, 14, 5], [15, 14, 5, 11]]\", \"191942\"], [\"[[3, 2, 15, 14, 5], [2, 15, 14, 5, 11], [15, 14, 5, 11, 4], [14, 5, 11, 4, 7], [5, 11, 4, 7, 9]]\", \"5721244\"], [\"[[2]]\", \"2\"], [\"[[15, 14], [14, 5]]\", \"271\"], [\"[[14, 5, 11], [5, 11, 4], [11, 4, 7]]\", \"3248\"], [\"[[5, 11, 4, 7], [11, 4, 7, 9], [4, 7, 9, 16], [7, 9, 16, 0]]\", \"104788\"], [\"[[11, 4, 7, 9, 16], [4, 7, 9, 16, 0], [7, 9, 16, 0, 1], [9, 16, 0, 1, 8], [16, 0, 1, 8, 10]]\", \"3550578\"], [\"[[4]]\", \"4\"], [\"[[7, 9], [9, 16]]\", \"193\"], [\"[[9, 16, 0], [16, 0, 1], [0, 1, 8]]\", \"2057\"], [\"[[16, 0, 1, 8], [0, 1, 8, 10], [1, 8, 10, 13], [8, 10, 13, 6]]\", \"65418\"], [\"[[0, 1, 8, 10, 13], [1, 8, 10, 13, 6], [8, 10, 13, 6, 12], [10, 13, 6, 12, 3], [13, 6, 12, 3, 2]]\", \"4157928\"], [\"[[1]]\", \"1\"], [\"[[8, 10], [10, 13]]\", \"204\"], [\"[[10, 13, 6], [13, 6, 12], [6, 12, 3]]\", \"4215\"], [\"[[13, 6, 12, 3], [6, 12, 3, 2], [12, 3, 2, 15], [3, 2, 15, 14]]\", \"103247\"], [\"[[6, 12, 3, 2, 15], [12, 3, 2, 15, 14], [3, 2, 15, 14, 5], [2, 15, 14, 5, 11], [15, 14, 5, 11, 4]]\", \"7172285\"], [\"[[12]]\", \"12\"], [\"[[3, 2], [2, 15]]\", \"49\"], [\"[[2, 15, 14], [15, 14, 5], [14, 5, 11]]\", \"7677\"], [\"[[15, 14, 5, 11], [14, 5, 11, 4], [5, 11, 4, 7], [11, 4, 7, 9]]\", \"123270\"], [\"[[14, 5, 11, 4, 7], [5, 11, 4, 7, 9], [11, 4, 7, 9, 16], [4, 7, 9, 16, 0], [7, 9, 16, 0, 1]]\", \"3815124\"], [\"[[5]]\", \"5\"], [\"[[11, 4], [4, 7]]\", \"93\"], [\"[[4, 7, 9], [7, 9, 16], [9, 16, 0]]\", \"3769\"], [\"[[7, 9, 16, 0], [9, 16, 0, 1], [16, 0, 1, 8], [0, 1, 8, 10]]\", \"57809\"], [\"[[9, 16, 0, 1, 8], [16, 0, 1, 8, 10], [0, 1, 8, 10, 13], [1, 8, 10, 13, 6], [8, 10, 13, 6, 12]]\", \"3461284\"], [\"[[16]]\", \"16\"], [\"[[0, 1], [1, 8]]\", \"1\"], [\"[[1, 8, 10], [8, 10, 13], [10, 13, 6]]\", \"3693\"], [\"[[8, 10, 13, 6], [10, 13, 6, 12], [13, 6, 12, 3], [6, 12, 3, 2]]\", \"109466\"], [\"[[10, 13, 6, 12, 3], [13, 6, 12, 3, 2], [6, 12, 3, 2, 15], [12, 3, 2, 15, 14], [3, 2, 15, 14, 5]]\", \"4999893\"], [\"[[13]]\", \"13\"], [\"[[6, 12], [12, 3]]\", \"162\"], [\"[[12, 3, 2], [3, 2, 15], [2, 15, 14]]\", \"3350\"], [\"[[3, 2, 15, 14], [2, 15, 14, 5], [15, 14, 5, 11], [14, 5, 11, 4]]\", \"201881\"], [\"[[2, 15, 14, 5, 11], [15, 14, 5, 11, 4], [14, 5, 11, 4, 7], [5, 11, 4, 7, 9], [11, 4, 7, 9, 16]]\", \"6572600\"], [\"[[15]]\", \"15\"], [\"[[14, 5], [5, 11]]\", \"179\"], [\"[[5, 11, 4], [11, 4, 7], [4, 7, 9]]\", \"2194\"], [\"[[11, 4, 7, 9], [4, 7, 9, 16], [7, 9, 16, 0], [9, 16, 0, 1]]\", \"113035\"], [\"[[4, 7, 9, 16, 0], [7, 9, 16, 0, 1], [9, 16, 0, 1, 8], [16, 0, 1, 8, 10], [0, 1, 8, 10, 13]]\", \"2534037\"], [\"[[7]]\", \"7\"], [\"[[9, 16], [16, 0]]\", \"256\"], [\"[[16, 0, 1], [0, 1, 8], [1, 8, 10]]\", \"1185\"], [\"[[0, 1, 8, 10], [1, 8, 10, 13], [8, 10, 13, 6], [10, 13, 6, 12]]\", \"73780\"], [\"[[1, 8, 10, 13, 6], [8, 10, 13, 6, 12], [10, 13, 6, 12, 3], [13, 6, 12, 3, 2], [6, 12, 3, 2, 15]]\", \"4976928\"], [\"[[8]]\", \"8\"], [\"[[10, 13], [13, 6]]\", \"229\"], [\"[[13, 6, 12], [6, 12, 3], [12, 3, 2]]\", \"2661\"], [\"[[6, 12, 3, 2], [12, 3, 2, 15], [3, 2, 15, 14], [2, 15, 14, 5]]\", \"100516\"], [\"[[12, 3, 2, 15, 14], [3, 2, 15, 14, 5], [2, 15, 14, 5, 11], [15, 14, 5, 11, 4], [14, 5, 11, 4, 7]]\", \"7466377\"], [\"[[3]]\", \"3\"], [\"[[2, 15], [15, 14]]\", \"253\"], [\"[[15, 14, 5], [14, 5, 11], [5, 11, 4]]\", \"4564\"], [\"[[14, 5, 11, 4], [5, 11, 4, 7], [11, 4, 7, 9], [4, 7, 9, 16]]\", \"107248\"], [\"[[5, 11, 4, 7, 9], [11, 4, 7, 9, 16], [4, 7, 9, 16, 0], [7, 9, 16, 0, 1], [9, 16, 0, 1, 8]]\", \"3326255\"], [\"[[11]]\", \"11\"], [\"[[4, 7], [7, 9]]\", \"85\"], [\"[[7, 9, 16], [9, 16, 0], [16, 0, 1]]\", \"4289\"], [\"[[9, 16, 0, 1], [16, 0, 1, 8], [0, 1, 8, 10], [1, 8, 10, 13]]\", \"60758\"], [\"[[16, 0, 1, 8, 10], [0, 1, 8, 10, 13], [1, 8, 10, 13, 6], [8, 10, 13, 6, 12], [10, 13, 6, 12, 3]]\", \"4093616\"], [\"[[0]]\", \"0\"], [\"[[1, 8], [8, 10]]\", \"74\"], [\"[[8, 10, 13], [10, 13, 6], [13, 6, 12]]\", \"6493\"], [\"[[10, 13, 6, 12], [13, 6, 12, 3], [6, 12, 3, 2], [12, 3, 2, 15]]\", \"107647\"], [\"[[13, 6, 12, 3, 2], [6, 12, 3, 2, 15], [12, 3, 2, 15, 14], [3, 2, 15, 14, 5], [2, 15, 14, 5, 11]]\", \"5400031\"], [\"[[6]]\", \"6\"], [\"[[12, 3], [3, 2]]\", \"33\"], [\"[[3, 2, 15], [2, 15, 14], [15, 14, 5]]\", \"5048\"], [\"[[2, 15, 14, 5], [15, 14, 5, 11], [14, 5, 11, 4], [5, 11, 4, 7]]\", \"144690\"], [\"[[15, 14, 5, 11, 4], [14, 5, 11, 4, 7], [5, 11, 4, 7, 9], [11, 4, 7, 9, 16], [4, 7, 9, 16, 0]]\", \"5244942\"], [\"[[14]]\", \"14\"], [\"[[5, 11], [11, 4]]\", \"141\"], [\"[[11, 4, 7], [4, 7, 9], [7, 9, 16]]\", \"3226\"], [\"[[4, 7, 9, 16], [7, 9, 16, 0], [9, 16, 0, 1], [16, 0, 1, 8]]\", \"101949\"], [\"[[7, 9, 16, 0, 1], [9, 16, 0, 1, 8], [16, 0, 1, 8, 10], [0, 1, 8, 10, 13], [1, 8, 10, 13, 6]]\", \"2555278\"]]", 
      "solution": "def permanenta(mat):\n    if len(mat) == 1:\n        return mat[0][0]\n    elif len(mat) == 2:\n        return permanenta2x2(mat)\n    else:\n        prvaVrstica = mat[0]\n        perm = 0\n        for i, x in enumerate(prvaVrstica):\n            perm += x * permanenta(brezStolpca(mat[1:], i + 1))\n        return perm", 
      "problem": 220, 
      "validation": "Check.equal('permanenta([[42]])', 42)\nCheck.equal('permanenta([[5, 4], [2, 1]])', 13)\nCheck.equal('permanenta([[6, 4], [3, 1]])', 18)\nCheck.equal('permanenta([[6, 5], [3, 2]])', 27)\nCheck.equal('permanenta([[9, 8, 7], [6, 5, 4], [3, 2, 1]])', 450)\nCheck.equal('permanenta([[1, 2, 3], [4, 5, 6], [7, 8, 9]])', 450)\nfor n in range(1, 100):\n    mat = [[(i + j + n) ** 3 % 17 for i in range(n % 5 + 1)] for j in range(n % 5 + 1)]\n    Check.challenge(permanenta(mat), mat)"
    }
  }, 
  {
    "pk": 531, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Vpi\u0161ite izraz, katerega vrednost je enaka $1 + 2 + \\dots + 2012$.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "2012 * 2013 // 2", 
      "problem": 174, 
      "validation": "x = eval(Check.current[\"solution\"])\nif x != 2025078:\n   Check.error(\"Izraz je napa\u010den.\")"
    }
  }, 
  {
    "pk": 301, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Osemvrsti\u010dno smre\u010dico izpi\u0161ite \u0161e desno poravnano.\nNa primer:\n\n        *\n       **\n      ***\n     ****\n    *****\n\n*Namig*: na za\u010detku vsake vrstice natisnite ustrezno \u0161tevilo presledkov.", 
      "timestamp": "2013-02-25 00:45:43", 
      "challenge": "[]", 
      "solution": "znak = \"*\"\nprint(7 * \" \" + 1 * znak + \"\\n\" +\n      6 * \" \" + 2 * znak + \"\\n\" +\n      5 * \" \" + 3 * znak + \"\\n\" +\n      4 * \" \" + 4 * znak + \"\\n\" +\n      3 * \" \" + 5 * znak + \"\\n\" +\n      2 * \" \" + 6 * znak + \"\\n\" +\n      1 * \" \" + 7 * znak + \"\\n\" +\n      8 * znak)", 
      "problem": 97, 
      "validation": "def izpis(source):\n    import io, sys\n    old_stdout = sys.stdout\n    new_stdout = io.StringIO()\n    sys.stdout = new_stdout\n    exec(source)\n    sys.stdout = old_stdout\n    return new_stdout.getvalue()\n\ndef preveriSmrecico(smrecica, levi, desni, dovoljeni):\n    vrstice = smrecica.splitlines()\n    if len(vrstice) != 8:\n        Check.error(\"Smre\u010dica nima osmih vrstic.\")\n    for i in range(0, min(8, len(vrstice))):\n        vrstica = vrstice[i]\n        if not vrstica.startswith((levi[i] - 1) * \" \"):\n            Check.error(\"{0}. vrstica se ne za\u010dne na {1}. znaku.\".format(i + 1, levi[i]))\n        if len(vrstica.rstrip()) != desni[i]:\n            Check.error(\"{0}. vrstica se ne kon\u010da na {1}. znaku.\".format(i + 1, desni[i]))\n        znaki = vrstica.replace(\" \", \"\")\n        if len(znaki) != i + 1:\n            Check.error(\"{0}. vrstica ni sestavljena iz {0} znakov.\".format(i + 1))\n        if any(znak not in dovoljeni for znak in znaki):\n            Check.error(\"{0}. vrstica vsebuje nedovoljene znake.\".format(i + 1))\n    if len([znak for znak in dovoljeni if znak in smrecica]) > 1:\n        Check.error(\"Smre\u010dica je sestavljena iz razli\u010dnih dovoljenih znakov.\")\n\ndovoljeni = \"*.#$@oO+=\"\nsource = Check.current[\"solution\"]\npreveriSmrecico(izpis(source), range(7, -1, -1), 8 * [8], dovoljeni)"
    }
  }, 
  {
    "pk": 837, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavite funkcijo `potroji(niz)`, ki vrne niz, v katerem je vsak znak\nniza `niz` potrojen.", 
      "timestamp": "2012-10-30 10:21:31", 
      "challenge": "[]", 
      "solution": "potroji <- function(niz, n) {\n  potrojen <- \"\"\n  \n  while (niz != \"\") {\n    znak <- strtrim(niz, 1)\n    niz <- substr(niz, 2, nchar(niz))\n    potrojen <- paste(potrojen, znak, znak, znak, sep = \"\")\n  }\n  return(potrojen)\n}", 
      "problem": 270, 
      "validation": "check$equal(potroji(\"abc\"), \"aaabbbccc\")\ncheck$equal(potroji(\"Juhej\"), \"JJJuuuhhheeejjj\")\ncheck$equal(potroji(\"Trolololo\"), \"TTTrrrooolllooolllooolllooo\")"
    }
  }, 
  {
    "pk": 546, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Napi\u0161ite funkcijo `sahovnica(m, n)`, ki vrne niz, ki izpi\u0161e \u0161ahovsko desko\nrazse\u017enosti $mn\\times mn$, sestavljeno iz znakov `@` in `.`.\nNa primer, klic `print(sahovnica(2, 3))` naj izpi\u0161e:\n\n    @@..@@\n    @@..@@\n    ..@@..\n    ..@@..\n    @@..@@\n    @@..@@\n\nUpo\u0161tevajte, da je `n` lahko tudi liho \u0161tevilo.", 
      "timestamp": "2012-03-05 11:51:28", 
      "challenge": "[]", 
      "solution": "def sahovnica( m, n ):\n    liha = ((m*'@'+m*'.')*(n//2)+(m*'@')*(n%2)+'\\n')*m\n    soda = ((m*'.'+m*'@')*(n//2)+(m*'.')*(n%2)+'\\n')*m\n    return (liha+soda)*(n//2)+liha*(n%2)", 
      "problem": 178, 
      "validation": "Check.equal(\"\"\"sahovnica(1,1)\"\"\", \"@\\n\")\nCheck.equal(\"\"\"sahovnica(2,3)\"\"\", \"@@..@@\\n@@..@@\\n..@@..\\n..@@..\\n@@..@@\\n@@..@@\\n\")\nCheck.equal(\"\"\"sahovnica(2,4)\"\"\", \"@@..@@..\\n@@..@@..\\n..@@..@@\\n..@@..@@\\n@@..@@..\\n@@..@@..\\n..@@..@@\\n..@@..@@\\n\")"
    }
  }, 
  {
    "pk": 557, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "S pomo\u010djo operacije `NeIn` in funkcije `Ne` sestavite funkcijo\n`In(a, b)`, ki vrne rezultat $a \\land b$. Pri tem smete uporabiti\nsamo funkciji `NeIn` in `Ne` in nobenih drugih logi\u010dnih operacij.", 
      "timestamp": "2012-03-11 21:55:29", 
      "challenge": "[]", 
      "solution": "def In(a, b):\n    return Ne(NeIn(a, b))", 
      "problem": 184, 
      "validation": "Check.equal(\"In(False, False)\", False)\nCheck.equal(\"In(False, True)\", False)\nCheck.equal(\"In(True, False)\", False)\nCheck.equal(\"In(True, True)\", True)\n\nfor op in ['not', 'and', 'or', '|', '&']:\n    if op in re.sub(r'#.*', '', Check.current[\"solution\"]):\n        Check.error(\"V funkciji nastopa operacija '{0}'.\".format(op))"
    }
  }, 
  {
    "pk": 567, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Napi\u0161i funkcijo `dolzinaCollatzI(m, n)`, ki vrne tisto \u0161tevilo med `m` in `n`, pri katerem je indeks ustavitve Collatzovega zaporedja s tem za\u010detnim \u010dlenom najve\u010dji. \u010ce je takih \u0161tevil ve\u010d, naj vrne prvo.", 
      "timestamp": "2012-03-19 08:36:42", 
      "challenge": "[]", 
      "solution": "def dolzinaCollatzI(m,n):\r\n    i = m\r\n    mx = dolzinaCollatz(m)\r\n    while m < n:\r\n        m += 1\r\n        mxx = dolzinaCollatz(m)\r\n        if mxx > mx:\r\n            mx = mxx\r\n            i = m\r\n    return i", 
      "problem": 186, 
      "validation": "Check.equal('dolzinaCollatzI(1,1)', 1)\r\nCheck.equal('dolzinaCollatzI(13,13)', 13)\r\nCheck.equal('dolzinaCollatzI(4,16)', 9)\r\nCheck.equal('dolzinaCollatzI(1,42)', 27)"
    }
  }, 
  {
    "pk": 562, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavite funkcijo `eksponentna(n)`, ki izra\u010duna delno vsoto:\n   $$1 + 1 / 1! + 1 / 2! + 1 / 3! + ... + 1 / n!$$", 
      "timestamp": "2012-03-14 09:53:33", 
      "challenge": "[]", 
      "solution": "def eksponentna(n):\n    vsota = 0\n    i = 0\n    clen = 1\n    while i <= n:\n        vsota += clen\n        i += 1\n        clen /= i\n    return vsota", 
      "problem": 109, 
      "validation": "Check.equal('eksponentna(4)', 2.708333333333333)\nCheck.equal('eksponentna(5)', 2.716666666666666)\nCheck.equal('eksponentna(10)', 2.7182818011463845)"
    }
  }, 
  {
    "pk": 609, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavite funkcijo `ploscina(krogi, N)`, ki na slede\u010d na\u010din izra\u010duna\npribli\u017eek plo\u0161\u010dine unije krogov iz danega seznama `krogi`.\nIzbere si `N` to\u010dk v najmanj\u0161em pravokotniku, ki vsebuje vse dane\nkroge. Nato pre\u0161teje \u0161tevilo to\u010dk, ki le\u017eijo v vsaj enem od krogov,\nter to \u0161tevilo deli z `N` in mno\u017ei s plo\u0161\u010dino pravokotnika. Pri tem\nsi lahko pomagate s funkcijo `tocka(a,b,c,d)`, ki vrne naklju\u010dno\nto\u010dko $(x,y)$, kjer je $a\\leq x \\leq b$ in $c\\leq y \\leq d$.", 
      "timestamp": "2012-03-30 12:21:55", 
      "challenge": "[]", 
      "solution": "def ploscina(krogi, N):\n    (a,c,b,d)=pravokotnik(krogi)\n    notri = 0\n    for i in range(N):\n        (x, y) = tocka(a, b, c, d)\n        if vUniji(x, y, krogi): notri += 1\n    return (b - a) * (d - c) * notri / N", 
      "problem": 201, 
      "validation": "Check.equal('3 < ploscina([(0, 0, 1)], 10000) < 3.3', True)#, \"Plo\u0161\u010dina enotskega kroga (0, 0, 1) bi morala biti pribli\u017eno pi.\")\nCheck.equal('12 < ploscina([(0, 0, 2)], 10000) < 13.2', True)#, \"Plo\u0161\u010dina enotskega kroga (0, 0, 2) bi morala biti pribli\u017eno 4 pi.\")\nCheck.equal('6 < ploscina([(0, 0, 1), (2, 2, 1)], 10000) < 6.6', True)#, \"Plo\u0161\u010dina krogov (0, 0, 1) in (2, 2, 1) bi morala biti pribli\u017eno 2 pi.\")"
    }
  }, 
  {
    "pk": 613, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavi funkcijo `odsifriraj(sifra, beseda)`, ki sprejme \u0161ifro in\nza\u0161ifrirano besedilo, vrne pa od\u0161ifrirano besedilo. \u010ce slovar\nni bijekcija (in se torej besedilo ne da nujno od\u0161ifrirati), naj\nfunkcija vrne `None`.", 
      "timestamp": "2012-05-07 01:49:56", 
      "challenge": "[]", 
      "solution": "def odsifriraj(sifra, beseda):\n    inv = inverz(sifra)\n    if inv:\n        return sifriraj(inv, beseda)\n    else:\n        return", 
      "problem": 202, 
      "validation": "Check.equal('odsifriraj(nasa_sifra, \"IRHRINBA\")', \"KOLOKVIJ\")\nCheck.equal('odsifriraj(nasa_sifra, \"JVTVU\")', \"PESEM\")"
    }
  }, 
  {
    "pk": 679, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavite funkcijo `antisimetricna(rel)`, ki vrne `True`, kadar je\nrelacija `rel` antisimetricna.", 
      "timestamp": "2012-06-10 10:06:13", 
      "challenge": "[[\"0\", \"True\"], [\"1\", \"True\"], [\"8\", \"False\"], [\"13\", \"False\"], [\"8\", \"False\"], [\"13\", \"False\"], [\"6\", \"True\"], [\"7\", \"False\"], [\"8\", \"False\"], [\"1\", \"True\"], [\"6\", \"True\"], [\"1\", \"True\"], [\"6\", \"True\"], [\"13\", \"False\"], [\"0\", \"True\"], [\"1\", \"True\"], [\"8\", \"False\"], [\"13\", \"False\"], [\"8\", \"False\"], [\"13\", \"False\"], [\"6\", \"True\"], [\"7\", \"False\"], [\"8\", \"False\"], [\"1\", \"True\"], [\"6\", \"True\"], [\"1\", \"True\"], [\"6\", \"True\"], [\"13\", \"False\"], [\"0\", \"True\"], [\"1\", \"True\"], [\"8\", \"False\"], [\"13\", \"False\"], [\"8\", \"False\"], [\"13\", \"False\"], [\"6\", \"True\"], [\"7\", \"False\"], [\"8\", \"False\"], [\"1\", \"True\"], [\"6\", \"True\"], [\"1\", \"True\"], [\"6\", \"True\"], [\"13\", \"False\"], [\"0\", \"True\"], [\"1\", \"True\"], [\"8\", \"False\"], [\"13\", \"False\"], [\"8\", \"False\"], [\"13\", \"False\"], [\"6\", \"True\"], [\"7\", \"False\"]]", 
      "solution": "def antisimetricna(rel):\n    return all((y, x) not in rel for (x, y) in rel if x != y)", 
      "problem": 222, 
      "validation": "Check.equal('antisimetricna(enako)', True)\nCheck.equal('antisimetricna(vecje)', True)\nCheck.equal('antisimetricna(deli)', True)\nCheck.equal('antisimetricna(manjseAliEnako)', True)\nCheck.equal('antisimetricna(istiOstanek)', False)\nfor k in range(50):\n    n = k ** 3 % 14\n    Check.challenge(antisimetricna({(i, j) for i in range(n) for j in range(n)\n                                if i ** n % 7 == j ** (n + 1) % 7}), n)"
    }
  }, 
  {
    "pk": 901, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Napi\u0161ite funkcijo `mozne_besede(stevilka)`, ki vrne mno\u017eico vseh besede,\nki jih predstavlja dana \u0161tevilka. Pri tem za besede \u0161tejemo le zaporedja\nznakov, pri katerih se izmenjujejo soglasniki in samoglasniki.\n\n    >>> mozne_besede(6262)\n    {'obob', 'nama', 'oboc', 'nana', 'ocob', 'mana', 'ococ', 'mama'}\n    >>> mozne_besede(747)\n    set()", 
      "timestamp": "2013-01-16 17:02:45", 
      "challenge": "[[\"22\", \"['ab', 'ac', 'ba', 'ca']\"], [\"23\", \"['ad', 'af', 'be', 'ce']\"], [\"24\", \"['ag', 'ah', 'bi', 'ci']\"], [\"25\", \"['aj', 'ak', 'al']\"], [\"26\", \"['am', 'an', 'bo', 'co']\"], [\"27\", \"['ap', 'aq', 'ar', 'as']\"], [\"28\", \"['at', 'av', 'bu', 'cu']\"], [\"29\", \"['aw', 'ax', 'ay', 'az']\"], [\"32\", \"['da', 'eb', 'ec', 'fa']\"], [\"33\", \"['de', 'ed', 'ef', 'fe']\"], [\"34\", \"['di', 'eg', 'eh', 'fi']\"], [\"35\", \"['ej', 'ek', 'el']\"], [\"36\", \"['do', 'em', 'en', 'fo']\"], [\"37\", \"['ep', 'eq', 'er', 'es']\"], [\"38\", \"['du', 'et', 'ev', 'fu']\"], [\"39\", \"['ew', 'ex', 'ey', 'ez']\"], [\"42\", \"['ga', 'ha', 'ib', 'ic']\"], [\"43\", \"['ge', 'he', 'id', 'if']\"], [\"44\", \"['gi', 'hi', 'ig', 'ih']\"], [\"45\", \"['ij', 'ik', 'il']\"], [\"46\", \"['go', 'ho', 'im', 'in']\"], [\"47\", \"['ip', 'iq', 'ir', 'is']\"], [\"48\", \"['gu', 'hu', 'it', 'iv']\"], [\"49\", \"['iw', 'ix', 'iy', 'iz']\"], [\"52\", \"['ja', 'ka', 'la']\"], [\"53\", \"['je', 'ke', 'le']\"], [\"54\", \"['ji', 'ki', 'li']\"], [\"55\", \"[]\"], [\"56\", \"['jo', 'ko', 'lo']\"], [\"57\", \"[]\"], [\"58\", \"['ju', 'ku', 'lu']\"], [\"59\", \"[]\"], [\"62\", \"['ma', 'na', 'ob', 'oc']\"], [\"63\", \"['me', 'ne', 'od', 'of']\"], [\"64\", \"['mi', 'ni', 'og', 'oh']\"], [\"65\", \"['oj', 'ok', 'ol']\"], [\"66\", \"['mo', 'no', 'om', 'on']\"], [\"67\", \"['op', 'oq', 'or', 'os']\"], [\"68\", \"['mu', 'nu', 'ot', 'ov']\"], [\"69\", \"['ow', 'ox', 'oy', 'oz']\"], [\"72\", \"['pa', 'qa', 'ra', 'sa']\"], [\"73\", \"['pe', 'qe', 're', 'se']\"], [\"74\", \"['pi', 'qi', 'ri', 'si']\"], [\"75\", \"[]\"], [\"76\", \"['po', 'qo', 'ro', 'so']\"], [\"77\", \"[]\"], [\"78\", \"['pu', 'qu', 'ru', 'su']\"], [\"79\", \"[]\"], [\"82\", \"['ta', 'ub', 'uc', 'va']\"], [\"83\", \"['te', 'ud', 'uf', 've']\"], [\"84\", \"['ti', 'ug', 'uh', 'vi']\"], [\"85\", \"['uj', 'uk', 'ul']\"], [\"86\", \"['to', 'um', 'un', 'vo']\"], [\"87\", \"['up', 'uq', 'ur', 'us']\"], [\"88\", \"['tu', 'ut', 'uv', 'vu']\"], [\"89\", \"['uw', 'ux', 'uy', 'uz']\"], [\"92\", \"['wa', 'xa', 'ya', 'za']\"], [\"93\", \"['we', 'xe', 'ye', 'ze']\"], [\"94\", \"['wi', 'xi', 'yi', 'zi']\"], [\"95\", \"[]\"], [\"96\", \"['wo', 'xo', 'yo', 'zo']\"], [\"97\", \"[]\"], [\"98\", \"['wu', 'xu', 'yu', 'zu']\"], [\"99\", \"[]\"]]", 
      "solution": "def prave_besede(stevilka, koncaj_s_samoglasnikom):\n    if stevilka == 0:\n        return {\"\"}\n    else:\n        samoglasniki = \"aeiou\"\n        if koncaj_s_samoglasnikom:\n            konci = {c for c in mozne_crke(stevilka % 10) if c in samoglasniki}\n        else:\n            konci = {c for c in mozne_crke(stevilka % 10) if c not in samoglasniki}\n        zacetki = prave_besede(stevilka // 10, not koncaj_s_samoglasnikom)\n        return {zac + kon for zac in zacetki for kon in konci}\n\n\ndef mozne_besede(stevilka):\n    return prave_besede(stevilka, True) | prave_besede(stevilka, False)", 
      "problem": 308, 
      "validation": "Check.equal(\"mozne_besede(232)\", {'cec', 'ceb', 'ada', 'beb', 'bec', 'afa'})\nCheck.equal(\"mozne_besede(6262)\", {'obob', 'nama', 'oboc', 'nana', 'ocob', 'mana', 'ococ', 'mama'})\nCheck.equal(\"mozne_besede(7777)\", set())\n\nfor st in range(20, 100):\n    if st % 10 != 0 and st % 10 != 1:\n        Check.challenge(mozne_besede(st), st)"
    }
  }, 
  {
    "pk": 692, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Po zakonu mora najvi\u0161ji objavljeni odstotek zni\u017eanja zajemati vsaj\n\u010detrtino izdelkov na razprodaji. Na primer, \u010de je na razprodaji 100\nrazli\u010dnih izdelkov, lahko re\u010demo, da je razprodaja 50-odstotna le takrat,\nkadar je vsaj 25 izdelkov zni\u017eanih za vsaj polovico.\n\nSestavite funkcijo `znizanje(razprodaja)`, ki vrne najvi\u0161ji dovoljeni\nodstotek zni\u017eanja za izdelke na razprodaji.", 
      "timestamp": "2012-06-11 10:06:35", 
      "challenge": "[]", 
      "solution": "def znizanje(razprodaja):\n    popusti = list(razprodaja.values())\n    popusti.sort(key=lambda popust: -popust)\n    return popusti[(len(popusti) - 1) // 4]", 
      "problem": 226, 
      "validation": "Check.equal(\"znizanje({'nogavice': 50, 'majica': 70})\", 70)\nCheck.equal(\"znizanje({'nogavice': 50, 'hla\u010de': 75, 'jakna': 45})\", 75)\nCheck.equal(\"znizanje({'nogavice': 50, 'hla\u010de': 75, 'jakna': 45, 'majica': 70})\", 75)\nCheck.equal(\"znizanje({'A': 5, 'B': 5, 'C': 4, 'D': 7, 'E': 3, 'F': 9, 'G': 1, 'H': 3})\", 7)"
    }
  }, 
  {
    "pk": 377, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavite funkcijo `gnezdeni_seznami(ime_vhodne, ime_izhodne)`, ki bo\npodatke iz vhodne datoteke zapisala v izhodno datoteko v obliki\nneurejenih gnezdenega seznama. V vhodni datoteki je vsak element seznama\nv svoji vrstici, zamik pred elementom pa dolo\u010da, kako globoko je element\ngnezden.\n\nNa primer, \u010de je v datoteki `seznami.txt` zapisano:\n\n    \u017eivali\n      sesalci\n        slon\n      pti\u010di\n        sini\u010dka\n    rastline\n      sobne rastline\n        difenbahija\n\nbo po klicu `gnezdeni_seznami('seznami.txt', 'seznami.html')` v datoteki\n`seznami.html` zapisano:\n\n    <ul>\n      <li>\u017eivali\n        <ul>\n          <li>sesalci\n            <ul>\n              <li>slon\n            </ul>\n          <li>pti\u010di\n            <ul>\n              <li>sini\u010dka\n            </ul>\n        </ul>\n      <li>rastline\n        <ul>\n          <li>sobne rastline\n            <ul>\n              <li>difenbahija\n            </ul>\n        </ul>\n    </ul>\n\nZna\u010dk `<li>` ne zapirajte.", 
      "timestamp": "2012-05-13 11:53:18", 
      "challenge": "[]", 
      "solution": "def gnezdeni_seznami(ime_vhodne, ime_izhodne):\n    nivo = 0\n    zamik = 2\n    with open(ime_vhodne) as vhodna:\n        with open(ime_izhodne, 'w') as izhodna:\n            for vrstica in vhodna:\n                n = min(i for i in range(len(vrstica)) if vrstica[i] != ' ') // zamik + 1\n                vrstica = vrstica.strip()\n                if n > nivo:\n                    print(2 * zamik * nivo * ' ' + '<ul>', file=izhodna, sep=\"\")\n                    nivo += 1\n                while n < nivo:\n                    nivo -= 1\n                    print(2 * zamik * nivo * ' ' + '</ul>', file=izhodna, sep=\"\")\n                print((2 * zamik * nivo - zamik) * ' ' + '<li>', vrstica, file=izhodna, sep=\"\")\n            while nivo > 0:\n                nivo -= 1\n                print(2 * zamik * nivo * ' ' + '</ul>', file=izhodna, sep=\"\")", 
      "problem": 131, 
      "validation": "in_example = [\"\u017eivali\",\n              \"  sesalci\",\n              \"    slon\",\n              \"  pti\u010di\",\n              \"    sini\u010dka\",\n              \"rastline\",\n              \"  sobne rastline\",\n              \"    difenbahija\"]\nout_example = [\"<ul>\",\n               \"  <li>\u017eivali\",\n               \"    <ul>\",\n               \"      <li>sesalci\",\n               \"        <ul>\",\n               \"          <li>slon\",\n               \"        </ul>\",\n               \"      <li>pti\u010di\",\n               \"        <ul>\",\n               \"          <li>sini\u010dka\",\n               \"        </ul>\",\n               \"    </ul>\",\n               \"  <li>rastline\",\n               \"    <ul>\",\n               \"      <li>sobne rastline\",\n               \"        <ul>\",\n               \"          <li>difenbahija\",\n               \"        </ul>\",\n               \"    </ul>\",\n               \"</ul>\"]\n\nwith Check.in_out_file(in_example, out_example) as (fi, fo):\n    gnezdeni_seznami(fi, fo)"
    }
  }, 
  {
    "pk": 617, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavi funkcijo `povprecnoPovprecje(seznam, m)`, ki izra\u010duna povpre\u010dno\r\npovpre\u010dje, tj. iz podanege seznama tako dolgo ra\u010duna teko\u010da povpre\u010dja,\r\ndokler ne pride do seznama dol\u017eine `m`. Vrne naj povpre\u010dje tega zadnjega\r\nseznama.\r\nPrimer: `povprecnoPovprecje([1, 2, 3, 4, 5, 6], 3)` vrne `3.5`.", 
      "timestamp": "2012-04-25 14:26:27", 
      "challenge": "[]", 
      "solution": "def povprecnoPovprecje(seznam, m):\r\n    s=povprecja(seznam, m)\r\n    while len(s) > m:\r\n        s=povprecja(s, m)\r\n    return povprecje(s)", 
      "problem": 203, 
      "validation": "Check.equal('povprecnoPovprecje([1, 2, 3, 4, 5, 6], 3)', 3.5)\r\nCheck.equal('povprecnoPovprecje([], 1)', 0)"
    }
  }, 
  {
    "pk": 597, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavite funkcijo `razlika(spremembe, i, j)`, ki poi\u0161\u010de razliko\nstanj med dnevoma z indeksom `i` in `j`.\nPredpostavite lahko, da je `i` manj\u0161i ali enak `j`.", 
      "timestamp": "2012-04-24 14:27:15", 
      "challenge": "[]", 
      "solution": "def razlika(spremembe,i,j):\n    return sum(spremembe[i:j])", 
      "problem": 198, 
      "validation": "Check.equal('razlika([1, 2, 3], 2, 3)', 3)\nCheck.equal('razlika([1, -5, -20, 30], 0, 4)', 6)\nCheck.equal('razlika([10, -5, 20, -6], 1, 2)', -5)\nCheck.equal('razlika([10, -5, 20, -6], 2, 4)', 14)"
    }
  }, 
  {
    "pk": 625, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Katere trditve veljajo za slu\u010dajno spremenljivko randint(1,100)?\r\n\r\n1) Zaloga vrednosti je (1,100) \t\r\n\r\n2) Zaloga vrednosti je [1,100) \t\r\n\r\n3) Spremenljivka je enakomerno porazdeljena. \t\r\n\r\n4) Spremenljivka je normalno porazdeljena. \t\r\n\r\n5) Zaloga vrednosti je [1,100]\r\n\r\n6) Zaloga vrednosti so naravna \u0161tevila med 1 in 100\r\n\r\n7) Zaloga vrednosti so naravna \u0161tevila med 1 in 99\r\n\r\n8) Zaloga vrednosti so cela \u0161tevila med 1 in 100\r\n\r\n9) Zaloga vrednosti so cela \u0161tevila med 1 in 99\r\n\r\n10) Ta funkcija ne obstaja\r\n\r\n\r\nSestavite funkcijo naloga16, ki kot rezultat vrne mno\u017eico pravilnih\r\nodgovorov (teh je lahko od 0 do 10, \u010de noben odgovor ni pravilen, naj\r\nfunkcija vrne prazno mno\u017eico).", 
      "timestamp": "2012-03-27 08:51:36", 
      "challenge": "[]", 
      "solution": "def naloga16():\r\n    return {3, 6, 8}", 
      "problem": 205, 
      "validation": "pass\r\n#Check.equal('md5(str(naloga16()).encode()).hexdigest()', 'ce3f059fdf1baedaf5367dbc9dc995a8', \"Odgovor je napa\u010den\")"
    }
  }, 
  {
    "pk": 629, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavi funkcijo `maxdvig(seznam)`, ki poi\u0161\u010de najve\u010dji relativni dvig\r\nnivoja vode. Z drugimi besedami, poi\u0161\u010di najve\u010djo vrednost, ki jo zavzame vsota\r\npoljubnega strnjenega podseznama.", 
      "timestamp": "2012-03-27 08:52:31", 
      "challenge": "[]", 
      "solution": "def maxdvig(spremembe):\r\n    n = len(spremembe)\r\n    return max(relativno(spremembe, i, j)\r\n               for i in range(0, n + 1)\r\n               for j in range(i, n + 1))", 
      "problem": 206, 
      "validation": "Check.equal('maxdvig([10, -13, 3, 20, -2, 5])', 26)\r\nCheck.equal('maxdvig([1, 2, 3])', 6)\r\nCheck.equal('maxdvig([1, -5, -20, 30])', 30)\r\nCheck.equal('maxdvig([10, -5, 20, -6])', 25)"
    }
  }, 
  {
    "pk": 641, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Katere trditve veljajo za slu\u010dajno spremenljivko random()?\r\n\r\n1) Zaloga vrednosti je (0,1) \t\r\n\r\n2) Zaloga vrednosti je [0,1)\r\n\r\n3) Spremenljivka je enakomerno porazdeljena.\r\n\r\n4) Spremenljivka je normalno porazdeljena.\r\n\r\n5) Zaloga vrednosti je [0,1]\r\n\r\n6) Zaloga vrednosti je (0,1]\r\n\r\n7) Zaloga vrednosti so cela \u0161tevila\r\n\r\nSestavite funkcijo naloga16, ki kot rezultat vrne mno\u017eico pravilnih\r\nodgovorov (teh je lahko od 0 do 7, \u010de noben odgovor ni pravilen, naj\r\nfunkcija vrne prazno mno\u017eico)", 
      "timestamp": "2012-03-27 08:53:13", 
      "challenge": "[]", 
      "solution": "def naloga16():\r\n    return {2,3}", 
      "problem": 209, 
      "validation": "Check.equal('md5(str(naloga16()).encode()).hexdigest()', '5ad06bc3b78920bcf496ed9a814cf4db', \"Odgovor je napa\u010den\")"
    }
  }, 
  {
    "pk": 720, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Letna volatilnost delnice je definirana kot ve\u010dkratnik standardnega\r\nodklona logaritemskega povratka:\r\n$$\\sigma^2 = \\frac{252}{n}\\sum_{i=1}^n (x_i-\\mu)^2,$$\r\nkjer je $\\mu$ povpre\u010dna vrednost logaritemskih povratkov, $x_i$ so posamezni logaritemski\r\npovratki, $n$ je \u0161tevilo logaritemskih povratkov, 252 pa predstavlja\r\n\u0161tevilo trgovalnih dni v letu.\r\nSestavite funkcijo `volatilnost(ime_datoteke)`, ki iz datoteke prebere\r\nvrednosti delnice in vrne njeno letno volatilnost $\\sigma$.", 
      "timestamp": "2012-06-10 22:42:01", 
      "challenge": "[]", 
      "solution": "from math import sqrt\r\ndef volatilnost(ime):\r\n    (d,v) = preberi(ime)\r\n    p=povratek(v)\r\n    n=len(p)\r\n    mu=sum(p)/n\r\n    s2=0\r\n    for x in p:\r\n        s2+=(x-mu)**2\r\n    return sqrt(252*s2/n)", 
      "problem": 225, 
      "validation": "Check.equal(\"volatilnost('_test.1')\", 0.397626399171653)\r\nCheck.equal(\"volatilnost('_test.2')\", 0.6798427907021705)"
    }
  }, 
  {
    "pk": 633, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavi funkcijo `vidim(slovar, polozaj, visina)`, ki kot parametre dobi\r\nslovar zasedenosti, polo\u017eaj tvojega sede\u017ea (kot nabor dol\u017eine 2) in tvojo\r\nvi\u0161ino, vrne pa True, \u010de vidi\u0161 na platno in False sicer. Na platno vidi\u0161,\r\n\u010de pred tabo v stolpcu sedijo samo ljudje, ki so strogo ni\u017eji od tebe.", 
      "timestamp": "2012-03-27 08:52:49", 
      "challenge": "[]", 
      "solution": "def vidim(s,kje,v):\r\n    (x, y) = kje\r\n    s = stolpec(s, y)\r\n    return all(v0 < v for (x0, v0) in s.items() if x0 < x)", 
      "problem": 207, 
      "validation": "Check.equal('vidim({(1, 2): 16.5, (3, 2): 17.5, (3, 4): 16.5}, (3, 2), 18.5)', True)\r\nCheck.equal('vidim({(1, 2): 16.5, (3, 2): 17.5, (3, 4): 16.5}, (4, 2), 17.5)', False)\r\nCheck.equal('vidim({(1, 2): 16.5, (3, 2): 17.5, (3, 4): 16.5}, (2, 2), 17.5)', True)"
    }
  }, 
  {
    "pk": 653, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavi funkcijo 'izracunaj', ki kot parameter dobi slovar s spremenljivkami in\r\nnjihovimi vrednostmi in seznam imen nekaterih spremenljivk, vrne pa nabor\r\n(vsota, produkt) vsote in produkta vrednosti spremenljivk, ki so navedene\r\nv seznamu. \u010ce je v seznamu ime spremenljivke, ki je ni v slovarju,\r\nprivzemi, da je vrednost spremenljivke 0 za se\u0161tevanje in 1 za\r\nmno\u017eenje. Predpostavi\u0161 lahko, da bo dol\u017eina seznama imen vsaj ena.\r\nPrimer:\r\n    >>> izracunaj({'a': 1, 'b': 2}, ['a', 'c'])\r\n    (1, 1)", 
      "timestamp": "2012-03-27 08:57:32", 
      "challenge": "[]", 
      "solution": "def izracunaj(slovar, imena):\r\n    (vsota, produkt) = (0, 1)\r\n    for spremenljivka in imena:\r\n        if spremenljivka in slovar:\r\n            (vsota, produkt) = (vsota + slovar[spremenljivka], produkt * slovar[spremenljivka])\r\n    return (vsota, produkt)", 
      "problem": 212, 
      "validation": "Check.equal(\"izracunaj({'a': 1, 'b': 2}, ['a', 'c'])\", (1,1))\r\nCheck.equal(\"izracunaj({'a': 0, 'b': 2, 'c': 3, 'd': -1}, ['a','b','c'])\", (5,0))\r\nCheck.equal(\"izracunaj({'a': 0, 'b': 2, 'c': 3, 'd': -1}, ['e','b','c'])\", (5,6))"
    }
  }, 
  {
    "pk": 905, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavite funkcijo\n`uredi_po_dolzini(ime_vhodne_datoteke, ime_izhodne_datoteke)`,\nki vsebino datoteke z danim imenom preuredi tako, da bodo v njej vrstice\nurejene od najdalj\u0161e do najkraj\u0161e.", 
      "timestamp": "2013-01-16 17:44:13", 
      "challenge": "[]", 
      "solution": "def uredi_po_dolzini(ime_vhodne_datoteke, ime_izhodne_datoteke):\n    with open(ime_vhodne_datoteke) as f:\n        vrstice = f.readlines()\n    vrstice.sort(key=len)\n    with open(ime_izhodne_datoteke, 'w') as f:\n        for vrs in vrstice[::-1]:\n            print(vrs.rstrip(), file=f)", 
      "problem": 307, 
      "validation": "uredi_po_dolzini('test1.txt', 'test1out.txt')\ngiven_lines = [\"so trte vince nam sladk\u00f3,\\n\",\n               \"v potrtih prsih up budi!\\n\",\n               \"srce razj\u00e1sni in oko,\\n\",\n               \"ki nam o\u017eivlja \u017eile,\\n\",\n               \"Prijatlji! odrodile\\n\",\n               \"vse skrbi,\\n\",\n               \"ki utopi\\n\"]\nwith open('test1out.txt') as _f:\n    out_lines = _f.readlines()\nlen_out, len_given = len(out_lines), len(given_lines)\nif len_out < len_given:\n    out_lines += (len_given - len_out) * [\"\\n\"]\nelse:\n    given_lines += (len_out - len_given) * [\"\\n\"]\nequal = True\nline_width = max(len(out_line.rstrip()) for out_line in out_lines + [\"je izhodna datoteka enaka\"])\ndiff = [\"{0}   | namesto:\".format(\"je izhodna datoteka enaka\".ljust(line_width))]\nfor out, given in zip(out_lines, given_lines):\n    out, given = out.rstrip(), given.rstrip()\n    if out != given:\n        equal = False\n    diff.append(\"{0} {1} {2}\".format(out.ljust(line_width), \"|\" if out == given else \"*\", given))\nif not equal:\n    Check.error(\"Za vhodno datoteko 'test1.txt'\\n{0}\".format(\"\\n  \".join(diff)))"
    }
  }, 
  {
    "pk": 657, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavi funkcijo `maxDobicek(stave)`, ki iz danih seznamov stav in rezultatov poi\u0161\u010de\nmaksimalni mo\u017eni zaslu\u017eek za Janeza. Pri tem Janez ne za\u010dne nujno\nigrati na za\u010detku in ne vztraja nujno do konca. Kot argument metoda \nsprejme seznam rezultatov stav (kot v prvi nalogi).\n\n     >>> maxDobicek([1, 1, -1, 1, -1, 1, 1, -1])\n     3", 
      "timestamp": "2012-04-16 13:36:02", 
      "challenge": "[]", 
      "solution": "def maxDobicek(stave):\n    maxZasluzek = 0\n    for i in range(len(stave)):\n        for j in range(i,len(stave)):\n            zasluzim = sum(stave[i:j+1])\n            if zasluzim > maxZasluzek:\n                maxZasluzek = zasluzim\n    return maxZasluzek\n\n# nalogo lahko re\u0161imo s pomo\u010djo izpeljanih seznamov\n\ndef kolikoMax(stave):\n    return max([sum(stave[i:j] for i in range(len(stave)) for j in range(i,len(stave)+1))])", 
      "problem": 213, 
      "validation": "Check.equal('maxDobicek([1, 1, -1, 1, -1, 1, -1, -1, 1, 1])', 2)\nCheck.equal('maxDobicek([1, 1, -1, 1, -1, 1, -1, -1, 1, 1, 1])', 3)\nCheck.equal('maxDobicek([-1, -1, -1, 1, 1, 1, 1, 1, 1, -1])', 6)\nCheck.equal('maxDobicek([-1, -1, -1])', 0)"
    }
  }, 
  {
    "pk": 669, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavite funkcijo `fibonacci(n)`, ki vrne `n`-to Fibonaccijevo \u0161tevilo.\nNalogo re\u0161ite z rekurzijo, torej brez uporabe zank `for` oziroma `while`.\nTesti bodo va\u0161o re\u0161itev preizkusili pri velikih vrednostih argumenta `n`,\nzato re\u0161itev napi\u0161ite u\u010dinkovito.", 
      "timestamp": "2012-05-21 12:50:45", 
      "challenge
      "solution": "#\n# n -ti \u010dlen pri za\u010detnih a_0=a in a_1=b je isto kot (n-1) -vi \u010dlen pri za\u010detnih b, a+b \n#\n#def fibonacci(n):\n#    def fib(n, a, b):\n#        if n == 0:\n#            return b\n#        else:\n#            return fib(n - 1, b, a + b)\n#    return fib(n, 0, 1)\n#\n\ndef fibonacci(n, a=0, b=1):\n    if n == 0:\n        return a\n    else:\n        return fibonacci(n - 1, b, a+b)", 
      "problem": 216, 
      "validation": "if \"for\" in Check.current['solution']:\n    Check.error(\"Re\u0161itev vsebuje zanko for.\")\nelif \"while\" in Check.current['solution']:\n    Check.error(\"Re\u0161itev vsebuje zanko while.\")\nCheck.equal(\"\"\"fibonacci(1)\"\"\", 1)\nCheck.equal(\"\"\"fibonacci(3)\"\"\", 2)\nCheck.equal(\"\"\"fibonacci(4)\"\"\", 3)\nCheck.equal(\"\"\"fibonacci(9)\"\"\", 34)\nCheck.equal(\"\"\"fibonacci(20)\"\"\", 6765)\nfor i in range(1, 500):\n    Check.challenge(fibonacci(i), i)"
    }
  }, 
  {
    "pk": 479, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavi funkcijo 'ploscina', ki kot parametre dobi funkcijo f, kraji\u0161\u010di intervala\r\na in b, zgornjo mejo M za funkcijo f na intervalu a, b ter \u0161tevilo\r\nponovitev N. Nato naj s pomo\u010djo Monte Carlo integracije izra\u010duna\r\npribli\u017eek za dolo\u010den integral funkcije f na intervalu [a,b) tako, da\r\ngenerira N naklju\u010dnih to\u010dk v pravokotniku [a,b)x[0,M) in izra\u010duna\r\nrazmerje med \u0161tevilom to\u010dk pod grafom funkcije f in N. Plo\u0161\u010dina \r\npod grafom funkcije je nato to razmerje krat plo\u0161\u010dina pravokotnika [0,M).\r\nPrimer: \r\n    >>> ploscina(lambda x: x, 0, 2, 2, 1000)\r\n    1.016", 
      "timestamp": "2012-03-27 09:17:25", 
      "challenge": "[]", 
      "solution": "def ploscina(f, a, b, M, N):\r\n    pod = 0\r\n    for i in range(N):\r\n        tocka = nakljucnaTocka(a,b,0,M)\r\n        if not nadGrafom (f, tocka):\r\n            pod += 1\r\n    koncna = pod / N * M * (b-a)\r\n    return pod / N * M * (b-a)", 
      "problem": 157, 
      "validation": "Check.equal('abs(ploscina(lambda x: x, 0, 2, 2, 100000)-2)<0.1', True, \"Odgovor je napa\u010den\")\r\nCheck.equal('abs(ploscina(math.sin, 0, math.pi/2, 1, 100000)-1)<0.1', True, \"Odgovor je napa\u010den\")"
    }
  }, 
  {
    "pk": 637, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavite funkcijo `kolikoUrejen(vhod, izhod)`, ki na izhodno datoteko z\nimenom `izhod` za vsako ime zapi\u0161e, kolikokrat se pojavi v datoteki z\nimenom `vhod`. Imena naj bodo urejena po padajo\u010di frekvenci pojavitev.", 
      "timestamp": "2012-05-14 06:30:42", 
      "challenge": "[]", 
      "solution": "def kolikoUrejen(vhod, izhod):\n    with open(vhod) as f:\n        imena = \",\".join([vrstica.strip() for vrstica in f.readlines()])\n    enkrat_imena = set(imena.split(\",\"))\n    stevilo = [(ime, kolikokratSePojavi(imena, ime)) for ime in enkrat_imena]\n    stevilo.sort(key=lambda p: -p[1])\n    with open(izhod, 'w') as f:\n        for ime, s in stevilo:\n            print(ime, s, file=f)", 
      "problem": 208, 
      "validation": "def _makefile(ime):\n    with open(ime, \"w\") as f:\n        print(\"Luka,Jaka\", file=f)\n        print(\"Luka\", file=f)\n        print(\"Miha\", file=f)\n        print(\"Miha\", file=f)\n        print(\"Miha\", file=f)\n\ndef _makefile2(ime):\n    with open(ime, \"w\") as f:\n        print(\"Miha 3\", file=f)\n        print(\"Luka 2\", file=f)\n        print(\"Jaka 1\", file=f)\n\ndef _istedatoteke(ena,dva):\n    with open(ena) as f1, open(dva) as f2:\n        vrste1 = f1.read().strip()\n        vrste2 = f2.read().strip()\n        if vrste1 == vrste2:\n            return True\n        else:\n            print(\"Izhodna datoteka vsebuje naslednje vrstice: \")\n            print(vrste1)\n            print(\"Morala pa bi vsebovati naslednje vrstice: \")\n            print(vrste2)\n    \ndef _removefiles(*ime):\n    import os\n    for i in ime: os.remove(i)\n\n_makefile(\"_test.csv\")\n_makefile2(\"_test2.csv\")\nkolikoUrejen(\"_test.csv\",\"_test1.csv\")\nif not _istedatoteke(\"_test1.csv\", \"_test2.csv\"):\n    Check.error(\"Izhodna datoteka je napa\u010dna\")\n_removefiles(\"_test.csv\", \"_test1.csv\",\"_test2.csv\")"
    }
  }, 
  {
    "pk": 760, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavite funkcijo `kartezicniProdukt(mnozica1, mnozica2, ...)`, ki vrne\nkartezi\u010dni produkt mno\u017eic `mnozica1`, `mnozica2`, \u2026\nPozor: \u010de je kak\u0161na od mno\u017eic prazna, mora biti prazen tudi kartezi\u010dni\nprodukt.", 
      "timestamp": "2012-07-12 12:56:55", 
      "challenge": "[]", 
      "solution": "def kartezicniProdukt(*mnozice):\n    if len(mnozice) == 0:\n        return set()\n    elif len(mnozice) == 1:\n        return vEnojce(mnozice[0])\n    else:\n        produktOstalih = kartezicniProdukt(*(mnozice[1:]))\n        produkt = set()\n        for x in mnozice[0]:\n            produkt.update(razsiriNabore(x, produktOstalih))\n        return produkt", 
      "problem": 241, 
      "validation": "Check.equal(\"kartezicniProdukt({1, 2})\", {(1,), (2,)})\nCheck.equal(\"kartezicniProdukt({1, 2}, {3, 4})\", {(1, 3), (1, 4), (2, 3), (2, 4)})\nCheck.equal(\"kartezicniProdukt({1, 2}, {3, 4, 5}, {6, 7})\", {(1, 3, 6), (1, 3, 7), (1, 4, 6), (1, 4, 7), (1, 5, 6), (1, 5, 7), (2, 3, 6), (2, 3, 7), (2, 4, 6), (2, 4, 7), (2, 5, 6), (2, 5, 7)})\nCheck.equal(\"kartezicniProdukt({1, 2}, set(), {3, 4})\", set())"
    }
  }, 
  {
    "pk": 779, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavite funkcijo `enakeStevilke(tablice)`, ki vrne oznako, ki se za\nzvezdico pojavi na vsaj dveh tablicah iz seznama `tablice`. \u010ce takih dveh\ntablic ni, naj funkcija vrne `None`.", 
      "timestamp": "2012-09-05 09:34:40", 
      "challenge": "[]", 
      "solution": "def enakiOznaki(tablice):\n    oznake = set()\n    for tablica in tablice:\n        _, oznaka = razbij(tablica)\n        if oznaka in oznake:\n            return oznaka\n        else:\n            oznake.add(oznaka)", 
      "problem": 248, 
      "validation": "Check.equal(\"\"\"enakiOznaki([\"MB*56-TR2\", \"LJ*AB-124\", \"KR*B25-13\"])\"\"\", None)\nCheck.equal(\"\"\"enakiOznaki([\"MB*56-TR2\", \"LJ*AB-124\", \"KR*AB-124\"])\"\"\", \"AB-124\")\nCheck.equal(\"\"\"enakiOznaki([\"MB*56-TR2\", \"LJ*AB-124\", \"KR*56-TR2\"])\"\"\", \"56-TR2\")\nCheck.equal(\"\"\"enakiOznaki([\"LJ*AB-124\", \"LJ*BC-124\", \"LJ*CD-124\"])\"\"\", None)\nCheck.equal(\"\"\"enakiOznaki([])\"\"\", None)"
    }
  }, 
  {
    "pk": 724, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavite funkcijo `najboljZadrti(omrezje)`, ki vrne mno\u017eico vseh oseb,\nki v danem omre\u017eju sovra\u017eijo najve\u010d oseb.", 
      "timestamp": "2012-06-11 11:01:07", 
      "challenge": "[]", 
      "solution": "def najboljZadrti(omrezje):\n    najvec = max(len(sovrazniki) for sovrazniki in omrezje.values())\n    return {oseba for oseba, sovrazniki in omrezje.items()\n            if len(sovrazniki) == najvec}", 
      "problem": 230, 
      "validation": "Check.equal(\"najboljZadrti(primerOmrezja1)\", {\"\u017diga\", \"Ugo\"})\nCheck.equal(\"najboljZadrti(primerOmrezja2)\", {\"Evgen\"})"
    }
  }, 
  {
    "pk": 696, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Napi\u0161ite metodo `kjeJeZaklad( datoteka, palma, otok)`, ki vrne vektor smeri\nod palme do zaklada ali `None`, \u010de pot do zaklada ne poteka vseskozi po\nnotranjosti otoka.\nPot je zapisana v datoteki v obliki ukazov S, J, V, Z, v vsaki vrstici po ena\npalma je par to\u010dk `(x, y)` in predstavlja za\u010detek poti.\nOtok je pravokotnik, podan s parom nasprotnih ogli\u0161\u010d `((x1,y1),(x2,y2))`", 
      "timestamp": "2012-06-10 01:12:23", 
      "challenge": "[]", 
      "solution": "def Manj(t1,t2):\n    return t1[0]<= t2[0] and t1[1]<= t2[1]  \n\ndef kjeJeZaklad( imeDatoteke, palma, otok):\n    (xpalma,ypalma)=palma\n    (dl,ur)=otok\n    p=seznamPolozajev(imeDatoteke,xpalma,ypalma)\n    OK=True\n    for t in p:\n        if not Manj(dl,t) or not Manj(t,ur):\n            OK = False\n            break\n    if not OK:\n        return None\n    else:\n        (kx,ky)=p[len(p)-1]\n        return (kx-xpalma,ky-ypalma)", 
      "problem": 229, 
      "validation": "_makefile1(\"_3b.in\")\nCheck.equal('kjeJeZaklad(\"_3b.in\", (0,0), ((-10,-10),(10,10)))', (2,1))\nCheck.equal('kjeJeZaklad(\"_3b.in\", (0,0), ((-1,-1),(1,1)))', None)\nCheck.equal('kjeJeZaklad(\"_3b.in\", (3,-2), ((-10,-10),(10,10)))', (2,1))\n_removefiles(\"_3b.in\")"
    }
  }, 
  {
    "pk": 712, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Kot smo omenili na za\u010detku, vrsta za sinus konvergira hitreje, \u010de je\n$|x|<1$. Z uporabo lastnosti kotnih funkcij lahko za poljuben $x$\nnajdemo tak $y$, $|y|<1$, da je $\\sin(x)=\\sin(y)$ ali $\\sin(x)=\\pm\\cos(y)$.\nSestavite funkcijo `hitriSinus(x,n)`, ki poi\u0161\u010de ustrezen $y$ in nato\nizra\u010duna $\\sin(x)$ z upo\u0161tevanjem $n$ \u010dlenov vrste.\nPri tem si lahko pomagate s prej\u0161njo podnalogo.\n\nNamig: Upo\u0161tevajte periodi\u010dnost in simetrijo funkcije sinus ter zvezo $\\sin^2(x) + \\cos^2(x) = 1$.", 
      "timestamp": "2012-06-11 11:49:29", 
      "challenge
      "solution": "def hitriSinus(x, n):\n    y=x%(2*pi) # Perioda je 2PI\n    # Upo\u0161tevamo: sin(x)=-sin(-x)=-sin(2PI-x)\n    z=1\n    if y>pi:\n        z=-1\n        y=2*pi-y\n    # Upo\u0161tevamo sin(x)=sin(pi-x)\n    if y>pi/2:\n        y=pi-y\n    # Upo\u0161tevamo sin(x)=cos(pi/2-x)\n    if y>pi/4:\n        y=pi/2-y\n        return z*(1-sinus(y,n)**2)**.5\n    else:\n        return z*sinus(y,n)", 
      "problem": 219, 
      "validation": "Check.equal(\"hitriSinus(0,4)\", 0)\nCheck.equal(\"hitriSinus(20*3.141592653589793,20)\", 0)\nCheck.equal(\"hitriSinus(17*pi/2,10)\", 1)\n\nfor i in range(5,300):\n    v=(i**2+.345,i//4)\n    Check.challenge(hitriSinus(*v),v)"
    }
  }, 
  {
    "pk": 503, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavite funkcijo `babuska(skatle)`, ki vrne najve\u010dje \u0161tevilo \u0161katel,\nki jih lahko zlo\u017eimo eno v drugo, \u010de za\u010dnemo s prvo \u0161katlo s seznama,\nvanjo vstavimo drugo, v drugo tretjo in tako naprej.", 
      "timestamp": "2012-06-04 08:48:05", 
      "challenge": "[[\"None\", \"1\"], [\"None\", \"1\"], [\"None\", \"1\"], [\"None\", \"1\"], [\"None\", \"1\"], [\"None\", \"1\"], [\"None\", \"1\"], [\"None\", \"1\"], [\"None\", \"1\"], [\"None\", \"1\"], [\"None\", \"1\"], [\"None\", \"1\"], [\"None\", \"1\"], [\"None\", \"1\"], [\"None\", \"3\"], [\"None\", \"2\"], [\"None\", \"1\"], [\"None\", \"1\"], [\"None\", \"1\"], [\"None\", \"1\"], [\"None\", \"1\"], [\"None\", \"1\"], [\"None\", \"1\"], [\"None\", \"3\"], [\"None\", \"3\"], [\"None\", \"1\"], [\"None\", \"2\"], [\"None\", \"3\"], [\"None\", \"1\"], [\"None\", \"1\"]]", 
      "solution": "def babuska(skatle):\n    stevilo = 1\n    zadnja = skatle[0]\n    \n    for skatla in skatle[1:]:\n        if greNotri(skatla, zadnja):\n            zadnja = skatla\n            stevilo += 1\n        else:\n            return stevilo\n    return stevilo", 
      "problem": 163, 
      "validation": "Check.equal('babuska([(50, 100, 100), (60, 30, 50), (40, 40, 40)])', 2)\nCheck.equal('babuska([(60, 100, 100), (60, 50, 50), (40, 40, 40)])', 3)\nCheck.equal('babuska([(60, 30, 50), (40, 40, 40)])', 1)\nfor i in range(30):\n    sez = [(i ** 2 % 37, i ** 3 % 31, i ** 4 % 58),\n           (i ** 2 % 37, i ** 4 % 31, i ** 3 % 58),\n           (5, 5, 1)]\n    Check.challenge(babuska(sez))"
    }
  }, 
  {
    "pk": 498, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "\u0160tevilo je _simetri\u010dno nepopolno_, kadar je njegova nepopolnost enaka\nnepopolnosti \u0161tevila, obrnjenega na glavo.\n\nNa primer, vsa palindromna \u0161tevila so simetri\u010dno nepopolna, prav tako\npa je nepopolno \u0161tevilo 24, saj je njegova nepopolnost enaka\n$|24 - (1 + 2 + 3 + 4 + 6 + 8 + 12)| = 12$, kar je prav tako\nnepopolnost \u0161tevila 42.\n\nSestavite funkcijo `simetricnoNepopolna(n)`, ki vrne seznam vseh\nsimetri\u010dno nepopolnih \u0161tevil med 1 in `n`.", 
      "timestamp": "2012-06-04 08:46:52", 
      "challenge": "[[\"None\", \"7\"], [\"None\", \"30\"], [\"None\", \"6\"], [\"None\", \"52\"], [\"None\", \"12\"], [\"None\", \"38\"], [\"None\", \"8\"], [\"None\", \"34\"], [\"None\", \"26\"], [\"None\", \"58\"], [\"None\", \"48\"], [\"None\", \"60\"], [\"None\", \"28\"], [\"None\", \"22\"], [\"None\", \"1\"], [\"None\", \"46\"], [\"None\", \"12\"], [\"None\", \"66\"], [\"None\", \"10\"], [\"None\", \"42\"], [\"None\", \"4\"], [\"None\", \"70\"], [\"None\", \"51\"], [\"None\", \"72\"], [\"None\", \"34\"], [\"None\", \"26\"], [\"None\", \"12\"], [\"None\", \"58\"], [\"None\", \"12\"], [\"None\", \"78\"], [\"None\", \"26\"], [\"None\", \"41\"], [\"None\", \"38\"], [\"None\", \"82\"], [\"None\", \"56\"], [\"None\", \"62\"], [\"None\", \"40\"], [\"None\", \"54\"], [\"None\", \"4\"], [\"None\", \"88\"], [\"None\", \"54\"], [\"None\", \"70\"], [\"None\", \"16\"], [\"None\", \"58\"], [\"None\", \"44\"], [\"None\", \"70\"], [\"None\", \"60\"], [\"None\", \"96\"], [\"None\", \"25\"], [\"None\", \"42\"]]", 
      "solution": "def simetricnoNepopolna(n):\n    def simetricnoNepopolno(i):\n        return nepopolnost(i) == nepopolnost(int(str(i)[::-1]))\n    return [i for i in range(1, n + 1) if simetricnoNepopolno(i)]", 
      "problem": 162, 
      "validation": "Check.equal('simetricnoNepopolna(19)', [1, 2, 3, 4, 5, 6, 7, 8, 9, 11])\nCheck.equal('simetricnoNepopolna(28)', [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24])\nCheck.equal('simetricnoNepopolna(42)', [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33, 42])\nfor i in range(50, 100):\n    Check.challenge(nepopolnost(i))"
    }
  }, 
  {
    "pk": 771, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavite funkcijo `najvec(a, vhod)`, ki prebere tekstovno datoteko\n`vhod` in vrne vrstico, v kateri je najve\u010d znakov `a`. \u010ce je takih\nvrstic ve\u010d, naj funkcija vrne zadnjo.", 
      "timestamp": "2012-09-05 09:34:51", 
      "challenge": "[]", 
      "solution": "def najvec(a,vhod):\n    maxn=-1\n    maxv=None\n    with open(vhod) as f:\n        for vrstica in f:\n            v = vrstica.strip('\\n')\n            n = prestej(a,v)\n            if n >= maxn:\n                maxn = n\n                maxv = v\n    return maxv", 
      "problem": 247, 
      "validation": "Check.equal(\"najvec('a','_test.1')\",'banana')\nCheck.equal(\"najvec('b','_test.1')\",'banana')\nCheck.equal(\"najvec('c','_test.1')\",'in en kup n-jev!!')\nCheck.equal(\"najvec('n','_test.1')\",'in en kup n-jev!!')\nCheck.equal(\"najvec('1','_test.2')\",'ena (1)')"
    }
  }, 
  {
    "pk": 732, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Z upo\u0161tevanjem multiplikativnosti logaritma lahko zapi\u0161emo\n$$\n\\ln(x) = \\ln\\left(10^k \\frac{x}{10^k}\\right) = k\\ln 10 +\n                      \\ln\\frac{x}{10^k},\n$$\npri \u010demer lahko za zadnji \u010dlen uporabimo pribli\u017eek z vrsto.\n\nSestavite funkcijo `ln(x)`, ki s pomo\u010djo zgornjega trika izra\u010duna\nnaravni logaritem \u0161tevila $x$. Pri tem naj se\u0161teje $100$ \u010dlenov vrste.\nPomagajte si s funkcijami iz prej\u0161njih nalog. Za $\\ln 10$ uporabite\nspremenljivko `ln10`, ki je \u017ee definirana in ima vrednost 2.302585092994046.", 
      "timestamp": "2012-07-12 10:29:15", 
      "challenge": "[]", 
      "solution": "def ln(x):\n    y,k=normaliziraj(x)\n    return k*ln10+logaritem(y,100)", 
      "problem": 234, 
      "validation": "Check.equal(\"ln(1)\",0)\nCheck.equal(\"ln(2)\",0.6931471805677192)\nCheck.equal(\"ln(0.0002)\",-8.517193191408465)\nCheck.equal(\"ln(123456)\",11.723640096265402)\n\n##_rng=[91234]\n##for i in range(100): _rng.append((_rng[-1]*1103515245+12345)%2**32)\n##_m=max(_rng)/1357\n##_rng=[x/_m for x in _rng]\n##\n##for x in _rng:\n##    Check.challenge(ln(x),x)"
    }
  }, 
  {
    "pk": 511, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavite funkcijo `poSkupinah(vhod,izhod)`, ki iz datoteke `vhod`\r\nprebere vrstice, nato pa izra\u010duna vsoto vrednosti predmetov posamezne\r\nnujnosti. Podobno kot prej se nekateri predmeti lahko pojavijo ve\u010dkrat,\r\nz razli\u010dnimi cenami in razli\u010dnimi nujnostmi.\r\nKot prej upo\u0161tevajte najni\u017ejo ceno. \u010ce je takih ve\u010d, vzemite najvi\u0161jo\r\nnujnost. V datoteko `izhod` nato zapi\u0161ite rezultate `nujnost,vsota`,\r\nurejene padajo\u010de po nujnosti.\r\n\r\nNa primer, iz datoteke\r\n\r\n    ortopedsko oblikovana duda,18,7\r\n    avtomati\u010dno brisalo ritke,231,10\r\n    ortopedsko oblikovana duda,15,4\r\n    ljubezen,0,1\r\n    ortopedsko oblikovana duda,15,7\r\n    ljubezen,1,1\r\n    plenice,17,7\r\n\r\nbi v izhodni datoteki dobili vrstice\r\n\r\n    10,231\r\n    7,32\r\n    1,0", 
      "timestamp": "2012-06-06 14:35:55", 
      "challenge": "[]", 
      "solution": "def poSkupinah(vhod,izhod):\r\n    seznam=preberi(vhod)\r\n    predmeti=dict()\r\n    for el in seznam:\r\n        v=predmeti.get(el[0])\r\n        if v!=None:\r\n            if el[1] > v[0]: continue\r\n            elif el[1] == v[0] and el[2]<=v[1]: continue\r\n        predmeti[el[0]]=(el[1],el[2])\r\n    nujnosti=dict()\r\n    for (c,n) in predmeti.values():\r\n        nujnosti[n]=nujnosti.get(n,0)+c\r\n    sNujnosti=list(nujnosti.keys())\r\n    sNujnosti.sort(reverse=True)\r\n    with open(izhod,\"w\") as f:\r\n        for x in sNujnosti:\r\n            print(\"{0},{1}\".format(x,nujnosti[x]),file=f)", 
      "problem": 165, 
      "validation": "in_example = [\"ortopedsko oblikovana duda,18,7\",\r\n              \"avtomati\u010dno brisalo ritke,231,10\",\r\n              \"ortopedsko oblikovana duda,15,4\",\r\n              \"ljubezen,0,1\",\r\n              \"ortopedsko oblikovana duda,15,7\",\r\n              \"ljubezen,1,1\",\r\n              \"plenice,17,7\"]\r\nout_example = [\"10,231\", \"7,32\", \"1,0\"]\r\nwith Check.in_out_file(in_example, out_example) as (vhod, izhod):\r\n    poSkupinah(vhod, izhod)"
    }
  }, 
  {
    "pk": 736, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavite funkcijo `standardni_odklon(datoteka)`, ki iz datoteke\nprebere realna \u0161tevila, nato pa s pomo\u010djo formule\n$$\n\\sigma = \\sqrt{\\frac{1}{N}\\sum_{i=1}^N (x_i-\\mu)^2}\n$$\nizra\u010duna njihov standardni odklon. Pri tem $\\mu$ ozna\u010duje povpre\u010dje.\nPomagajte si s funkcijami iz prej\u0161njih nalog. \u010ce je datoteka prazna,\nnaj funkcija vrne 0.", 
      "timestamp": "2012-07-12 09:56:50", 
      "challenge": "[]", 
      "solution": "def standardni_odklon(datoteka):\n    s=preberi(datoteka)\n    N=len(s)\n    if N==0:\n        return 0\n    mu=povprecje(s)\n    sig=(sum((x-mu)**2 for x in s)/N)**.5\n    return sig", 
      "problem": 235, 
      "validation": "Check.equal(\"standardni_odklon('_test.0')\", 0)\nCheck.equal(\"standardni_odklon('_test.1')\", 3.721843461243368)\nCheck.equal(\"standardni_odklon('_test.2')\", 25.8382049736862)\nCheck.equal(\"standardni_odklon('_test.12')\", 3.721843461243368)"
    }
  }, 
  {
    "pk": 859, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "\u010ce se vam zdi, da va\u0161e re\u0161itve delujejo u\u010dinkovito, kot re\u0161itev te\nnaloge vpi\u0161ite poljuben znak, na primer `#`. V tem primeru se bodo\nzagnali testi, ki bodo va\u0161e re\u0161itve preverili na velikih \u0161tevilih.\n\u010ce so re\u0161itve u\u010dinkovite, se bodo testi izvedli v par sekundah, \u010de pa\nniso, pa boste \u010dakali kar precej \u010dasa.", 
      "timestamp": "2012-11-14 09:09:32", 
      "challenge": "[[\"NA\", \"12.0891, 12.0892, 12.0892, 12.0892, 12.0892, 12.0892, 12.0892, 12.0892, 12.0892, 12.0892, 12.0892, 12.0893, 12.0893, 12.0893, 12.0893, 12.0893, 12.0893, 12.0893, 12.0893, 12.0893, 12.0893, 12.0894, 12.0894, 12.0894, 12.0894, 12.0894, 12.0894, 12.0894, 12.0894, 12.0894, 12.0894, 12.0895, 12.0895, 12.0895, 12.0895, 12.0895, 12.0895, 12.0895, 12.0895, 12.0895, 12.0895, 12.0896, 12.0896, 12.0896, 12.0896, 12.0896, 12.0896, 12.0896, 12.0896, 12.0896, 12.0896, 12.0897, 12.0897, 12.0897, 12.0897, 12.0897, 12.0897, 12.0897, 12.0897, 12.0897, 12.0897, 12.0898, 12.0898, 12.0898, 12.0898, 12.0898, 12.0898, 12.0898, 12.0898, 12.0898, 12.0898, 12.0899, 12.0899, 12.0899, 12.0899, 12.0899, 12.0899, 12.0899, 12.0899, 12.0899, 12.0899, 12.09, 12.09, 12.09, 12.09, 12.09, 12.09, 12.09, 12.09, 12.09, 12.09, 12.0901, 12.0901, 12.0901, 12.0901, 12.0901, 12.0901, 12.0901, 12.0901, 12.0901, 12.0901\"], [\"NA\", \"1220, 1221, 1221, 1221, 1221, 1221, 1221, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1223, 1223, 1223, 1223, 1223, 1223, 1224, 1224, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1228, 1228, 1228, 1228, 1228, 1228, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229\"]]", 
      "solution": "#", 
      "problem": 276, 
      "validation": "check$challenge(round(harmonicna(100000), 4)[99900:100000])\ncheck$challenge(stevilo.prastevil(10000)[9900:10000])"
    }
  }, 
  {
    "pk": 708, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Pri obro\u010dnem var\u010devanju se na za\u010detku vpla\u010da glavnica, nato pa se vsak\r\nmesec vpla\u010da \u0161e obrok. Obresti se pripisujejo mese\u010dno in se hkrati\r\nobrestujejo. S pomo\u010djo funkcije iz prej\u0161nje naloge sestavite\r\nfunkcijo `varcevanje(glavnica,obrok,r,n)`, ki kot parametre sprejme\r\nvrednost glavnice, vi\u0161ino mese\u010dnega obroka, letno obrestno mero v\r\nodstotkih in \u0161tevilo mesecev var\u010devanja. Obroke za\u010dnemo vpla\u010devati\r\nz drugim mesecem, vpla\u010dujemo jih v za\u010detku meseca, obresti pa ra\u010dunamo\r\nna koncu meseca. Tako bi po enem mesecu imeli na ra\u010dunu samo glavnico,\r\nskupaj z obrestmi na glavnico za en mesec, po dveh mesecih bi imeli na\r\nra\u010dunu glavnico z obrestmi za dva meseca in en obrok z obrestmi za en\r\nmesec, itd.\r\n\r\nNamig: razli\u010dni obroki se obrestujejo razli\u010dno dolgo!\r\n\r\nPrimeri:\r\n\r\n     >>> varcevanje(100, 10, 10, 0)\r\n     100.0\r\n     >>> varcevanje(100, 10, 10, 1)\r\n     100.83333333333333\r\n     >>> varcevanje(100, 10, 10, 2)\r\n     111.75694444444443", 
      "timestamp": "2012-06-09 22:21:06", 
      "challenge": "[[\"(5991, 650.1, 15.734262666511663, 39)\", \"42131.242424\"], [\"(9924, 1020.4, 7.501160930101098, 56)\", \"81216.191349\"], [\"(589, 83.9, 14.024094548080706, 25)\", \"3123.421246\"], [\"(7746, 812.6, 10.344911106111969, 14)\", \"19958.893127\"], [\"(1587, 205.7, 10.310549820793492, 35)\", \"10293.031727\"], [\"(3472, 411.2, 18.596392659735343, 4)\", \"4964.507809\"], [\"(6217, 642.7, 6.615611531919984, 33)\", \"30002.092098\"], [\"(862, 172.2, 1.1940343072838908, 22)\", \"4537.112433\"], [\"(4591, 558.1, 14.806928283975711, 27)\", \"23588.858667\"], [\"(6076, 691.6, 9.167024266113478, 56)\", \"56720.512842\"], [\"(7269, 811.9, 6.193944461694862, 9)\", \"14261.631901\"], [\"(6426, 736.6, 17.161446542783136, 2)\", \"7358.247635\"], [\"(4891, 576.1, 18.465830360278122, 55)\", \"60025.78615\"], [\"(792, 175.2, 17.20792116230819, 56)\", \"16483.518062\"], [\"(2929, 353.9, 19.58145836125038, 41)\", \"25760.115257\"], [\"(726, 126.6, 13.418839189159003, 18)\", \"3269.16232\"], [\"(599, 122.9, 1.2701365995625773, 39)\", \"5392.092207\"], [\"(4596, 463.6, 7.818317759487816, 48)\", \"31840.19608\"], [\"(2205, 233.5, 4.382200428067195, 33)\", \"10426.546362\"], [\"(7938, 887.8, 11.310205631898377, 26)\", \"35261.811805\"], [\"(7219, 800.9, 3.4908767742197386, 31)\", \"33040.725069\"], [\"(5200, 580.0, 3.6792963916406594, 28)\", \"22015.81738\"], [\"(7577, 822.7, 7.551119124657917, 25)\", \"30238.944721\"], [\"(3342, 404.2, 16.295394098478422, 50)\", \"34815.876244\"], [\"(9951, 1062.1, 5.662599371319509, 47)\", \"67094.049261\"], [\"(4188, 490.8, 4.472117173573304, 24)\", \"16386.387165\"], [\"(2677, 332.7, 11.097959627444004, 25)\", \"12346.544994\"], [\"(3610, 435.0, 7.210361393095928, 22)\", \"13882.223156\"], [\"(9291, 936.1, 11.2184978239824, 27)\", \"39608.381767\"], [\"(568, 140.8, 3.7099653874385696, 24)\", \"3972.990339\"], [\"(977, 182.7, 4.672419470914677, 9)\", \"2499.218826\"], [\"(5158, 601.8, 2.7823025739141505, 38)\", \"28907.866555\"], [\"(5559, 622.9, 18.93722948820196, 3)\", \"7101.800375\"], [\"(2884, 336.4, 6.409638102013963, 24)\", \"11530.44105\"], [\"(1149, 131.9, 19.687900720024285, 1)\", \"1167.851165\"], [\"(8098, 835.8, 6.314524940428095, 6)\", \"12602.497971\"], [\"(2643, 347.3, 7.402818995052348, 51)\", \"24010.270125\"], [\"(9520, 972.0, 6.035944738845125, 36)\", \"48687.885561\"], [\"(8041, 889.1, 14.65881712257564, 45)\", \"65909.834384\"], [\"(9870, 1001.0, 4.498568856914755, 18)\", \"28160.449226\"], [\"(5903, 669.3, 8.673921509211265, 11)\", \"13354.626999\"], [\"(2508, 294.8, 14.166944596380349, 4)\", \"3533.996466\"], [\"(3221, 347.1, 16.484965604158685, 37)\", \"21581.704459\"], [\"(8410, 899.0, 11.290045086474437, 22)\", \"31295.028356\"], [\"(4955, 538.5, 3.31949799903227, 23)\", \"17511.311438\"], [\"(6488, 704.8, 11.302563848202933, 0)\", \"6488.0\"], [\"(5233, 564.3, 17.313581032691925, 33)\", \"31468.487848\"], [\"(1766, 274.6, 2.7681731022680514, 18)\", \"6607.105229\"], [\"(183, 21.3, 4.0501484648993, 11)\", \"406.904212\"], [\"(7748, 790.8, 2.2749472244951585, 28)\", \"30097.697209\"], [\"(7421, 779.1, 1.7091728824667696, 49)\", \"46688.41371\"], [\"(8738, 927.8, 3.9461866444796434, 22)\", \"29596.770691\"], [\"(3827, 413.7, 10.096470676648675, 51)\", \"31666.879903\"], [\"(7264, 770.4, 14.67967616017143, 44)\", \"56184.075473\"], [\"(6345, 655.5, 13.808376071221781, 5)\", \"9416.858838\"], [\"(5438, 609.8, 3.433263504483384, 2)\", \"6080.705995\"], [\"(8703, 909.3, 9.54208905988628, 55)\", \"74971.465404\"], [\"(1468, 234.8, 13.76233349012969, 56)\", \"20844.389793\"], [\"(1429, 195.9, 9.118289214093016, 37)\", \"10028.552638\"], [\"(7882, 850.2, 6.9208303591930065, 58)\", \"68515.62592\"], [\"(8491, 856.1, 1.795691697787795, 55)\", \"57401.911731\"], [\"(5608, 604.8, 2.228433643317723, 56)\", \"41274.885996\"], [\"(9041, 973.1, 10.704884132241892, 17)\", \"27318.969451\"], [\"(7270, 777.0, 15.4064056568601, 26)\", \"33155.463297\"], [\"(6039, 698.9, 7.3858449595250235, 51)\", \"49282.084933\"], [\"(2740, 338.0, 8.380501822040323, 24)\", \"11698.220208\"], [\"(3661, 395.1, 4.394715622424696, 37)\", \"19420.986012\"], [\"(1970, 287.0, 9.101682426835133, 34)\", \"13344.141182\"], [\"(9971, 1096.1, 7.2595129892369545, 43)\", \"65473.701711\"], [\"(5536, 633.6, 1.0241721677397997, 48)\", \"36164.641882\"], [\"(5129, 565.9, 2.726283127297462, 13)\", \"12174.488268\"], [\"(5998, 685.8, 12.970984430360193, 22)\", \"23842.67433\"], [\"(8063, 881.3, 8.794200517152738, 31)\", \"39777.540147\"], [\"(7852, 869.2, 4.6118923203912745, 52)\", \"58641.694348\"], [\"(3989, 411.9, 2.3072437285229075, 21)\", \"12559.55245\"], [\"(5690, 615.0, 14.811553287325244, 22)\", \"22274.466666\"], [\"(8363, 931.3, 10.685318741659565, 11)\", \"19001.10935\"], [\"(5256, 573.6, 3.0149433827067136, 24)\", \"19180.240565\"], [\"(7265, 799.5, 14.285405330229564, 45)\", \"58804.617107\"], [\"(8822, 936.2, 1.8434013029620433, 18)\", \"25206.400435\"], [\"(3127, 403.7, 13.913008189473874, 3)\", \"4058.526826\"], [\"(4596, 459.6, 15.404868716076345, 40)\", \"31027.925682\"], [\"(1709, 199.9, 2.6022054746769783, 1)\", \"1712.705974\"], [\"(5042, 558.2, 16.734967470974173, 38)\", \"35699.190784\"], [\"(9123, 919.3, 0.967071966055081, 11)\", \"18438.046325\"], [\"(4896, 577.6, 2.6429789556696153, 4)\", \"6679.720264\"], [\"(7241, 801.1, 19.74911067746431, 1)\", \"7360.169425\"], [\"(7406, 742.6, 8.976602743479862, 2)\", \"8265.370645\"], [\"(5471, 594.1, 0.5308425707510006, 39)\", \"28337.795385\"], [\"(9532, 1009.2, 17.662437404293573, 56)\", \"107434.297737\"], [\"(5349, 555.9, 4.653576021215623, 9)\", \"10064.126142\"], [\"(2938, 335.8, 12.599747430319985, 30)\", \"15452.690074\"], [\"(3211, 344.1, 9.785582025467987, 51)\", \"26168.388809\"], [\"(3992, 431.2, 8.213170420187208, 52)\", \"32082.56769\"], [\"(3665, 411.5, 2.46843470689725, 1)\", \"3672.539011\"], [\"(4838, 549.8, 16.107213471628317, 42)\", \"38668.094006\"], [\"(2791, 290.1, 1.5487445111421632, 59)\", \"20494.088884\"], [\"(6084, 688.4, 15.491625017711229, 32)\", \"35546.521124\"], [\"(7021, 719.1, 0.8606607076773791, 57)\", \"48417.536366\"], [\"(354, 125.4, 5.60674989176778, 34)\", \"4898.679599\"], [\"(1651, 236.1, 18.433850211268886, 39)\", \"15239.102289\"]]", 
      "solution": "def varcevanje(glavnica, obrok, r, n):\r\n    vsota=vrednostObrestno(glavnica, r, n)\r\n    for i in range(1,n):\r\n        vsota+=vrednostObrestno(obrok, r, n-i)\r\n    return vsota", 
      "problem": 224, 
      "validation": "Check.equal(\"varcevanje(100,10,10,0)\", 100)\r\nCheck.equal(\"varcevanje(100,10,10,1)\", 100.8333333)\r\nCheck.equal(\"varcevanje(100,10,10,2)\", 111.7569444)\r\n\r\n_rng=[345991]\r\nfor i in range(400): _rng.append((_rng[-1]*1103515245+12345)%2**32)\r\n_m=max(_rng)/20\r\n_rng=[(a%10000,(a%10000)/10+b%100,c/_m,d%60) for a,b,c,d in zip(_rng, _rng[100:], _rng[200:],_rng[300:])]\r\n\r\nfor v in _rng:\r\n    Check.challenge(varcevanje(*v),v)"
    }
  }, 
  {
    "pk": 787, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavite funkcijo `enakeStevilke(tablice)`, ki vrne oznako, ki se za\nzvezdico pojavi na vsaj dveh tablicah iz seznama `tablice`. \u010ce takih dveh\ntablic ni, naj funkcija vrne `None`.", 
      "timestamp": "2012-09-05 11:43:24", 
      "challenge": "[]", 
      "solution": "def enakiOznaki(tablice):\n    oznake = set()\n    for tablica in tablice:\n        _, oznaka = razbij(tablica)\n        if oznaka in oznake:\n            return oznaka\n        else:\n            oznake.add(oznaka)", 
      "problem": 250, 
      "validation": "Check.equal(\"\"\"enakiOznaki([\"MB*56-TR2\", \"LJ*AB-124\", \"KR*B25-13\"])\"\"\", None)\nCheck.equal(\"\"\"enakiOznaki([\"MB*56-TR2\", \"LJ*AB-124\", \"KR*AB-124\"])\"\"\", \"AB-124\")\nCheck.equal(\"\"\"enakiOznaki([\"MB*56-TR2\", \"LJ*AB-124\", \"KR*56-TR2\"])\"\"\", \"56-TR2\")\nCheck.equal(\"\"\"enakiOznaki([\"LJ*AB-124\", \"LJ*BC-124\", \"LJ*CD-124\"])\"\"\", None)\nCheck.equal(\"\"\"enakiOznaki([])\"\"\", None)"
    }
  }, 
  {
    "pk": 740, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Enostaven ra\u010dun (pa tudi rezultati prej\u0161njih dveh nalog) poka\u017ee, da je\nvsota dane neskon\u010dne vrste enaka 1,5. Sestavite funkcijo `oceni(epsilon)`,\nki vrne najmanj\u0161i $n$, da se $n$-ta delna vsota od 1,5 razlikuje za manj\nkot `epsilon`. Lahko si pomagate s prej\u0161njimi funkcijami ali pa\nre\u0161ite ena\u010dbo za $n$. Pazite na to, da mora biti $n$ naravno \u0161tevilo.", 
      "timestamp": "2012-07-12 11:24:51", 
      "challenge": "[]", 
      "solution": "def oceni(epsilon):\n    n=max((2-3*epsilon+(epsilon**2+4)**.5)/(2*epsilon),1)\n    if int(n)==n:\n        return n\n    else:\n        return int(n)+1", 
      "problem": 238, 
      "validation": "Check.equal(\"oceni(1)\", 1)\nCheck.equal(\"oceni(2)\", 1)\nCheck.equal(\"oceni(3)\", 1)\nCheck.equal(\"oceni(0.6666666)\", 2)\nCheck.equal(\"oceni(0.45)\", 3)\nCheck.equal(\"oceni(0.01)\", 199)\nCheck.equal(\"oceni(0.0001)\", 19999)\nCheck.equal(\"oceni(0.000001)\", 1999999)\n\n# for i in range(1,100):\n#     Check.challenge(oceni(1/i),1/i)"
    }
  }, 
  {
    "pk": 23, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavite funkcijo `pozdrav(ime, vzklik)`, ki vrne niz, ki predstavlja\npozdrav, ki se za\u010dne z danim vzklikom, ki ima privzeto vrednost\n`\"Zdravo\"`.\nNa primer, `pozdrav(\"Miha\", \"Ojla\")` naj vrne niz `\"Ojla, Miha!\"`,\n`pozdrav(\"Nina\")` pa naj vrne `\"Zdravo, Nina!\"`.", 
      "timestamp": "2012-10-22 10:27:37", 
      "challenge": "[]", 
      "solution": "pozdrav <- function(ime, vzklik = \"Zdravo\") {\n  paste(vzklik, \", \", ime, \"!\", sep=\"\")\n}", 
      "problem": 16, 
      "validation": "check$equal(pozdrav(\"Miha\", \"Ojla\"), \"Ojla, Miha!\")\ncheck$equal(pozdrav(\"Nina\"), \"Zdravo, Nina!\")"
    }
  }, 
  {
    "pk": 913, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavite funkcijo `kosi(s)`, ki vrne seznam podseznamov od s. V vsakem seznamu morajo biti elementi od $a_{i_j}$ do $a_{i_{j+1}}$, kjer je njihova vsota enaka $0$. \u010ce tak seznam ne obstaja, naj vrne `None`.", 
      "timestamp": "2013-01-18 13:18:01", 
      "challenge": "[]", 
      "solution": "def kosi(s):\n    meje = mejniki(s)\n    if meje:\n        k = []\n        for i in range(len(meje) - 1):\n            k.append(s[meje[i]:meje[i + 1] + 1])\n        return k", 
      "problem": 305, 
      "validation": "Check.equal(\"\"\"kosi([1, -2, 1, -1, 2, -1])\"\"\", [[1, -2, 1], [1, -1], [-1, 2, -1]])\nCheck.equal(\"\"\"kosi([1, -2, 1, -1, 2])\"\"\", None)"
    }
  }, 
  {
    "pk": 775, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavite funkcijo `vrsticaPascalovegaTrikotnika(n)`, ki vrne `n`. vrstico\n[Pascalovega trikotnika](http://sl.wikipedia.org/wiki/Binomski_koeficient).\n\n    >>> vrsticaPascalovegaTrikotnika(0)\n    [1]\n    >>> vrsticaPascalovegaTrikotnika(1)\n    [1, 1]\n    >>> vrsticaPascalovegaTrikotnika(2)\n    [1, 2, 1]\n    >>> vrsticaPascalovegaTrikotnika(3)\n    [1, 3, 3, 1]\n    >>> vrsticaPascalovegaTrikotnika(4)\n    [1, 4, 6, 4, 1]\n    >>> vrsticaPascalovegaTrikotnika(5)\n    [1, 5, 10, 10, 5, 1]", 
      "timestamp": "2012-09-05 09:37:58", 
      "challenge": "[[\"5\", \"[1, 5, 10, 10, 5, 1]\"], [\"6\", \"[1, 6, 15, 20, 15, 6, 1]\"], [\"7\", \"[1, 7, 21, 35, 35, 21, 7, 1]\"], [\"8\", \"[1, 8, 28, 56, 70, 56, 28, 8, 1]\"], [\"9\", \"[1, 9, 36, 84, 126, 126, 84, 36, 9, 1]\"], [\"10\", \"[1, 10, 45, 120, 210, 252, 210, 120, 45, 10, 1]\"], [\"11\", \"[1, 11, 55, 165, 330, 462, 462, 330, 165, 55, 11, 1]\"], [\"12\", \"[1, 12, 66, 220, 495, 792, 924, 792, 495, 220, 66, 12, 1]\"], [\"13\", \"[1, 13, 78, 286, 715, 1287, 1716, 1716, 1287, 715, 286, 78, 13, 1]\"], [\"14\", \"[1, 14, 91, 364, 1001, 2002, 3003, 3432, 3003, 2002, 1001, 364, 91, 14, 1]\"]]", 
      "solution": "def vrsticaPascalovegaTrikotnika(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 1]\n    else:\n        return dodajEnke(vsoteSosedov(vrsticaPascalovegaTrikotnika(n - 1)))", 
      "problem": 246, 
      "validation": "Check.equal(\"vrsticaPascalovegaTrikotnika(0)\", [1])\nCheck.equal(\"vrsticaPascalovegaTrikotnika(1)\", [1, 1])\nCheck.equal(\"vrsticaPascalovegaTrikotnika(2)\", [1, 2, 1])\nCheck.equal(\"vrsticaPascalovegaTrikotnika(3)\", [1, 3, 3, 1])\nCheck.equal(\"vrsticaPascalovegaTrikotnika(4)\", [1, 4, 6, 4, 1])\nCheck.equal(\"vrsticaPascalovegaTrikotnika(5)\", [1, 5, 10, 10, 5, 1])\n\nfor i in range(5, 15):\n    Check.challenge(vrsticaPascalovegaTrikotnika(i), i)"
    }
  }, 
  {
    "pk": 783, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavite funkcijo `s(m)`, ki vrne seznam \u0161tevil $x$, za katere velja\n$f(x)=m$. \u010ce takih \u0161tevil ni, naj funkcija vrne prazen seznam.", 
      "timestamp": "2012-09-05 11:43:14", 
      "challenge": "[[\"None\", \"[]\"], [\"None\", \"[529]\"], [\"None\", \"[]\"], [\"None\", \"[]\"], [\"None\", \"[]\"], [\"None\", \"[]\"], [\"None\", \"[]\"], [\"None\", \"[343]\"], [\"None\", \"[]\"], [\"None\", \"[]\"], [\"None\", \"[]\"], [\"None\", \"[]\"], [\"None\", \"[]\"], [\"None\", \"[93]\"], [\"None\", \"[521]\"], [\"None\", \"[]\"], [\"None\", \"[]\"], [\"None\", \"[307]\"], [\"None\", \"[]\"], [\"None\", \"[]\"], [\"None\", \"[]\"], [\"None\", \"[]\"], [\"None\", \"[513]\"], [\"None\", \"[]\"], [\"None\", \"[]\"], [\"None\", \"[108]\"], [\"None\", \"[]\"], [\"None\", \"[]\"], [\"None\", \"[333, 339]\"], [\"None\", \"[]\"], [\"None\", \"[]\"], [\"None\", \"[165, 171]\"], [\"None\", \"[]\"], [\"None\", \"[]\"], [\"None\", \"[]\"], [\"None\", \"[152]\"], [\"None\", \"[]\"], [\"None\", \"[]\"], [\"None\", \"[572]\"], [\"None\", \"[]\"], [\"None\", \"[]\"], [\"None\", \"[]\"], [\"None\", \"[]\"], [\"None\", \"[]\"], [\"None\", \"[]\"], [\"None\", \"[]\"], [\"None\", \"[419, 425]\"], [\"None\", \"[]\"], [\"None\", \"[]\"], [\"None\", \"[]\"], [\"None\", \"[]\"]]", 
      "solution": "def s(m):\n    return [x for x in range ((m-41)//6, m//6+1) if f(x)==m]", 
      "problem": 249, 
      "validation": "Check.equal(\"s(0)\",[-6,0])\nCheck.equal(\"s(7)\",[-5,1])\nCheck.equal(\"s(63)\",[9])\nCheck.equal(\"s(70)\",[10])\nCheck.equal(\"s(301)\",[49])\n\n_rng=[991]\nfor i in range(50): _rng.append((_rng[-1]*1103515245+12345)%2**32)\nfor i in _rng:\n    Check.challenge(s((i%500)*7+i%11))"
    }
  }, 
  {
    "pk": 791, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavite funkcijo `najvec(a, vhod)`, ki prebere tekstovno datoteko\n`vhod` in vrne vrstico, v kateri je najve\u010d znakov `a`. \u010ce je takih\nvrstic ve\u010d, naj funkcija vrne zadnjo.", 
      "timestamp": "2012-09-05 11:43:37", 
      "challenge": "[]", 
      "solution": "def najvec(a,vhod):\n    maxn=-1\n    maxv=None\n    with open(vhod) as f:\n        for vrstica in f:\n            v = vrstica.strip('\\n')\n            n = prestej(a,v)\n            if n >= maxn:\n                maxn = n\n                maxv = v\n    return maxv", 
      "problem": 251, 
      "validation": "Check.equal(\"najvec('a','_test.1')\",'banana')\nCheck.equal(\"najvec('b','_test.1')\",'banana')\nCheck.equal(\"najvec('c','_test.1')\",'in en kup n-jev!!')\nCheck.equal(\"najvec('n','_test.1')\",'in en kup n-jev!!')\nCheck.equal(\"najvec('1','_test.2')\",'ena (1)')"
    }
  }, 
  {
    "pk": 795, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavite funkcijo `vrsticaPascalovegaTrikotnika(n)`, ki vrne `n`. vrstico\n[Pascalovega trikotnika](http://sl.wikipedia.org/wiki/Binomski_koeficient).\n\n    >>> vrsticaPascalovegaTrikotnika(0)\n    [1]\n    >>> vrsticaPascalovegaTrikotnika(1)\n    [1, 1]\n    >>> vrsticaPascalovegaTrikotnika(2)\n    [1, 2, 1]\n    >>> vrsticaPascalovegaTrikotnika(3)\n    [1, 3, 3, 1]\n    >>> vrsticaPascalovegaTrikotnika(4)\n    [1, 4, 6, 4, 1]\n    >>> vrsticaPascalovegaTrikotnika(5)\n    [1, 5, 10, 10, 5, 1]", 
      "timestamp": "2012-09-05 11:43:47", 
      "challenge": "[[\"5\", \"[1, 5, 10, 10, 5, 1]\"], [\"6\", \"[1, 6, 15, 20, 15, 6, 1]\"], [\"7\", \"[1, 7, 21, 35, 35, 21, 7, 1]\"], [\"8\", \"[1, 8, 28, 56, 70, 56, 28, 8, 1]\"], [\"9\", \"[1, 9, 36, 84, 126, 126, 84, 36, 9, 1]\"], [\"10\", \"[1, 10, 45, 120, 210, 252, 210, 120, 45, 10, 1]\"], [\"11\", \"[1, 11, 55, 165, 330, 462, 462, 330, 165, 55, 11, 1]\"], [\"12\", \"[1, 12, 66, 220, 495, 792, 924, 792, 495, 220, 66, 12, 1]\"], [\"13\", \"[1, 13, 78, 286, 715, 1287, 1716, 1716, 1287, 715, 286, 78, 13, 1]\"], [\"14\", \"[1, 14, 91, 364, 1001, 2002, 3003, 3432, 3003, 2002, 1001, 364, 91, 14, 1]\"]]", 
      "solution": "def vrsticaPascalovegaTrikotnika(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 1]\n    else:\n        return dodajEnke(vsoteSosedov(vrsticaPascalovegaTrikotnika(n - 1)))", 
      "problem": 252, 
      "validation": "Check.equal(\"vrsticaPascalovegaTrikotnika(0)\", [1])\nCheck.equal(\"vrsticaPascalovegaTrikotnika(1)\", [1, 1])\nCheck.equal(\"vrsticaPascalovegaTrikotnika(2)\", [1, 2, 1])\nCheck.equal(\"vrsticaPascalovegaTrikotnika(3)\", [1, 3, 3, 1])\nCheck.equal(\"vrsticaPascalovegaTrikotnika(4)\", [1, 4, 6, 4, 1])\nCheck.equal(\"vrsticaPascalovegaTrikotnika(5)\", [1, 5, 10, 10, 5, 1])\n\nfor i in range(5, 15):\n    Check.challenge(vrsticaPascalovegaTrikotnika(i), i)"
    }
  }, 
  {
    "pk": 861, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Ko funkcija `hitri_sudoku` deluje pravilno, lahko preverite njeno\nu\u010dinkovitost tako, da za re\u0161itev te naloge vpi\u0161ete karkoli, recimo `#`.", 
      "timestamp": "2012-11-19 10:14:29", 
      "challenge": "[]", 
      "solution": "#", 
      "problem": 280, 
      "validation": "def uradni_sudoku(t):\n    def dodaj(t, i, j, n):\n        t = [vrs[:] for vrs in t]\n        t[i][j] = n\n        return t\n    p = [(i, j, mozne_poteze(t, i, j)) for i in range(9) for j in range(9) if t[i][j] is None]\n    if len(p) == 0: return t\n    else:\n        i0, j0, pot0 = p[0]\n        for i, j, pot in p[1:]:\n            if len(pot) < len(pot0): pot0, i0, j0 = pot, i, j\n        for n in pot0:\n            resitev = uradni_sudoku(dodaj(t, i0, j0, n))\n            if resitev: return resitev\n\nprimeri = \"\"\"\n.................................................................................\n............942.8.16.....29........89.6.....14..25......4.......2...8.9..5....7..\n.....7....9...1.......45..6....2.....36...41.5.....8.9........4....18....815...32\n.5247.....6............8.1.4.......97..95.....2..4..3....8...9......37.6....91...\n.9.........1..6....6..8..7.3......1.....39.......5...217.4...28.....3....86....57\n.....5....2...4.1..3..8..2......84..8..6......9..1.7.5..6......95...3.6...3.....1\n5...68..........6..42.5.......8..9....1....4.9.3...62.7....1..9..42....3.8.......\n.7..21..4....3....6.1.....2.......6...86..7.319.....4..1....2.842.9..............\n........1..7.5.3.9..48...2...........3...57....942.........3.....1...4.7.6.278...\n.....8..3.16.2.9.7.3...46...........9.5...2...2.13...9..3....2..7...5.........4..\n..4.2..3....8.9.........7...5..37..8........5.49.6..1.5.........68........7.4.9.1\n.....6..3..9.4...532......8....1......175.6.92......8.....6.......8...4.47....2..\n.....8.2......693..98.7...1...........921....7......9624..9.......3..18.........3\n..2.46.....4.8...5.7..3...9.....2...3.57.....7.....4....6....93....54.78.........\n..3....4.4..2.........9..26....7.....1.9.2...26......85....7.......6.8.33......69\n........3..5..2.14....8..6..........946.......3...42.6...7.........3.68..7.291...\n.2............48...54.18.3.7....1..4....86.5.......6........1......2...923.4....5\n..9.43..........3.41..7.............8..5...6..4...6..2.......1...4.98..67..6..52.\n.........4.6.7..9..5..382.........3.9..........426.....7...3..2..16..8...85...7..\n...6.4...........3.1...26....2......6...9..158.4.....6.....7...976.5.......2.31..\n\"\"\"\nimport time\nskupni_cas = skupni_uradni_cas = 0\nfor n, primer in enumerate(primeri.split()):\n    t = [[None if primer[9 * i + j] == '.' else int(primer[9 * i + j])\n         for j in range(9)] for i in range(9)]\n    print(primer)\n    zacetek = time.time()\n    uradna_resitev = uradni_sudoku(t)\n    sredina = time.time()\n    resitev = hitri_sudoku(t)\n    konec = time.time()\n    uradni_cas = sredina - zacetek\n    skupni_uradni_cas += uradni_cas\n    cas = konec - sredina\n    skupni_cas += cas\n    if (resitev is not None and uradna_resitev is not None) or (resitev == uradna_resitev):\n        print(\"  Uradna re\u0161itev: {0:.3} s\".format(uradni_cas))\n        print(\"  Oddana re\u0161itev: {0:.3} s\".format(cas))\n        try:\n            print(\"  Razmerje \u010dasov: {0:.3}\".format(cas / uradni_cas))\n        except:\n            print(\" Tako lahek, da ga je \u0161e bedna uradna re\u0161itev re\u0161ila takoj.\")\n    else:\n        print(\"  Napa\u010dna re\u0161itev\")\nprint(\"Skupno razmerje \u010dasov: {0:.3}\".format(skupni_cas / skupni_uradni_cas))"
    }
  }, 
  {
    "pk": 799, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Definirajte razred `Datum`, s katerim predstavimo datum.\nNajprej sestavite konstruktor `__init__(self, dan, mesec, leto)`.", 
      "timestamp": "2012-10-01 12:26:03", 
      "challenge": "[]", 
      "solution": "class Datum:\n    def __init__(self, dan, mesec, leto):\n        self.dan = dan\n        self.mesec = mesec\n        self.leto = leto\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    def __repr__(self):\n        return \"{0}. {1}. {2}\".format(self.dan, self.mesec, self.leto)\n\n    def jeVeljaven(self):\n        return 1 <= self.mesec <= 12 \\\n               and 1 <= self.dan <= dolzineMesecev(self.leto)[self.mesec - 1]\n\n    def __lt__(self, other):\n        # uporabimo kar Pythonovo vgrajeno leksikografsko primerjavo\n        return (self.leto, self.mesec, self.dan) \\\n               < (other.leto, other.mesec, other.dan)\n\n    def __eq__(self, other):\n        # uporabimo kar Pythonovo vgrajeno leksikografsko primerjavo\n        return (self.leto, self.mesec, self.dan) \\\n               == (other.leto, other.mesec, other.dan)\n\n    def danVLetu(self):\n        return sum(dolzineMesecev(self.leto)[:self.mesec - 1]) + self.dan\n\n    def razlika(self, other):\n        # izra\u010dun se poenostavi, \u010de predpostavimo, da je self kasnej\u0161i datum\n        # \u010de ni, izra\u010dun obrnemo\n        if self < other:\n            return -other.razlika(self)\n        else:\n            # najprej pre\u0161tejemo \u0161tevilo dni v med za\u010detkoma let\n            razlika = sum(steviloDni(l) for l in range(other.leto, self.leto))\n            # nato upo\u0161tevamo \u0161e dni v posameznem letu\n            razlika += self.danVLetu()\n            razlika -= other.danVLetu()\n            return razlika\n\n    def danVTednu(self):\n        # uporabimo Zellerjev obrazec\n        q = self.dan\n        # upo\u0161tevamo popravek za januar in februar\n        if self.mesec > 2:\n            m = self.mesec\n            l = self.leto\n        else:\n            m = self.mesec + 12\n            l = self.leto - 1\n        j = l // 100\n        k = l % 100\n        h = (q + ((m + 1) * 26) // 10 + k + k // 4 + j // 4 - 2 * j) % 7\n        # popravimo vrednost h, da bo 1 ponedeljek in 7 nedelja\n        return (h - 2) % 7 + 1\n\n    def tedenVLetu(self):\n        # kateri dan v letu je bila pretekla nedelja\n        nedelja = self.danVLetu() - self.danVTednu()\n        # \u0161tevilo tednov je ravno \u0161tevilo preteklih nedelj + 1.\n        return nedelja // 7 + 2", 
      "problem": 253, 
      "validation": "Check.equal('Datum(14, 12, 1982).dan', 14)\nCheck.equal('Datum(14, 12, 1982).mesec', 12)\nCheck.equal('Datum(14, 12, 1982).leto', 1982)"
    }
  }, 
  {
    "pk": 819, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavite funkcijo `vsota((d,m,n), (e,u,v))`, ki vrne vsoto danih dveh redkih\nmatrik.", 
      "timestamp": "2012-10-01 12:38:42", 
      "challenge": "[[\"None\", \"[((0, 7), 2), ((0, 14), 4), ((0, 21), 3), ((0, 28), 4), ((13, 0), 2), ((13, 7), 4), ((13, 14), 6), ((13, 21), 4), ((13, 28), 5), ((26, 0), 2), ((26, 7), 3), ((26, 14), 4), ((26, 21), 5), ((26, 28), 6), ((39, 0), 3), ((39, 7), 4), ((39, 14), 5), ((39, 21), 6), ((39, 28), 7), ((52, 0), 4), ((52, 7), 5), ((52, 14), 6), ((52, 21), 7), ((52, 28), 8)]\"]]", 
      "solution": "def vsota(dmn, euv):\n    (d,m,n) = dmn\n    (e,u,v) = euv\n    assert (m == u and n == v)\n    f = {}\n    for (ij,x) in d.items(): f[ij] = f.get(ij,0) + x\n    for (ij,y) in e.items(): f[ij] = f.get(ij,0) + y\n    f = {ij:x for (ij,x) in f.items() if x != 0}\n    return (f,m,n)", 
      "problem": 256, 
      "validation": "Check.equal(\"\"\"vsota(({(0,0):1, (0,2):2}, 10, 5),\n                     ({(0,0):3, (2,3):4}, 10, 5))\"\"\",\n            ({(0,0):4, (0,2):2, (2,3):4}, 10, 5))\n\nCheck.equal(\"\"\"vsota(({(0,0):5, (0,2):2}, 10, 5),\n                     ({(0,0):-5, (2,3):4}, 10, 5))\"\"\",\n            ({(0,2):2, (2,3):4}, 10, 5))\n\nCheck.challenge(sorted(vsota(({(13*i,7*j):i+j for i in range(5) for j in range(5)}, 100, 133),\n                      ({(13*i,7*j):i+j for i in range(2) for j in range(3)}, 100, 133))[0].items()))"
    }
  }, 
  {
    "pk": 33, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavite funkcijo `ustrezljivi(oseba, d)`, ki sprejme ime osebe ter\nslovar zaljubljenih, vrne pa _mno\u017eico_ vseh ljudi, ki so do dane osebe\n\u0161e posebej ustre\u017eljivi. Posebej ustre\u017eljivi so seveda za to, ker so\nbodisi zaljubljeni v dano osebo, bodisi so zaljubljeni v osebo, ki je\nposebej ustre\u017eljiva do nje, in tako naprej.\n\nNa primer, \u010de imamo slovar\n\n    s = {'Ana' : {'Bine', 'Cene'},\n         'Bine' : {'Ana'},\n         'Cene' : {'Bine'},\n         'Davorka' : {'Davorka'},\n         'Eva' : {'Bine'}}\n\nso do Ceneta posebej ustre\u017eljivi Ana (ki je zaljubljena vanj), Bine\n(ki je zaljubljen v Ano), Eva (ki je zaljubljena v Bineta), ter seveda\nCene, ki je zaljubljen v Evo.", 
      "timestamp": "2012-10-11 12:16:47", 
      "challenge": "[[\"None\", \"['Ana', 'Bine', 'Cene', 'Davorka', 'Eva']\"]]", 
      "solution": "def ustrezljivi(oseba, d):\n    # seznam, v katerega nabiramo ustre\u017eljive osebe\n    ustrezljivi = set()\n    # najprej dodamo tiste, ki ljubijo prvo osebo\n    dodani = {o for o in d if oseba in d[o]}\n    # dokler smo koga dodali, dodajamo ustre\u017eljive\n    while dodani:\n        ustrezljivi.update(dodani)\n        # sedaj pa dodajamo tiste, ki ljubijo nazadnje dodane osebe\n        dodani = {o for o in d for dodan in dodani\n                  if dodan in d[o] and o not in ustrezljivi}\n    return ustrezljivi", 
      "problem": 9, 
      "validation": "Check.equal(\"\"\"ustrezljivi('Cene', {'Ana' : {'Bine', 'Cene'},\n                           'Bine' : {'Ana'},\n                           'Cene' : {'Bine'},\n                           'Davorka' : {'Davorka'},\n                           'Eva' : {'Bine'}})\\n\"\"\", {'Ana', 'Bine', 'Cene', 'Eva'})\nCheck.equal(\"ustrezljivi('Cene', {})\", set())\nCheck.equal(\"\"\"ustrezljivi('Cene', {'Ana' : {'Bine', 'Cene'},\n                           'Bine' : set(),\n                           'Cene' : {'Bine'},\n                           'Davorka' : {'Davorka'},\n                           'Eva' : {'Bine'}})\\n\"\"\", {'Ana'})\nCheck.challenge(sorted(ustrezljivi('Davorka', {'Ana' : {'Bine'},\n                             'Bine' : {'Eva', 'Davorka'},\n                             'Cene' : {'Bine', 'Ana'},\n                             'Davorka' : {'Bine'},\n                             'Eva' : {'Bine'}})))"
    }
  }, 
  {
    "pk": 192, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavite \u0161e generator `deliLocila`, ki se obna\u0161a enako kot `deli`,\nle da vsako lo\u010dilo obravnava kot posamezni del niza. Se pravi,\nniz `\"Ti si en osel!!!\"` bo `deliLocila` razkosal na\n`[\"Ti\", \"si\", \"en\", \"osel\", \"!\", \"!\", \"!\"]`.\nZa lo\u010dila vzamemo  `. , ; : ! ? + - = / \\ @ # $ % ^ & * > < ( . ) [ ] { }`.\nki po\u010dne isto, kot iterator `Deli`.", 
      "timestamp": "2012-11-07 13:43:55", 
      "challenge": "[[\"0\", \"['0']\"], [\"1\", \"['1']\"], [\"8\", \"['8']\"], [\",7\", \"[',', '7']\"], [\"64\", \"['64']\"], [\"1,5\", \"['1', ',', '5']\"], [\",16\", \"[',', '16']\"], [\" 4 \", \"['4']\"], [\"51,\", \"['51', ',']\"], [\"7,9\", \"['7', ',', '9']\"], [\"1000\", \"['1000']\"], [\"1  1\", \"['1', '1']\"], [\"17,8\", \"['17', ',', '8']\"], [\",197\", \"[',', '197']\"], [\",744\", \"[',', '744']\"], [\"  75\", \"['75']\"], [\"4096\", \"['4096']\"], [\"491 \", \"['491']\"], [\"58 ,\", \"['58', ',']\"], [\"6859\", \"['6859']\"], [\"8000\", \"['8000']\"], [\"9,61\", \"['9', ',', '61']\"], [\"10648\", \"['10648']\"], [\"1,167\", \"['1', ',', '167']\"], [\"1 8,4\", \"['1', '8', ',', '4']\"], [\"156,5\", \"['156', ',', '5']\"], [\"17576\", \"['17576']\"], [\"1968 \", \"['1968']\"], [\",195,\", \"[',', '195', ',']\"], [\",4 89\", \"[',', '4', '89']\"], [\",7000\", \"[',', '7000']\"], [\",9791\", \"[',', '9791']\"], [\" ,768\", \"[',', '768']\"], [\" 59 7\", \"['59', '7']\"], [\" 9 04\", \"['9', '04']\"], [\"4,875\", \"['4', ',', '875']\"], [\"46656\", \"['46656']\"], [\"5065 \", \"['5065']\"], [\"5487,\", \"['5487', ',']\"], [\"59 19\", \"['59', '19']\"], [\"64000\", \"['64000']\"], [\"689,1\", \"['689', ',', '1']\"], [\"74088\", \"['74088']\"], [\"79507\", \"['79507']\"], [\"85184\", \"['85184']\"], [\"911,5\", \"['911', ',', '5']\"], [\"97  6\", \"['97', '6']\"], [\"10 8, \", \"['10', '8', ',']\"], [\"11059,\", \"['11059', ',']\"], [\"117649\", \"['117649']\"], [\"1,5000\", \"['1', ',', '5000']\"], [\"1 ,651\", \"['1', ',', '651']\"], [\"140608\", \"['140608']\"], [\"148877\", \"['148877']\"], [\"157464\", \"['157464']\"], [\"166 75\", \"['166', '75']\"], [\"175616\", \"['175616']\"], [\"18519 \", \"['18519']\"], [\"19511,\", \"['19511', ',']\"], [\",05 79\", \"[',', '05', '79']\"], [\",16000\", \"[',', '16000']\"], [\",,6981\", \"[',', ',', '6981']\"], [\", 8 ,8\", \"[',', '8', ',', '8']\"], [\",50047\", \"[',', '50047']\"], [\",6,144\", \"[',', '6', ',', '144']\"], [\",746,5\", \"[',', '746', ',', '5']\"], [\",87496\", \"[',', '87496']\"], [\" 0076 \", \"['0076']\"], [\" 144 ,\", \"['144', ',']\"], [\" ,8509\", \"[',', '8509']\"], [\" 4 000\", \"['4', '000']\"], [\" 57911\", \"['57911']\"], [\" 7 ,48\", \"['7', ',', '48']\"], [\" 89017\", \"['89017']\"], [\"405,,4\", \"['405', ',', ',', '4']\"], [\"4,1875\", \"['4', ',', '1875']\"], [\"4 8976\", \"['4', '8976']\"], [\"4565  \", \"['4565']\"], [\"47455,\", \"['47455', ',']\"], [\"49 0 9\", \"['49', '0', '9']\"], [\"51,000\", \"['51', ',', '000']\"], [\"5 1441\", \"['5', '1441']\"], [\"551 68\", \"['551', '68']\"], [\"571787\", \"['571787']\"], [\"59,704\", \"['59', ',', '704']\"], [\"6141,5\", \"['6141', ',', '5']\"], [\"6 6056\", \"['6', '6056']\"], [\"65850 \", \"['65850']\"], [\"68147,\", \"['68147', ',']\"], [\"704969\", \"['704969']\"], [\"7,9000\", \"['7', ',', '9000']\"], [\"75 571\", \"['75', '571']\"], [\"778688\", \"['778688']\"], [\"804 57\", \"['804', '57']\"], [\"8 0584\", \"['8', '0584']\"], [\"857 75\", \"['857', '75']\"], [\"8847 6\", \"['8847', '6']\"], [\"91,67 \", \"['91', ',', '67']\"], [\"94119,\", \"['94119', ',']\"], [\"970,99\", \"['970', ',', '99']\"]]", 
      "solution": "def deliLocila(stavek):\n    locila = \" .,;:!?+-=/\\\\@#$%^&*><(.)[]{}\"\n    beseda = \"\"\n    for znak in stavek:\n        if znak in locila:\n            # \u010de smo nabrali kaj znakov v besedo, jo vrnemo in izpraznimo\n            if beseda != \"\":\n                yield beseda\n                beseda = \"\"\n            # \u010de je lo\u010dilo kaj drugega kot presledek, ga tudi izpi\u0161emo\n            if znak != \" \":\n                yield znak\n        else:\n            # \u010de znak ni lo\u010dilo, ga dodamo k besedi\n            beseda += znak\n    # na koncu vrnemo \u0161e potencialno zadnjo besedo\n    if beseda != \"\":\n        yield beseda", 
      "problem": 58, 
      "validation": "Check.equal(\"list(deliLocila('Ti si en osel!!!'))\", [\"Ti\", \"si\", \"en\", \"osel\", \"!\", \"!\", \"!\"])\nCheck.equal(\"list(deliLocila('Kdor to bere, je osel!'))\", ['Kdor', 'to', 'bere', ',', 'je', 'osel', '!'])\nCheck.equal(\"list(deliLocila(' Kdor to bere, je osel ! '))\", ['Kdor', 'to', 'bere', ',', 'je', 'osel', '!'])\nfor i in range(100):\n    niz = str(i ** 3).replace('2', ',').replace('3', ' ')\n    Check.challenge(list(deliLocila(niz)), niz)"
    }
  }, 
  {
    "pk": 179, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavite funkcijo `zamenjaj(slovar, vst, izs)`, ki sprejme slovar,\r\nindeks vstopne spremenljivke `vst` in indeks izstopne spremenljivke `izs`,\r\nvrne pa slovar s spremenjeno bazo.", 
      "timestamp": "2012-10-23 12:58:06", 
      "challenge": "[[\"2, 1, 1\", \"50, 100, 100, 150, -1, -1, -5, 2, -1, -2, -2, 1, -1, 3, 10, -3\"], [\"3, 1, 1\", \"0.5, 0, 0, 4, 0, 4, -3, -1, 0, -2, 1, 2, -0.5, 3, 2, -4\"], [\"2, 1, 2\", \"83.333333, -33.333333, -233.333333, 250, -1.333333, 0.333333, -1.666667, 1, -1.666667, 0.666667, 4.666667, -1, -0.333333, 0.333333, 3.333333, -1\"], [\"3, 1, 2\", \"0.5, 0, 0, 4, 0.666667, -1.333333, -5.666667, 4.333333, -0.333333, 0.666667, 2.333333, -0.666667, -0.166667, 0.333333, 0.666667, -1.333333\"], [\"2, 1, 3\", \"60, -10, 70, 180, -1.5, 0.5, 0.5, 0.5, -1.2, 0.2, -1.4, 0.4, -0.1, 0.1, 0.3, -0.3\"], [\"3, 1, 3\", \"0.5, 0, 0, 4, -0.75, 1.5, 8.5, -7, 0.25, -0.5, -3.5, 4, -0.25, 0.5, 1.5, -2\"], [\"2, 2, 2\", \"62.5, -12.5, -337.5, 312.5, -0.75, -0.25, 1.25, -0.75, -1.25, 0.25, 6.75, -2.25, -0.25, 0.25, 3.75, -1.25\"], [\"3, 2, 2\", \"-0.75, 1, 4.25, 0.75, 1.5, -2, -8.5, 6.5, 0.5, 0, -0.5, 1.5, 0.25, 0, -0.75, -0.25\"], [\"2, 2, 3\", \"40, 10, 90, 200, -0.666667, -0.333333, -0.333333, -0.333333, -0.8, -0.2, -1.8, 0, -0.066667, 0.066667, 0.266667, -0.333333\"], [\"3, 2, 3\", \"0.666667, 1, 5.666667, -0.666667, -1.333333, -2, -11.333333, 9.333333, 0.333333, 0, -0.666667, 1.666667, -0.333333, 0, -1.333333, 0.333333\"], [\"2, 3, 3\", \"50, 0, 0, 200, -0.833333, -0.166667, 1.166667, -0.333333, -1.25, 0.25, 2.25, 0, -0.083333, 0.083333, 0.416667, -0.333333\"], [\"3, 3, 3\", \"-2, 1, 7, -4, 4, -2, -14, 16, 3, 0, -2, 5, 1, 0, -2, 2\"]]", 
      "solution": "zamenjaj <- function(problem, vst, izs) {\r\n  x <- problem$bazne[izs]\r\n  problem$bazne[izs] <- problem$nebazne[vst]\r\n  problem$nebazne[vst] <- x\r\n\r\n  A <- problem$A\r\n  b <- problem$b\r\n  f <- problem$f\r\n  v <- problem$v\r\n\r\n  problem$A[izs, vst] <- 1 / A[izs, vst]\r\n  problem$A[-izs, vst] <- A[-izs, vst] / A[izs, vst]\r\n  problem$A[izs, -vst] <- -A[izs, -vst] / A[izs, vst]\r\n  problem$A[-izs, -vst] <- A[-izs, -vst] - outer(A[-izs, vst], A[izs, -vst]) / A[izs, vst]\r\n\r\n  problem$b[izs] <- -b[izs] / A[izs, vst]\r\n  problem$b[-izs] <- b[-izs] - A[-izs, vst] * b[izs] / A[izs, vst]\r\n\r\n  problem$f[vst] <- f[vst] / A[izs, vst]\r\n  problem$f[-vst] <- f[-vst] - A[izs, -vst] * f[vst] / A[izs, vst]\r\n\r\n  problem$v <- v - b[izs] * f[vst] / A[izs, vst]\r\n  \r\n  return(problem)\r\n}", 
      "problem": 54, 
      "validation": "check$equal(predstavi(zamenjaj(slovar.2, 2, 3)),\r\n            predstavi(list(A = matrix(c(-2/3, -4/5, -1/15, -1/3, -1/5, 1/15, -1/3, -9/5, 4/15), 3, byrow = TRUE),\r\n                           b = c(40, 10, 90), f = c(-1/3, 0, -1/3), v = 200,\r\n                           bazne = c(\"x2\", \"y1\", \"y2\"), nebazne = c(\"x1\", \"x3\", \"y3\"))))\r\ncheck$equal(predstavi(zamenjaj(slovar.3, 1, 1)),\r\n            predstavi(list(A = matrix(c(0, 0, -1/2, 4, -2, 3, -3, 1, 2), 3, byrow = TRUE),\r\n                           b = c(1/2, 0, 0), f = c(-1, 2, -4), v = 4,\r\n                           bazne = c(\"x1\", \"y2\", \"y3\"), nebazne = c(\"x2\", \"x3\", \"y1\"))))\r\nfor(i in 1 : 3) {\r\n  for(j in i : 3) {\r\n    check$challenge(predstavi(zamenjaj(slovar.2, i, j)), c(2, i, j))\r\n    check$challenge(predstavi(zamenjaj(slovar.3, i, j)), c(3, i, j))\r\n  }\r\n}"
    }
  }, 
  {
    "pk": 909, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavite funkcijo `newton(x0, eps, N)`, ki poi\u0161\u010de pribli\u017eek za ni\u010dlo\npolinoma $p(x)$ po Newtonovi metodi z za\u010detnim pribli\u017ekom `x0`.\nFunkcija naj vrne par $(x,p(x))$, pri \u010demer je $x$ zadnji\nizra\u010dunan pribli\u017eek, $p(x)$ pa vrednost polinoma v tej to\u010dki.\n\nFunkcija naj pribli\u017eke ra\u010duna tako dolgo, da bodisi razlika med\nzaporednima pribli\u017ekoma pride pod `eps` bodisi izra\u010dunamo `N`\npribli\u017ekov. \u010ce funkcija ne more najti ni\u010dle v predpisanem \u0161tevilu\nkorakov, naj vrne `None`.", 
      "timestamp": "2013-01-18 13:22:52", 
      "challenge": "[[\"None\", \"None\"], [\"None\", \"None\"], [\"None\", \"None\"], [\"None\", \"None\"], [\"None\", \"None\"], [\"None\", \"None\"], [\"None\", \"None\"], [\"None\", \"None\"], [\"None\", \"None\"], [\"None\", \"None\"], [\"None\", \"None\"], [\"None\", \"None\"], [\"None\", \"None\"], [\"None\", \"None\"], [\"None\", \"None\"], [\"None\", \"None\"], [\"None\", \"None\"], [\"None\", \"None\"], [\"None\", \"None\"], [\"None\", \"None\"], [\"None\", \"None\"], [\"None\", \"None\"], [\"None\", \"None\"], [\"None\", \"None\"], [\"None\", \"None\"], [\"None\", \"None\"], [\"None\", \"None\"], [\"None\", \"None\"], [\"None\", \"None\"], [\"None\", \"None\"], [\"None\", \"None\"], [\"None\", \"None\"], [\"None\", \"None\"], [\"None\", \"None\"], [\"None\", \"None\"], [\"None\", \"None\"], [\"None\", \"None\"], [\"None\", \"None\"], [\"None\", \"None\"], [\"None\", \"None\"], [\"None\", \"None\"], [\"None\", \"None\"], [\"None\", \"None\"], [\"None\", \"None\"], [\"None\", \"None\"], [\"None\", \"(-0.901686, 0.0)\"], [\"None\", \"(-0.901686, 0.0)\"], [\"None\", \"(-0.901686, 0.0)\"], [\"None\", \"(-0.901686, 0.0)\"], [\"None\", \"(-0.901686, 0.0)\"], [\"None\", \"(-0.901686, 0.0)\"], [\"None\", \"(-0.901686, 0.0)\"], [\"None\", \"(-0.901686, 0.0)\"], [\"None\", \"(-0.901686, 0.0)\"], [\"None\", \"(-0.901686, 0.0)\"], [\"None\", \"(-0.901686, 0.0)\"], [\"None\", \"(-0.901686, 0.0)\"], [\"None\", \"(-0.901686, 0.0)\"], [\"None\", \"(-0.901686, 0.0)\"], [\"None\", \"(-0.901686, 0.0)\"], [\"None\", \"(-0.901686, 0.0)\"], [\"None\", \"(-0.901686, 0.0)\"], [\"None\", \"(-0.901686, 0.0)\"], [\"None\", \"(-0.901686, 0.0)\"], [\"None\", \"(-0.901686, 0.0)\"], [\"None\", \"(-0.901686, 0.0)\"], [\"None\", \"(-0.901686, 0.0)\"], [\"None\", \"(-0.901686, 0.0)\"], [\"None\", \"(-0.901686, 0.0)\"], [\"None\", \"(-0.901686, 0.0)\"], [\"None\", \"(-0.901686, 0.0)\"], [\"None\", \"(-0.901686, 0.0)\"], [\"None\", \"(-0.901686, 0.0)\"], [\"None\", \"(-0.901686, 0.0)\"], [\"None\", \"(-0.901686, 0.0)\"], [\"None\", \"(-0.901686, 0.0)\"], [\"None\", \"(-0.901686, 0.0)\"], [\"None\", \"(-0.901686, 0.0)\"], [\"None\", \"(-0.901686, 0.0)\"], [\"None\", \"(-0.901686, 0.0)\"], [\"None\", \"(-0.901686, 0.0)\"], [\"None\", \"(-0.901686, 0.0)\"], [\"None\", \"(-0.901686, 0.0)\"], [\"None\", \"(-0.901686, 0.0)\"], [\"None\", \"(-0.901686, 0.0)\"], [\"None\", \"(-0.901686, 0.0)\"], [\"None\", \"(-0.901686, 0.0)\"], [\"None\", \"(-0.901686, 0.0)\"], [\"None\", \"(-0.901686, 0.0)\"], [\"None\", \"(-0.901686, 0.0)\"], [\"None\", \"(-0.901686, 0.0)\"], [\"None\", \"(-0.901686, 0.0)\"], [\"None\", \"(-0.901686, 0.0)\"], [\"None\", \"(-0.901686, 0.0)\"], [\"None\", \"(-0.901686, 0.0)\"], [\"None\", \"(4.912579, 0.0)\"], [\"None\", \"(1.0, 0.0)\"], [\"None\", \"(0.261322, 0.0)\"], [\"None\", \"(0.261322, 0.0)\"], [\"None\", \"(0.261322, 0.0)\"], [\"None\", \"(0.261322, 0.0)\"], [\"None\", \"(0.261322, 0.0)\"], [\"None\", \"(0.261322, 0.0)\"], [\"None\", \"(0.261322, 0.0)\"], [\"None\", \"(0.261322, 0.0)\"], [\"None\", \"(0.261322, 0.0)\"], [\"None\", \"None\"], [\"None\", \"(1.0, 0.0)\"], [\"None\", \"(1.0, 0.0)\"], [\"None\", \"(1.0, 0.0)\"], [\"None\", \"(1.0, 0.0)\"], [\"None\", \"(1.0, 0.0)\"], [\"None\", \"(1.0, 0.0)\"], [\"None\", \"(1.0, 0.0)\"], [\"None\", \"(-0.901686, 0.0)\"], [\"None\", \"(1.727785, 0.0)\"], [\"None\", \"(1.727785, 0.0)\"], [\"None\", \"(1.727785, 0.0)\"], [\"None\", \"(1.727785, 0.0)\"], [\"None\", \"(1.727785, 0.0)\"], [\"None\", \"(1.727785, 0.0)\"], [\"None\", \"(1.727785, 0.0)\"], [\"None\", \"(1.727785, 0.0)\"], [\"None\", \"(1.727785, 0.0)\"], [\"None\", \"(1.727785, 0.0)\"], [\"None\", \"(1.727785, 0.0)\"], [\"None\", \"(1.727785, 0.0)\"], [\"None\", \"(1.727785, 0.0)\"], [\"None\", \"(1.727785, 0.0)\"], [\"None\", \"(1.727785, 0.0)\"], [\"None\", \"(1.727785, 0.0)\"], [\"None\", \"(1.727785, 0.0)\"], [\"None\", \"(1.727785, 0.0)\"], [\"None\", \"(1.727785, 0.0)\"], [\"None\", \"(1.727785, 0.0)\"], [\"None\", \"(1.727785, 0.0)\"], [\"None\", \"(1.727785, 0.0)\"], [\"None\", \"(1.727785, 0.0)\"], [\"None\", \"(1.727785, 0.0)\"], [\"None\", \"(-0.901686, 0.0)\"], [\"None\", \"(-0.901686, 0.0)\"], [\"None\", \"None\"], [\"None\", \"(4.912579, 0.0)\"], [\"None\", \"(4.912579, 0.0)\"], [\"None\", \"(4.912579, 0.0)\"], [\"None\", \"(4.912579, 0.0)\"], [\"None\", \"(4.912579, 0.0)\"], [\"None\", \"(4.912579, 0.0)\"], [\"None\", \"(4.912579, 0.0)\"], [\"None\", \"(4.912579, 0.0)\"], [\"None\", \"(4.912579, 1e-06)\"], [\"None\", \"(4.912579, 0.0)\"], [\"None\", \"(4.912579, 0.0)\"], [\"None\", \"(4.912579, 1e-06)\"], [\"None\", \"(4.912579, 0.0)\"], [\"None\", \"(4.912579, 0.0)\"], [\"None\", \"(4.912579, 0.0)\"], [\"None\", \"(4.912579, 0.0)\"], [\"None\", \"(4.912579, 1e-06)\"], [\"None\", \"(4.912579, 0.0)\"], [\"None\", \"(4.912579, 0.0)\"], [\"None\", \"(4.912579, 0.0)\"], [\"None\", \"(4.912579, 0.0)\"], [\"None\", \"(4.912579, 0.0)\"], [\"None\", \"(4.912579, 0.0)\"], [\"None\", \"(4.912579, 0.0)\"], [\"None\", \"(4.912579, 1e-06)\"], [\"None\", \"(4.912579, 3e-06)\"], [\"None\", \"(4.912579, 0.0)\"], [\"None\", \"(4.912579, 0.0)\"], [\"None\", \"(4.912579, 0.0)\"], [\"None\", \"(4.912579, 0.0)\"], [\"None\", \"(4.912579, 0.0)\"], [\"None\", \"(4.912579, 0.0)\"], [\"None\", \"(4.912579, 0.0)\"], [\"None\", \"(4.912579, 0.0)\"], [\"None\", \"(4.912579, 0.0)\"], [\"None\", \"(4.912579, 1e-06)\"], [\"None\", \"(4.912579, 3e-06)\"], [\"None\", \"(4.912579, 0.0)\"], [\"None\", \"(4.912579, 0.0)\"], [\"None\", \"(4.912579, 0.0)\"], [\"None\", \"(4.912579, 0.0)\"], [\"None\", \"(4.912579, 0.0)\"], [\"None\", \"(4.912579, 0.0)\"], [\"None\", \"(4.912579, 0.0)\"], [\"None\", \"(4.912579, 0.0)\"], [\"None\", \"(4.912579, 0.0)\"], [\"None\", \"(4.912579, 0.0)\"], [\"None\", \"(4.912579, 0.0)\"], [\"None\", \"(4.912579, 0.0)\"], [\"None\", \"(4.912579, 1e-06)\"], [\"None\", \"(4.912579, 2e-06)\"], [\"None\", \"(4.912579, 0.0)\"], [\"None\", \"(4.912579, 0.0)\"], [\"None\", \"(4.912579, 0.0)\"], [\"None\", \"(4.912579, 0.0)\"], [\"None\", \"(4.912579, 0.0)\"], [\"None\", \"(4.912579, 0.0)\"], [\"None\", \"(4.912579, 0.0)\"]]", 
      "solution": "def newton(x0, eps, N):\n    for i in range(N):\n        x1 = naslednji_priblizek(x0)\n        if not x1:\n            return\n        elif abs(x1 - x0) < eps:\n            y1, _ = polinom(x1)\n            return (x1, y1)\n        x0 = x1", 
      "problem": 306, 
      "validation": "Check.equal(\"newton(1, 0.000001, 10)\", (1, 0))\nCheck.equal(\"newton(2, 0.000001, 10)\", (1.7277846008761208, -3.410605131648481e-13))\nCheck.equal(\"newton(-1, 0.000001, 10)\", (-0.9016856210769841, -7.560174708487466e-12))\nCheck.equal(\"newton(0.8, 0.000001, 10)\", (1, 0))\nCheck.equal(\"newton(0.5, 0.000001, 10)\", (0.26132182832661266, 4.2526315802149384e-10))\nCheck.equal(\"newton(0.6, 0.000001, 10)\", None)\nCheck.equal(\"newton(0.605, 0.000001, 10)\", None)\nCheck.equal(\"newton(0.605, 0.000001, 12)\", (4.912579191801492, -1.4210854715202004e-14))\nCheck.equal(\"newton(100, 0.000001, 30)\", (4.912579191801492, -1.4210854715202004e-14))\nCheck.equal(\"newton(-100, 0.000001, 30)\", (-0.9016856210769841, -1.4210854715202004e-14))\n\nfor x in range(-100, 100):\n    Check.challenge(newton(x / 10, 0.0001, 10))"
    }
  }, 
  {
    "pk": 865, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavite funkcijo `rekonstruiraj.prvotni(z, w, u)`, ki iz vektorja\nza\u010detnih \u010dlenov `z`, vektorja ute\u017ei `w` in vektorja ute\u017eenih teko\u010dih\npovpre\u010dij `p` rekonstruira prvotni vektor `v`.\nTorej, funkcija mora izra\u010dunati vektor $v = (v_1, v_2, \\dots, v_n)$ iz:\nvektorja za\u010detnih \u010dlenov $z = (v_1, v_2, \\dots, v_{k - 1})$,\nvektorja ute\u017ei $w = (w_1, w_2, \\dots, w_k)$ in vektorja ute\u017eenih drse\u010dih\nsredin $u = (u_1, u_2, \\dots, u_{n - k + 1})$, ki je enak:\n$$\n  (\\frac{w_1 v_1 + w_2 v_2 + \\dots + w_k v_k}{W},\n   \\frac{w_1 v_2 + w_2 v_3 + \\dots + w_k v_{k + 1}}{W},\n   \\dots,\n   \\frac{w_1 v_{n - k + 1} + w_2 v_{n - k + 2} + \\dots + w_k v_n}{W}),\n$$\nkjer je $W = w_1 + \\dots + w_k$. Privzamete lahko, da so vse ute\u017ei $w_i$\nneni\u010delne.", 
      "timestamp": "2012-12-12 10:47:50", 
      "challenge": "[[\"1, 3:4, 5:12\", \"1, 8, 4.5, 8.875, 7.34375, 10.242188, 9.818359, 11.88623, 12.085327\"], [\"1:2, 3:5, 5:19\", \"1, 2, 9.8, 5.36, 6.632, 10.6784, 9.07808, 10.330496, 12.688755, 12.450698, 13.626188, 15.22863, 15.641383, 16.749716, 18.015398, 18.737852, 19.800479\"], [\"1:3, 3:6, 5:26\", \"1, 2, 3, 10.666667, 6.111111, 7.296296, 8.512346, 11.986626, 10.6881, 11.845993, 13.009626, 14.917266, 14.972864, 16.072956, 17.165327, 18.493824, 19.10845, 20.164412, 21.210445, 22.327463, 23.171278, 24.200404, 25.221747, 26.262636, 27.19977\"], [\"1:4, 3:7, 5:33\", \"1, 2, 3, 4, 10.714286, 6.816327, 7.932945, 9.066222, 10.21854, 13.02527, 12.241708, 13.335796, 14.431426, 15.527117, 17.087408, 17.443839, 18.499597, 19.55032, 20.594645, 21.764375, 22.534351, 23.563212, 24.586792, 25.604666, 26.654592, 27.573188, 28.586982, 29.597115, 30.603696, 31.617822, 32.589311, 33.595556, 34.599676\"], [\"1:5, 3:8, 5:40\", \"1, 2, 3, 4, 5, 10, 7.5, 8.5625, 9.632812, 10.711914, 11.800903, 13.901016, 13.763643, 14.812224, 15.861017, 16.909318, 17.956241, 19.250687, 19.885052, 20.912373, 21.93709, 22.958675, 23.976575, 25.052728, 25.936575, 26.949845, 27.960709, 28.969057, 29.97483, 30.99365, 31.957227, 32.963126, 33.967502, 34.970438, 35.972054, 36.976412, 37.965152, 38.967617, 39.969272, 40.970228, 41.970605\"], [\"1:6, 3:9, 5:47\", \"1, 2, 3, 4, 5, 6, 8.555556, 8.17284, 9.192044, 10.213382, 11.237091, 12.263435, 13.292705, 14.670907, 15.265343, 16.279888, 17.294391, 18.30866, 19.322466, 20.33553, 21.424333, 22.306811, 23.314651, 24.321736, 25.327945, 26.333156, 27.337247, 28.357172, 29.323593, 30.3272, 31.330169, 32.332486, 33.334148, 34.335168, 35.339364, 36.329924, 37.331429, 38.332558, 39.333339, 40.333803, 41.333991, 42.334793, 43.332187, 44.332773, 45.333174, 46.333415, 47.333527, 48.333538, 49.333666\"], [\"1:7, 3:10, 5:54\", \"1, 2, 3, 4, 5, 6, 7, 6.4, 8.84, 9.824, 10.8064, 11.78704, 12.765744, 13.742318, 14.71655, 15.368205, 16.753026, 17.741128, 18.729321, 19.717741, 20.706552, 21.695948, 22.686157, 23.613449, 24.714937, 25.708749, 26.70315, 27.698217, 28.694026, 29.690653, 30.688165, 31.673824, 32.70016, 33.697444, 34.695194, 35.693412, 36.692093, 37.691225, 38.690785, 39.688179, 40.694881, 41.69381, 42.692997, 43.69242, 44.692058, 45.691881, 46.691858, 47.691444, 48.693111, 49.69272, 50.692448, 51.692278, 52.692191, 53.692169, 54.692194, 55.692144, 56.692548\"], [\"1:8, 3:11, 5:61\", \"1, 2, 3, 4, 5, 6, 7, 8, 3.545455, 9.504132, 10.459053, 11.409876, 12.356229, 13.297704, 14.233859, 15.16421, 16.088229, 16.013605, 18.230469, 19.197395, 20.164666, 21.13262, 22.101651, 23.07222, 24.044862, 25.020198, 25.818627, 27.113059, 28.096372, 29.081237, 30.067826, 31.056305, 32.046832, 33.039549, 34.034582, 34.99924, 36.069193, 37.062171, 38.05631, 39.051605, 40.048036, 41.045562, 42.044122, 43.043635, 44.038032, 45.054277, 46.051645, 47.049622, 48.048159, 49.047197, 50.046671, 51.04651, 52.046638, 53.045892, 54.049561, 55.048653, 56.048013, 57.047601, 58.047375, 59.047296, 60.047323, 61.047421, 62.047356, 63.048156, 64.047864\"], [\"1:9, 3:12, 5:68\", \"1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10.166667, 11.097222, 12.021991, 12.94049, 13.852197, 14.756547, 15.652926, 16.54067, 17.419059, 16.620647, 19.700146, 20.649695, 21.599863, 22.551102, 23.503937, 24.458974, 25.416906, 26.378528, 27.344748, 28.03882, 29.503584, 30.478796, 31.456249, 32.436154, 33.418714, 34.404118, 35.392536, 36.384109, 37.378944, 38.330805, 39.432598, 40.422551, 41.414106, 42.407245, 43.40193, 44.398098, 45.395666, 46.394522, 47.394529, 48.387805, 49.409521, 50.405923, 51.40313, 52.401072, 53.399671, 54.398845, 55.398501, 56.398547, 57.398884, 58.398126, 59.402605, 60.401429, 61.400589, 62.400034, 63.399714, 64.39958, 65.399584, 66.399682, 67.399833, 68.399786, 69.400671, 70.400313, 71.40008\"], [\"1:10, 3:13, 5:75\", \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -4.230769, 10.828402, 11.738279, 12.641224, 13.536703, 14.424141, 15.302922, 16.172377, 17.031791, 17.88039, 18.717343, 17.198559, 21.163764, 22.098773, 23.034649, 23.971909, 24.911146, 25.853036, 26.798346, 27.747945, 28.702819, 29.664075, 30.272472, 31.888189, 32.856993, 33.828529, 34.803021, 35.780682, 36.761706, 37.746267, 38.734507, 39.726531, 40.722394, 41.666633, 42.791679, 43.779456, 44.769113, 45.760618, 46.753919, 47.748941, 48.745584, 49.743722, 50.743204, 51.74385, 52.736922, 53.761567, 54.75737, 55.75408, 56.751616, 57.749893, 58.748818, 59.748292, 60.748214, 61.748479, 62.748985, 63.748314, 64.752982, 65.751675, 66.750731, 67.750095, 68.749713, 69.749533, 70.749507, 71.749589, 72.749736, 73.74991, 74.749878, 75.750716, 76.750341, 77.750093, 78.749946\"]]", 
      "solution": "rekonstruiraj.prvotni <- function(z, w, u) {\n  k <- length(w)\n  n <- length(u) + k - 1\n  v <- rep(0, n)\n  v[1 : (k - 1)] <- z\n  for(i in 0 : (n - k)) {\n    v[k + i] <- (sum(w) * u[i + 1] - sum(v[(i + 1) : (i + k - 1)] * w[-k])) / w[k]\n  }\n  return(v)\n}", 
      "problem": 281, 
      "validation": "check$equal(rekonstruiraj.prvotni(1, c(1, 1), 0.5 + 1 : 9), 1 : 10)\ncheck$equal(rekonstruiraj.prvotni(1 : 3, c(1, 2, 1, 2),  c(4, 5.5, 7 , 8.5, 10, 11.5, 13) / 1.5), 1 : 10)\ncheck$equal(rekonstruiraj.prvotni(rep(4, 3), 1 : 4, rep(4, 7)), rep(4, 10))\nfor(i in 1 : 10) {\n  podatki <- list(z = 1 : i, w = 3 : (i + 3), u = 5 : (7 * i + 5))\n  check$challenge(rekonstruiraj.prvotni(podatki$z, podatki$w, podatki$u), podatki)\n}"
    }
  }, 
  {
    "pk": 897, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "\u0160irjenje po\u017eara v gozdu lahko simuliramo na slede\u010d na\u010din:\r\n\r\n1. gozd predstavimo z matriko, v kateri so na nekih poljih drevesa,\r\n   neka polja pa so prazna. \u0160tevilo dreves je odvisno od pora\u0161\u010denosti\r\n   gozda.\r\n2. po\u017ear se lahko raz\u0161iri na sosednja drevesa odvisno od kota,\r\n   pod katerim piha veter. \u010ce je smer vetra v prvem kvadrantu,\r\n   se ogenj lahko \u0161iri navzgor in na desno. Natan\u010dneje, \u010de je kot vetra\r\n   enak $\\phi$, je verjetnost, da se bo ogenj raz\u0161iril navzgor enaka\r\n   $(\\cos \\phi)^2$, verjetnost, da se bo raz\u0161iril na desno pa\r\n   $(\\sin \\phi)^2$. Pri tem sta ta dva dogodka neodvisna.\r\n   Za ostale kvadrante velja podobno.\r\n3. smer vetra je poradzeljena normalno z danim odklonom.\r\n4. vsako drevo gori nekaj \u010dasa, po tem pa pogori in ne more ve\u010d zagoreti.\r\n5. drevesa imajo tudi dano vnetljivost, torej verjetnost, da se bodo\r\n   v\u017egala, \u010de se po\u017ear raz\u0161iri v njihovo smer.\r\n\r\nSestavite funkcijo\r\n\r\n    gozd(x = 20, y = 20, porascenost = 0.7,\r\n         smer.vetra = 0, odklon.vetra = pi / 3,\r\n         vnetljivost = 0.9, trajanje = 4)\r\n\r\nki simulira \u0161irjenje po\u017eara v gozdu z dano velikostjo in pora\u0161\u010denostjo,\r\npri \u010demer naj veter piha z dano smerjo in odklonom,\r\nvsa drevesa naj se v\u017egejo z dano vnetljivostjo\r\nter gorijo dano \u0161tevilo korakov.\r\n\r\nFunkcija naj \u0161irjenje po\u017eara tudi grafi\u010dno predstavi.\r\nPrimer zaporedja slik, ki jih izri\u0161e ukaz `gozd()`:\r\n    ![primer](http://i.imgur.com/8iYnXsz.gif)", 
      "timestamp": "2013-02-11 12:07:58", 
      "challenge": "[]", 
      "solution": "library(grid)\r\n\r\ngozd <- function(x = 20, y = 20, porascenost = 0.7,\r\n                 smer.vetra = 0, odklon.vetra = pi / 3,\r\n                 vnetljivost = 0.9, trajanje = 4) {\r\n  NI <- -1L\r\n  JE <- 0L\r\n  POZGANO <- 1L\r\n  GORI <- 2L\r\n  \r\n  korak <- function(drevesa) {\r\n    kot <- rnorm(1, smer.vetra, odklon.vetra)\r\n    \r\n    prezivetje <- matrix(1, x, y)\r\n    goreca <- which(drevesa >= GORI, arr.ind = TRUE)\r\n    nad.pod <- levo.desno <- goreca\r\n    if(sin(kot) > 0) {\r\n      # veter piha gor\r\n      nad.pod[, \"row\"] <- nad.pod[, \"row\"] - 1\r\n    } else {\r\n      # veter piha dol\r\n      nad.pod[, \"row\"] <- nad.pod[, \"row\"] + 1\r\n    }\r\n    prezivetje[nad.pod] <- (1 - vnetljivost * sin(kot)^2) * prezivetje[nad.pod]\r\n    \r\n    if(sin(kot) > 0) {\r\n      # veter piha desno\r\n      levo.desno[, \"col\"] <- levo.desno[, \"col\"] + 1\r\n    } else {\r\n      # veter piha levo\r\n      levo.desno[, \"col\"] <- levo.desno[, \"col\"] - 1\r\n    }\r\n    prezivetje[levo.desno] <- (1 - vnetljivost * cos(kot)^2) * prezivetje[levo.desno]\r\n    prezivi <- runif(x * y) < prezivetje\r\n    zagorela <- drevesa == JE & runif(x * y) > prezivetje\r\n    drevesa[zagorela] <- GORI + trajanje\r\n    drevesa[goreca] <- drevesa[goreca] - 1\r\n    return(drevesa)\r\n  }\r\n  drevesa <- matrix(sample(c(NI, JE), x * y, replace = TRUE, prob = c(1 - porascenost, porascenost)), x, y)\r\n  drevesa[x %/% 2 + 1, y %/% 2 + 1] <- GORI + trajanje\r\n  while(any(drevesa >= GORI)) {\r\n    znak <- readline(\"Naslednji korak... \")\r\n    if(znak != \"\") break\r\n    drevesa <- korak(drevesa)\r\n    grid.raster(matrix(c(\"white\", \"darkgreen\", \"black\", heat.colors(trajanje))[drevesa + 2], x, y), interpolate = FALSE)\r\n  }\r\n}", 
      "problem": 309, 
      "validation": ""
    }
  }, 
  {
    "pk": 234, 
    "model": "tomo.part", 
    "fields": {
      "_order": 3, 
      "description": "Definirajte razred `Datum`, s katerim predstavimo datum.\r\nNajprej sestavite konstruktor `__init__(self, dan, mesec, leto)`.", 
      "timestamp": "2012-12-14 14:57:42", 
      "challenge": "[]", 
      "solution": "class Datum:\r\n    def __init__(self, dan, mesec, leto):\r\n        self.dan = dan\r\n        self.mesec = mesec\r\n        self.leto = leto\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    def __repr__(self):\r\n        return \"{0}. {1}. {2}\".format(self.dan, self.mesec, self.leto)\r\n\r\n    def jeVeljaven(self):\r\n        return 1 <= self.mesec <= 12 \\\r\n               and 1 <= self.dan <= dolzineMesecev(self.leto)[self.mesec - 1]\r\n\r\n    def __lt__(self, other):\r\n        # uporabimo kar Pythonovo vgrajeno leksikografsko primerjavo\r\n        return (self.leto, self.mesec, self.dan) \\\r\n               < (other.leto, other.mesec, other.dan)\r\n\r\n    def __eq__(self, other):\r\n        # uporabimo kar Pythonovo vgrajeno leksikografsko primerjavo\r\n        return (self.leto, self.mesec, self.dan) \\\r\n               == (other.leto, other.mesec, other.dan)\r\n\r\n    def danVLetu(self):\r\n        return sum(dolzineMesecev(self.leto)[:self.mesec - 1]) + self.dan\r\n\r\n    def razlika(self, other):\r\n        # izra\u010dun se poenostavi, \u010de predpostavimo, da je self kasnej\u0161i datum\r\n        # \u010de ni, izra\u010dun obrnemo\r\n        if self < other:\r\n            return -other.razlika(self)\r\n        else:\r\n            # najprej pre\u0161tejemo \u0161tevilo dni v med za\u010detkoma let\r\n            razlika = sum(steviloDni(l) for l in range(other.leto, self.leto))\r\n            # nato upo\u0161tevamo \u0161e dni v posameznem letu\r\n            razlika += self.danVLetu()\r\n            razlika -= other.danVLetu()\r\n            return razlika\r\n\r\n    def danVTednu(self):\r\n        # uporabimo Zellerjev obrazec\r\n        q = self.dan\r\n        # upo\u0161tevamo popravek za januar in februar\r\n        if self.mesec > 2:\r\n            m = self.mesec\r\n            l = self.leto\r\n        else:\r\n            m = self.mesec + 12\r\n            l = self.leto - 1\r\n        j = l // 100\r\n        k = l % 100\r\n        h = (q + ((m + 1) * 26) // 10 + k + k // 4 + j // 4 - 2 * j) % 7\r\n        # popravimo vrednost h, da bo 1 ponedeljek in 7 nedelja\r\n        return (h - 2) % 7 + 1\r\n\r\n    def tedenVLetu(self):\r\n        # kateri dan v letu je bila pretekla nedelja\r\n        nedelja = self.danVLetu() - self.danVTednu()\r\n        # \u0161tevilo tednov je ravno \u0161tevilo preteklih nedelj + 1.\r\n        return nedelja // 7 + 2", 
      "problem": 72, 
      "validation": "Check.equal('Datum(14, 12, 1982).dan', 14)\r\nCheck.equal('Datum(14, 12, 1982).mesec', 12)\r\nCheck.equal('Datum(14, 12, 1982).leto', 1982)"
    }
  }, 
  {
    "pk": 38, 
    "model": "tomo.part", 
    "fields": {
      "_order": 4, 
      "description": "Sestavite funkcijo `je_permutacija(seznam)`, ki vrne `True`, \u010de dan\nseznam predstavlja permutacijo, in `False` sicer.\n\n\u010ce se le da, napi\u0161ite program, ki deluje v linearnem \u010dasu.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"], [\"None\", \"True\"], [\"None\", \"False\"]]", 
      "solution": "def je_permutacija(seznam):\n    n = len(seznam)\n    prisotni = [False for i in range(n)]\n    for i in seznam:\n        if i < 1 or i > n or prisotni[i - 1]:\n            return False\n        else:\n            prisotni[i - 1] = True\n    return all(prisotni)", 
      "problem": 19, 
      "validation": "Check.equal('je_permutacija([3, 4, 2, 1])', True)\nCheck.equal('je_permutacija([3, 2, 2, 1])', False)\nCheck.equal('je_permutacija([1, 4, 1])', False)\nfor i in range(30):\n    for j in range(i):\n        Check.challenge(je_permutacija([(k ** j) % (i + 1) for k in range(1, i + 1)]))"
    }
  }, 
  {
    "pk": 24, 
    "model": "tomo.part", 
    "fields": {
      "_order": 4, 
      "description": "Sestavite funkcijo `velikost.slike(diagonala, razmerje = 16 / 9)`, ki\nsprejme velikost diagonale televizije ter vrne niz, ki predstavlja\ndimenziji slike. Funkcija naj sprejme neobvezen argument, ki pove\nrazmerje slike. Dimenzije naj bodo zaokro\u017eene na celo \u0161tevilo.\n\nNa primer, `velikost.slike(100)` vrne niz `\"87 x 49\"`.", 
      "timestamp": "2012-10-22 10:27:37", 
      "challenge": "[]", 
      "solution": "velikost.slike <- function(diagonala, razmerje = 16 / 9) {\n  x <- round(razmerje * diagonala / sqrt(1 + razmerje ^ 2))\n  y <- round(diagonala / sqrt(1 + razmerje ^ 2))\n  paste(x, \"x\", y)\n}", 
      "problem": 16, 
      "validation": "check$equal(velikost.slike(100), \"87 x 49\")\ncheck$equal(velikost.slike(30, razmerje = 4 / 3), \"24 x 18\")\ncheck$equal(velikost.slike(40, razmerje = 1.618034), \"34 x 21\")"
    }
  }, 
  {
    "pk": 180, 
    "model": "tomo.part", 
    "fields": {
      "_order": 4, 
      "description": "Sestavite funkcijo `resi(slovar)`, ki sprejme za\u010detni slovar ter bodisi\r\njavi napako, da problem nima re\u0161itve ali pa je neomejen, bodisi vrne\r\nzadnji slovar simpleksne metode.", 
      "timestamp": "2012-10-23 12:58:06", 
      "challenge": "[[\"NA\", \"534.82875\"], [\"NA\", \"1.09537\"], [\"NA\", \"1470.248771\"], [\"NA\", \"2.525616\"], [\"NA\", \"0.142887\"], [\"NA\", \"0.312809\"], [\"NA\", \"2\"], [\"NA\", \"1.651715\"]]", 
      "solution": "resi <- function(slovar) {\r\n  vst <- vstopna(slovar$f)\r\n  if(is.na(vst)) {\r\n    return(slovar)\r\n  } else {\r\n    izs <- izstopna(slovar$A, slovar$b, vst)\r\n    slovar <- zamenjaj(slovar, vst, izs)\r\n    return(resi(slovar))\r\n  }\r\n}", 
      "problem": 54, 
      "validation": "check$equal(resi(slovar.1)$v, 13/3)\r\ncheck$equal(resi(slovar.2)$v, 200)\r\ncheck$equal(resi(slovar.3)$v, 27/2)\r\ncheck$equal(resi(slovar.4)$v, exception = \"Problem je neomejen\")\r\nfor (i in c(1, 2, 3, 5, 7, 9, 11, 12)) {\r\n  check$challenge(resi(list(\r\n    A = round(matrix(sin(3 * i * (1 : 9)), 3), 2),\r\n    b = round(abs(cos(i * (1 : 3))), 2),\r\n    f = round(abs(sin(i * (1 : 3))), 2),\r\n    v = 0,\r\n    bazne = 1 : 3,\r\n    nebazne = 1 : 3\r\n  ))$v)\r\n}"
    }
  }, 
  {
    "pk": 207, 
    "model": "tomo.part", 
    "fields": {
      "_order": 4, 
      "description": "Sestavite metodo `potroji(self)`, ki pod vsakim vozli\u0161\u010dem doda \u0161e dve\nnjegovi kopiji. Levo podrevo prestavi levo od leve kopije, desno\npoddrevo pa desno od desne kopije.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"None\", \"Drevo(1,\\n      levo = Drevo(1,\\n                   levo = Drevo(2,\\n                                levo = Drevo(2),\\n                                desno = Drevo(2)),\\n                   desno = Drevo()),\\n      desno = Drevo(1,\\n                    levo = Drevo(),\\n                    desno = Drevo(3,\\n                                  levo = Drevo(3),\\n                                  desno = Drevo(3))))\"], [\"None\", \"Drevo(1,\\n      levo = Drevo(1,\\n                   levo = Drevo(1,\\n                                levo = Drevo(1,\\n                                             levo = Drevo(2,\\n                                                          levo = Drevo(2,\\n                                                                       levo = Drevo(2,\\n                                                                                    levo = Drevo(2),\\n                                                                                    desno = Drevo(2)),\\n                                                                       desno = Drevo()),\\n                                                          desno = Drevo(2,\\n                                                                        levo = Drevo(),\\n                                                                        desno = Drevo(2,\\n                                                                                      levo = Drevo(2),\\n                                                                                      desno = Drevo(2)))),\\n                                             desno = Drevo()),\\n                                desno = Drevo(1)),\\n                   desno = Drevo()),\\n      desno = Drevo(1,\\n                    levo = Drevo(),\\n                    desno = Drevo(1,\\n                                  levo = Drevo(1),\\n                                  desno = Drevo(1,\\n                                                levo = Drevo(),\\n                                                desno = Drevo(3,\\n                                                              levo = Drevo(3,\\n                                                                           levo = Drevo(3,\\n                                                                                        levo = Drevo(3),\\n                                                                                        desno = Drevo(3)),\\n                                                                           desno = Drevo()),\\n                                                              desno = Drevo(3,\\n                                                                            levo = Drevo(),\\n                                                                            desno = Drevo(3,\\n                                                                                          levo = Drevo(3),\\n                                                                                          desno = Drevo(3))))))))\"], [\"None\", \"Drevo(1,\\n      levo = Drevo(1,\\n                   levo = Drevo(1,\\n                                levo = Drevo(1,\\n                                             levo = Drevo(1,\\n                                                          levo = Drevo(1,\\n                                                                       levo = Drevo(1,\\n                                                                                    levo = Drevo(1,\\n                                                                                                 levo = Drevo(2,\\n                                                                                                              levo = Drevo(2,\\n                                                                                                                           levo = Drevo(2,\\n                                                                                                                                        levo = Drevo(2,\\n                                                                                                                                                     levo = Drevo(2,\\n                                                                                                                                                                  levo = Drevo(2,\\n                                                                                                                                                                               levo = Drevo(2,\\n                                                                                                                                                                                            levo = Drevo(2),\\n                                                                                                                                                                                            desno = Drevo(2)),\\n                                                                                                                                                                               desno = Drevo()),\\n                                                                                                                                                                  desno = Drevo(2,\\n                                                                                                                                                                                levo = Drevo(),\\n                                                                                                                                                                                desno = Drevo(2,\\n                                                                                                                                                                                              levo = Drevo(2),\\n                                                                                                                                                                                              desno = Drevo(2)))),\\n                                                                                                                                                     desno = Drevo()),\\n                                                                                                                                        desno = Drevo(2)),\\n                                                                                                                           desno = Drevo()),\\n                                                                                                              desno = Drevo(2,\\n                                                                                                                            levo = Drevo(),\\n                                                                                                                            desno = Drevo(2,\\n                                                                                                                                          levo = Drevo(2),\\n                                                                                                                                          desno = Drevo(2,\\n                                                                                                                                                        levo = Drevo(),\\n                                                                                                                                                        desno = Drevo(2,\\n                                                                                                                                                                      levo = Drevo(2,\\n                                                                                                                                                                                   levo = Drevo(2,\\n                                                                                                                                                                                                levo = Drevo(2),\\n                                                                                                                                                                                                desno = Drevo(2)),\\n                                                                                                                                                                                   desno = Drevo()),\\n                                                                                                                                                                      desno = Drevo(2,\\n                                                                                                                                                                                    levo = Drevo(),\\n                                                                                                                                                                                    desno = Drevo(2,\\n                                                                                                                                                                                                  levo = Drevo(2),\\n                                                                                                                                                                                                  desno = Drevo(2)))))))),\\n                                                                                                 desno = Drevo()),\\n                                                                                    desno = Drevo(1)),\\n                                                                       desno = Drevo()),\\n                                                          desno = Drevo(1,\\n                                                                        levo = Drevo(),\\n                                                                        desno = Drevo(1,\\n                                                                                      levo = Drevo(1),\\n                                                                                      desno = Drevo(1)))),\\n                                             desno = Drevo()),\\n                                desno = Drevo(1)),\\n                   desno = Drevo()),\\n      desno = Drevo(1,\\n                    levo = Drevo(),\\n                    desno = Drevo(1,\\n                                  levo = Drevo(1),\\n                                  desno = Drevo(1,\\n                                                levo = Drevo(),\\n                                                desno = Drevo(1,\\n                                                              levo = Drevo(1,\\n                                                                           levo = Drevo(1,\\n                                                                                        levo = Drevo(1),\\n                                                                                        desno = Drevo(1)),\\n                                                                           desno = Drevo()),\\n                                                              desno = Drevo(1,\\n                                                                            levo = Drevo(),\\n                                                                            desno = Drevo(1,\\n                                                                                          levo = Drevo(1),\\n                                                                                          desno = Drevo(1,\\n                                                                                                        levo = Drevo(),\\n                                                                                                        desno = Drevo(3,\\n                                                                                                                      levo = Drevo(3,\\n                                                                                                                                   levo = Drevo(3,\\n                                                                                                                                                levo = Drevo(3,\\n                                                                                                                                                             levo = Drevo(3,\\n                                                                                                                                                                          levo = Drevo(3,\\n                                                                                                                                                                                       levo = Drevo(3,\\n                                                                                                                                                                                                    levo = Drevo(3),\\n                                                                                                                                                                                                    desno = Drevo(3)),\\n                                                                                                                                                                                       desno = Drevo()),\\n                                                                                                                                                                          desno = Drevo(3,\\n                                                                                                                                                                                        levo = Drevo(),\\n                                                                                                                                                                                        desno = Drevo(3,\\n                                                                                                                                                                                                      levo = Drevo(3),\\n                                                                                                                                                                                                      desno = Drevo(3)))),\\n                                                                                                                                                             desno = Drevo()),\\n                                                                                                                                                desno = Drevo(3)),\\n                                                                                                                                   desno = Drevo()),\\n                                                                                                                      desno = Drevo(3,\\n                                                                                                                                    levo = Drevo(),\\n                                                                                                                                    desno = Drevo(3,\\n                                                                                                                                                  levo = Drevo(3),\\n                                                                                                                                                  desno = Drevo(3,\\n                                                                                                                                                                levo = Drevo(),\\n                                                                                                                                                                desno = Drevo(3,\\n                                                                                                                                                                              levo = Drevo(3,\\n                                                                                                                                                                                           levo = Drevo(3,\\n                                                                                                                                                                                                        levo = Drevo(3),\\n                                                                                                                                                                                                        desno = Drevo(3)),\\n                                                                                                                                                                                           desno = Drevo()),\\n                                                                                                                                                                              desno = Drevo(3,\\n                                                                                                                                                                                            levo = Drevo(),\\n                                                                                                                                                                                            desno = Drevo(3,\\n                                                                                                                                                                                                          levo = Drevo(3),\\n                                                                                                                                                                                                          desno = Drevo(3))))))))))))))))\"]]", 
      "solution": "class Drevo(Drevo):\n    def potroji(self):\n        # \u010de je drevo prazno, ne naredimo ni\u010desar\n        if self.prazno:\n            pass\n        # sicer potrojimo otroka ter dodamo vmesni vozli\u0161\u010di\n        else:\n            self.levo.potroji()\n            self.desno.potroji()\n            self.levo = Drevo(self.vsebina, levo = self.levo)\n            self.desno = Drevo(self.vsebina, desno = self.desno)", 
      "problem": 61, 
      "validation": "Check.run([\n    \"d = Drevo(3)\",\n    \"d.potroji()\"\n    ], {'d': Drevo(3, levo=Drevo(3), desno=Drevo(3))})\nCheck.run([\n    \"d = Drevo(1, levo=Drevo(2), desno=Drevo(3))\",\n    \"d.potroji()\"\n    ], {'d': Drevo(1, levo=Drevo(1, levo=Drevo(2, levo=Drevo(2), desno=Drevo(2))), desno=Drevo(1, desno=Drevo(3, levo=Drevo(3), desno=Drevo(3))))})\n\n_drevo = Drevo(1, levo=Drevo(2), desno=Drevo(3))\nfor i in range(1, 4):\n    _drevo.potroji()\n    Check.challenge(_drevo)"
    }
  }, 
  {
    "pk": 847, 
    "model": "tomo.part", 
    "fields": {
      "_order": 4, 
      "description": "Sestavite metodo`odLeveProtiDesni(self)`, ki vrne generator,\r\nki od leve proti desni na\u0161teje vsa vozli\u0161\u010da v drevesu.", 
      "timestamp": "2012-11-22 12:11:41", 
      "challenge": "[[\"None\", \"[1]\"], [\"None\", \"[1, 2]\"], [\"None\", \"[1, 2, 3, 1]\"], [\"None\", \"[1, 2, 3, 1, 4, 1, 2]\"], [\"None\", \"[1, 2, 3, 1, 4, 1, 2, 5, 1, 2, 3, 1]\"], [\"None\", \"[1, 2, 3, 1, 4, 1, 2, 5, 1, 2, 3, 1, 6, 1, 2, 3, 1, 4, 1, 2]\"], [\"None\", \"[1, 2, 3, 1, 4, 1, 2, 5, 1, 2, 3, 1, 6, 1, 2, 3, 1, 4, 1, 2, 7, 1, 2, 3, 1, 4, 1, 2, 5, 1, 2, 3, 1]\"], [\"None\", \"[1, 2, 3, 1, 4, 1, 2, 5, 1, 2, 3, 1, 6, 1, 2, 3, 1, 4, 1, 2, 7, 1, 2, 3, 1, 4, 1, 2, 5, 1, 2, 3, 1, 8, 1, 2, 3, 1, 4, 1, 2, 5, 1, 2, 3, 1, 6, 1, 2, 3, 1, 4, 1, 2]\"], [\"None\", \"[1, 2, 3, 1, 4, 1, 2, 5, 1, 2, 3, 1, 6, 1, 2, 3, 1, 4, 1, 2, 7, 1, 2, 3, 1, 4, 1, 2, 5, 1, 2, 3, 1, 8, 1, 2, 3, 1, 4, 1, 2, 5, 1, 2, 3, 1, 6, 1, 2, 3, 1, 4, 1, 2, 9, 1, 2, 3, 1, 4, 1, 2, 5, 1, 2, 3, 1, 6, 1, 2, 3, 1, 4, 1, 2, 7, 1, 2, 3, 1, 4, 1, 2, 5, 1, 2, 3, 1]\"], [\"None\", \"[1, 2, 3, 1, 4, 1, 2, 5, 1, 2, 3, 1, 6, 1, 2, 3, 1, 4, 1, 2, 7, 1, 2, 3, 1, 4, 1, 2, 5, 1, 2, 3, 1, 8, 1, 2, 3, 1, 4, 1, 2, 5, 1, 2, 3, 1, 6, 1, 2, 3, 1, 4, 1, 2, 9, 1, 2, 3, 1, 4, 1, 2, 5, 1, 2, 3, 1, 6, 1, 2, 3, 1, 4, 1, 2, 7, 1, 2, 3, 1, 4, 1, 2, 5, 1, 2, 3, 1, 10, 1, 2, 3, 1, 4, 1, 2, 5, 1, 2, 3, 1, 6, 1, 2, 3, 1, 4, 1, 2, 7, 1, 2, 3, 1, 4, 1, 2, 5, 1, 2, 3, 1, 8, 1, 2, 3, 1, 4, 1, 2, 5, 1, 2, 3, 1, 6, 1, 2, 3, 1, 4, 1, 2]\"], [\"None\", \"[1, 2, 3, 1, 4, 1, 2, 5, 1, 2, 3, 1, 6, 1, 2, 3, 1, 4, 1, 2, 7, 1, 2, 3, 1, 4, 1, 2, 5, 1, 2, 3, 1, 8, 1, 2, 3, 1, 4, 1, 2, 5, 1, 2, 3, 1, 6, 1, 2, 3, 1, 4, 1, 2, 9, 1, 2, 3, 1, 4, 1, 2, 5, 1, 2, 3, 1, 6, 1, 2, 3, 1, 4, 1, 2, 7, 1, 2, 3, 1, 4, 1, 2, 5, 1, 2, 3, 1, 10, 1, 2, 3, 1, 4, 1, 2, 5, 1, 2, 3, 1, 6, 1, 2, 3, 1, 4, 1, 2, 7, 1, 2, 3, 1, 4, 1, 2, 5, 1, 2, 3, 1, 8, 1, 2, 3, 1, 4, 1, 2, 5, 1, 2, 3, 1, 6, 1, 2, 3, 1, 4, 1, 2, 11, 1, 2, 3, 1, 4, 1, 2, 5, 1, 2, 3, 1, 6, 1, 2, 3, 1, 4, 1, 2, 7, 1, 2, 3, 1, 4, 1, 2, 5, 1, 2, 3, 1, 8, 1, 2, 3, 1, 4, 1, 2, 5, 1, 2, 3, 1, 6, 1, 2, 3, 1, 4, 1, 2, 9, 1, 2, 3, 1, 4, 1, 2, 5, 1, 2, 3, 1, 6, 1, 2, 3, 1, 4, 1, 2, 7, 1, 2, 3, 1, 4, 1, 2, 5, 1, 2, 3, 1]\"]]", 
      "solution": "class Drevo(Drevo):\r\n    def odLeveProtiDesni(self):\r\n        if not self.prazno:\r\n            for n in self.levo.odLeveProtiDesni(): yield n\r\n            yield self.vsebina\r\n            for n in self.desno.odLeveProtiDesni(): yield n", 
      "problem": 60, 
      "validation": "Check.equal('list(Drevo(5, levo=Drevo(4, desno=Drevo(2)), desno=Drevo(3)).odLeveProtiDesni())', [4, 2, 5, 3])\r\nCheck.equal('sum(Drevo(5, levo=Drevo(4, desno=Drevo(2)), desno=Drevo(3)).odLeveProtiDesni())', 14)\r\nCheck.equal('list(Drevo(5, levo=Drevo(4, desno=Drevo(2)), desno=Drevo(3, levo=Drevo(4), desno=Drevo(4))).odLeveProtiDesni())', [4, 2, 5, 4, 3, 4])\r\n_drevesa = [Drevo(), Drevo()]\r\nfor i in range(1, 12):\r\n    _drevesa.append(Drevo(i, levo=_drevesa[-1], desno=_drevesa[-2]))\r\n    Check.challenge(list(_drevesa[-1].odLeveProtiDesni()))"
    }
  }, 
  {
    "pk": 139, 
    "model": "tomo.part", 
    "fields": {
      "_order": 4, 
      "description": "Sestavite metodo `__repr__`, ki predstavi datum v obliki\n`\"dan. mesec. leto\"`.", 
      "timestamp": "2012-10-24 13:30:17", 
      "challenge": "[]", 
      "solution": "class Datum(Datum):\n    def __repr__(self):\n        return \"{0}. {1}. {2}\".format(self.dan, self.mesec, self.leto)", 
      "problem": 48, 
      "validation": "Check.equal('str(Datum(14, 12, 1982))', \"14. 12. 1982\")\nCheck.equal('str(Datum(21, 12, 2012))', \"21. 12. 2012\")"
    }
  }, 
  {
    "pk": 867, 
    "model": "tomo.part", 
    "fields": {
      "_order": 4, 
      "description": "Petino to\u010dk pri tej nalogi dobite, \u010de so va\u0161e re\u0161itve u\u010dinkovite. \u010ce\n\u017eelite preveriti, ali so, za spodnjo re\u0161itev vpi\u0161ite poljuben pravilen\nprogram, lahko tudi le komentar `#`. V tem primeru se bodo zagnali testi,\nki bodo preverili u\u010dinkovitost va\u0161ih re\u0161itev.", 
      "timestamp": "2012-12-12 10:47:50", 
      "challenge": "[[\"NA\", \"-0.930725, -0.810616, 0.054769, 0.8698, 0.885141, 0.086687, -0.791466, -0.941949, -0.226408, 0.697291, 0.979904, 0.361598, -0.58916, -0.998247, -0.48955, 0.469237, 0.996609, 0.607704, -0.339921, -0.975025, -0.713695, 0.203803, 0.933925, 0.805401, -0.063605, -0.874133, -0.880987, -0.077866, 0.796845, 0.93894, 0.217778, -0.703608, -0.9781, -0.353331, 0.596289, 0.997684, 0.481813, -0.477034, -0.997299, -0.600651, 0.348232, 0.976953, 0.707467, -0.21246, -0.937053, -0.800123, 0.072436, 0.878398, 0.876765, 0.069038, -0.802162, -0.935858, -0.209131, 0.70987, 0.97622, 0.345037, -0.603371, -0.997043, -0.474038, 0.484795, 0.99791, 0.593551, -0.356516, -0.978804, -0.701184, 0.221101, 0.940107, 0.794782, -0.081261, -0.882594, -0.872474, -0.060205, 0.807415, 0.932702, 0.200467, -0.716077, -0.974263, -0.336716, 0.610406, 0.996323, 0.466226, -0.492518, -0.998443, -0.586404, 0.364772, 0.980578, 0.694845, -0.229725, -0.943087, -0.78938, 0.09008, 0.88672, 0.868114, 0.051368, -0.812606, -0.929473, -0.191787, 0.722227, 0.972229, 0.328368, -0.617393\"], [\"NA\", \"-0.810616, 0.054769, 0.8698, 0.885141, 0.086687, -0.791466, -0.941949, -0.226408, 0.697291, 0.979904, 0.361598, -0.58916, -0.998247, -0.48955, 0.469237, 0.996609, 0.607704, -0.339921, -0.975025, -0.713695, 0.203803, 0.933925, 0.805401, -0.063605, -0.874133, -0.880987, -0.077866, 0.796845, 0.93894, 0.217778, -0.703608, -0.9781, -0.353331, 0.596289, 0.997684, 0.481813, -0.477034, -0.997299, -0.600651, 0.348232, 0.976953, 0.707467, -0.21246, -0.937053, -0.800123, 0.072436, 0.878398, 0.876765, 0.069038, -0.802162, -0.935858, -0.209131, 0.70987, 0.97622, 0.345037, -0.603371, -0.997043, -0.474038, 0.484795, 0.99791, 0.593551, -0.356516, -0.978804, -0.701184, 0.221101, 0.940107, 0.794782, -0.081261, -0.882594, -0.872474, -0.060205, 0.807415, 0.932702, 0.200467, -0.716077, -0.974263, -0.336716, 0.610406, 0.996323, 0.466226, -0.492518, -0.998443, -0.586404, 0.364772, 0.980578, 0.694845, -0.229725, -0.943087, -0.78938, 0.09008, 0.88672, 0.868114, 0.051368, -0.812606, -0.929473, -0.191787, 0.722227, 0.972229, 0.328368, -0.617393, -0.995526\"], [\"NA\", \"0.054769, 0.8698, 0.885141, 0.086687, -0.791466, -0.941949, -0.226408, 0.697291, 0.979904, 0.361598, -0.58916, -0.998247, -0.48955, 0.469237, 0.996609, 0.607704, -0.339921, -0.975025, -0.713695, 0.203803, 0.933925, 0.805401, -0.063605, -0.874133, -0.880987, -0.077866, 0.796845, 0.93894, 0.217778, -0.703608, -0.9781, -0.353331, 0.596289, 0.997684, 0.481813, -0.477034, -0.997299, -0.600651, 0.348232, 0.976953, 0.707467, -0.21246, -0.937053, -0.800123, 0.072436, 0.878398, 0.876765, 0.069038, -0.802162, -0.935858, -0.209131, 0.70987, 0.97622, 0.345037, -0.603371, -0.997043, -0.474038, 0.484795, 0.99791, 0.593551, -0.356516, -0.978804, -0.701184, 0.221101, 0.940107, 0.794782, -0.081261, -0.882594, -0.872474, -0.060205, 0.807415, 0.932702, 0.200467, -0.716077, -0.974263, -0.336716, 0.610406, 0.996323, 0.466226, -0.492518, -0.998443, -0.586404, 0.364772, 0.980578, 0.694845, -0.229725, -0.943087, -0.78938, 0.09008, 0.88672, 0.868114, 0.051368, -0.812606, -0.929473, -0.191787, 0.722227, 0.972229, 0.328368, -0.617393, -0.995526, -0.458377\"]]", 
      "solution": "#", 
      "problem": 281, 
      "validation": "enota.casa <- system.time(sin(1:500000))[1]\ncasi.sredin <- 0\ncasi.rekonstrukcije <- 0\nfor(i in 1 : 3) {\n  podatki <- list(v = sin((i + 10) : (i + 50000)), w = i : (i + 8))\n  zacetek <- proc.time()[1]\n  u <- utezene.sredine(podatki$v, podatki$w)\n  sredina <- proc.time()[1]\n  check$challenge(rekonstruiraj.prvotni(podatki$v[1 : 8], podatki$w, u)[20000:20100])  \n  konec <- proc.time()[1]\n  casi.sredin <- casi.sredin + (sredina - zacetek)\n  casi.rekonstrukcije <- casi.rekonstrukcije + (konec - sredina)\n}\nhitrost.sredin <- casi.sredin / (4 * enota.casa)\nhitrost.rekonstrukcije <- casi.rekonstrukcije / (110 * enota.casa)\nif(hitrost.sredin > 1)\n  check$error(\"Funkcija utezene.sredine je pribli\u017eno %gx prepo\u010dasna\", signif(hitrost.sredin, 2))\nif(hitrost.rekonstrukcije > 1)\n  check$error(\"Funkcija rekonstruiraj.prvotni je pribli\u017eno %gx prepo\u010dasna\", signif(hitrost.rekonstrukcije, 2))"
    }
  }, 
  {
    "pk": 800, 
    "model": "tomo.part", 
    "fields": {
      "_order": 4, 
      "description": "Sestavite metodo `__repr__(self)`, ki predstavi datum v obliki\n`\"dan. mesec. leto\"`.", 
      "timestamp": "2012-10-01 12:26:03", 
      "challenge": "[]", 
      "solution": "# def __repr__(self):\n#     return \"{0}. {1}. {2}\".format(self.dan, self.mesec, self.leto)", 
      "problem": 253, 
      "validation": "Check.equal('str(Datum(14, 12, 1982))', \"14. 12. 1982\")\nCheck.equal('str(Datum(21, 12, 2012))', \"21. 12. 2012\")"
    }
  }, 
  {
    "pk": 568, 
    "model": "tomo.part", 
    "fields": {
      "_order": 4, 
      "description": "Napi\u0161i funkcijo `maxCollatzI(m, n)`, ki vrne tisto \u0161tevilo med `m` in `n`, pri katerem je neki \u010dlen Collatzovega zaporedja s tem za\u010detnim \u010dlenom najve\u010dji. \u010ce je takih \u0161tevil ve\u010d, naj vrne zadnje.", 
      "timestamp": "2012-03-19 08:36:42", 
      "challenge": "[]", 
      "solution": "def maxCollatzI(m,n):\r\n    i = m\r\n    mx = maxCollatz(m)\r\n    while m < n:\r\n        m += 1\r\n        mxx = maxCollatz(m)\r\n        if mxx >= mx:\r\n            mx = mxx\r\n            i = m\r\n    return i", 
      "problem": 186, 
      "validation": "Check.equal('maxCollatzI(1,1)', 1)\r\nCheck.equal('maxCollatzI(13,13)', 13)\r\nCheck.equal('maxCollatzI(4,21)', 15)\r\nCheck.equal('maxCollatzI(25,33)', 31)"
    }
  }, 
  {
    "pk": 558, 
    "model": "tomo.part", 
    "fields": {
      "_order": 4, 
      "description": "Druga taka operacija je NeAli (angl. NOR), ki je negacija operacije\n*ali*. Torej je `a NeAli b` resni\u010dna natanko tedaj, ko sta oba\n`a` in `b` neresni\u010dna.\n\nSestavite funkcijo `NeAli(a, b)`, ki vrne rezultat te operacije.", 
      "timestamp": "2012-03-11 21:55:29", 
      "challenge": "[]", 
      "solution": "def NeAli(a, b):\n    return not (a or b)", 
      "problem": 184, 
      "validation": "Check.equal(\"NeAli(False, False)\", True)\nCheck.equal(\"NeAli(False, True)\", False)\nCheck.equal(\"NeAli(True, False)\", False)\nCheck.equal(\"NeAli(True, True)\", False)"
    }
  }, 
  {
    "pk": 257, 
    "model": "tomo.part", 
    "fields": {
      "_order": 4, 
      "description": "Sestavite metodo `__repr__`, ki predstavi polinom v \u010ditljivi obliki.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"None\", \"0\"], [\"None\", \"-14\"], [\"None\", \"-9 x - 7\"], [\"None\", \"-10 x^2 - 6 x - 12\"], [\"None\", \"-11 x^3 - 13 x^2 - 5 x - 11\"], [\"None\", \"-10 x^4 - 10 x^3 - 12 x^2 - 10 x - 10\"], [\"None\", \"-8 x^5 - 15 x^4 - 9 x^3 - 9 x^2 - 13 x - 15\"], [\"None\", \"-2 x^6 - 4 x^5 - 8 x^4 - 8 x^3 - 8 x^2 - 4 x - 8\"], [\"None\", \"-3 x^7 - 7 x^6 - 6 x^5 - 15 x^4 - 7 x^3 - 7 x^2 - 7 x - 7\"], [\"None\", \"-6 x^8 + x^7 - 6 x^6 - 7 x^5 - 6 x^4 - 6 x^3 - 4 x^2 - 12 x - 6\"], [\"None\", \"4 x^9 - 15 x^8 - 12 x^7 - 5 x^6 - 9 x^5 - 15 x^4 - 5 x^3 - 3 x^2 - 11 x - 11\"], [\"None\", \"-4 x^10 - 13 x^9 - 4 x^8 - 8 x^7 - 10 x^6 - 5 x^5 - 4 x^4 - 4 x^3 - 6 x^2 - 8 x - 4\"], [\"None\", \"3 x^11 - 3 x^10 - 12 x^9 - 3 x^8 - 7 x^7 - 15 x^6 - 12 x^5 - 15 x^4 - 3 x^3 - 5 x^2 - 3 x - 15\"], [\"None\", \"-2 x^12 - 11 x^11 + 6 x^10 - 2 x^9 - 2 x^8 - x^7 - 8 x^6 - 2 x^5 - 2 x^4 - 2 x^3 - 2 x^2 - 15 x - 14\"], [\"None\", \"9 x^13 - 7 x^12 - 3 x^10 - x^9 - 11 x^8 - 5 x^7 - 13 x^6 - 3 x^5 - 15 x^4 - x^3 - 15 x^2 - 14 x - 7\"], [\"None\", \"4 x^14 - 15 x^13 - 8 x^11 - 14 x^10 - 13 x^7 - 6 x^6 - 13 x^5 - 15 x^3 - 14 x^2 - 9 x - 12\"], [\"None\", \"-11 x^15 + 7 x^14 - 14 x^13 + x^12 - 9 x^11 - 3 x^10 - 11 x^9 + x^8 - 11 x^7 - 11 x^6 + x^5 - 15 x^4 - 14 x^3 - 11 x^2 - 6 x - 11\"], [\"None\", \"-10 x^16 - 7 x^15 + 8 x^14 - 8 x^13 + 2 x^12 + 6 x^11 + 6 x^10 - 10 x^9 + 2 x^8 - 9 x^7 + 2 x^6 - 15 x^5 - 14 x^4 - 13 x^3 - 10 x^2 - 5 x - 10\"], [\"None\", \"x^16 - 15 x^15 + 3 x^14 + 3 x^13 - 15 x^12 - 12 x^11 - 5 x^10 - 6 x^9 - 7 x^8 + 3 x^7 - 15 x^6 - 14 x^5 - 15 x^4 - 12 x^3 - 13 x^2 - 10 x - 15\"], [\"None\", \"4 x^18 + 6 x^17 - 12 x^16 - 5 x^15 + 9 x^13 + 4 x^12 - 4 x^11 + 6 x^10 - 5 x^9 + 4 x^8 - 15 x^7 - 14 x^6 - 12 x^4 - 11 x^3 - 12 x^2 - 13 x - 8\"]]", 
      "solution": "# def __repr__(self):\n#     from re import sub\n#     def monom(a, n):\n#         monom = \"{0} x^{1}\".format(a, n)\n#         # popravimo potence in koeficiente\n#         monom = sub(\"\\^1$\", \"\", monom) # ^1 pobri\u0161emo le na koncu niza\n#         monom = sub(\" x\\^0\", \"\", monom) # pobri\u0161emo presledek pred x^0\n#         monom = sub(\"^1 x\", \"x\", monom) # 1 mora biti na za\u010detku monoma\n#         monom = sub(\"-1 x\", \"-x\", monom)\n#         return monom\n#\n#     # \"se\u0161tejemo\" vse momone z neni\u010delnimi koeficienti\n#     # pred tem moramo koeficiente obrniti v vrstni red kot v izpisu\n#     niz = \" + \".join(reversed([monom(a, n)\n#                      for n, a in enumerate(self.koef) if a != 0]))\n#     niz = sub(\"\\+ -\", \"- \", niz) # popravimo negativne koeficiente\n\n#     if niz: return niz # \u010de smo dobili niz, ga vrnemo\n#     else: return \"0\" # sicer prazen polinom izpi\u0161emo kot ni\u010delnega", 
      "problem": 74, 
      "validation": "Check.equal('Polinom([1, 2, 3]).__repr__()', \"3 x^2 + 2 x + 1\")\nCheck.equal('Polinom([1, 3]).__repr__()', \"3 x + 1\")\nCheck.equal('Polinom([1, -2, 3, -1]).__repr__()', \"-x^3 + 3 x^2 - 2 x + 1\")\nCheck.equal('Polinom([-1, 2, -3, 1]).__repr__()', \"x^3 - 3 x^2 + 2 x - 1\")\nfor i in range(20):\n    Check.challenge(Polinom([i ** 5 % (j + 12) - 15 for j in range(i)]))"
    }
  }, 
  {
    "pk": 235, 
    "model": "tomo.part", 
    "fields": {
      "_order": 4, 
      "description": "Sestavite metodo `__repr__(self)`, ki predstavi datum v obliki\r\n`\"dan. mesec. leto\"`.", 
      "timestamp": "2012-12-14 14:57:42", 
      "challenge": "[]", 
      "solution": "# def __repr__(self):\r\n#     return \"{0}. {1}. {2}\".format(self.dan, self.mesec, self.leto)", 
      "problem": 72, 
      "validation": "Check.equal('str(Datum(14, 12, 1982))', \"14. 12. 1982\")\r\nCheck.equal('str(Datum(21, 12, 2012))', \"21. 12. 2012\")"
    }
  }, 
  {
    "pk": 248, 
    "model": "tomo.part", 
    "fields": {
      "_order": 4, 
      "description": "Definirajte metodo  `__add__`, ki vrne vsoto dveh ulomkov.\nKo definirate to metodo, lahko ulomke se\u0161tevate kar z operatorjem `+`.\nNa primer:\n\n    >>> Ulomek(1, 6) + Ulomek(1, 4)\n    5/12", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "# def __add__(self, other):\n#     a, b = self.st, self.im\n#     c, d = other.st, other.im\n#     return Ulomek(a * d + b * c, b * d)", 
      "problem": 73, 
      "validation": "Check.equal('Ulomek(1, 6) + Ulomek(1, 4)', Ulomek(5, 12))\nCheck.equal('(Ulomek(1, 6) + Ulomek(1, 6)).st', 1)\nCheck.equal('(Ulomek(1, 6) + Ulomek(1, 6)).im', 3)"
    }
  }, 
  {
    "pk": 603, 
    "model": "tomo.part", 
    "fields": {
      "_order": 4, 
      "description": "Sestavite funkcijo `je_permutacija(slovar)`, ki vrne `True`, \u010de dan\nslovar predstavlja permutacijo, in `False` sicer.", 
      "timestamp": "2012-05-07 01:21:59", 
      "challenge": "[]", 
      "solution": "def je_permutacija(slovar):\n    # Za vsa \u0161tevila od 1 do n bomo pogledali, \u010de nastopajo tako v domeni\n    # kot v sliki permutacije. Imeli bomo seznam je_v_domeni, ki ima na\n    # mestu i - 1 zapisano, \u010de smo ugotovili, da i je v domeni permutacije.\n    # Podobno storimo za sliko.\n    n = len(slovar)\n    je_v_domeni = [False for i in range(n)]\n    je_v_sliki = [False for i in range(n)]\n\n    # Nato gremo \u010dez vse klju\u010de k in pripadajo\u010de vrednosti v v slovarju.\n    # \u010ce sta tako k kot v med 1 in n, ozna\u010dimo, da sta v domeni in sliki,\n    # sicer pa vemo, da slovar ne predstavlja permutacije.\n    for k, v in slovar.items():\n        if 1 <= k <= n and 1 <= v <= n:\n            je_v_domeni[k - 1] = True\n            je_v_sliki[v - 1] = True\n        else:\n            return False\n\n    # Na koncu pogledamo, ali so v domeni in sliki nastopala vsa \u0161tevila.\n    # Funkcija all vrne True natanko takrat, ko so vsi elementi v seznamu\n    # enaki True.\n    return all(je_v_domeni) and all(je_v_sliki)", 
      "problem": 199, 
      "validation": "Check.equal('je_permutacija({1: 3, 2: 4, 3: 2, 4: 1})', True)\nCheck.equal('je_permutacija({1: 3, 2: 2, 3: 2, 4: 1})', False)\nCheck.equal('je_permutacija({1: 3, 2: 4, 4: 1})', False)"
    }
  }, 
  {
    "pk": 302, 
    "model": "tomo.part", 
    "fields": {
      "_order": 4, 
      "description": "Osemvrsti\u010dno smre\u010dico izpi\u0161ite \u0161e sredinsko poravnano in z razmaki.\nNa primer:\n\n        *\n       * *\n      * * *\n     * * * *\n    * * * * *\n\n*Namig*: levi rob je enak kot pri desno poravnani smre\u010dici, za vsakim\nosnovnim znakom pa je presledek.", 
      "timestamp": "2013-02-25 00:45:43", 
      "challenge": "[]", 
      "solution": "znakp = \"* \"\nprint(7 * \" \" + 1 * znakp + \"\\n\" +\n      6 * \" \" + 2 * znakp + \"\\n\" +\n      5 * \" \" + 3 * znakp + \"\\n\" +\n      4 * \" \" + 4 * znakp + \"\\n\" +\n      3 * \" \" + 5 * znakp + \"\\n\" +\n      2 * \" \" + 6 * znakp + \"\\n\" +\n      1 * \" \" + 7 * znakp + \"\\n\" +\n      8 * znakp)", 
      "problem": 97, 
      "validation": "def izpis(source):\n    import io, sys\n    old_stdout = sys.stdout\n    new_stdout = io.StringIO()\n    sys.stdout = new_stdout\n    exec(source)\n    sys.stdout = old_stdout\n    return new_stdout.getvalue()\n\ndef preveriSmrecico(smrecica, levi, desni, dovoljeni):\n    vrstice = smrecica.splitlines()\n    if len(vrstice) != 8:\n        Check.error(\"Smre\u010dica nima osmih vrstic.\")\n    for i in range(0, min(8, len(vrstice))):\n        vrstica = vrstice[i]\n        if not vrstica.startswith((levi[i] - 1) * \" \"):\n            Check.error(\"{0}. vrstica se ne za\u010dne na {1}. znaku.\".format(i + 1, levi[i]))\n        if len(vrstica.rstrip()) != desni[i]:\n            Check.error(\"{0}. vrstica se ne kon\u010da na {1}. znaku.\".format(i + 1, desni[i]))\n        znaki = vrstica.replace(\" \", \"\")\n        if len(znaki) != i + 1:\n            Check.error(\"{0}. vrstica ni sestavljena iz {0} znakov.\".format(i + 1))\n        if any(znak not in dovoljeni for znak in znaki):\n            Check.error(\"{0}. vrstica vsebuje nedovoljene znake.\".format(i + 1))\n    if len([znak for znak in dovoljeni if znak in smrecica]) > 1:\n        Check.error(\"Smre\u010dica je sestavljena iz razli\u010dnih dovoljenih znakov.\")\n\ndovoljeni = \"*.#$@oO+=\"\nsource = Check.current[\"solution\"]\npreveriSmrecico(izpis(source), range(7, -1, -1), range(8, 17), dovoljeni)"
    }
  }, 
  {
    "pk": 598, 
    "model": "tomo.part", 
    "fields": {
      "_order": 4, 
      "description": "Sestavite funkcijo `najvecja_razlika(spremembe)`, ki poi\u0161\u010de najve\u010dji\nrelativni priliv. Z drugimi besedami, poi\u0161\u010de najve\u010djo vrednost, ki jo\nzavzame vsota poljubnega strnjenega podseznama.\nTako na primer `najvecja_razlika([10, -13, 3, 20, -2, 5])` vrne\n3 + 20 - 2 + 5 = 26.\n\u010ce je seznam `spremembe` prazen, naj funkcija vrne `None`.", 
      "timestamp": "2012-04-24 14:27:15", 
      "challenge": "[]", 
      "solution": "def najvecja_razlika(spremembe):\n    if spremembe==[]:\n        return None\n    else:\n        n = len(spremembe)\n        return max(sum(spremembe[i:j+1])\n                   for i in range(0, n)\n                   for j in range(i, n))", 
      "problem": 198, 
      "validation": "Check.equal('najvecja_razlika([10, -13, 3, 20, -2, 5])', 26)\nCheck.equal('najvecja_razlika([1, 2, 3])', 6)\nCheck.equal('najvecja_razlika([])', None)\nCheck.equal('najvecja_razlika([-1])', -1)\nCheck.equal('najvecja_razlika([1, -5, -20, 30])', 30)\nCheck.equal('najvecja_razlika([10, -5, 20, -6])', 25)"
    }
  }, 
  {
    "pk": 43, 
    "model": "tomo.part", 
    "fields": {
      "_order": 4, 
      "description": "Sestavite funkcijo `zmnozi(mat1, mat2)`, ki matri\u010dno zmno\u017ei matriki\n`mat1` in `mat2`.", 
      "timestamp": "2012-10-11 12:20:47", 
      "challenge": "[]", 
      "solution": "def zmnozi(mat1, mat2):\n    return transponiraj([uporabi(mat1, v) for v in transponiraj(mat2)])", 
      "problem": 20, 
      "validation": "Check.equal('zmnozi([[1, 3], [2, 4]], [[5, 6], [7, 8]])', [[26, 30], [38, 44]])\nCheck.equal('zmnozi([[1], [5]], [[5, 1, 3]])', [[5, 1, 3], [25, 5, 15]])\nCheck.equal('zmnozi([[1, 3, 6], [2, 4, 8]], [[1, 0], [0, 6], [2, 2]])', [[13, 30], [18, 40]])\n##Check.challenge(zmnozi([[i ** 2 + 3 * j for i in range(8)] for j in range(8)], [[i ** 2 + 3 * j for i in range(8)] for j in range(8)]))"
    }
  }, 
  {
    "pk": 852, 
    "model": "tomo.part", 
    "fields": {
      "_order": 4, 
      "description": "Pogosto orodje za ocenjevanje parametrov v statistiki so\r\n[intervali zaupanja](http://tinyurl.com/a5kuafj). Ve\u010d o intervalih\r\nzaupanja boste izvedeli v nadaljevanju \u0161tudija, zdaj pa si oglejmo le\r\nnajbolj preprost in najpogosteje uporabljan primer. \r\n\r\nZa velike vzorce ponavadi lahko predpostavimo normalno porazdelitev.\r\nV tem  primeru zapi\u0161emo interval zaupanja s stopnjo zaupanja $1 - \\alpha$ \r\nza matemati\u010dno upanje $\\mu$ kot \r\n$$[\\overline{x} - sd(x) * z_\\alpha, \\overline{x} + sd(x) * z_\\alpha].$$\r\n\r\nTu je $\\overline{x}$ povpre\u010dje vzorca (torej cenilka za matemati\u010dno upanje), \r\n$sd(x)$ pa standardni odklon vzorca (za katerega v tem najla\u017ejem primeru \r\npredpostavimo, da je kar enak standardnemu odklonu populacije).\r\n\u0160tevilo $z_\\alpha$ ozna\u010duje $1 - \\alpha / 2$-kvantil standardne normalne\r\nporazdelitve in ga v R-u dobimo s funkcijo `qnorm`.\r\n\r\nZapi\u0161ite fukcijo `interval.zaupanja(x, a)`, ki za dani \u0161tevilski vektor poi\u0161\u010de \r\ninterval zaupanja s stopnjo zaupanja $1 - a$ za matemati\u010dno upanje $\\mu$.\r\nFunkcija naj vrne vektor, ki ima v prvo komponento shranjeno spodnjo mejo, \r\nv drugo pa zgornjo.", 
      "timestamp": "2012-12-17 14:01:53", 
      "challenge": "[]", 
      "solution": "interval.zaupanja <- function(x, a) {\r\n  z.alfa <- qnorm(1 - a / 2)\r\n  return(c(mean(x) - sd(x) * z.alfa ,mean(x) + sd(x) * z.alfa))\r\n}", 
      "problem": 299, 
      "validation": "check$equal(interval.zaupanja(c(3,4,7,5,7,15,7,20,12,10,9,5,7),0.05), \r\n            c(-0.8139212, 17.8908442))\r\ncheck$equal(interval.zaupanja(c(rep(20,10),seq(1,100,5),rep(70,30)),0.01), \r\n            c(-9.527954, 118.527954))"
    }
  }, 
  {
    "pk": 813, 
    "model": "tomo.part", 
    "fields": {
      "_order": 4, 
      "description": "Sestavite funkcijo `zmnozi(mat1, mat2)`, ki matri\u010dno zmno\u017ei matriki\n`mat1` in `mat2`.", 
      "timestamp": "2012-10-01 12:27:45", 
      "challenge": "[[\"None\", \"[[2352, 2492, 2912, 3612, 4592, 5852, 7392, 9212], [2604, 2768, 3260, 4080, 5228, 6704, 8508, 10640], [2856, 3044, 3608, 4548, 5864, 7556, 9624, 12068], [3108, 3320, 3956, 5016, 6500, 8408, 10740, 13496], [3360, 3596, 4304, 5484, 7136, 9260, 11856, 14924], [3612, 3872, 4652, 5952, 7772, 10112, 12972, 16352], [3864, 4148, 5000, 6420, 8408, 10964, 14088, 17780], [4116, 4424, 5348, 6888, 9044, 11816, 15204, 19208]]\"]]", 
      "solution": "def zmnozi(mat1, mat2):\n    assert (len(mat1[0]) == len(mat2))\n    return transponiraj([uporabi(mat1, v) for v in transponiraj(mat2)])", 
      "problem": 254, 
      "validation": "Check.equal('zmnozi([[1, 3], [2, 4]], [[5, 6], [7, 8]])', [[26, 30], [38, 44]])\nCheck.equal('zmnozi([[1], [5]], [[5, 1, 3]])', [[5, 1, 3], [25, 5, 15]])\nCheck.equal('zmnozi([[1, 3, 6], [2, 4, 8]], [[1, 0], [0, 6], [2, 2]])', [[13, 30], [18, 40]])\nCheck.challenge(zmnozi(_mat, _mat))"
    }
  }, 
  {
    "pk": 198, 
    "model": "tomo.part", 
    "fields": {
      "_order": 4, 
      "description": "Sestavite metodo `__mul__` za mno\u017eenje polinomov.", 
      "timestamp": "2012-10-26 10:34:05", 
      "challenge": "[]", 
      "solution": "class Polinom(Polinom):\n    def __mul__(self, other):\n        # \u010de je eden od polinomov ni\u010delen, je ni\u010delen tudi produkt\n        if not self.koef or not other.koef:\n            return Polinom([])\n\n        # oba polinoma z ni\u010dlami podalj\u0161amo do iste dol\u017eine\n        levi = self.koef + len(other.koef) * [0]\n        desni = other.koef + len(self.koef) * [0]\n\n        koef_prod = [sum(levi[i] * desni[n - i] for i in range(n + 1))\n                     for n in range(len(levi))]\n        return Polinom(koef_prod)", 
      "problem": 55, 
      "validation": "Check.equal('Polinom([1, 2, 3]) * Polinom([2])', Polinom([2, 4, 6]))\nCheck.equal('Polinom([1, 2, 1]) * Polinom([1, 1])', Polinom([1, 3, 3, 1]))\nCheck.equal('Polinom([1, 2, 3]) * Polinom([0, 0, 0])', Polinom([]))"
    }
  }, 
  {
    "pk": 200, 
    "model": "tomo.part", 
    "fields": {
      "_order": 4, 
      "description": "**\u0160pekuliranje na devizni borzi**\n\nNa devizni borzi imamo valute, ki jih ozna\u010dimo kar s \u0161tevili $0,\n\\ldots, n-1$. Med vsakima dvema valutama je znano menjalni\u0161ko\nrazmerje $d_{i,j}$, ki pove, da je ena enota valute $i$ vredna\n$d_{i,j}$ enot valute $j$. Obi\u010dajno velja $d_{i,j} = 1 / d_{j,i}$,\nvendar tega ne bomo predpostavili. Vedno pa velja $d_{i,i} = 1$.\n\nBorzni \u0161pekulant i\u0161\u010de *pozitivni cikel*, to je tako zaporedje\nvalut $i_1, i_2, \\ldots, i_k$, da velja\n\n$$d_{i_1, i_2} \\cdot d_{i_2, i_3} \\cdots d_{i_{k-1}, i_k} \\cdot d_{i_k, i_1} > 1.$$\n\nS pozitivnim ciklom lahko namre\u010d ustvari dobi\u010dek: valuto $i_1$\nzamenjajo v $i_2$, to zamenjajo v $i_3$, in tako naprej do $i_k$ in\nspet nazaj v $i_1$. Na koncu ima ve\u010d denarja kot na za\u010detku.\n\nSestavi funkcijo `spekulant(d)`, ki sprejme matriko menjalnih razmerij\nmed valutami in vrne pozitivni cikel, \u010de ta obstaja, sicer `None`.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "", 
      "problem": 59, 
      "validation": ""
    }
  }, 
  {
    "pk": 166, 
    "model": "tomo.part", 
    "fields": {
      "_order": 4, 
      "description": "Definirajte metodo  `__add__`, ki vrne vsoto dveh ulomkov.\nKo definirate to metodo, lahko ulomke se\u0161tevate kar z operatorjem `+`.\nNa primer:\n\n    >>> Ulomek(1, 6) + Ulomek(1, 4)\n    5/12", 
      "timestamp": "2012-10-24 13:43:41", 
      "challenge": "[]", 
      "solution": "class Ulomek(Ulomek):\n    def __add__(self, other):\n        a, b = self.st, self.im\n        c, d = other.st, other.im\n        return Ulomek(a * d + b * c, b * d)", 
      "problem": 50, 
      "validation": "Check.equal('Ulomek(1, 6) + Ulomek(1, 4)', Ulomek(5, 12))\nCheck.equal('Ulomek(1, 6) + Ulomek(1, 6)', Ulomek(1, 3))"
    }
  }, 
  {
    "pk": 110, 
    "model": "tomo.part", 
    "fields": {
      "_order": 4, 
      "description": "Sestavite funkcijo `zmnozi(mat1, mat2)`, ki matri\u010dno zmno\u017ei matriki\n`mat1` in `mat2`.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[[\"None\", \"[[2352, 2492, 2912, 3612, 4592, 5852, 7392, 9212], [2604, 2768, 3260, 4080, 5228, 6704, 8508, 10640], [2856, 3044, 3608, 4548, 5864, 7556, 9624, 12068], [3108, 3320, 3956, 5016, 6500, 8408, 10740, 13496], [3360, 3596, 4304, 5484, 7136, 9260, 11856, 14924], [3612, 3872, 4652, 5952, 7772, 10112, 12972, 16352], [3864, 4148, 5000, 6420, 8408, 10964, 14088, 17780], [4116, 4424, 5348, 6888, 9044, 11816, 15204, 19208]]\"]]", 
      "solution": "def zmnozi(mat1, mat2):\n    assert (len(mat1[0]) == len(mat2))\n    return transponiraj([uporabi(mat1, v) for v in transponiraj(mat2)])", 
      "problem": 41, 
      "validation": "Check.equal('zmnozi([[1, 3], [2, 4]], [[5, 6], [7, 8]])', [[26, 30], [38, 44]])\nCheck.equal('zmnozi([[1], [5]], [[5, 1, 3]])', [[5, 1, 3], [25, 5, 15]])\nCheck.equal('zmnozi([[1, 3, 6], [2, 4, 8]], [[1, 0], [0, 6], [2, 2]])', [[13, 30], [18, 40]])\nCheck.challenge(zmnozi(_mat, _mat))"
    }
  }, 
  {
    "pk": 816, 
    "model": "tomo.part", 
    "fields": {
      "_order": 4, 
      "description": "Za mno\u017eenje redkih matrik potrebujemo \u0161e dve predstavitvi vsebine redke matrike:\n\n* **Slovar po vrsticah**, ki preslika neni\u010delne vrstice v slovarje, ki slikajo\n  neni\u010delne stolpce v vrednosti:\n\n        { 0 : {0 : 1, 4 : 2}, 1 : {1 : 4, 4 : 3}, 3 : {5 : 5} }\n\n* **Slovar po stolpcih**, ki preslika neni\u010delne stolpce v slovarje, ki\n  slikajo neni\u010delne vrstice v vrednosti;\n\n        { 0 : {0 : 1}, 1 : {1 : 4}, 4 : {0 : 2, 1 : 3}, 5 : {3 : 5} }\n\nSestavite funkcijo `redka_po_vrsticah((d,m,n))`, ki sprejme redko matriko in vrne\nnjeno predstavitev `(e,m,n)` s slovarjem po vrsticah `e`.", 
      "timestamp": "2012-10-01 12:38:42", 
      "challenge": "[[\"None\", \"[(0, [(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9)]), (1, [(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]), (2, [(0, 2), (1, 3), (2, 4), (3, 5), (4, 6), (5, 7), (6, 8), (7, 9), (8, 10), (9, 11)]), (3, [(0, 3), (1, 4), (2, 5), (3, 6), (4, 7), (5, 8), (6, 9), (7, 10), (8, 11), (9, 12)]), (4, [(0, 4), (1, 5), (2, 6), (3, 7), (4, 8), (5, 9), (6, 10), (7, 11), (8, 12), (9, 13)]), (5, [(0, 5), (1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12), (8, 13), (9, 14)]), (6, [(0, 6), (1, 7), (2, 8), (3, 9), (4, 10), (5, 11), (6, 12), (7, 13), (8, 14), (9, 15)]), (7, [(0, 7), (1, 8), (2, 9), (3, 10), (4, 11), (5, 12), (6, 13), (7, 14), (8, 15), (9, 16)]), (8, [(0, 8), (1, 9), (2, 10), (3, 11), (4, 12), (5, 13), (6, 14), (7, 15), (8, 16), (9, 17)]), (9, [(0, 9), (1, 10), (2, 11), (3, 12), (4, 13), (5, 14), (6, 15), (7, 16), (8, 17), (9, 18)])]\"]]", 
      "solution": "def redka_po_vrsticah(dmn):\n    (d,m,n) = dmn\n    e = {}\n    for ((i,j),x) in d.items():\n        if i not in e: e[i] = {}\n        e[i][j] = x\n    return (e,m,n)", 
      "problem": 256, 
      "validation": "Check.equal(\"\"\"redka_po_vrsticah(({(0,0) : 1, (0,4) : 2, (1,1) : 4, (1,4): 3, (3,5) : 5}, 4, 6))\"\"\",\n            ({ 0 : {0 : 1, 4 : 2}, 1 : {1 : 4, 4 : 3}, 3 : {5 : 5} }, 4, 6))\n\nCheck.equal(\"\"\"redka_po_vrsticah(({(500,501):42}, 1001, 1002))\"\"\", ({500:{501:42}}, 1001,1002))\n\nCheck.challenge(sorted(redka_po_vrsticah(({(i,j) : (i + j) for j in range(10) for i in range(10)}, 42, 23))[0].items()))"
    }
  }, 
  {
    "pk": 167, 
    "model": "tomo.part", 
    "fields": {
      "_order": 5, 
      "description": "Definirajte metodo  `__sub__`, ki vrne razliko dveh ulomkov.\nKo definirate to metodo, lahko ulomke od\u0161tevate kar z operatorjem `-`.", 
      "timestamp": "2012-10-24 13:43:41", 
      "challenge": "[]", 
      "solution": "class Ulomek(Ulomek):\n    def __sub__(self, other):\n        a, b = self.st, self.im\n        c, d = other.st, other.im\n        return Ulomek(a * d - b * c, b * d)", 
      "problem": 50, 
      "validation": "Check.equal('Ulomek(1, 6) - Ulomek(1, 4)', Ulomek(-1, 12))\nCheck.equal('Ulomek(3, 6) - Ulomek(1, 6)', Ulomek(1, 3))"
    }
  }, 
  {
    "pk": 817, 
    "model": "tomo.part", 
    "fields": {
      "_order": 5, 
      "description": "Sestavite funkcijo `redka_po_stolpcih((d,m,n))`, ki sprejme redko matriko in vrne\nnjeno predstavitev `(e,m,n)` s slovarjem po stolpcih `e`.", 
      "timestamp": "2012-10-01 12:38:42", 
      "challenge": "[[\"None\", \"[(0, [(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9)]), (1, [(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]), (2, [(0, 2), (1, 3), (2, 4), (3, 5), (4, 6), (5, 7), (6, 8), (7, 9), (8, 10), (9, 11)]), (3, [(0, 3), (1, 4), (2, 5), (3, 6), (4, 7), (5, 8), (6, 9), (7, 10), (8, 11), (9, 12)]), (4, [(0, 4), (1, 5), (2, 6), (3, 7), (4, 8), (5, 9), (6, 10), (7, 11), (8, 12), (9, 13)]), (5, [(0, 5), (1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12), (8, 13), (9, 14)]), (6, [(0, 6), (1, 7), (2, 8), (3, 9), (4, 10), (5, 11), (6, 12), (7, 13), (8, 14), (9, 15)]), (7, [(0, 7), (1, 8), (2, 9), (3, 10), (4, 11), (5, 12), (6, 13), (7, 14), (8, 15), (9, 16)]), (8, [(0, 8), (1, 9), (2, 10), (3, 11), (4, 12), (5, 13), (6, 14), (7, 15), (8, 16), (9, 17)]), (9, [(0, 9), (1, 10), (2, 11), (3, 12), (4, 13), (5, 14), (6, 15), (7, 16), (8, 17), (9, 18)])]\"]]", 
      "solution": "def redka_po_stolpcih(dmn):\n    (d,m,n) = dmn\n    e = {}\n    for ((i,j),x) in d.items():\n        if j not in e: e[j] = {}\n        e[j][i] = x\n    return (e,m,n)", 
      "problem": 256, 
      "validation": "Check.equal(\"\"\"redka_po_stolpcih(({(0,0) : 1, (0,4) : 2, (1,1) : 4, (1,4): 3, (3,5) : 5}, 4, 6))\"\"\",\n            ({ 0 : {0 : 1}, 1 : {1 : 4}, 4 : {0 : 2, 1 : 3}, 5 : {3 : 5} }, 4, 6))\n\nCheck.equal(\"\"\"redka_po_stolpcih(({(500,501):42}, 1001, 1002))\"\"\", ({501:{500:42}}, 1001,1002))\n\nCheck.challenge(sorted(redka_po_stolpcih(({(i,j) : (i + j) for j in range(10) for i in range(10)}, 42, 23))[0].items()))"
    }
  }, 
  {
    "pk": 199, 
    "model": "tomo.part", 
    "fields": {
      "_order": 5, 
      "description": "Sestavite metodo `__repr__`, ki predstavi polinom v \u010ditljivi obliki.", 
      "timestamp": "2012-10-26 10:34:05", 
      "challenge": "[]", 
      "solution": "class Polinom(Polinom):\n    def __repr__(self):\n        def monom(a, n):\n            # Sestavimo si \u010dlen za monom. Na za\u010detku in na koncu damo \u0161e oglate\n            # oklepaje, ki jih bomo na koncu sicer pobrisali, da bomo vmes lahko\n            # na poseben na\u010din obravnavali nekatere kombinacije znakov.\n            monom = \"[{0} x^{1}]\".format(a, n)\n            # popravimo potence in koeficiente\n            monom = monom.replace(\"^1]\", \"\") # ^1 pobri\u0161emo le na koncu niza\n            monom = monom.replace(\" x^0\", \"\") # pobri\u0161emo presledek pred x^0\n            monom = monom.replace(\"[1 x\", \"x\") # 1 mora biti na za\u010detku monoma\n            monom = monom.replace(\"-1 x\", \"-x\")\n            monom = monom.replace(\"[\", \"\").replace(\"]\", \"\")\n            return monom\n\n        # \"se\u0161tejemo\" vse momone z neni\u010delnimi koeficienti\n        # pred tem moramo koeficiente obrniti v vrstni red kot v izpisu\n        niz = \" + \".join(reversed([monom(a, n)\n                         for n, a in enumerate(self.koef) if a != 0]))\n        niz = niz.replace(\"+ -\", \"- \") # popravimo negativne koeficiente\n\n        # \u010de smo dobili niz, ga vrnemo, sicer izpi\u0161emo ni\u010delni polinom\n        return niz or \"0\"", 
      "problem": 55, 
      "validation": "Check.equal('str(Polinom([1, 2, 3]))', \"3 x^2 + 2 x + 1\")\nCheck.equal('str(Polinom([1, 3]))', \"3 x + 1\")\nCheck.equal('str(Polinom([1, -2, 3, -1]))', \"-x^3 + 3 x^2 - 2 x + 1\")\nCheck.equal('str(Polinom([1, 0, 0, -1]))', \"-x^3 + 1\")\nCheck.equal('str(Polinom([0, 0, 0, -5]))', \"-5 x^3\")\nCheck.equal('str(Polinom([-1, 2, -3, 1]))', \"x^3 - 3 x^2 + 2 x - 1\")"
    }
  }, 
  {
    "pk": 559, 
    "model": "tomo.part", 
    "fields": {
      "_order": 5, 
      "description": "S pomo\u010djo operacije `NeAli` sestavite funkcijo `Ne2(a)`, ki vrne\nnegacijo `a`. Pri tem smete uporabiti samo funkcijo `NeAli` in\nnobenih drugih logi\u010dnih operacij.", 
      "timestamp": "2012-03-11 21:55:29", 
      "challenge": "[]", 
      "solution": "def Ne2(a):\n    return NeAli(a, a)", 
      "problem": 184, 
      "validation": "Check.equal(\"Ne2(False)\", True)\nCheck.equal(\"Ne2(True)\", False)\n\nfor op in ['not', 'and', 'or', 'NeIn', '|', '&']:\n    if op in re.sub(r'#.*', '', Check.current[\"solution\"]):\n        Check.error(\"V funkciji nastopa operacija '{0}'.\".format(op))\nif 'Ne(' in re.sub(' ', '', re.sub(r'#.*', '', Check.current[\"solution\"])):\n    Check.error(\"V funkciji nastopa operacija 'Ne'.\")"
    }
  }, 
  {
    "pk": 866, 
    "model": "tomo.part", 
    "fields": {
      "_order": 5, 
      "description": "Sestavite metodo`poSirini(self)`, ki vrne generator,\r\nki po \u0161irini na\u0161teje vsa vozli\u0161\u010da v drevesu.", 
      "timestamp": "2012-11-22 12:11:41", 
      "challenge": "[[\"None\", \"[1]\"], [\"None\", \"[2, 1]\"], [\"None\", \"[3, 2, 1, 1]\"], [\"None\", \"[4, 3, 2, 1, 1, 2, 1]\"], [\"None\", \"[5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1]\"], [\"None\", \"[6, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 4, 3, 2, 1, 1, 2, 1]\"], [\"None\", \"[7, 6, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 4, 3, 2, 1, 1, 2, 1, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1]\"], [\"None\", \"[8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 4, 3, 2, 1, 1, 2, 1, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 6, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 4, 3, 2, 1, 1, 2, 1]\"], [\"None\", \"[9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 4, 3, 2, 1, 1, 2, 1, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 6, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 4, 3, 2, 1, 1, 2, 1, 7, 6, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 4, 3, 2, 1, 1, 2, 1, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1]\"], [\"None\", \"[10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 4, 3, 2, 1, 1, 2, 1, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 6, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 4, 3, 2, 1, 1, 2, 1, 7, 6, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 4, 3, 2, 1, 1, 2, 1, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 4, 3, 2, 1, 1, 2, 1, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 6, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 4, 3, 2, 1, 1, 2, 1]\"], [\"None\", \"[11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 4, 3, 2, 1, 1, 2, 1, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 6, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 4, 3, 2, 1, 1, 2, 1, 7, 6, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 4, 3, 2, 1, 1, 2, 1, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 4, 3, 2, 1, 1, 2, 1, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 6, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 4, 3, 2, 1, 1, 2, 1, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 4, 3, 2, 1, 1, 2, 1, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 6, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 4, 3, 2, 1, 1, 2, 1, 7, 6, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1, 4, 3, 2, 1, 1, 2, 1, 5, 4, 3, 2, 1, 1, 2, 1, 3, 2, 1, 1]\"]]", 
      "solution": "class Drevo(Drevo):\r\n    def poSirini(self):\r\n        vrsta = [self]\r\n        while vrsta:\r\n            drevo = vrsta.pop(0)\r\n            if not drevo.prazno:\r\n                yield drevo.vsebina\r\n                vrsta.append(drevo.levo)\r\n                vrsta.append(drevo.desno)\r\n\r\n    def poSirini(self, vrsta=[]):\r\n        if not self.prazno:\r\n            yield self.vsebina\r\n            vrsta += [self.levo, self.desno]\r\n        if vrsta:\r\n            drevo = vrsta.pop(0)\r\n            for x in drevo.poSirini(vrsta=vrsta):\r\n                yield x", 
      "problem": 60, 
      "validation": "Check.equal('list(Drevo(5, levo=Drevo(4, desno=Drevo(2)), desno=Drevo(3)).poSirini())', [5, 4, 3, 2])\r\nCheck.equal('sum(Drevo(5, levo=Drevo(4, desno=Drevo(2)), desno=Drevo(3)).poSirini())', 14)\r\nCheck.equal('list(Drevo(5, levo=Drevo(4, desno=Drevo(2)), desno=Drevo(3, levo=Drevo(4), desno=Drevo(4))).poSirini())', [5, 4, 3, 2, 4, 4])\r\n_drevesa = [Drevo(), Drevo()]\r\nfor i in range(1, 12):\r\n    _drevesa.append(Drevo(i, levo=_drevesa[-1], desno=_drevesa[-2]))\r\n    Check.challenge(list(_drevesa[-1].poGlobini()))"
    }
  }, 
  {
    "pk": 214, 
    "model": "tomo.part", 
    "fields": {
      "_order": 5, 
      "description": "\u010ce \u017eelite preveriti, ali je va\u0161a re\u0161itev u\u010dinkovita, za spodnjo nalogo\r\nzapi\u0161ite poljuben program, ki ne spro\u017ei napake (na primer komentar).\r\nS tem boste spro\u017eili testni program, ki izra\u010duna re\u0161itve desetih\r\nlinearnih problemov z 50 neznankami in 100 omejitvami.\r\n\u010ce je va\u0161a re\u0161itev u\u010dinkovita, bi morali re\u0161itev dobiti v par sekundah.", 
      "timestamp": "2012-10-23 12:58:06", 
      "challenge": "[[\"NA\", \"1642.934307\"], [\"NA\", \"1792.80158\"], [\"NA\", \"2076.992581\"], [\"NA\", \"1805.236895\"], [\"NA\", \"857.860707\"], [\"NA\", \"2050.340202\"], [\"NA\", \"1094.249186\"], [\"NA\", \"1472.498974\"], [\"NA\", \"1507.367421\"], [\"NA\", \"1155.328598\"]]", 
      "solution": "#", 
      "problem": 54, 
      "validation": "for (i in 1 : 10) {\r\n  check$challenge(resi(list(\r\n    A = round(matrix(sin(123 * i * (1 : 5000)), 100), 2),\r\n    b = round(abs(cos(i * (1 : 100))), 2),\r\n    f = round(abs(sin(i * (1 : 50))), 2),\r\n    v = 0,\r\n    bazne = 1 : 100,\r\n    nebazne = 1 : 50\r\n  ))$v)\r\n}"
    }
  }, 
  {
    "pk": 154, 
    "model": "tomo.part", 
    "fields": {
      "_order": 5, 
      "description": "Sestavite metodo `jeVeljaven`, ki preveri, ali je datum veljaven.", 
      "timestamp": "2012-10-24 13:30:17", 
      "challenge": "[]", 
      "solution": "class Datum(Datum):\n    def jeVeljaven(self):\n        return 1 <= self.mesec <= 12 \\\n               and 1 <= self.dan <= dolzineMesecev(self.leto)[self.mesec - 1]", 
      "problem": 48, 
      "validation": "Check.equal('Datum(14, 12, 1982).jeVeljaven()', True)\nCheck.equal('Datum(31, 4, 2012).jeVeljaven()', False)\nCheck.equal('Datum(5, 13, 2012).jeVeljaven()', False)\nCheck.equal('Datum(29, 2, 2012).jeVeljaven()', True)\nCheck.equal('Datum(29, 2, 2011).jeVeljaven()', False)"
    }
  }, 
  {
    "pk": 249, 
    "model": "tomo.part", 
    "fields": {
      "_order": 5, 
      "description": "Definirajte metodo  `__sub__`, ki vrne razliko dveh ulomkov.\nKo definirate to metodo, lahko ulomke od\u0161tevate kar z operatorjem `-`.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "# def __sub__(self, other):\n#     a, b = self.st, self.im\n#     c, d = other.st, other.im\n#     return Ulomek(a * d - b * c, b * d)", 
      "problem": 73, 
      "validation": "Check.equal('Ulomek(1, 6) - Ulomek(1, 4)', Ulomek(-1, 12))\nCheck.equal('(Ulomek(3, 6) - Ulomek(1, 6)).st', 1)\nCheck.equal('(Ulomek(3, 6) - Ulomek(1, 6)).im', 3)"
    }
  }, 
  {
    "pk": 236, 
    "model": "tomo.part", 
    "fields": {
      "_order": 5, 
      "description": "Sestavite metodo `jeVeljaven(self)`, ki preveri, ali je datum\r\nveljaven.", 
      "timestamp": "2012-12-14 14:57:42", 
      "challenge": "[]", 
      "solution": "# def jeVeljaven(self):\r\n#     return 1 <= self.mesec <= 12 \\\r\n#            and 1 <= self.dan <= dolzineMesecev(self.leto)[self.mesec - 1]", 
      "problem": 72, 
      "validation": "Check.equal('Datum(14, 12, 1982).jeVeljaven()', True)\r\nCheck.equal('Datum(31, 4, 2012).jeVeljaven()', False)\r\nCheck.equal('Datum(5, 13, 2012).jeVeljaven()', False)\r\nCheck.equal('Datum(29, 2, 2012).jeVeljaven()', True)\r\nCheck.equal('Datum(29, 2, 2011).jeVeljaven()', False)"
    }
  }, 
  {
    "pk": 801, 
    "model": "tomo.part", 
    "fields": {
      "_order": 5, 
      "description": "Sestavite metodo `jeVeljaven(self)`, ki preveri, ali je datum\nveljaven.", 
      "timestamp": "2012-10-01 12:26:03", 
      "challenge": "[]", 
      "solution": "# def jeVeljaven(self):\n#     return 1 <= self.mesec <= 12 \\\n#            and 1 <= self.dan <= dolzineMesecev(self.leto)[self.mesec - 1]", 
      "problem": 253, 
      "validation": "Check.equal('Datum(14, 12, 1982).jeVeljaven()', True)\nCheck.equal('Datum(31, 4, 2012).jeVeljaven()', False)\nCheck.equal('Datum(5, 13, 2012).jeVeljaven()', False)\nCheck.equal('Datum(29, 2, 2012).jeVeljaven()', True)\nCheck.equal('Datum(29, 2, 2011).jeVeljaven()', False)"
    }
  }, 
  {
    "pk": 141, 
    "model": "tomo.part", 
    "fields": {
      "_order": 6, 
      "description": "Sestavite metodo `__lt__`, ki datum primerja z drugim datumom\n(metoda naj vrne `True`, \u010de je prvi datum manj\u0161i, in `False`, \u010de ni).\n\nKo definirate to metodo, lahko datume primerjate kar z operatorjema\n`<` in `>`. Na primer:\n\n    >>> Datum(31, 12, 1999) < Datum(1, 1, 2000)\n    True", 
      "timestamp": "2012-10-24 13:30:17", 
      "challenge": "[]", 
      "solution": "class Datum(Datum):\n    def __lt__(self, other):\n        # uporabimo kar Pythonovo vgrajeno leksikografsko primerjavo\n        return (self.leto, self.mesec, self.dan) \\\n               < (other.leto, other.mesec, other.dan)", 
      "problem": 48, 
      "validation": "Check.equal('Datum(31, 12, 1999) < Datum(1, 1, 2000)', True)\nCheck.equal('Datum(31, 12, 1999) < Datum(31, 12, 1999)', False)\nCheck.equal('Datum(31, 3, 1999) > Datum(1, 4, 1999)', False)"
    }
  }, 
  {
    "pk": 168, 
    "model": "tomo.part", 
    "fields": {
      "_order": 6, 
      "description": "Definirajte metodo  `__mul__`, ki vrne zmno\u017eek dveh ulomkov.\nKo definirate to metodo, lahko ulomke mno\u017eite kar z operatorjem `*`.", 
      "timestamp": "2012-10-24 13:43:41", 
      "challenge": "[]", 
      "solution": "class Ulomek(Ulomek):\n    def __mul__(self, other):\n        a, b = self.st, self.im\n        c, d = other.st, other.im\n        return Ulomek(a * c, b * d)", 
      "problem": 50, 
      "validation": "Check.equal('Ulomek(1, 6) * Ulomek(1, 4)', Ulomek(1, 24))\nCheck.equal('Ulomek(4, 9) * Ulomek(3, 2)', Ulomek(2, 3))"
    }
  }, 
  {
    "pk": 250, 
    "model": "tomo.part", 
    "fields": {
      "_order": 6, 
      "description": "Definirajte metodo  `__mul__`, ki vrne zmno\u017eek dveh ulomkov.\nKo definirate to metodo, lahko ulomke mno\u017eite kar z operatorjem `*`.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "# def __mul__(self, other):\n#     a, b = self.st, self.im\n#     c, d = other.st, other.im\n#     return Ulomek(a * c, b * d)", 
      "problem": 73, 
      "validation": "Check.equal('Ulomek(1, 6) * Ulomek(1, 4)', Ulomek(1, 24))\nCheck.equal('(Ulomek(4, 9) * Ulomek(3, 2)).st', 2)\nCheck.equal('(Ulomek(4, 9) * Ulomek(3, 2)).im', 3)"
    }
  }, 
  {
    "pk": 802, 
    "model": "tomo.part", 
    "fields": {
      "_order": 6, 
      "description": "Sestavite metodo `__lt__`, ki datum primerja z drugim datumom\n(metoda naj vrne `True`, \u010de je prvi datum manj\u0161i, in `False`, \u010de ni).\nKo definirate to metodo, lahko datume primerjate kar z operatorjema\n`<` in `>`. Na primer:\n\n    >>> Datum(31, 12, 1999) < Datum(1, 1, 2000)\n    True", 
      "timestamp": "2012-10-01 12:26:03", 
      "challenge": "[]", 
      "solution": "# def __lt__(self, other):\n#     # uporabimo kar Pythonovo vgrajeno leksikografsko primerjavo\n#     return (self.leto, self.mesec, self.dan) \\\n#            < (other.leto, other.mesec, other.dan)", 
      "problem": 253, 
      "validation": "Check.equal('Datum(31, 12, 1999) < Datum(1, 1, 2000)', True)\nCheck.equal('Datum(31, 12, 1999) < Datum(31, 12, 1999)', False)\nCheck.equal('Datum(31, 3, 1999) < Datum(1, 4, 1999)', True)"
    }
  }, 
  {
    "pk": 560, 
    "model": "tomo.part", 
    "fields": {
      "_order": 6, 
      "description": "S pomo\u010djo operacije `NeAli` in funkcije `Ne2` sestavite funkcijo\n`Ali2(a, b)`, ki vrne rezultat $a \\lor b$. Pri tem smete uporabiti\nsamo funkciji `NeAli` in `Ne2` in nobenih drugih logi\u010dnih operacij.", 
      "timestamp": "2012-03-11 21:55:29", 
      "challenge": "[]", 
      "solution": "def Ali2(a, b):\n    return Ne2(NeAli(a, b))", 
      "problem": 184, 
      "validation": "Check.equal(\"Ali2(False, False)\", False)\nCheck.equal(\"Ali2(False, True)\", True)\nCheck.equal(\"Ali2(True, False)\", True)\nCheck.equal(\"Ali2(True, True)\", True)\n\nfor op in ['not', 'and', 'or', 'NeIn', '|', '&']:\n    if op in re.sub(r'#.*', '', Check.current[\"solution\"]):\n        Check.error(\"V funkciji nastopa operacija '{0}'.\".format(op))\nif 'Ne(' in re.sub(' ','',re.sub(r'#.*', '', Check.current[\"solution\"])):\n    Check.error(\"V funkciji nastopa operacija 'Ne'.\")"
    }
  }, 
  {
    "pk": 820, 
    "model": "tomo.part", 
    "fields": {
      "_order": 6, 
      "description": "Sestavite funkcijo `zmnozek((d,m,n), (e,u,v))`, ki vrne zmno\u017eek danih dveh redkih\nmatrik.", 
      "timestamp": "2012-10-01 12:38:42", 
      "challenge": "[[\"None\", \"[((18, 20), 8748), ((19, 21), 10108), ((20, 22), 11600), ((21, 23), 13230), ((22, 24), 15004), ((23, 25), 16928), ((24, 26), 19008), ((25, 27), 21250), ((26, 28), 23660), ((27, 29), 26244), ((28, 30), 29008), ((29, 31), 31958)]\"]]", 
      "solution": "def zmnozek(dmn, euv):\n    (d,m,n) = dmn\n    (e,u,v) = euv\n    assert (n == u)\n    e_po_vrsticah = redka_po_vrsticah(euv)[0]\n    f = {}\n    for ((i,j),x) in d.items():\n        for (k, y) in e_po_vrsticah.get(j,{}).items():\n            f[(i,k)] = f.get((i,k), 0) + x * y\n    f = {ij:x for (ij,x) in f.items() if x != 0}\n    return (f, m, v)", 
      "problem": 256, 
      "validation": "Check.equal(\"\"\"zmnozek(({(0,0):1, (0,2):2}, 10, 5),\n                       ({(0,0):3, (2,3):4}, 5, 20))\"\"\",\n            ({(0, 3): 8, (0, 0): 3}, 10, 20))\n\nCheck.equal(\"\"\"zmnozek(({(i,i):14 for i in range(100)},100,100),\n                       ({(i,i):3 for i in range(100)},100,100))\"\"\",\n            ({(i,i):42 for i in range(100)}, 100, 100))\n\nCheck.challenge(\n    sorted(zmnozek(({(i,i+1) : i*i for i in range(10,30)}, 50, 50),\n            ({(i-1,i) : i+7 for i in range(20,40)}, 50, 50))[0].items()))"
    }
  }, 
  {
    "pk": 237, 
    "model": "tomo.part", 
    "fields": {
      "_order": 6, 
      "description": "Sestavite metodo `__lt__`, ki datum primerja z drugim datumom\r\n(metoda naj vrne `True`, \u010de je prvi datum manj\u0161i, in `False`, \u010de ni).\r\nKo definirate to metodo, lahko datume primerjate kar z operatorjema\r\n`<` in `>`. Na primer:\r\n\r\n    >>> Datum(31, 12, 1999) < Datum(1, 1, 2000)\r\n    True", 
      "timestamp": "2012-12-14 14:57:42", 
      "challenge": "[]", 
      "solution": "# def __lt__(self, other):\r\n#     # uporabimo kar Pythonovo vgrajeno leksikografsko primerjavo\r\n#     return (self.leto, self.mesec, self.dan) \\\r\n#            < (other.leto, other.mesec, other.dan)", 
      "problem": 72, 
      "validation": "Check.equal('Datum(31, 12, 1999) < Datum(1, 1, 2000)', True)\r\nCheck.equal('Datum(31, 12, 1999) < Datum(31, 12, 1999)', False)\r\nCheck.equal('Datum(31, 3, 1999) < Datum(1, 4, 1999)', True)"
    }
  }, 
  {
    "pk": 238, 
    "model": "tomo.part", 
    "fields": {
      "_order": 7, 
      "description": "Sestavite metodo `__eq__`, ki datum primerja z drugim datumom\r\n(metoda naj vrne `True`, \u010de sta datuma enaka, in `False`, \u010de nista).", 
      "timestamp": "2012-12-14 14:57:42", 
      "challenge": "[]", 
      "solution": "# def __eq__(self, other):\r\n#     # uporabimo kar Pythonovo vgrajeno leksikografsko primerjavo\r\n#     return (self.leto, self.mesec, self.dan) \\\r\n#            = (other.leto, other.mesec, other.dan)", 
      "problem": 72, 
      "validation": "Check.equal('Datum(31, 12, 1999) == Datum(1, 1, 2000)', False)\r\nCheck.equal('Datum(31, 12, 1999) == Datum(31, 12, 1999)', True)\r\nCheck.equal('Datum(31, 3, 1999) == Datum(1, 4, 1999)', False)"
    }
  }, 
  {
    "pk": 169, 
    "model": "tomo.part", 
    "fields": {
      "_order": 7, 
      "description": "Definirajte metodo  `__truediv__`, ki vrne kvocient dveh ulomkov.\nKo definirate to metodo, lahko ulomke delite kar z operatorjem `/`.", 
      "timestamp": "2012-10-24 13:43:41", 
      "challenge": "[]", 
      "solution": "class Ulomek(Ulomek):\n    def __truediv__(self, other):\n        a, b = self.st, self.im\n        c, d = other.st, other.im\n        return Ulomek(a * d, b * c)", 
      "problem": 50, 
      "validation": "Check.equal('Ulomek(1, 6) / Ulomek(1, 4)', Ulomek(2, 3))\nCheck.equal('Ulomek(4, 9) / Ulomek(2, 3)', Ulomek(2, 3))"
    }
  }, 
  {
    "pk": 251, 
    "model": "tomo.part", 
    "fields": {
      "_order": 7, 
      "description": "Definirajte metodo  `__truediv__`, ki vrne kvocient dveh ulomkov.\nKo definirate to metodo, lahko ulomke delite kar z operatorjem `/`.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "# def __truediv__(self, other):\n#     a, b = self.st, self.im\n#     c, d = other.st, other.im\n#     return Ulomek(a * d, b * c)", 
      "problem": 73, 
      "validation": "Check.equal('Ulomek(1, 6) / Ulomek(1, 4)', Ulomek(2, 3))\nCheck.equal('(Ulomek(4, 9) / Ulomek(2, 3)).st', 2)\nCheck.equal('(Ulomek(4, 9) / Ulomek(2, 3)).im', 3)"
    }
  }, 
  {
    "pk": 803, 
    "model": "tomo.part", 
    "fields": {
      "_order": 7, 
      "description": "Sestavite metodo `__eq__`, ki datum primerja z drugim datumom\n(metoda naj vrne `True`, \u010de sta datuma enaka, in `False`, \u010de nista).", 
      "timestamp": "2012-10-01 12:26:03", 
      "challenge": "[]", 
      "solution": "# def __eq__(self, other):\n#     # uporabimo kar Pythonovo vgrajeno leksikografsko primerjavo\n#     return (self.leto, self.mesec, self.dan) \\\n#            = (other.leto, other.mesec, other.dan)", 
      "problem": 253, 
      "validation": "Check.equal('Datum(31, 12, 1999) == Datum(1, 1, 2000)', False)\nCheck.equal('Datum(31, 12, 1999) == Datum(31, 12, 1999)', True)\nCheck.equal('Datum(31, 3, 1999) == Datum(1, 4, 1999)', False)"
    }
  }, 
  {
    "pk": 156, 
    "model": "tomo.part", 
    "fields": {
      "_order": 7, 
      "description": "Sestavite metodo `__eq__`, ki datum primerja z drugim datumom\n(metoda naj vrne `True`, \u010de sta datuma enaka, in `False`, \u010de nista).\n\nKo definirate to metodo, lahko datume primerjate kar z operatorjema\n`==` in `!=`. Na primer:\n\n    >>> Datum(31, 12, 1999) != Datum(1, 1, 2000)\n    True", 
      "timestamp": "2012-10-24 13:30:17", 
      "challenge": "[]", 
      "solution": "class Datum(Datum):\n    def __eq__(self, other):\n        # uporabimo kar Pythonovo vgrajeno leksikografsko primerjavo\n        return (self.leto, self.mesec, self.dan) \\\n               == (other.leto, other.mesec, other.dan)", 
      "problem": 48, 
      "validation": "Check.equal('Datum(31, 12, 1999) == Datum(1, 1, 2000)', False)\nCheck.equal('Datum(31, 12, 1999) == Datum(31, 12, 1999)', True)\nCheck.equal('Datum(31, 3, 1999) != Datum(1, 4, 1999)', True)"
    }
  }, 
  {
    "pk": 561, 
    "model": "tomo.part", 
    "fields": {
      "_order": 7, 
      "description": "S pomo\u010djo operacije `NeAli` in funkcije `Ne2` sestavite funkcijo\n`In2(a, b)`, ki vrne rezultat $a \\land b$. Pri tem smete uporabiti\nsamo funkciji `NeAli` in `Ne2` in nobenih drugih logi\u010dnih operacij.", 
      "timestamp": "2012-03-11 21:55:29", 
      "challenge": "[]", 
      "solution": "def In2(a, b):\n    return NeAli(Ne2(a), Ne2(b))", 
      "problem": 184, 
      "validation": "Check.equal(\"In(False, False)\", False)\nCheck.equal(\"In(False, True)\", False)\nCheck.equal(\"In(True, False)\", False)\nCheck.equal(\"In(True, True)\", True)\n\nfor op in ['not', 'and', 'or', 'NeIn', '|', '&']:\n    if op in re.sub(r'#.*', '', Check.current[\"solution\"]):\n        Check.error(\"V funkciji nastopa operacija '{0}'.\".format(op))\nif 'Ne(' in re.sub(' ','',re.sub(r'#.*', '', Check.current[\"solution\"])):\n    Check.error(\"V funkciji nastopa operacija 'Ne'.\")"
    }
  }, 
  {
    "pk": 821, 
    "model": "tomo.part", 
    "fields": {
      "_order": 7, 
      "description": "Dano je naravno \u0161tevilo $n$. Naj bo $A$ matrika velikosti $10^n \\times 10^n$,\ndefinirana s predpisom\n$$A_{i,j} =\n\\begin{cases}\n 1 & i = j - 1,\\\\\n i & i = j\\\\\n -1 & i = j + 1\n\\end{cases}$$\nSe pravi, $A$ je tridiagonalna matrika, ki ima nad diagonalo $1$, na\ndiagonali velja $A_{i,i} = i$, pod diagonalo pa ima $-1$.\n\nSestavite funkcijo `sled_a3_a(n)`, ki sprejme vrednost `n` in vrne\nsled matrike $A^3 + A$. Funkcija mora delovati v doglednem \u010dasu za\n$n \\leq 5$.", 
      "timestamp": "2012-10-01 12:38:42", 
      "challenge": "[[\"None\", \"249497755497\"], [\"None\", \"24999499977500549997\"]]", 
      "solution": "def print_redka(dmn):\n    (d,m,n) = dmn\n    for i in range(m):\n        for j in range(n):\n            print (d.get((i,j),0), end='\\t')\n        print()\n\ndef sled_a3_a(n):\n    a_slovar = {(i,i+1) : 1 for i in range(0, 10**n-1)}\n    a_slovar.update({(i,i) : i for i in range(10**n)})\n    a_slovar.update({(i,i-1) : -1 for i in range(1,10**n)})\n    a = (a_slovar, 10**n, 10**n)\n    a3 = zmnozek(zmnozek(a,a),a)\n    return sled(vsota(a3,a))", 
      "problem": 256, 
      "validation": "Check.equal(\"\"\"sled_a3_a(1)\"\"\", 1827)\nCheck.equal(\"\"\"sled_a3_a(2)\"\"\", 24478047)\nCheck.equal(\"\"\"sled_a3_a(4)\"\"\", 2499499775054997)\nCheck.challenge(sled_a3_a(3))\nCheck.challenge(sled_a3_a(5))"
    }
  }, 
  {
    "pk": 252, 
    "model": "tomo.part", 
    "fields": {
      "_order": 8, 
      "description": "Definirajte funkcijo  `priblizek(n)`, ki vrne vsoto\n$1/0! + 1/1! + \u2026 + 1/n!$.\nPoglejte, ali je izra\u010dunana vrednost blizu \u0161tevila $e$.", 
      "timestamp": "2012-03-01 13:55:02", 
      "challenge": "[]", 
      "solution": "def priblizek(n):\n    def fakulteta(i):\n        return 1 if i == 0 else i * fakulteta(i - 1)\n\n    return sum((Ulomek(1, fakulteta(i)) for i in range(n + 1)), Ulomek(0, 1))", 
      "problem": 73, 
      "validation": "Check.equal('priblizek(3)', Ulomek(8, 3))\nCheck.equal('priblizek(5)', Ulomek(163, 60))\nCheck.equal('priblizek(10)', Ulomek(9864101, 3628800))"
    }
  }, 
  {
    "pk": 804, 
    "model": "tomo.part", 
    "fields": {
      "_order": 8, 
      "description": "Sestavite metodo `danVLetu`, ki izra\u010duna, koliko dni je minilo\nod za\u010detka leta do danega datuma.", 
      "timestamp": "2012-10-01 12:26:03", 
      "challenge": "[]", 
      "solution": "# def danVLetu(self):\n#     return sum(dolzineMesecev(self.leto)[:self.mesec - 1]) + self.dan", 
      "problem": 253, 
      "validation": "Check.equal('Datum(14, 12, 1982).danVLetu()', 348)\nCheck.equal('Datum(31, 3, 2012).danVLetu()', 91)\nCheck.equal('Datum(31, 3, 2011).danVLetu()', 90)\nCheck.equal('Datum(1, 1, 2011).danVLetu()', 1)"
    }
  }, 
  {
    "pk": 170, 
    "model": "tomo.part", 
    "fields": {
      "_order": 8, 
      "description": "Definirajte funkcijo  `priblizek(n)`, ki vrne vsoto\n$1/0! + 1/1! + \u2026 + 1/n!$.\nPoglejte, ali je izra\u010dunana vrednost blizu \u0161tevila $e$.", 
      "timestamp": "2012-10-24 13:43:41", 
      "challenge": "[]", 
      "solution": "def priblizek(n):\n    def fakulteta(i):\n        return 1 if i == 0 else i * fakulteta(i - 1)\n\n    return sum((Ulomek(1, fakulteta(i)) for i in range(n + 1)), Ulomek(0, 1))", 
      "problem": 50, 
      "validation": "Check.equal('priblizek(3)', Ulomek(8, 3))\nCheck.equal('priblizek(5)', Ulomek(163, 60))\nCheck.equal('priblizek(10)', Ulomek(9864101, 3628800))"
    }
  }, 
  {
    "pk": 239, 
    "model": "tomo.part", 
    "fields": {
      "_order": 8, 
      "description": "Sestavite metodo `danVLetu`, ki izra\u010duna, koliko dni je minilo\r\nod za\u010detka leta do danega datuma.", 
      "timestamp": "2012-12-14 14:57:42", 
      "challenge": "[]", 
      "solution": "# def danVLetu(self):\r\n#     return sum(dolzineMesecev(self.leto)[:self.mesec - 1]) + self.dan", 
      "problem": 72, 
      "validation": "Check.equal('Datum(14, 12, 1982).danVLetu()', 348)\r\nCheck.equal('Datum(31, 3, 2012).danVLetu()', 91)\r\nCheck.equal('Datum(31, 3, 2011).danVLetu()', 90)\r\nCheck.equal('Datum(1, 1, 2011).danVLetu()', 1)"
    }
  }, 
  {
    "pk": 157, 
    "model": "tomo.part", 
    "fields": {
      "_order": 8, 
      "description": "Sestavite metodo `danVLetu`, ki izra\u010duna, koliko dni je minilo\nod za\u010detka leta do danega datuma.", 
      "timestamp": "2012-10-24 13:30:17", 
      "challenge": "[]", 
      "solution": "class Datum(Datum):\n    def danVLetu(self):\n        return sum(dolzineMesecev(self.leto)[:self.mesec - 1]) + self.dan", 
      "problem": 48, 
      "validation": "Check.equal('Datum(14, 12, 1982).danVLetu()', 348)\nCheck.equal('Datum(31, 3, 2012).danVLetu()', 91)\nCheck.equal('Datum(31, 3, 2011).danVLetu()', 90)\nCheck.equal('Datum(1, 1, 2011).danVLetu()', 1)"
    }
  }, 
  {
    "pk": 240, 
    "model": "tomo.part", 
    "fields": {
      "_order": 9, 
      "description": "Sestavite metodo `razlika`, ki vrne \u0161tevilo dni med dvema datumoma.", 
      "timestamp": "2012-12-14 14:57:42", 
      "challenge": "[]", 
      "solution": "# def razlika(self, other):\r\n#     # izra\u010dun se poenostavi, \u010de predpostavimo, da je self kasnej\u0161i datum\r\n#     # \u010de ni, izra\u010dun obrnemo\r\n#     if self < other:\r\n#         return -other.razlika(self)\r\n#     else:\r\n#         # najprej pre\u0161tejemo \u0161tevilo dni v med za\u010detkoma let\r\n#         razlika = sum(steviloDni(l) for l in range(other.leto, self.leto))\r\n#         # nato upo\u0161tevamo \u0161e dni v posameznem letu\r\n#         razlika += self.danVLetu()\r\n#         razlika -= other.danVLetu()\r\n#         return razlika", 
      "problem": 72, 
      "validation": "Check.equal('Datum(14, 12, 1990).razlika(Datum(14, 12, 1982))', 2922)\r\nCheck.equal('Datum(31, 3, 2012).razlika(Datum(1, 4, 2011))', 365)\r\nCheck.equal('Datum(25, 6, 1991).razlika(Datum(10, 11, 2011))', -7443)"
    }
  }, 
  {
    "pk": 805, 
    "model": "tomo.part", 
    "fields": {
      "_order": 9, 
      "description": "Sestavite metodo `razlika`, ki vrne \u0161tevilo dni med dvema datumoma.", 
      "timestamp": "2012-10-01 12:26:03", 
      "challenge": "[]", 
      "solution": "# def razlika(self, other):\n#     # izra\u010dun se poenostavi, \u010de predpostavimo, da je self kasnej\u0161i datum\n#     # \u010de ni, izra\u010dun obrnemo\n#     if self < other:\n#         return -razlika(other, self)\n#     else:\n#         # najprej pre\u0161tejemo \u0161tevilo dni v med za\u010detkoma let\n#         razlika = sum(steviloDni(l) for l in range(other.leto, self.leto))\n#         # nato upo\u0161tevamo \u0161e dni v posameznem letu\n#         razlika += self.danVLetu()\n#         razlika -= other.danVLetu()\n#         return razlika", 
      "problem": 253, 
      "validation": "Check.equal('Datum(14, 12, 1990).razlika(Datum(14, 12, 1982))', 2922)\nCheck.equal('Datum(31, 3, 2012).razlika(Datum(1, 4, 2011))', 365)\nCheck.equal('Datum(25, 6, 1991).razlika(Datum(10, 11, 2011))', -7443)"
    }
  }, 
  {
    "pk": 144, 
    "model": "tomo.part", 
    "fields": {
      "_order": 9, 
      "description": "Sestavite metodo `razlika`, ki vrne \u0161tevilo dni med dvema datumoma.", 
      "timestamp": "2012-10-24 13:30:17", 
      "challenge": "[]", 
      "solution": "class Datum(Datum):\n    def razlika(self, other):\n        # izra\u010dun se poenostavi, \u010de predpostavimo, da je self kasnej\u0161i datum\n        # \u010de ni, izra\u010dun obrnemo\n        if self < other:\n            return -other.razlika(self)\n        else:\n            # najprej pre\u0161tejemo \u0161tevilo dni v med za\u010detkoma let\n            razlika = sum(steviloDni(l) for l in range(other.leto, self.leto))\n            # nato upo\u0161tevamo \u0161e dni v posameznem letu\n            razlika += self.danVLetu()\n            razlika -= other.danVLetu()\n            return razlika", 
      "problem": 48, 
      "validation": "Check.equal('Datum(14, 12, 1990).razlika(Datum(14, 12, 1982))', 2922)\nCheck.equal('Datum(31, 3, 2012).razlika(Datum(1, 4, 2011))', 365)\nCheck.equal('Datum(25, 6, 1991).razlika(Datum(10, 11, 2011))', -7443)"
    }
  }, 
  {
    "pk": 241, 
    "model": "tomo.part", 
    "fields": {
      "_order": 10, 
      "description": "Sestavite metodo `danVTednu`, ki vrne \u0161tevilko dneva v tednu\r\n(1 = ponedeljek, 2 = torek, \u2026, 7=nedelja). Pomagajte si z\r\n[Zellerjevim obrazcem](http://calendars.wikia.com/wiki/Zeller%27s_congruence).", 
      "timestamp": "2012-12-14 14:57:42", 
      "challenge": "[]", 
      "solution": "# def danVTednu(self):\r\n#     # uporabimo Zellerjev obrazec\r\n#     q = self.dan\r\n#     # upo\u0161tevamo popravek za januar in februar\r\n#     if self.mesec > 2:\r\n#         m = self.mesec\r\n#         l = self.leto\r\n#     else:\r\n#         m = self.mesec + 12\r\n#         l = self.leto - 1\r\n#     j = l // 100\r\n#     k = l % 100\r\n#     h = (q + ((m + 1) * 26) // 10 + k + k // 4 + j // 4 - 2 * j) % 7\r\n#     # popravimo vrednost h, da bo 1 ponedeljek in 7 nedelja\r\n#     return (h - 2) % 7 + 1", 
      "problem": 72, 
      "validation": "Check.equal('Datum(14, 12, 1982).danVTednu()', 2)\r\nCheck.equal('Datum(10, 11, 2011).danVTednu()', 4)\r\nCheck.equal('Datum(9, 3, 1981).danVTednu()', 1)"
    }
  }, 
  {
    "pk": 806, 
    "model": "tomo.part", 
    "fields": {
      "_order": 10, 
      "description": "Sestavite metodo `danVTednu`, ki vrne \u0161tevilko dneva v tednu\n(1 = ponedeljek, 2 = torek, \u2026, 7=nedelja). Pomagajte si z\n[Zellerjevim obrazcem](http://calendars.wikia.com/wiki/Zeller%27s_congruence).", 
      "timestamp": "2012-10-01 12:26:03", 
      "challenge": "[]", 
      "solution": "# def danVTednu(self):\n#     # uporabimo Zellerjev obrazec\n#     q = self.dan\n#     # upo\u0161tevamo popravek za januar in februar\n#     if self.mesec > 2:\n#         m = self.mesec\n#         l = self.leto\n#     else:\n#         m = self.mesec + 12\n#         l = self.leto - 1\n#     j = l // 100\n#     k = l % 100\n#     h = (q + ((m + 1) * 26) // 10 + k + k // 4 + j // 4 - 2 * j) % 7\n#     # popravimo vrednost h, da bo 1 ponedeljek in 7 nedelja\n#     return (h - 2) % 7 + 1", 
      "problem": 253, 
      "validation": "Check.equal('Datum(14, 12, 1982).danVTednu()', 2)\nCheck.equal('Datum(10, 11, 2011).danVTednu()', 4)\nCheck.equal('Datum(9, 3, 1981).danVTednu()', 1)"
    }
  }, 
  {
    "pk": 171, 
    "model": "tomo.part", 
    "fields": {
      "_order": 10, 
      "description": "Sestavite metodo `danVTednu`, ki vrne \u0161tevilko dneva v tednu\n(1 = ponedeljek, 2 = torek, \u2026, 7=nedelja). Pomagajte si z\n[Zellerjevim obrazcem](http://calendars.wikia.com/wiki/Zeller%27s_congruence).", 
      "timestamp": "2012-10-24 13:30:17", 
      "challenge": "[]", 
      "solution": "class Datum(Datum):\n    def danVTednu(self):\n        # uporabimo Zellerjev obrazec\n        q = self.dan\n        # upo\u0161tevamo popravek za januar in februar\n        if self.mesec > 2:\n            m = self.mesec\n            l = self.leto\n        else:\n            m = self.mesec + 12\n            l = self.leto - 1\n        j = l // 100\n        k = l % 100\n        h = (q + ((m + 1) * 26) // 10 + k + k // 4 + j // 4 - 2 * j) % 7\n        # popravimo vrednost h, da bo 1 ponedeljek in 7 nedelja\n        return (h - 2) % 7 + 1", 
      "problem": 48, 
      "validation": "Check.equal('Datum(14, 12, 1982).danVTednu()', 2)\nCheck.equal('Datum(10, 11, 2011).danVTednu()', 4)\nCheck.equal('Datum(9, 3, 1981).danVTednu()', 1)"
    }
  }, 
  {
    "pk": 807, 
    "model": "tomo.part", 
    "fields": {
      "_order": 11, 
      "description": "Sestavite metodo `tedenVLetu`, ki vrne \u0161tevilko tedna v letu.", 
      "timestamp": "2012-10-01 12:26:03", 
      "challenge": "[]", 
      "solution": "# def tedenVLetu(self):\n#     # kateri dan v letu je bila pretekla nedelja\n#     nedelja = self.danVLetu() - self.danVTednu()\n#     # \u0161tevilo tednov je ravno \u0161tevilo preteklih nedelj + 1.\n#     return nedelja // 7 + 2", 
      "problem": 253, 
      "validation": "Check.equal('Datum(14, 12, 1982).tedenVLetu()', 51)\nCheck.equal('Datum(3, 1, 2011).tedenVLetu()', 2)\nCheck.equal('Datum(1, 1, 2011).tedenVLetu()', 1)"
    }
  }, 
  {
    "pk": 146, 
    "model": "tomo.part", 
    "fields": {
      "_order": 11, 
      "description": "Sestavite metodo `tedenVLetu`, ki vrne \u0161tevilko tedna v letu.", 
      "timestamp": "2012-10-24 13:30:17", 
      "challenge": "[]", 
      "solution": "class Datum(Datum):\n    def tedenVLetu(self):\n        # kateri dan v letu je bila pretekla nedelja\n        nedelja = self.danVLetu() - self.danVTednu()\n        # \u0161tevilo tednov je ravno \u0161tevilo preteklih nedelj + 1.\n        return nedelja // 7 + 2", 
      "problem": 48, 
      "validation": "Check.equal('Datum(14, 12, 1982).tedenVLetu()', 51)\nCheck.equal('Datum(3, 1, 2011).tedenVLetu()', 2)\nCheck.equal('Datum(1, 1, 2011).tedenVLetu()', 1)"
    }
  }, 
  {
    "pk": 242, 
    "model": "tomo.part", 
    "fields": {
      "_order": 11, 
      "description": "Sestavite metodo `tedenVLetu`, ki vrne \u0161tevilko tedna v letu.", 
      "timestamp": "2012-12-14 14:57:42", 
      "challenge": "[]", 
      "solution": "# def tedenVLetu(self):\r\n#     # kateri dan v letu je bila pretekla nedelja\r\n#     nedelja = self.danVLetu() - self.danVTednu()\r\n#     # \u0161tevilo tednov je ravno \u0161tevilo preteklih nedelj + 1.\r\n#     return nedelja // 7 + 2", 
      "problem": 72, 
      "validation": "Check.equal('Datum(14, 12, 1982).tedenVLetu()', 51)\r\nCheck.equal('Datum(3, 1, 2011).tedenVLetu()', 2)\r\nCheck.equal('Datum(1, 1, 2011).tedenVLetu()', 1)"
    }
  }, 
  {
    "pk": 161, 
    "model": "tomo.part", 
    "fields": {
      "_order": 12, 
      "description": "Izven razreda `Datum` sestavite \u0161e funkcijo `datum(leto, dan)`,\nki za parametra dobi leto in \u0161tevilko dneva v letu ter sestavi in\nvrne ustrezen datum.", 
      "timestamp": "2012-10-24 13:30:17", 
      "challenge": "[]", 
      "solution": "def datum(leto, dan):\n    dolzine = dolzineMesecev(leto)\n    mesec = 1\n    # dokler je dan ve\u010dji od \u0161tevila dni v mesecu, pove\u010daj mesec in zmanj\u0161aj dan\n    while dan > dolzine[mesec - 1]:\n        mesec += 1\n        dan -= dolzine[mesec - 1]\n    return Datum(dan, mesec, leto)", 
      "problem": 48, 
      "validation": "Check.equal('datum(2011, 1)', Datum(1, 1, 2011))\nCheck.equal('datum(2012, 12)', Datum(12, 1, 2012))\nCheck.equal('datum(2013, 123)', Datum(3, 5, 2013))"
    }
  }, 
  {
    "pk": 243, 
    "model": "tomo.part", 
    "fields": {
      "_order": 12, 
      "description": "Izven razreda `Datum` sestavite \u0161e funkcijo `datum(leto, dan)`,\r\nki za parametra dobi leto in \u0161tevilko dneva v letu ter sestavi in\r\nvrne ustrezen datum.", 
      "timestamp": "2012-12-14 14:57:42", 
      "challenge": "[]", 
      "solution": "def datum(leto, dan):\r\n    dolzine = dolzineMesecev(leto)\r\n    mesec = 1\r\n    # dokler je dan ve\u010dji od \u0161tevila dni v mesecu, pove\u010daj mesec in zmanj\u0161aj dan\r\n    while dan > dolzine[mesec - 1]:\r\n        mesec += 1\r\n        dan -= dolzine[mesec - 1]\r\n    return Datum(dan, mesec, leto)", 
      "problem": 72, 
      "validation": "Check.equal('datum(2011, 1)', Datum(1, 1, 2011))\r\nCheck.equal('datum(2012, 12)', Datum(12, 1, 2012))\r\nCheck.equal('datum(2013, 123)', Datum(3, 5, 2013))"
    }
  }, 
  {
    "pk": 808, 
    "model": "tomo.part", 
    "fields": {
      "_order": 12, 
      "description": "Izven razreda `Datum` sestavite \u0161e funkcijo `datum(leto, dan)`,\nki za parametra dobi leto in \u0161tevilko dneva v letu ter sestavi in\nvrne ustrezen datum.", 
      "timestamp": "2012-10-01 12:26:03", 
      "challenge": "[]", 
      "solution": "def datum(leto, dan):\n    dolzine = dolzineMesecev(leto)\n    mesec = 1\n    # dokler je dan ve\u010dji od \u0161tevila dni v mesecu, pove\u010daj mesec in zmanj\u0161aj dan\n    while dan > dolzine[mesec - 1]:\n        mesec += 1\n        dan -= dolzine[mesec - 1]\n    return Datum(dan, mesec, leto)", 
      "problem": 253, 
      "validation": "Check.equal('datum(2011, 1)', Datum(1, 1, 2011))\nCheck.equal('datum(2012, 12)', Datum(12, 1, 2012))\nCheck.equal('datum(2013, 123)', Datum(3, 5, 2013))"
    }
  }
]