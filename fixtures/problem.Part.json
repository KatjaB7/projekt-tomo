[
  {
    "pk": 79, 
    "model": "problem.part", 
    "fields": {
      "_order": 0, 
      "description": "\nDan je spisek oseb, urejen po abecedi (najprej po priimkih, nato po imenih):\n\n* Ana Ban\n* Mojca Ban\n* Bine Bobi\u010d\n* Alen Drenik\n* Janko Kova\u010d\n* Ervin Lu\u017ear\n* ...\n\nSpisek predstavimo z dvema tabelama, ena vsebuje imena in druga priimke:\n\n    ime = ['Ana', 'Mojca', 'Bine', 'Alen', 'Janko', 'Ervin', ...]\n    priimek = ['Ban', 'Ban', 'Bobi\u010d', 'Drenik', 'Kova\u010d', 'Lu\u017ear', ...]\n\nTako lahko dobimo ime in priimek k-te osebe v spisku z `ime[k], priimek[k]`.\n\nSestavi funkcijo `najdi(ime, priimek, i, p)`, ki sprejme tak\u0161ni tabeli imen in\npriimkov ime in priimek, ter vrne *indeks*, na katerem se pojavlja oseba z\nimenom `i` in priimkom `p`. Kaj vrne metoda, \u010de take osebe ni? Primer uporabe:\n\n    >>> ime = ['Ana', 'Mojca', 'Bine', 'Alen', 'Janko', 'Ervin']\n    >>> priimek = ['Ban', 'Ban', 'Bobi\u010d', 'Drenik', 'Kova\u010d', 'Lu\u017ear']\n    >>> najdi(ime, priimek, 'Mojca', 'Ban')\n    1\n", 
      "challenge": "NoneNone19", 
      "solution": "def najdi(ime, priimek, i, p):\n    assert (len(ime) == len(priimek)) # preverimo, da sta dolzini tabel enaki\n    u = 0\n    v = len(ime)\n    while u < v:\n        w = (u + v) // 2\n        if priimek[w] == p and ime[w] == i: return w\n        elif priimek[w] < p or (priimek[w] == p and ime[w] < i):\n            u = w + 1\n        else:\n            v = w - 1\n    return None", 
      "problem": 36, 
      "validation": "Check.equal(\"\"\"najdi(['Ana', 'Mojca', 'Bine', 'Alen', 'Janko', 'Ervin'],\n                     ['Ban', 'Ban', 'Bobi\u010d', 'Drenik', 'Kova\u010d', 'Lu\u017ear'],\n                     'Mojca', 'Ban')\"\"\", 1)\nCheck.equal(\"\"\"najdi(['Ana', 'Mojca', 'Bine', 'Alen', 'Janko', 'Ervin'],\n                     ['Ban', 'Ban', 'Bobi\u010d', 'Drenik', 'Kova\u010d', 'Lu\u017ear'],\n                     'Ervin', 'Lu\u017ear')\"\"\", 5)\nCheck.equal(\"\"\"najdi(['Ana', 'Mojca', 'Bine', 'Alen', 'Janko', 'Ervin'],\n                     ['Ban', 'Ban', 'Bobi\u010d', 'Drenik', 'Kova\u010d', 'Lu\u017ear'],\n                     '', '')\"\"\", None)\nCheck.equal(\"\"\"najdi(['Ana', 'Mojca', 'Bine', 'Alen', 'Janko', 'Ervin'],\n                     ['Ban', 'Ban', 'Bobi\u010d', 'Drenik', 'Kova\u010d', 'Lu\u017ear'],\n                     'mojca', 'ban')\"\"\", None)\nCheck.equal(\"\"\"najdi(['Ana', 'Mojca', 'Bine', 'Alen', 'Janko', 'Ervin'],\n                     ['Ban', 'Ban', 'Bobi\u010d', 'Drenik', 'Kova\u010d', 'Lu\u017ear'],\n                     '\u017diga', '\u017digon')\"\"\", None)\nCheck.equal(\"\"\"najdi([], [], 'Josip', 'Broz')\"\"\", None)\nCheck.equal(\"\"\"najdi(['Josip'], ['Broz'], 'Josip', 'Broz')\"\"\", 0)\n\nCheck.challenge(\n    najdi(['Alja', 'Andrej', 'Andrej', 'Barbara', 'Eva', 'Eva', 'Filip', 'Gregor', 'Jure', 'KATJA', 'Matej', 'Mateja', 'Naja', 'Nejc', 'Nina', 'Samo', 'Selena', 'Tomaz', 'Ur\u0161ka', 'Ziva'],\n          ['Aleksandrov', 'Arli\u010d', 'Bajcer', 'Bauer', 'Bevc', 'Bobi\u010d', 'Bobnar', 'Bohanec', 'Borstnik', 'Breznik', 'Cerinsek', 'Derca', 'Dervi\u0161i\u0107', 'Dezman', 'Drnovsek', 'Dvorsak', 'Jereb', 'KUSTER', 'Kozarski', 'Kralj'],\n          'Matej', 'Aleksandrov'))\n\nCheck.challenge(\n    najdi(['Alja', 'Andrej', 'Andrej', 'Barbara', 'Eva', 'Eva', 'Filip', 'Gregor', 'Jure', 'KATJA', 'Matej', 'Mateja', 'Naja', 'Nejc', 'Nina', 'Samo', 'Selena', 'Tomaz', 'Ur\u0161ka', 'Ziva'],\n          ['Aleksandrov', 'Arli\u010d', 'Bajcer', 'Bauer', 'Bevc', 'Bobi\u010d', 'Bobnar', 'Bohanec', 'Borstnik', 'Breznik', 'Cerinsek', 'Derca', 'Dervi\u0161i\u0107', 'Dezman', 'Drnovsek', 'Dvorsak', 'Jereb', 'KUSTER', 'Kozarski', 'Kralj'],\n          'MATEJ', 'Aleksandrov'))\n\nCheck.challenge(\n    najdi(['Alja', 'Andrej', 'Andrej', 'Barbara', 'Eva', 'Eva', 'Filip', 'Gregor', 'Jure', 'KATJA', 'Matej', 'Mateja', 'Naja', 'Nejc', 'Nina', 'Samo', 'Selena', 'Tomaz', 'Ur\u0161ka', 'Ziva'],\n          ['Aleksandrov', 'Arli\u010d', 'Bajcer', 'Bauer', 'Bevc', 'Bobi\u010d', 'Bobnar', 'Bohanec', 'Borstnik', 'Breznik', 'Cerinsek', 'Derca', 'Dervi\u0161i\u0107', 'Dezman', 'Drnovsek', 'Dvorsak', 'Jereb', 'KUSTER', 'Kozarski', 'Kralj'],\n          'Ziva', 'Kralj'))"
    }
  }, 
  {
    "pk": 71, 
    "model": "problem.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `uredi_z_vstavljanjem`, ki na mestu uredi\ntabelo z vstavljanem.", 
      "challenge": "[0, 0, 0, 0, 8, 8, 8, 8, 10, 10, 10, 10, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 18, 18, 18, 18, 20, 20, 20, 20, 28, 28, 28, 28, 30, 30, 30, 30, 38, 38, 38, 38, 40, 40, 40, 40, 48, 48, 48, 48, 50, 50, 50, 50, 58, 58, 58, 58, 60, 60, 60, 60, 68, 68, 68, 68, 70, 70, 70, 70, 78, 78, 78, 78, 80, 80, 80, 80, 88, 88, 88, 88, 90, 90, 90, 90, 98, 98, 98, 98, 100, 100, 100, 100, 108, 108, 108, 108, 110, 110, 110, 110, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 118, 118, 118, 118, 120, 120, 120, 120, 128, 128, 128, 128, 130, 130, 130, 130, 138, 138, 138, 138, 140, 140, 140, 140, 148, 148, 148, 148, 150, 150, 150, 150, 158, 158, 158, 158, 160, 160, 160, 160, 168, 168, 168, 168, 170, 170, 170, 170, 178, 178, 178, 178, 180, 180, 180, 180, 188, 188, 188, 188, 190, 190, 190, 190, 198, 198, 198, 198, 200, 200, 200, 200, 208, 208, 208, 208, 210, 210, 210, 210, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 218, 218, 218, 218, 220, 220, 220, 220, 228, 228, 228, 228, 230, 230, 230, 230, 238, 238, 238, 238, 240, 240, 240, 240, 248, 248, 248, 248, 250, 250, 250, 250, 258, 258, 258, 258, 260, 260, 260, 260, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 268, 268, 268, 268, 270, 270, 270, 270, 278, 278, 278, 278, 280, 280, 280, 280, 288, 288, 288, 288, 290, 290, 290, 290, 298, 298, 298, 298, 300, 300, 300, 300, 308, 308, 308, 308, 310, 310, 310, 310, 318, 318, 318, 318, 320, 320, 320, 320, 328, 328, 328, 328, 330, 330, 330, 330, 338, 338, 338, 338, 340, 340, 340, 340, 348, 348, 348, 348, 350, 350, 350, 350, 358, 358, 358, 358, 360, 360, 360, 360, 364, 364, 364, 364, 364, 364, 364, 364, 364, 364, 368, 368, 368, 368, 370, 370, 370, 370, 378, 378, 378, 378, 380, 380, 380, 380, 388, 388, 388, 388, 390, 390, 390, 390, 398, 398, 398, 398, 400, 400, 400, 400, 408, 408, 408, 408, 410, 410, 410, 410, 418, 418, 418, 418, 420, 420, 420, 420, 428, 428, 428, 428, 430, 430, 430, 430, 438, 438, 438, 438, 440, 440, 440, 440, 448, 448, 448, 448, 450, 450, 450, 450, 458, 458, 458, 458, 460, 460, 460, 460, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 468, 468, 468, 468, 470, 470, 470, 470, 478, 478, 478, 478, 480, 480, 480, 480, 488, 488, 488, 488, 490, 490, 490, 490, 498, 498, 498, 498, 500, 500, 500, 500, 508, 508, 508, 508, 510, 510, 510, 510, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 518, 518, 518, 518, 520, 520, 520, 520, 528, 528, 528, 528, 530, 530, 530, 530, 538, 538, 538, 538, 540, 540, 540, 540, 548, 548, 548, 548, 550, 550, 550, 550, 558, 558, 558, 558, 560, 560, 560, 560, 568, 568, 568, 568, 570, 570, 570, 570, 578, 578, 578, 578, 580, 580, 580, 580, 588, 588, 588, 588, 590, 590, 590, 590, 598, 598, 598, 598, 600, 600, 600, 600, 608, 608, 608, 608, 610, 610, 610, 610, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 618, 618, 618, 618, 620, 620, 620, 620, 628, 628, 628, 628, 630, 630, 630, 630, 638, 638, 638, 638, 640, 640, 640, 640, 648, 648, 648, 648, 650, 650, 650, 650, 658, 658, 658, 658, 660, 660, 660, 660, 668, 668, 668, 668, 670, 670, 670, 670, 678, 678, 678, 678, 680, 680, 680, 680, 688, 688, 688, 688, 690, 690, 690, 690, 698, 698, 698, 698, 700, 700, 700, 700, 708, 708, 708, 708, 710, 710, 710, 710, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 718, 718, 718, 718, 720, 720, 720, 720, 728, 728, 728, 728, 730, 730, 730, 730, 738, 738, 738, 738, 740, 740, 740, 740, 748, 748, 748, 748, 750, 750, 750, 750, 758, 758, 758, 758, 760, 760, 760, 760, 764, 764, 764, 764, 764, 764, 764, 764, 764, 764, 764, 764, 764, 764, 764, 764, 764, 764, 764, 764, 768, 768, 768, 768, 770, 770, 770, 770, 778, 778, 778, 778, 780, 780, 780, 780, 788, 788, 788, 788, 790, 790, 790, 790, 798, 798, 798, 798, 800, 800, 800, 800, 808, 808, 808, 808, 810, 810, 810, 810, 818, 818, 818, 818, 820, 820, 820, 820, 828, 828, 828, 828, 830, 830, 830, 830, 838, 838, 838, 838, 840, 840, 840, 840, 848, 848, 848, 848, 850, 850, 850, 850, 858, 858, 858, 858, 860, 860, 860, 860, 864, 864, 864, 864, 864, 864, 864, 864, 864, 864, 868, 868, 868, 868, 870, 870, 870, 870, 878, 878, 878, 878, 880, 880, 880, 880, 888, 888, 888, 888, 890, 890, 890, 890, 898, 898, 898, 898, 900, 900, 900, 900, 908, 908, 908, 908, 910, 910, 910, 910, 918, 918, 918, 918, 920, 920, 920, 920, 928, 928, 928, 928, 930, 930, 930, 930, 938, 938, 938, 938, 940, 940, 940, 940, 948, 948, 948, 948, 950, 950, 950, 950, 958, 958, 958, 958, 960, 960, 960, 960, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 968, 968, 968, 968, 970, 970, 970, 970, 978, 978, 978, 978, 980, 980, 980, 980, 988, 988, 988, 988, 990, 990, 990, 990, 998, 998, 998, 998]", 
      "solution": "def uredi_z_vstavljanjem(a):\n    for i in range(1, len(a)):\n        j = i - 1\n        k = a[i]\n        while j >= 0 and a[j] > k:\n            a[j+1] = a[j]\n            j = j - 1\n        a[j+1] = k", 
      "problem": 26, 
      "validation": "a_orig = [2,5,6,1,4,7,3,9,8]\na = a_orig[:]\nCheck.equal(\"uredi_z_vstavljanjem(a)\", None, env=locals(),\n            message=\"\u010ce je a = {0}, vrne\\n  {{0}} vrednost {{1}} namesto vrednosti {{2}}\".format(a))\nCheck.equal(\"a\", sorted(a_orig), env=locals(),\n            message=\"\u010ce je a = {0},\\n  je po klicu uredi_z_vstavljanjem(a),\\n  tabela a enaka {{1}}\\n  morala pa bi biti {{2}}\".format(a_orig))\n\na_orig = [42]\na = a_orig[:]\nCheck.equal(\"uredi_z_vstavljanjem(a)\", None, env=locals(),\n            message=\"\u010ce je a = {0}, vrne\\n  {{0}} vrednost {{1}} namesto vrednosti {{2}}\".format(a))\nCheck.equal(\"a\", sorted(a_orig), env=locals(),\n            message=\"\u010ce je a = {0},\\n  je po klicu uredi_z_vstavljanjem(a),\\n  tabela a enaka {{1}}\\n  morala pa bi biti {{2}}\".format(a_orig))\n\na_orig = [1,0]\na = a_orig[:]\nCheck.equal(\"uredi_z_vstavljanjem(a)\", None, env=locals(),\n            message=\"\u010ce je a = {0}, vrne\\n  {{0}} vrednost {{1}} namesto vrednosti {{2}}\".format(a))\nCheck.equal(\"a\", sorted(a_orig), env=locals(),\n            message=\"\u010ce je a = {0},\\n  je po klicu uredi_z_vstavljanjem(a),\\n  tabela a enaka {{1}}\\n  morala pa bi biti {{2}}\".format(a_orig))\n\na_orig = []\na = a_orig[:]\nCheck.equal(\"uredi_z_vstavljanjem(a)\", None, env=locals(),\n            message=\"\u010ce je a = {0}, vrne\\n  {{0}} vrednost {{1}} namesto vrednosti {{2}}\".format(a))\nCheck.equal(\"a\", sorted(a_orig), env=locals(),\n            message=\"\u010ce je a = {0},\\n  je po klicu uredi_z_vstavljanjem(a),\\n  tabela a enaka {{1}}\\n  morala pa bi biti {{2}}\".format(a_orig))\n\nb = [(i * i + 17 * i + 30) % 1000 for i in range(0,1000)]\nuredi_z_vstavljanjem(b)\nCheck.challenge(b)"
    }
  }, 
  {
    "pk": 78, 
    "model": "problem.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `diagonalna(n, d, i)`, ki vrne matriko velikosti\r\n`n` \u00d7 `n` z vektorjem `d` na diagonali ter \u0161tevilom `i` izven \r\ndiagonale.", 
      "challenge": "30, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 29, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 28, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 27, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 26, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 25, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 24, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 23, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 22, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 21, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 20, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 19, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 18, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 17, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 16, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 15, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 14, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 13, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 12, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 11, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 9, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1", 
      "solution": "diagonalna <- function(n, d, i) {\r\n  matrika <- matrix(i, n, n)\r\n  matrika[row(matrika) == col(matrika)] <- d\r\n  return(matrika)\r\n}", 
      "problem": 33, 
      "validation": "check$equal(dim(diagonalna(123, 45, 67)), c(123, 123))\r\ncheck$equal(diagonalna(3, c(4, 5, 6), 2), matrix(c(4, 2, 2, 2, 5, 2, 2, 2, 6), 3))\r\ncheck$challenge(toString(diagonalna(30, 30 : 1, 5)))"
    }
  }, 
  {
    "pk": 74, 
    "model": "problem.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `zlij`, ki sprejme urejeni tabeli ter ju zlije\nv urejeno tabelo, ki jo vrne.", 
      "challenge": "[3, 7, 8, 11, 16, 20, 23, 32, 37, 43, 54, 56, 71, 71, 88, 88, 105, 122, 139, 156, 173, 190, 207, 224, 241, 258, 275, 292, 309, 326, 343, 360, 377, 394, 411, 428, 445, 462, 479, 496, 513, 530, 547, 564, 581, 598, 615, 632, 649, 666, 683, 700, 717, 734, 751, 768, 785, 802, 819, 836][7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]", 
      "solution": "def zlij(u,v):\n    \"\"\"Zlij urejeni tabeli u in v in vrni novo urejeno tabelo.\"\"\"\n    m = len(u)\n    n = len(v)\n    w = [0] * (m + n)\n    i = 0\n    j = 0\n    k = 0\n    while k < m + n:\n        if i < m and (j >= n or u[i] < v[j]):\n            w[k] = u[i]\n            i = i + 1\n        else:\n            w[k] = v[j]\n            j = j + 1\n        k = k + 1\n    return w", 
      "problem": 27, 
      "validation": "Check.equal(\"zlij([1,2,3],[4,5,6,7])\", [1,2,3,4,5,6,7])\nCheck.equal(\"zlij([2,4,6,8], [1,3,5,7])\", [1,2,3,4,5,6,7,8])\nCheck.equal(\"zlij([], [2,5,10])\", [2,5,10])\nCheck.equal(\"zlij([1], [])\", [1])\nCheck.equal(\"zlij([1,2,3], [1,2,3])\", [1,1,2,2,3,3])\nCheck.equal(\"zlij([1,1,2,3,4,4], [2,3])\", [1,1,2,2,3,3,4,4])\n\nCheck.challenge(zlij([i * i + 7 for i in range(0,10)], [17 * j + 3 for j in range(0,50)]))\nCheck.challenge(zlij([7] * 13, [7] * 15))"
    }
  }, 
  {
    "pk": 82, 
    "model": "problem.part", 
    "fields": {
      "_order": 0, 
      "description": "Pravimo, da je element `a[k]` v tabeli `a` *pivot*, \u010de za vse `i < k`\r\nvelja `a[i] < a[k]` in za vse `j > k` velja `a[j] > a[k]`. Se pravi,\r\nda so vsi elementi pred `k`-tim man\u0161i od `a[k]` in vsi elementi za\r\n`k`-tim ve\u010dji od `a[k]`.\r\n\r\nSestavite funkcijo `je_pivot(a,k)`, ki vrne `True`, \u010de je element `a[k]`\r\nv dani tabeli `a` pivot.", 
      "challenge": "TrueTrueTrueFalse", 
      "solution": "def je_pivot(a,k):\r\n    return all(x < a[k] for x in a[:k]) and all(a[k] < y for y in a[(k+1):])", 
      "problem": 37, 
      "validation": "Check.equal(\"je_pivot([1,2,3,4,5,6], 2)\", True)\r\nCheck.equal(\"je_pivot([1,2,3,4,5,6], 0)\", True)\r\nCheck.equal(\"je_pivot([2,1,3,4,5,6], 5)\", True)\r\nCheck.equal(\"je_pivot([6,2,5,4,3,1], 3)\", False)\r\nCheck.equal(\"je_pivot([42], 0)\", True)\r\nCheck.challenge(je_pivot([2,1,7,8,10,11,14,12,13], 4))\r\nCheck.challenge(je_pivot([2,1,7,8,10,11,14,12,13], 3))\r\nCheck.challenge(je_pivot([2,1,7,8,10,11,14,12,13], 5))\r\nCheck.challenge(je_pivot([2,1,7,8,10,11,14,12,13], 0))"
    }
  }, 
  {
    "pk": 29, 
    "model": "problem.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `palindrom(niz)`, ki vrne `True` kadar je `niz`\npalindrom, in `False` sicer.", 
      "challenge": "TrueTrueTrueTrueTrueTrueTrueTrueTrueTrueFalseTrueFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseTrueFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseTrueFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseTrueFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseTrueFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseTrueFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseTrueFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseTrueFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseTrue", 
      "solution": "def palindrom(niz):\n    return niz == niz[::-1]", 
      "problem": 18, 
      "validation": "Check.equal('palindrom(\"pericarezeracirep\")', True)\nCheck.equal('palindrom(\"pericarezeraciglavo\")', False)\nCheck.equal('palindrom(\"\")', True)\nCheck.equal('palindrom(\"abccba\")', True)\nCheck.equal('palindrom(\"abca\")', False)\nfor i in range(100):\n    Check.challenge(palindrom(str(i)))"
    }
  }, 
  {
    "pk": 8, 
    "model": "problem.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `praviDelitelji(n)`, ki vrne seznam vseh pravih\r\ndeliteljev \u0161tevila `n`.", 
      "challenge": "[1, 2, 3, 5, 6, 10, 15]", 
      "solution": "def praviDelitelji(n):\r\n    return [i for i in range(1, n) if n % i == 0]", 
      "problem": 8, 
      "validation": "Check.equal('praviDelitelji(19)', [1])\r\nCheck.equal('praviDelitelji(28)', [1, 2, 4, 7, 14])\r\nCheck.equal('praviDelitelji(42)', [1, 2, 3, 6, 7, 14, 21])\r\nCheck.challenge(praviDelitelji(30))\r\n"
    }
  }, 
  {
    "pk": 12, 
    "model": "problem.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `narcisoidi(d)`, ki sprejme slovar zaljubljenih\nin vrne _mon\u017eico_ tistih, ki ljubijo same sebe.", 
      "challenge": "{'Davorka', 'Ana'}", 
      "solution": "def narcisoidi(d):\n    return {oseba for oseba in d if oseba in d[oseba]}", 
      "problem": 9, 
      "validation": "Check.equal(\"\"\"narcisoidi({'Ana' : {'Bine','Cene'},\n                          'Bine' : set(),\n                          'Cene' : {'Bine'},\n                          'Davorka' : {'Davorka'},\n                          'Eva' : {'Bine'}})\\n\"\"\", {'Davorka'})\nCheck.equal('narcisoidi({})', set())\nCheck.equal(\"narcisoidi({'Ana':{'Ana','Bine'}})\", {'Ana'})\nCheck.challenge(narcisoidi({'Ana' : {'Bine','Ana','Cene'},\n                            'Bine' : set(),\n                            'Cene' : {'Bine'},\n                            'Davorka' : {'Davorka'},\n                            'Eva' : {'Bine'}}))"
    }
  }, 
  {
    "pk": 72, 
    "model": "problem.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `uredi_z_izbiranjem`, ki na mestu uredi dano tabelo\nz izbiranjem.", 
      "challenge": "[0, 0, 0, 0, 8, 8, 8, 8, 10, 10, 10, 10, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 18, 18, 18, 18, 20, 20, 20, 20, 28, 28, 28, 28, 30, 30, 30, 30, 38, 38, 38, 38, 40, 40, 40, 40, 48, 48, 48, 48, 50, 50, 50, 50, 58, 58, 58, 58, 60, 60, 60, 60, 68, 68, 68, 68, 70, 70, 70, 70, 78, 78, 78, 78, 80, 80, 80, 80, 88, 88, 88, 88, 90, 90, 90, 90, 98, 98, 98, 98, 100, 100, 100, 100, 108, 108, 108, 108, 110, 110, 110, 110, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 118, 118, 118, 118, 120, 120, 120, 120, 128, 128, 128, 128, 130, 130, 130, 130, 138, 138, 138, 138, 140, 140, 140, 140, 148, 148, 148, 148, 150, 150, 150, 150, 158, 158, 158, 158, 160, 160, 160, 160, 168, 168, 168, 168, 170, 170, 170, 170, 178, 178, 178, 178, 180, 180, 180, 180, 188, 188, 188, 188, 190, 190, 190, 190, 198, 198, 198, 198, 200, 200, 200, 200, 208, 208, 208, 208, 210, 210, 210, 210, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 218, 218, 218, 218, 220, 220, 220, 220, 228, 228, 228, 228, 230, 230, 230, 230, 238, 238, 238, 238, 240, 240, 240, 240, 248, 248, 248, 248, 250, 250, 250, 250, 258, 258, 258, 258, 260, 260, 260, 260, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 268, 268, 268, 268, 270, 270, 270, 270, 278, 278, 278, 278, 280, 280, 280, 280, 288, 288, 288, 288, 290, 290, 290, 290, 298, 298, 298, 298, 300, 300, 300, 300, 308, 308, 308, 308, 310, 310, 310, 310, 318, 318, 318, 318, 320, 320, 320, 320, 328, 328, 328, 328, 330, 330, 330, 330, 338, 338, 338, 338, 340, 340, 340, 340, 348, 348, 348, 348, 350, 350, 350, 350, 358, 358, 358, 358, 360, 360, 360, 360, 364, 364, 364, 364, 364, 364, 364, 364, 364, 364, 368, 368, 368, 368, 370, 370, 370, 370, 378, 378, 378, 378, 380, 380, 380, 380, 388, 388, 388, 388, 390, 390, 390, 390, 398, 398, 398, 398, 400, 400, 400, 400, 408, 408, 408, 408, 410, 410, 410, 410, 418, 418, 418, 418, 420, 420, 420, 420, 428, 428, 428, 428, 430, 430, 430, 430, 438, 438, 438, 438, 440, 440, 440, 440, 448, 448, 448, 448, 450, 450, 450, 450, 458, 458, 458, 458, 460, 460, 460, 460, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 468, 468, 468, 468, 470, 470, 470, 470, 478, 478, 478, 478, 480, 480, 480, 480, 488, 488, 488, 488, 490, 490, 490, 490, 498, 498, 498, 498, 500, 500, 500, 500, 508, 508, 508, 508, 510, 510, 510, 510, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 518, 518, 518, 518, 520, 520, 520, 520, 528, 528, 528, 528, 530, 530, 530, 530, 538, 538, 538, 538, 540, 540, 540, 540, 548, 548, 548, 548, 550, 550, 550, 550, 558, 558, 558, 558, 560, 560, 560, 560, 568, 568, 568, 568, 570, 570, 570, 570, 578, 578, 578, 578, 580, 580, 580, 580, 588, 588, 588, 588, 590, 590, 590, 590, 598, 598, 598, 598, 600, 600, 600, 600, 608, 608, 608, 608, 610, 610, 610, 610, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 618, 618, 618, 618, 620, 620, 620, 620, 628, 628, 628, 628, 630, 630, 630, 630, 638, 638, 638, 638, 640, 640, 640, 640, 648, 648, 648, 648, 650, 650, 650, 650, 658, 658, 658, 658, 660, 660, 660, 660, 668, 668, 668, 668, 670, 670, 670, 670, 678, 678, 678, 678, 680, 680, 680, 680, 688, 688, 688, 688, 690, 690, 690, 690, 698, 698, 698, 698, 700, 700, 700, 700, 708, 708, 708, 708, 710, 710, 710, 710, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 718, 718, 718, 718, 720, 720, 720, 720, 728, 728, 728, 728, 730, 730, 730, 730, 738, 738, 738, 738, 740, 740, 740, 740, 748, 748, 748, 748, 750, 750, 750, 750, 758, 758, 758, 758, 760, 760, 760, 760, 764, 764, 764, 764, 764, 764, 764, 764, 764, 764, 764, 764, 764, 764, 764, 764, 764, 764, 764, 764, 768, 768, 768, 768, 770, 770, 770, 770, 778, 778, 778, 778, 780, 780, 780, 780, 788, 788, 788, 788, 790, 790, 790, 790, 798, 798, 798, 798, 800, 800, 800, 800, 808, 808, 808, 808, 810, 810, 810, 810, 818, 818, 818, 818, 820, 820, 820, 820, 828, 828, 828, 828, 830, 830, 830, 830, 838, 838, 838, 838, 840, 840, 840, 840, 848, 848, 848, 848, 850, 850, 850, 850, 858, 858, 858, 858, 860, 860, 860, 860, 864, 864, 864, 864, 864, 864, 864, 864, 864, 864, 868, 868, 868, 868, 870, 870, 870, 870, 878, 878, 878, 878, 880, 880, 880, 880, 888, 888, 888, 888, 890, 890, 890, 890, 898, 898, 898, 898, 900, 900, 900, 900, 908, 908, 908, 908, 910, 910, 910, 910, 918, 918, 918, 918, 920, 920, 920, 920, 928, 928, 928, 928, 930, 930, 930, 930, 938, 938, 938, 938, 940, 940, 940, 940, 948, 948, 948, 948, 950, 950, 950, 950, 958, 958, 958, 958, 960, 960, 960, 960, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 964, 968, 968, 968, 968, 970, 970, 970, 970, 978, 978, 978, 978, 980, 980, 980, 980, 988, 988, 988, 988, 990, 990, 990, 990, 998, 998, 998, 998]", 
      "solution": "def uredi_z_izbiranjem(a):\n    for i in range(0, len(a) - 1):\n        j = i\n        for k in range(i+1, len(a)):\n            if a[k] < a[j]: j = k\n        (a[i], a[j]) = (a[j], a[i])", 
      "problem": 25, 
      "validation": "a_orig = [2,5,6,1,4,7,3,9,8]\na = a_orig[:]\nCheck.equal(\"uredi_z_izbiranjem(a)\", None, env=locals(),\n            message=\"\u010ce je a = {0}, vrne\\n  {{0}} vrednost {{1}} namesto vrednosti {{2}}\".format(a))\nCheck.equal(\"a\", sorted(a_orig), env=locals(),\n            message=\"\u010ce je a = {0},\\n  je po klicu uredi_z_izbiranjem(a),\\n  tabela a enaka {{1}}\\n  morala pa bi biti {{2}}\".format(a_orig))\n\na_orig = [42]\na = a_orig[:]\nCheck.equal(\"uredi_z_izbiranjem(a)\", None, env=locals(),\n            message=\"\u010ce je a = {0}, vrne\\n  {{0}} vrednost {{1}} namesto vrednosti {{2}}\".format(a))\nCheck.equal(\"a\", sorted(a_orig), env=locals(),\n            message=\"\u010ce je a = {0},\\n  je po klicu uredi_z_izbiranjem(a),\\n  tabela a enaka {{1}}\\n  morala pa bi biti {{2}}\".format(a_orig))\n\na_orig = [1,0]\na = a_orig[:]\nCheck.equal(\"uredi_z_izbiranjem(a)\", None, env=locals(),\n            message=\"\u010ce je a = {0}, vrne\\n  {{0}} vrednost {{1}} namesto vrednosti {{2}}\".format(a))\nCheck.equal(\"a\", sorted(a_orig), env=locals(),\n            message=\"\u010ce je a = {0},\\n  je po klicu uredi_z_izbiranjem(a),\\n  tabela a enaka {{1}}\\n  morala pa bi biti {{2}}\".format(a_orig))\n\na_orig = []\na = a_orig[:]\nCheck.equal(\"uredi_z_izbiranjem(a)\", None, env=locals(),\n            message=\"\u010ce je a = {0}, vrne\\n  {{0}} vrednost {{1}} namesto vrednosti {{2}}\".format(a))\nCheck.equal(\"a\", sorted(a_orig), env=locals(),\n            message=\"\u010ce je a = {0},\\n  je po klicu uredi_z_izbiranjem(a),\\n  tabela a enaka {{1}}\\n  morala pa bi biti {{2}}\".format(a_orig))\n\nb = [(i * i + 17 * i + 30) % 1000 for i in range(0,1000)]\nuredi_z_izbiranjem(b)\nCheck.challenge(b)"
    }
  }, 
  {
    "pk": 34, 
    "model": "problem.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `slika(permutacija, x)`, vrne pa sliko \u0161tevila `x`\r\ns podano permutacijo.\r\nPredpostavite lahko, da je dano \u0161tevilo v domeni permutacije.\r\n\r\n    >>> slika([3, 2, 1], 3)\r\n    1", 
      "challenge": "979695949392919089888786858483828180797877767574737271706968676665646362616059585756555453525150494847464544434241", 
      "solution": "def slika(permutacija, x):\r\n    return permutacija[x - 1]", 
      "problem": 19, 
      "validation": "Check.equal('slika([3, 4, 2, 1], 1)', 3)\r\nCheck.equal('slika([3, 4, 2, 1], 2)', 4)\r\nCheck.equal('slika([3, 4, 2, 1], 3)', 2)\r\nCheck.equal('slika([3, 4, 2, 1], 4)', 1)\r\n\r\nfor i in range(3, 60):\r\n    Check.challenge(slika(_perm, i))"
    }
  }, 
  {
    "pk": 65, 
    "model": "problem.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `zadnji`, ki vrne zadnjo komponento danega vektorja.", 
      "challenge": "1000", 
      "solution": "zadnji <- function(v) {\n    v[length(v)]\n}", 
      "problem": 22, 
      "validation": "check$equal(zadnji(c(1, 2, 3)), 3)\ncheck$equal(zadnji(c(1, 2, 3, -10)), -10)\ncheck$challenge(zadnji(1 : 1000))"
    }
  }, 
  {
    "pk": 62, 
    "model": "problem.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `vsota.kvadratov(n)`, ki vrne vsoto\nvrne vsoto `1^2 + 2^2 + ... + n^2`.", 
      "challenge": "338350", 
      "solution": "vsota.kvadratov <- function(n) {\n    return(sum((1 : n)^2))\n}", 
      "problem": 21, 
      "validation": "check$equal(vsota.kvadratov(3), 14)\ncheck$equal(vsota.kvadratov(4), 30)\ncheck$challenge(vsota.kvadratov(100))"
    }
  }, 
  {
    "pk": 5, 
    "model": "problem.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `ravninskaRazdalja(x1, y1, x2, y2)`, ki vrne razdaljo med\r\nto\u010dkama (`x1`, `y1`) in (`x2`, `y2`).\r\n\r\n    >>> ravninskaRazdalja(1, 2, 3, 4)\r\n    2.82842712475", 
      "challenge": "2.236068", 
      "solution": "def ravninskaRazdalja(x1, y1, x2, y2):\r\n    return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** (1 / 2)", 
      "problem": 4, 
      "validation": "Check.num_equal('ravninskaRazdalja(1, 2, 3, 4)', 2.82842712475, 6)\r\nCheck.num_equal('ravninskaRazdalja(0, 0, 3, 4)', 5, 6)\r\nCheck.challenge(round(ravninskaRazdalja(1, 4, 2, 6), 6))"
    }
  }, 
  {
    "pk": 39, 
    "model": "problem.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `identiteta(n)`, ki vrne identi\u010dno matriko z\r\ndimenzijami `n` \u00d7 `n`.", 
      "challenge": "[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]]", 
      "solution": "def identiteta(n):\r\n    return [[1 if i == j else 0 for i in range(n)] for j in range(n)]", 
      "problem": 20, 
      "validation": "Check.equal('identiteta(1)', [[1]])\r\nCheck.equal('identiteta(2)', [[1, 0], [0, 1]])\r\nCheck.equal('identiteta(4)', [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]])\r\nCheck.challenge(identiteta(25))"
    }
  }, 
  {
    "pk": 15, 
    "model": "problem.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `limona(n)`, ki za parameter dobi naravno \u0161tevilo `n`\nin vrne niz oblike `\"Ima\u0161 n limon.\"', pri \u010demer mora biti seveda vse\npravilno sklanjano.", 
      "challenge": "Ima\u0161 1 limono.Ima\u0161 2 limoni.Ima\u0161 3 limone.Ima\u0161 4 limone.Ima\u0161 5 limon.Ima\u0161 6 limon.Ima\u0161 7 limon.Ima\u0161 8 limon.Ima\u0161 9 limon.Ima\u0161 10 limon.Ima\u0161 11 limon.Ima\u0161 12 limon.Ima\u0161 13 limon.Ima\u0161 14 limon.Ima\u0161 15 limon.Ima\u0161 16 limon.Ima\u0161 17 limon.Ima\u0161 18 limon.Ima\u0161 19 limon.Ima\u0161 20 limon.Ima\u0161 21 limon.Ima\u0161 22 limon.Ima\u0161 23 limon.Ima\u0161 24 limon.Ima\u0161 25 limon.Ima\u0161 26 limon.Ima\u0161 27 limon.Ima\u0161 28 limon.Ima\u0161 29 limon.Ima\u0161 30 limon.Ima\u0161 31 limon.Ima\u0161 32 limon.Ima\u0161 33 limon.Ima\u0161 34 limon.Ima\u0161 35 limon.Ima\u0161 36 limon.Ima\u0161 37 limon.Ima\u0161 38 limon.Ima\u0161 39 limon.Ima\u0161 40 limon.Ima\u0161 41 limon.Ima\u0161 42 limon.Ima\u0161 43 limon.Ima\u0161 44 limon.Ima\u0161 45 limon.Ima\u0161 46 limon.Ima\u0161 47 limon.Ima\u0161 48 limon.Ima\u0161 49 limon.", 
      "solution": "def limona(n):\n    ostanek = n % 100\n    if ostanek == 1:\n        koncnica = 'o'\n    elif ostanek == 2:\n        koncnica = 'i'\n    elif ostanek == 3 or ostanek == 4:\n        koncnica = 'e'\n    else:\n        koncnica = ''\n    return \"Ima\u0161 {0} limon{1}.\".format(n, koncnica)", 
      "problem": 10, 
      "validation": "Check.equal('limona(1)', 'Ima\u0161 1 limono.')\nCheck.equal('limona(2)', 'Ima\u0161 2 limoni.')\nCheck.equal('limona(3)', 'Ima\u0161 3 limone.')\nCheck.equal('limona(12)', 'Ima\u0161 12 limon.')\nCheck.equal('limona(13)', 'Ima\u0161 13 limon.')\nCheck.equal('limona(14)', 'Ima\u0161 14 limon.')\nCheck.equal('limona(101)', 'Ima\u0161 101 limono.')\nCheck.equal('limona(103)', 'Ima\u0161 103 limone.')\nCheck.equal('limona(105)', 'Ima\u0161 105 limon.')\nfor i in range(1, 50):\n    Check.challenge(limona(i))"
    }
  }, 
  {
    "pk": 90, 
    "model": "problem.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `matrika_v_redko(a)`, ki sprejme obi\u010dajno predstavitev\nmatrike s tabelo tabel in vrne njeno predstavitev s slovarjem po koordinatah.", 
      "challenge": "({(9, 26): 1, (45, 8): 1, (0, 0): 1, (27, 20): 1, (13, 45): 1, (10, 7): 1, (32, 46): 1, (8, 43): 1, (14, 18): 1, (46, 24): 1, (47, 38): 1, (20, 28): 1, (34, 21): 1, (31, 2): 1, (41, 31): 1, (37, 22): 1, (23, 6): 1, (29, 15): 1, (40, 5): 1, (17, 32): 1, (25, 17): 1}, 50, 50)", 
      "solution": "def matrika_v_redko(a):\n    \"\"\"Matriko predstavljeno z dvojno tabelo pretvori v slovar po koordinatah.\"\"\"\n    m = len(a)\n    n = len(a[0])\n    d = {}\n    for (i,vrstica) in enumerate(a):\n        for (j,x) in enumerate(vrstica):\n            if x != 0: d[(i,j)] = x\n    return (d, m, n)", 
      "problem": 39, 
      "validation": "Check.equal(\"\"\"matrika_v_redko([[1, 0, 0, 0, 2, 0],\n                               [0, 4, 0, 0, 3, 0],\n                               [0, 0, 0, 0, 0, 0],\n                               [0, 0, 0, 0, 0, 5]])\"\"\",\n            ({ (0,0) : 1, (0,4) : 2, (1,1) : 4, (1,4): 3, (3,5) : 5 }, 4, 6))\n\nCheck.equal(\"\"\"matrika_v_redko([[1]])\"\"\",\n            ({ (0,0) : 1 }, 1, 1))\n\nCheck.equal(\"\"\"matrika_v_redko([[1,1],[1,1]])\"\"\",\n            ({ (0,0) : 1, (0,1) : 1, (1, 0): 1, (1,1) : 1 }, 2, 2))\n\nCheck.challenge(matrika_v_redko([[int((i*i + j) % 107 == 0) for j in range(50)]\n                                                             for i in range(50)]))"
    }
  }, 
  {
    "pk": 96, 
    "model": "problem.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `prestopno(l)`, ki vrne `True`, \u010de je leto `l` \nprestopno, sicer pa vrne `False`.", 
      "challenge": "[False, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False]", 
      "solution": "def prestopno(l):\n    return (l % 400 == 0) or (l % 4 == 0 and l % 100 != 0)", 
      "problem": 29, 
      "validation": "Check.equal(\"prestopno(2011)\", False)\nCheck.equal(\"prestopno(2000)\", True)\nCheck.equal(\"prestopno(1900)\", False)\nCheck.equal(\"prestopno(2004)\", True)\n\nCheck.challenge([prestopno(l) for l in range(1500, 2000)])"
    }
  }, 
  {
    "pk": 85, 
    "model": "problem.part", 
    "fields": {
      "_order": 0, 
      "description": "V spremenljivko `otroci` shranite podrazporeditev s podatki\no vseh otrocih v 2. razredu.", 
      "challenge": "0, 0, 11, 13", 
      "solution": "otroci <- Titanic[\"2nd\", , \"Child\", ]", 
      "problem": 34, 
      "validation": "check$equal(otroci[\"Male\", \"Yes\"], 11)\ncheck$equal(otroci[\"Female\", \"No\"], 0)\ncheck$challenge(toString(otroci))"
    }
  }, 
  {
    "pk": 68, 
    "model": "problem.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite vektor `otoki`, ki vsebuje iste podatke kot vektor `islands`,\nle da so povr\u0161ine izra\u017eene v kvadratnih kilometrih.\nV vektor `otoki` dodajte \u0161e Blejski otok.", 
      "challenge": "29800 14245 43999 7687 41 477 60 725 218 189 65 111 54 212 9700 2176 34 78 78 231 104 85 127 36 109 588 41 93 75 39 793 114 150 111 24320 83 34 75 17599 41 39 474 36 67 49 34 31 212 0", 
      "solution": "otoki <- 1.609344^2 * islands\notoki[\"Blejski otok\"] <- 0.0082", 
      "problem": 23, 
      "validation": "check$equal(round(otoki['Java'], 3), 126.909)\ncheck$equal(round(otoki['Britain'], 3), 217.559)\ncheck$equal(otoki['Blejski otok'], 0.0082)\ncheck$challenge(paste(round(otoki), collapse=\" \"))"
    }
  }, 
  {
    "pk": 1, 
    "model": "problem.part", 
    "fields": {
      "_order": 0, 
      "description": "Ko napi\u0161ete re\u0161itev, pritisnite `ctrl-shift-S` oziroma _Source_.\r\nPreverila se bo pravilnost vseh nalog, katerih re\u0161itev ni prazna.\r\n", 
      "challenge": "", 
      "solution": "42", 
      "problem": 1, 
      "validation": ""
    }
  }, 
  {
    "pk": 20, 
    "model": "problem.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `stopinje(radiani)`, ki pretvarja iz radianov v\nkotne stopinje.", 
      "challenge": "12776.958831", 
      "solution": "stopinje <- function(radiani) {\n  180 * radiani / pi\n}", 
      "problem": 16, 
      "validation": "check$equal(stopinje(pi / 4), 45)\ncheck$equal(stopinje(3 * pi), 540)\ncheck$challenge(round(stopinje(223), 6))"
    }
  }, 
  {
    "pk": 75, 
    "model": "problem.part", 
    "fields": {
      "_order": 0, 
      "description": "1. del", 
      "challenge": "", 
      "solution": "", 
      "problem": 28, 
      "validation": ""
    }
  }, 
  {
    "pk": 25, 
    "model": "problem.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavite funkcijo `gcd(m, n)`, ki z Evklidovim algoritmom izra\u010duna\nnajve\u010dji skupni delitelj \u0161tevil `m` in `n`.", 
      "challenge": "12121212121212121212", 
      "solution": "gcd <- function(m, n) {\n  while(n != 0) {\n    ostanek <- m %% n\n    m <- n\n    n <- ostanek\n  }\n  return(m)\n}\n# lahko pa bi uporabili tudi rekurzijo\ngcd <- function(m, n) {\n  if(n != 0) {\n    return(gcd(n, m %% n))\n  } else {\n    return(m)\n  }\n}", 
      "problem": 17, 
      "validation": "check$equal(gcd(42, 12), 6)\ncheck$equal(gcd(13, 5), 1)\ncheck$equal(gcd(8, 20), 4)\nfor (x in (1 : 20)) {\n  check$challenge(gcd(x, x + 2))\n}"
    }
  }, 
  {
    "pk": 94, 
    "model": "problem.part", 
    "fields": {
      "_order": 0, 
      "description": "Sestavi funkcijo `sled((d,m,n))`, ki vrne sled redke matrike, predstavljene\ns trojico `(d,m,n)`. Sled je vsota diagonalnih elementov.", 
      "challenge": "741321", 
      "solution": "def sled(dmn):\n    (d,m,n) = dmn\n    return sum([x for ((i,j),x) in d.items() if i == j])", 
      "problem": 40, 
      "validation": "Check.equal(\"\"\"sled(({(0,0) : 1, (0,4) : 2, (1,1) : 4, (1,4): 3, (3,5) : 5}, 4, 6))\"\"\",\n            5)\n\nCheck.equal(\"\"\"sled(({(i,i):i for i in range(101)}, 100, 100))\"\"\",\n            5050)\n\nCheck.challenge(sled(({(i,i):i*i*i for i in range(42)}, 50, 50)))"
    }
  }, 
  {
    "pk": 73, 
    "model": "problem.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `urejanje_z_zlivanjem`, ki sprejme tabelo `a` in\njo uredi z zlivanje. Funkcija naj ne spreminja tabele `a`, ampak naj\nvrne novo tabelo.", 
      "challenge": "[4, 18, 34, 52, 72, 94, 118, 144, 172, 202, 234, 268, 304, 342, 382, 424, 468, 514, 562, 612, 664, 718, 774, 832, 892, 954, 1018, 1084, 1152, 1222, 1294, 1368, 1444, 1522, 1602, 1684, 1768, 1854, 1942, 2032, 2124, 2218, 2314, 2412, 2512, 2614, 2718, 2824, 2932, 3042, 3154, 3268, 3384, 3502, 3622, 3744, 3868, 3994, 4122, 4252, 4384, 4518, 4654, 4792, 4932, 5074, 5218, 5364, 5512, 5662, 5814, 5968, 6124, 6282, 6442, 6604, 6768, 6934, 7102, 7272, 7444, 7618, 7794, 7972, 8152, 8334, 8518, 8704, 8892, 9082, 9274, 9468, 9664, 9862, 10062, 10264, 10468, 10674, 10882, 11092, 11304, 11518, 11734, 11952, 12172, 12394, 12618, 12844, 13072, 13302, 13534, 13768, 14004, 14242, 14482, 14724, 14968, 15214, 15462, 15712, 15964, 16218, 16474, 16732, 16992, 17254, 17518, 17784, 18052, 18322, 18594, 18868, 19144, 19422, 19702, 19984, 20268, 20554, 20842, 21132, 21424, 21718, 22014, 22312, 22612, 22914, 23218, 23524, 23832, 24142, 24454, 24768, 25084, 25402, 25722, 26044, 26368, 26694, 27022, 27352, 27684, 28018, 28354, 28692, 29032, 29374, 29718, 30064, 30412, 30762, 31114, 31468, 31824, 32182, 32542, 32904, 33268, 33634, 34002, 34372, 34744, 35118, 35494, 35872, 36252, 36634, 37018, 37404, 37792, 38182, 38574, 38968, 39364, 39762, 40162, 40564, 40968, 41374, 41782, 42192][1, 2, 3]", 
      "solution": "def uredi_z_zlivanjem(a):\n    \"\"\"Uredi tabelo a z zlivanjem in vrni novo, urejeno tabelo.\"\"\"\n\n    def uredi(a, i, j):\n        \"\"\"Uredi podtabelo a[i:j] z zlivanjem, vrne novo tabelo.\"\"\"\n        if j - i < 2:\n            return a[i:j]\n        else:\n            b = uredi(a, i, (i+j)//2)\n            c = uredi(a, (i+j)//2, j)\n            return zlij(b, c)\n\n    return uredi(a,0,len(a))", 
      "problem": 27, 
      "validation": "Check.equal(\"uredi_z_zlivanjem([1,4,5,6,7,9,2,3,8])\", [1,2,3,4,5,6,7,8,9])\nCheck.equal(\"uredi_z_zlivanjem([])\", [])\nCheck.equal(\"uredi_z_zlivanjem([0])\", [0])\nCheck.equal(\"uredi_z_zlivanjem([1,0])\", [0,1])\n\nCheck.challenge([(i * i + 13 * i + 4) for i in range(0,200)])\nCheck.challenge([1,2,3])"
    }
  }, 
  {
    "pk": 86, 
    "model": "problem.part", 
    "fields": {
      "_order": 1, 
      "description": "Dana je neprazna tabela `a`, v kateri bi radi preuredili elemente tako,\r\nda bo `a[0]` postal pivot. To pomeni, da moramo dati vse elemente, ki\r\nso manj\u0161i od `a[0]` na za\u010detek tabele, nato sledi `a[0]` in nato \u0161e\r\nelementi, ki so ve\u010dji od `a[0]`. Na primer, tabelo\r\n\r\n    [10, 4, 5, 15, 11, 2, 17, 0, 18]\r\n\r\npreuredimo v\r\n\r\n    [4, 5, 2, 0, 10, 15, 15, 17, 18]\r\n\r\n(Mo\u017enih je ve\u010d razli\u010dnih re\u0161itev, pomembno je, da je element 10 pivot.)\r\n\r\nSestavi funkcijo `premeci(a)`, ki preuredi tabelo `a` tako, da bo `a[0]`\r\npostal pivot. Funkcija naj vrne indeks, na katerem je po preurejanju\r\npristal pivot.\r\n\r\nFunkcija naj deluje v \u010dasu $O(n)$, \u010de je $n$ dol\u017eina tabele `a`, kar dose\u017eemo\r\ntakole:\r\n\r\n1. Nastavimo `i=1` in `j=n-1`.\r\n2. Pove\u010dujemo `i` dokler `i < j` in `a[i] < a[0]`.\r\n3. Zmanj\u0161ujemo `j` dokler `i < j` in `a[0] < a[j]`.\r\n4. Zamenjamo `a[i]` in `a[j]`.\r\n5. Korake 2--4 ponavljamo, dokler je `i < j`.\r\n6. Postavimo `a[0]` na pravo mesto, ki je enako `i` ali `i-1` (premisli!)\r\n\r\nPrimer uporabe:\r\n\r\n    >>> a = [10, 4, 5, 15, 11, 2, 17, 0, 18]\r\n    >>> premeci(a)\r\n    4\r\n    >>> a\r\n    [4, 5, 2, 0, 10, 15, 15, 17, 18]\r\n\r\nFunkcija naj deluje pravilno za tabele z vsaj dvema elementoma.", 
      "challenge": "312False", 
      "solution": "def premeci(a):\r\n    i = 1\r\n    j = len(a) - 1\r\n    while i < j:\r\n        while i < j and a[i] < a[0]: i = i + 1\r\n        while i < j and a[0] < a[j]: j = j - 1\r\n        (a[i], a[j]) = (a[j], a[i])\r\n    if a[i] < a[0]:\r\n        (a[0], a[i]) = (a[i], a[0])\r\n        return i\r\n    else:\r\n        (a[0], a[i-1]) = (a[i-1], a[0])\r\n        return i - 1", 
      "problem": 37, 
      "validation": "a_in = [10, 4, 5, 15, 11, 2, 17, 0, 18]\r\na = a_in[:]\r\nCheck.equal(\"premeci(a)\", 4, env=locals(),\r\n            message=\"\u010ce je a = {0}, vrne\\n  {{0}} vrednost {{1}} namesto vrednosti {{2}}\".format(a_in))\r\nCheck.equal(\"je_pivot(a,4)\", True, env=locals(),\r\n            message=\"\u010ce je a = {0},\\n  po klicu premeci(a) element a[4] ni pivot\")\r\n\r\na_in = [18, 4, 5, 15, 11, 2, 17, 0, 10]\r\na = a_in[:]\r\nCheck.equal(\"premeci(a)\", 8, env=locals(),\r\n            message=\"\u010ce je a = {0}, vrne\\n  {{0}} vrednost {{1}} namesto vrednosti {{2}}\".format(a_in))\r\nCheck.equal(\"je_pivot(a,8)\", True, env=locals(),\r\n            message=\"\u010ce je a = {0},\\n  po klicu premeci(a) element a[8] ni pivot\")\r\n\r\na_in = [0, 4, 5, 15, 11, 2, 17, 18, 10]\r\na = a_in[:]\r\nCheck.equal(\"premeci(a)\", 0, env=locals(),\r\n            message=\"\u010ce je a = {0}, vrne\\n  {{0}} vrednost {{1}} namesto vrednosti {{2}}\".format(a_in))\r\nCheck.equal(\"je_pivot(a,0)\", True, env=locals(),\r\n            message=\"\u010ce je a = {0},\\n  po klicu premeci(a) element a[0] ni pivot\")\r\n\r\na_in = [(17 * i + 18) % 31 for i in range(31)]\r\na = a_in[:]\r\nk = a[0]\r\nCheck.equal(\"premeci(a)\", 18, env=locals(),\r\n            message=\"\u010ce je a = {0}, vrne\\n  {{0}} vrednost {{1}} namesto vrednosti {{2}}\".format(a_in))\r\nj = a.index(k)\r\nCheck.equal(\"je_pivot(a,{0})\".format(j), True, env=locals(),\r\n            message=\"\u010ce je a = {0},\\n  po klicu premeci(a) element a[{1}] ni pivot\".format(a_in,j))\r\n\r\na_in = [(171 * i + 312) % 1009 for i in range(1009)]\r\na = a_in[:]\r\nk = a[0]\r\nj = a.index(k)\r\nCheck.challenge(premeci(a))\r\nCheck.challenge(je_pivot(a,j))"
    }
  }, 
  {
    "pk": 63, 
    "model": "problem.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `geometrijsko(a, q, n)`, ki sprejme za\u010detni \u010dlen `a`,\nkoeficient `q` in dol\u017eino zaporedja `n`, ter vrne vektor\n`a, a q, a q^2, ..., a q^(n - 1)`.", 
      "challenge": "3 6 12 24 48 96 192 384 768 1536 3072 6144 12288 24576 49152 98304 196608 393216 786432 1572864 3145728 6291456 12582912 25165824 50331648 100663296 201326592 402653184 805306368 1610612736", 
      "solution": "geometrijsko <- function(a, q, n) {\n    return(a * q^(0 : (n - 1)))\n}", 
      "problem": 21, 
      "validation": "check$equal(geometrijsko(1, 2, 5), c(1, 2, 4, 8, 16))\ncheck$equal(geometrijsko(2, 3, 4), c(2, 6, 18, 54))\ncheck$challenge(paste(geometrijsko(3, 2, 30), collapse=\" \"))"
    }
  }, 
  {
    "pk": 66, 
    "model": "problem.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `sodi`, ki vrne vse komponente na sodih mestih.", 
      "challenge": "33 96 160 223 286 350 413 477 540 604 667 731 794 857 921 984 1048 1111 1175 1238", 
      "solution": "sodi <- function(v) {\n    v[seq(2, length(v), 2)]\n}", 
      "problem": 22, 
      "validation": "check$equal(sodi(c(1, 5, 2, 4, 1, 3, 10, 7)), c(5, 4, 3, 7))\ncheck$equal(sodi(c(1, 5, -2, -4, -1)), c(5, -4))\ncheck$challenge(paste(sodi(round(seq(1, 1238, length.out=40))), collapse=\" \"))"
    }
  }, 
  {
    "pk": 2, 
    "model": "problem.part", 
    "fields": {
      "_order": 1, 
      "description": "Ko nalogo oddate, lahko na Tomu svojo re\u0161itev primerjate z\r\nuradno re\u0161itvijo (\u010de je zlobni asistent ni skril).\r\nPoglejte, kaj je bila uradna re\u0161itev prvega dela, in jo vpi\u0161ite spodaj.", 
      "challenge": "42", 
      "solution": "42", 
      "problem": 1, 
      "validation": "if (attempts$solution[[check$current_part]] != 42) {\r\n    attempts$errors[[check$current_part]] <- \"\u0160tevilo ni enako tistemu iz uradne re\u0161itve.\"\r\n}\r\ncheck$challenge(eval(attempts$solution[[check$current_part]]))\r\n"
    }
  }, 
  {
    "pk": 69, 
    "model": "problem.part", 
    "fields": {
      "_order": 1, 
      "description": "V vektorju otoki vse povr\u0161ine nad 100 km^2 zaokro\u017eite na desetice,\nmanj\u0161e pa na cela \u0161tevila.", 
      "challenge": "29800 14240 44000 7690 41 480 60 730 220 190 65 110 54 210 9700 2180 34 78 78 230 100 85 130 36 110 590 41 93 75 39 790 110 150 110 24320 83 34 75 17600 41 39 470 36 67 49 34 31 210 0", 
      "solution": "otoki[otoki > 100] <- round(otoki[otoki > 100], -1)\notoki <- round(otoki) # ker so ve\u010dji \u017ee cela \u0161tevila, zaokro\u017eitev nima vpliva", 
      "problem": 23, 
      "validation": "check$equal(otoki['Java'], 130)\ncheck$equal(otoki['Britain'], 220)\ncheck$equal(otoki['Tasmania'], 67)\ncheck$challenge(paste(otoki, collapse=\" \"))"
    }
  }, 
  {
    "pk": 76, 
    "model": "problem.part", 
    "fields": {
      "_order": 1, 
      "description": "2. del", 
      "challenge": "", 
      "solution": "", 
      "problem": 28, 
      "validation": ""
    }
  }, 
  {
    "pk": 93, 
    "model": "problem.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `redka_po_vrsticah`, ki sprejme redko matriko `(d,m,n)` in vrne\nnjeno predstavitev `(e,m,n)` s slovarjem po vrsticah `e`.", 
      "challenge": "({0: {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9}, 1: {0: 1, 1: 2, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, 2: {0: 2, 1: 3, 2: 4, 3: 5, 4: 6, 5: 7, 6: 8, 7: 9, 8: 10, 9: 11}, 3: {0: 3, 1: 4, 2: 5, 3: 6, 4: 7, 5: 8, 6: 9, 7: 10, 8: 11, 9: 12}, 4: {0: 4, 1: 5, 2: 6, 3: 7, 4: 8, 5: 9, 6: 10, 7: 11, 8: 12, 9: 13}, 5: {0: 5, 1: 6, 2: 7, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 14}, 6: {0: 6, 1: 7, 2: 8, 3: 9, 4: 10, 5: 11, 6: 12, 7: 13, 8: 14, 9: 15}, 7: {0: 7, 1: 8, 2: 9, 3: 10, 4: 11, 5: 12, 6: 13, 7: 14, 8: 15, 9: 16}, 8: {0: 8, 1: 9, 2: 10, 3: 11, 4: 12, 5: 13, 6: 14, 7: 15, 8: 16, 9: 17}, 9: {0: 9, 1: 10, 2: 11, 3: 12, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17, 9: 18}}, 42, 23)", 
      "solution": "def redka_po_vrsticah(dmn):\n    (d,m,n) = dmn\n    e = {}\n    for ((i,j),x) in d.items():\n        if i not in e: e[i] = {}\n        e[i][j] = x\n    return (e,m,n)", 
      "problem": 39, 
      "validation": "Check.equal(\"\"\"redka_po_vrsticah(({(0,0) : 1, (0,4) : 2, (1,1) : 4, (1,4): 3, (3,5) : 5}, 4, 6))\"\"\",\n            ({ 0 : {0 : 1, 4 : 2}, 1 : {1 : 4, 4 : 3}, 3 : {5 : 5} }, 4, 6))\n\nCheck.equal(\"\"\"redka_po_vrsticah(({(500,501):42}, 1001, 1002))\"\"\", ({500:{501:42}}, 1001,1002))\n\nCheck.challenge(redka_po_vrsticah(({(i,j) : (i + j) for j in range(10) for i in range(10)}, 42, 23)))"
    }
  }, 
  {
    "pk": 80, 
    "model": "problem.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `hilbert(n)`, ki vrne Hilbertovo matriko dimenzije\r\n`n` \u00d7 `n`.", 
      "challenge": "1, 0.5, 0.3333, 0.25, 0.2, 0.1667, 0.1429, 0.125, 0.1111, 0.1, 0.0909, 0.0833, 0.0769, 0.0714, 0.0667, 0.0625, 0.0588, 0.0556, 0.0526, 0.05, 0.5, 0.3333, 0.25, 0.2, 0.1667, 0.1429, 0.125, 0.1111, 0.1, 0.0909, 0.0833, 0.0769, 0.0714, 0.0667, 0.0625, 0.0588, 0.0556, 0.0526, 0.05, 0.0476, 0.3333, 0.25, 0.2, 0.1667, 0.1429, 0.125, 0.1111, 0.1, 0.0909, 0.0833, 0.0769, 0.0714, 0.0667, 0.0625, 0.0588, 0.0556, 0.0526, 0.05, 0.0476, 0.0455, 0.25, 0.2, 0.1667, 0.1429, 0.125, 0.1111, 0.1, 0.0909, 0.0833, 0.0769, 0.0714, 0.0667, 0.0625, 0.0588, 0.0556, 0.0526, 0.05, 0.0476, 0.0455, 0.0435, 0.2, 0.1667, 0.1429, 0.125, 0.1111, 0.1, 0.0909, 0.0833, 0.0769, 0.0714, 0.0667, 0.0625, 0.0588, 0.0556, 0.0526, 0.05, 0.0476, 0.0455, 0.0435, 0.0417, 0.1667, 0.1429, 0.125, 0.1111, 0.1, 0.0909, 0.0833, 0.0769, 0.0714, 0.0667, 0.0625, 0.0588, 0.0556, 0.0526, 0.05, 0.0476, 0.0455, 0.0435, 0.0417, 0.04, 0.1429, 0.125, 0.1111, 0.1, 0.0909, 0.0833, 0.0769, 0.0714, 0.0667, 0.0625, 0.0588, 0.0556, 0.0526, 0.05, 0.0476, 0.0455, 0.0435, 0.0417, 0.04, 0.0385, 0.125, 0.1111, 0.1, 0.0909, 0.0833, 0.0769, 0.0714, 0.0667, 0.0625, 0.0588, 0.0556, 0.0526, 0.05, 0.0476, 0.0455, 0.0435, 0.0417, 0.04, 0.0385, 0.037, 0.1111, 0.1, 0.0909, 0.0833, 0.0769, 0.0714, 0.0667, 0.0625, 0.0588, 0.0556, 0.0526, 0.05, 0.0476, 0.0455, 0.0435, 0.0417, 0.04, 0.0385, 0.037, 0.0357, 0.1, 0.0909, 0.0833, 0.0769, 0.0714, 0.0667, 0.0625, 0.0588, 0.0556, 0.0526, 0.05, 0.0476, 0.0455, 0.0435, 0.0417, 0.04, 0.0385, 0.037, 0.0357, 0.0345, 0.0909, 0.0833, 0.0769, 0.0714, 0.0667, 0.0625, 0.0588, 0.0556, 0.0526, 0.05, 0.0476, 0.0455, 0.0435, 0.0417, 0.04, 0.0385, 0.037, 0.0357, 0.0345, 0.0333, 0.0833, 0.0769, 0.0714, 0.0667, 0.0625, 0.0588, 0.0556, 0.0526, 0.05, 0.0476, 0.0455, 0.0435, 0.0417, 0.04, 0.0385, 0.037, 0.0357, 0.0345, 0.0333, 0.0323, 0.0769, 0.0714, 0.0667, 0.0625, 0.0588, 0.0556, 0.0526, 0.05, 0.0476, 0.0455, 0.0435, 0.0417, 0.04, 0.0385, 0.037, 0.0357, 0.0345, 0.0333, 0.0323, 0.0312, 0.0714, 0.0667, 0.0625, 0.0588, 0.0556, 0.0526, 0.05, 0.0476, 0.0455, 0.0435, 0.0417, 0.04, 0.0385, 0.037, 0.0357, 0.0345, 0.0333, 0.0323, 0.0312, 0.0303, 0.0667, 0.0625, 0.0588, 0.0556, 0.0526, 0.05, 0.0476, 0.0455, 0.0435, 0.0417, 0.04, 0.0385, 0.037, 0.0357, 0.0345, 0.0333, 0.0323, 0.0312, 0.0303, 0.0294, 0.0625, 0.0588, 0.0556, 0.0526, 0.05, 0.0476, 0.0455, 0.0435, 0.0417, 0.04, 0.0385, 0.037, 0.0357, 0.0345, 0.0333, 0.0323, 0.0312, 0.0303, 0.0294, 0.0286, 0.0588, 0.0556, 0.0526, 0.05, 0.0476, 0.0455, 0.0435, 0.0417, 0.04, 0.0385, 0.037, 0.0357, 0.0345, 0.0333, 0.0323, 0.0312, 0.0303, 0.0294, 0.0286, 0.0278, 0.0556, 0.0526, 0.05, 0.0476, 0.0455, 0.0435, 0.0417, 0.04, 0.0385, 0.037, 0.0357, 0.0345, 0.0333, 0.0323, 0.0312, 0.0303, 0.0294, 0.0286, 0.0278, 0.027, 0.0526, 0.05, 0.0476, 0.0455, 0.0435, 0.0417, 0.04, 0.0385, 0.037, 0.0357, 0.0345, 0.0333, 0.0323, 0.0312, 0.0303, 0.0294, 0.0286, 0.0278, 0.027, 0.0263, 0.05, 0.0476, 0.0455, 0.0435, 0.0417, 0.04, 0.0385, 0.037, 0.0357, 0.0345, 0.0333, 0.0323, 0.0312, 0.0303, 0.0294, 0.0286, 0.0278, 0.027, 0.0263, 0.0256", 
      "solution": "hilbert <- function(n) {\r\n    outer(1 : n, 1 : n, function(i, j) 1 / (i + j - 1))\r\n}", 
      "problem": 33, 
      "validation": "check$equal(dim(hilbert(123)), c(123, 123))\r\ncheck$equal(round(hilbert(2), 5), round(matrix(c(1, 1/2, 1/2, 1/3), 2), 5))\r\ncheck$equal(round(hilbert(3), 5), round(matrix(c(1, 1/2, 1/3, 1/2, 1/3, 1/4, 1/3, 1/4, 1/5), 3), 5))\r\ncheck$challenge(toString(round(hilbert(20), 4)))"
    }
  }, 
  {
    "pk": 18, 
    "model": "problem.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `gnile(sez)`, ki za parameter dobi seznam \u0161tevil,\nki predstavljajo gnile limone, in vrne niz, ki lepo pove, katere so\ngnile.\n\n    >>> gnile(([1, 3, 4, 5, 6, 7, 10])\n    Limone 1, 3, 4, 5, 6, 7 in 10 so gnile.\n    >>> gnile([1, 3, 5])\n    \"Limone 1, 3 in 5 so gnile.\"\n    >>> gnile([5])\n    \"Limona 5 je gnila.\"\n    >>> gnile([])\n    \"Nobena limona ni gnila.\"", 
      "challenge": "Nobena limona ni gnila.Limona 1 je gnila.Limoni 1 in 2 sta gnili.Limone 1, 2 in 3 so gnile.Limone 1, 2, 3 in 4 so gnile.Limone 1, 2, 3, 4 in 5 so gnile.Limone 1, 2, 3, 4, 5 in 6 so gnile.Limone 1, 2, 3, 4, 5, 6 in 7 so gnile.Limone 1, 2, 3, 4, 5, 6, 7 in 8 so gnile.", 
      "solution": "def gnile(sez):\n    n = len(sez)\n    if len(sez) == 0:\n        return \"Nobena limona ni gnila.\"\n    elif len(sez) == 1:\n        return \"Limona {0} je gnila.\".format(sez[0])\n    elif len(sez) == 2:\n        return \"Limoni {0} in {1} sta gnili.\".format(sez[0], sez[1])\n    else:\n        prve = \", \".join(str(i) for i in sez[:-1])\n        return \"Limone {0} in {1} so gnile.\".format(prve, sez[-1])", 
      "problem": 10, 
      "validation": "Check.equal('gnile([1, 3, 4, 5, 6, 7, 10])', 'Limone 1, 3, 4, 5, 6, 7 in 10 so gnile.')\nCheck.equal('gnile([1, 3, 5])', 'Limone 1, 3 in 5 so gnile.')\nCheck.equal('gnile([1, 5])', 'Limoni 1 in 5 sta gnili.')\nCheck.equal('gnile([5])', 'Limona 5 je gnila.')\nCheck.equal('gnile([])', 'Nobena limona ni gnila.')\nfor i in range(1, 10):\n    Check.challenge(gnile(range(1, i)))"
    }
  }, 
  {
    "pk": 26, 
    "model": "problem.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `fibonacci(n)`, ki izra\u010duna `n`-to Fibonaccijevo\n\u0161tevilo.", 
      "challenge": "11235813213455891442333776109871597258441816765", 
      "solution": "fibonacci <- function(n) {\n  a <- 0\n  b <- 1\n  i <- 1\n  while(i <= n) {\n    vsota <- a + b\n    a <- b\n    b <- vsota\n    i <- i + 1\n  }\n  return(a)\n}", 
      "problem": 17, 
      "validation": "check$equal(fibonacci(1), 1)\ncheck$equal(fibonacci(2), 1)\ncheck$equal(fibonacci(4), 3)\ncheck$equal(fibonacci(5), 5)\ncheck$equal(fibonacci(6), 8)\ncheck$equal(fibonacci(8), 21)\ncheck$equal(fibonacci(14), 377)\nfor (x in (1 : 20)) {\n  check$challenge(fibonacci(x))\n}"
    }
  }, 
  {
    "pk": 21, 
    "model": "problem.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `celziji(fahrenheiti)`, ki pretvarja iz\nFahrenheitov v stopinje Celzija.", 
      "challenge": "106.111111", 
      "solution": "celziji <- function(fahrenheiti) {\n  (fahrenheiti - 32) * 5 / 9\n}", 
      "problem": 16, 
      "validation": "check$equal(celziji(455), 235)\ncheck$equal(celziji(914), 490)\ncheck$equal(celziji(-40), -40)\ncheck$challenge(round(celziji(223), 6))"
    }
  }, 
  {
    "pk": 6, 
    "model": "problem.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `polarnaRazdalja(r1, fi1, r2, fi2)`, ki vrne razdaljo med\r\nto\u010dkama (`r1`, `fi1`) in (`r2`, `fi2`)$ v ravnini, pri \u010demer so\r\nkoordinate v polarnem zapisu, koti pa so izra\u017eeni v stopinjah.\r\n\r\n    >>> polarnaRazdalja(1, 30, 4, 90)\r\n    3.60555127546", 
      "challenge": "1.001218", 
      "solution": "import math\r\ndef polarnaRazdalja(r1, fi1, r2, fi2):\r\n    fi1 = math.radians(fi1)\r\n    fi2 = math.radians(fi2)\r\n    return ravninskaRazdalja(r1 * math.cos(fi1), r1 * math.sin(fi1),\r\n                             r2 * math.cos(fi2), r2 * math.sin(fi2))", 
      "problem": 4, 
      "validation": "Check.num_equal('polarnaRazdalja(1, 30, 4, 90)', 3.60555127546, 6)\r\nCheck.num_equal('polarnaRazdalja(1, 0, 1, 90)', 1.414213562373095, 6)\r\nCheck.challenge(round(polarnaRazdalja(1, 4, 2, 6), 6))"
    }
  }, 
  {
    "pk": 95, 
    "model": "problem.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavi funkcijo `vsota((d,m,n), (e,u,v))`, ki vsoto danih dveh redkih matrik.", 
      "challenge": "", 
      "solution": "def vsota(dmn, euv):\n    (d,m,n) = dmn\n    (e,u,v) = euv\n    assert (m == u and n == v)\n    f = {}\n    for (ij,x) in d: f[ij] = f.get(ij,0) + x\n    for (ij,y) in e: f[ij] = f.get(ij,0) + y\n    return (f,m,n)", 
      "problem": 40, 
      "validation": "## MISSING TESTS!!! ###"
    }
  }, 
  {
    "pk": 30, 
    "model": "problem.part", 
    "fields": {
      "_order": 1, 
      "description": "Pravimo, da je beseda skoraj palindrom, \u010de ji je treba zbrisati natanko\neno \u010drko, da bi postala palindrom. Primer je beseda 'kolo', ki ji\nmoramo zbrisati \u010drko 'k', pa postane palindrom 'olo'.\n\nSestavite funkcijo `skorajPalindrom(niz)`, ki preveri, ali je `niz`\nskoraj palindrom. Vse znake (tudi presledke) v besedi obravnavamo enako.", 
      "challenge": "TrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrueTrue", 
      "solution": "def skorajPalindrom(niz):\n    # za vsak i poskusimo izpustiti \u010drko na i-tem mestu\n    for i in range(len(niz)):\n        # \u010de smo dobili palindrom, kon\u010damo\n        if palindrom(niz[:i] + niz[i + 1:]):\n            return True\n    # \u010de je zanka pri\u0161la do konca, palindroma nismo na\u0161li\n    return False", 
      "problem": 18, 
      "validation": "Check.equal('skorajPalindrom(\"pericare\u017eerackirep\")', True)\nCheck.equal('skorajPalindrom(\"neragdodaren\")', True)\nCheck.equal('skorajPalindrom(\"osemtermeso\")', False)\nfor i in range(100):\n    Check.challenge(skorajPalindrom(str(i)))"
    }
  }, 
  {
    "pk": 9, 
    "model": "problem.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `nepopolnost(n)`, ki vrne absolutno razliko med\r\n\u0161tevilom `n` in vsoto vseh njegovih pravih deliteljev.", 
      "challenge": "12", 
      "solution": "def nepopolnost(n):\r\n    return abs(n - sum(praviDelitelji(n)))", 
      "problem": 8, 
      "validation": "Check.equal('nepopolnost(19)', 18)\r\nCheck.equal('nepopolnost(28)', 0)\r\nCheck.equal('nepopolnost(42)', 12)\r\nCheck.challenge(nepopolnost(30))"
    }
  }, 
  {
    "pk": 88, 
    "model": "problem.part", 
    "fields": {
      "_order": 1, 
      "description": "V spremenljivko `zenska.posadka` shranite podrazporeditev s podatki\no vseh \u017eenskah v posadki.", 
      "challenge": "0, 3, 0, 20", 
      "solution": "zenska.posadka <- Titanic[\"Crew\", \"Female\", , ]", 
      "problem": 34, 
      "validation": "check$equal(zenska.posadka[, \"Yes\"], c(0, 20))\ncheck$equal(zenska.posadka[, \"No\"], c(0, 3))\ncheck$challenge(toString(zenska.posadka))"
    }
  }, 
  {
    "pk": 13, 
    "model": "problem.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `ljubljeni(d)`, ki sprejme slovar zaljubljenih\nin vrne _mno\u017eico_ tistih, ki so ljubljeni.", 
      "challenge": "{'Bine', 'Davorka', 'Cene'}", 
      "solution": "def ljubljeni(d):\n    return {ljubljen for oseba in d for ljubljen in d[oseba]}", 
      "problem": 9, 
      "validation": "Check.equal(\"\"\"ljubljeni({'Ana' : {'Bine','Cene'},\n                          'Bine' : set(),\n                          'Cene' : {'Bine'},\n                          'Davorka' : {'Davorka'},\n                          'Eva' : {'Bine'}})\"\"\",\n            {'Bine', 'Davorka', 'Cene'})\nCheck.equal('ljubljeni({})', set())\nCheck.challenge(ljubljeni({'Ana' : {'Bine','Cene'},\n                           'Bine' : set(),\n                           'Cene' : {'Bine'},\n                           'Davorka' : {'Davorka'},\n                           'Eva' : {'Bine'}}))"
    }
  }, 
  {
    "pk": 35, 
    "model": "problem.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `slike(permutacija, x, n)`, vrne pa seznam slik\r\n\u0161tevila `x`, \u010de uporabimo permutacijo `n`-krat.\r\n\r\n    >>> slike([3, 4, 2, 1], 1, 3)\r\n    [3, 2, 4]", 
      "challenge": "[97, 3, 97, 3, 97][96, 4, 96, 4, 96, 4][95, 5][94, 6, 94][93, 7, 93, 7][92, 8, 92, 8, 92][91, 9, 91, 9, 91, 9][90, 10][89, 11, 89][88, 12, 88, 12][87, 13, 87, 13, 87][86, 14, 86, 14, 86, 14][85, 15][84, 16, 84][83, 17, 83, 17][82, 18, 82, 18, 82][81, 19, 81, 19, 81, 19][80, 20][79, 21, 79][78, 22, 78, 22][77, 23, 77, 23, 77][76, 24, 76, 24, 76, 24][75, 25][74, 26, 74][73, 27, 73, 27][72, 28, 72, 28, 72][71, 29, 71, 29, 71, 29][70, 30][69, 31, 69][68, 32, 68, 32][67, 33, 67, 33, 67][66, 34, 66, 34, 66, 34][65, 35][64, 36, 64][63, 37, 63, 37][62, 38, 62, 38, 62][61, 39, 61, 39, 61, 39][60, 40][59, 41, 59][58, 42, 58, 42][57, 43, 57, 43, 57][56, 44, 56, 44, 56, 44][55, 45][54, 46, 54][53, 47, 53, 47][52, 48, 52, 48, 52][51, 49, 51, 49, 51, 49][50, 50][49, 51, 49][48, 52, 48, 52][47, 53, 47, 53, 47][46, 54, 46, 54, 46, 54][45, 55][44, 56, 44][43, 57, 43, 57][42, 58, 42, 58, 42][41, 59, 41, 59, 41, 59]", 
      "solution": "def slike(permutacija, x, n):\r\n    if n == 0:\r\n        return []\r\n    else:\r\n        y = slika(permutacija, x)\r\n        return [y] + slike(permutacija, y, n - 1)", 
      "problem": 19, 
      "validation": "Check.equal('slike([3, 4, 2, 1], 1, 3)', [3, 2, 4])\r\nCheck.equal('slike([3, 4, 2, 1], 2, 6)', [4, 1, 3, 2, 4, 1])\r\nCheck.equal('slike([3, 4, 2, 1], 3, 1)', [2])\r\nCheck.equal('slike([3, 4, 2, 1], 4, 0)', [])\r\nfor i in range(3, 60):\r\n    Check.challenge(slike(_perm, i, i % 5 + 2))"
    }
  }, 
  {
    "pk": 40, 
    "model": "problem.part", 
    "fields": {
      "_order": 1, 
      "description": "Sestavite funkcijo `transponiraj(mat)`, ki transponira dano matriko\r\n`mat`.", 
      "challenge": "[[0, 3, 6, 9, 12, 15, 18, 21], [1, 4, 7, 10, 13, 16, 19, 22], [4, 7, 10, 13, 16, 19, 22, 25], [9, 12, 15, 18, 21, 24, 27, 30], [16, 19, 22, 25, 28, 31, 34, 37], [25, 28, 31, 34, 37, 40, 43, 46], [36, 39, 42, 45, 48, 51, 54, 57], [49, 52, 55, 58, 61, 64, 67, 70]]", 
      "solution": "def transponiraj(mat):\r\n    m, n = len(mat), len(mat[0])\r\n    return [[mat[i][j] for i in range(m)] for j in range(n)]", 
      "problem": 20, 
      "validation": "Check.equal('transponiraj([[1, 3], [2, 4]])', [[1, 2], [3, 4]])\r\nCheck.equal('transponiraj([[1], [5]])', [[1, 5]])\r\nCheck.equal('transponiraj([[1, 3, 6], [2, 4, 8]])', [[1, 2], [3, 4], [6, 8]])\r\nCheck.challenge(transponiraj(_mat))"
    }
  }, 
  {
    "pk": 14, 
    "model": "problem.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `pari(d)`, ki sprejme slovar zaljubljenih\nin vrne _mno\u017eico_ vseh parov, ki so sre\u010dno ljubljeni. Vsak\npar naj se pojavi samo enkrat in sicer tako, da je sta zaljubljenca\nna\u0161teta po abecedi. Na primer, \u010de sta Ana in Bine zaljubljena,\ndodamo par `('Ana','Bine')`.", 
      "challenge": "{('Bine', 'Eva'), ('Bine', 'Davorka')}", 
      "solution": "def pari(d):\n    return {tuple(sorted((x, y))) for x in d for y in d[x] if x in d[y]}", 
      "problem": 9, 
      "validation": "Check.equal(\"\"\"pari({'Ana' : {'Bine','Cene'},\n                     'Bine' : set(),\n                     'Cene' : {'Bine', 'Ana'},\n                     'Davorka' : {'Davorka'},\n                     'Eva' : {'Bine'}})\\n\"\"\",\n            {('Ana', 'Cene'), ('Davorka', 'Davorka')})\nCheck.equal(\"pari({})\", set())\nCheck.challenge(pari({'Ana' : {'Bine'},\n                      'Bine' : {'Eva', 'Davorka'},\n                      'Cene' : {'Bine', 'Ana'},\n                      'Davorka' : {'Bine'},\n                      'Eva' : {'Bine'}}))"
    }
  }, 
  {
    "pk": 10, 
    "model": "problem.part", 
    "fields": {
      "_order": 2, 
      "description": "\u0160tevilo je *simetri\u010dno nepopolno*, kadar je njegova nepopolnost enaka\r\nnepopolnosti \u0161tevila, obrnjenega na glavo.\r\nNa primer, vsa palindromna \u0161tevila so simetri\u010dno nepopolna, prav tako\r\npa je nepopolno \u0161tevilo 24, saj je njegova nepopolnost enaka\r\n$|24 - (1 + 2 + 3 + 4 + 6 + 8 + 12)| = 12$, kar je prav tako\r\nnepopolnost \u0161tevila 42.\r\n\r\nSestavite funkcijo `simetricnoNepopolna(n)`, ki vrne seznam vseh\r\nsimetri\u010dno nepopolnih \u0161tevil med 1 in `n`.", 
      "challenge": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33]", 
      "solution": "def simetricnoNepopolna(n):\r\n    def simetricnoNepopolno(i):\r\n        return nepopolnost(i) == nepopolnost(int(str(i)[::-1]))\r\n    return [i for i in range(1, n + 1) if simetricnoNepopolno(i)]", 
      "problem": 8, 
      "validation": "Check.equal('simetricnoNepopolna(19)', [1, 2, 3, 4, 5, 6, 7, 8, 9, 11])\r\nCheck.equal('simetricnoNepopolna(28)', [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24])\r\nCheck.equal('simetricnoNepopolna(42)', [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 24, 33, 42])\r\nCheck.challenge(simetricnoNepopolna(40))\r\n"
    }
  }, 
  {
    "pk": 31, 
    "model": "problem.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `vsebuje(niz1, niz2)`, ki za parametra dobi dva niza\nter vrne `True`, \u010de in samo \u010de je mogo\u010de prvi niz dobiti tako, da v\ndrugi niz na poljubnih mestih vstavljamo dodatne znake. (povedano\ndruga\u010de, \u010de prvi niz vsebuje vse znake iz drugega niza v ustreznem\nvrstnem redu).\n\nIz besede 'ROLA' lahko na primer z vrivanjem znakov dobimo besedo\n'pRikOLicA'. Med velikimi in malimi tiskanimi \u010drkami strogo lo\u010dujemo.", 
      "challenge": "TrueFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseTrueFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseTrueFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseTrueFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseTrueFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseTrueFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseTrueFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseTrueFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseTrueFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseTrueFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseTrueTrueFalseFalseFalseFalseFalseFalseFalseFalseTrueFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseTrueFalseFalseFalseFalseFalseFalseFalseFalseFalseTrueFalseFalseFalseFalseFalseFalseFalseFalseFalseTrueTrueFalseFalseFalseFalseFalseFalseFalseFalseFalseTrueFalseFalseFalseFalseFalseFalseFalseFalseTrueFalseTrueFalseFalseFalseFalseFalseFalseFalseFalseFalseTrueFalseFalseFalseFalseFalseFalseFalseTrueFalseFalseTrueFalseFalseFalseFalseFalseFalseFalseFalseFalseTrueFalseFalseFalseFalseFalseFalseTrueFalseFalseFalseTrueFalseFalseFalseFalseFalseFalseFalseFalseFalseTrueFalseFalseFalseFalseFalseTrueFalseFalseFalseFalseTrueFalseFalseFalseFalseFalseFalseFalseFalseFalseTrueFalseFalseFalseFalseTrueFalseFalseFalseFalseFalseTrueFalseFalseFalseFalseFalseFalseFalseFalseFalseTrueFalseFalseFalseTrueFalseFalseFalseFalseFalseFalseTrueFalseFalseFalseFalseFalseFalseFalseFalseFalseTrueFalseFalseTrueFalseFalseFalseFalseFalseFalseFalseTrueFalseFalseFalseFalseFalseFalseFalseFalseFalseTrueTrueFalseTrueFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseTrueTrueFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseTrueFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseTrueTrueFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseTrueFalseTrueFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseTrueFalseFalseTrueFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseTrueFalseFalseFalseTrueFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseTrueFalseFalseFalseFalseTrueFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseTrueFalseFalseFalseFalseFalseTrueFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseTrueFalseFalseFalseFalseFalseFalseTrueFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseTrueFalseFalseTrueFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseTrueFalseTrueFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseTrueTrueFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseTrueFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseTrueTrueFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseTrueFalseTrueFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseTrueFalseFalseTrueFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseTrueFalseFalseFalseTrueFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseTrueFalseFalseFalseFalseTrueFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseTrueFalseFalseFalseFalseFalseTrueFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseTrueFalseFalseFalseTrueFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseTrueFalseFalseTrueFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseTrueFalseTrueFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseTrueTrueFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseTrueFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseTrueTrueFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseTrueFalseTrueFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseTrueFalseFalseTrueFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseTrueFalseFalseFalseTrueFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseFalseTrueFalseFalseFalseFalseTrueFalseFalseFalseFalseFalseFalseFalseFalseFalseFalse", 
      "solution": "def vsebuje(niz1, niz2):\n    # v spremenljivki m hranimo indeks znaka v malem nizu, ki ga i\u0161\u010demo\n    m = 0\n    for z in niz1:\n        # \u010de smo na\u0161li znak na indeksu m, i\u0161\u010demo naslednjega\n        if niz2[m] == z: m += 1\n        # \u010de smo na\u0161li vse znake v malem nizu, kon\u010damo\n        if m == len(niz2): return True\n    # \u010de se zanka kon\u010da, vseh znakov nismo na\u0161li\n    return False", 
      "problem": 18, 
      "validation": "Check.equal(\"vsebuje('milnica drazi vaso kozo', 'mladi voz')\", True)\nCheck.equal(\"vsebuje('klobasa', 'klasa')\", True)\nCheck.equal(\"vsebuje('klobasa','salo')\", False)\nfor i in range(50):\n    for j in range(20):\n        Check.challenge(vsebuje(str(i), str(j)))"
    }
  }, 
  {
    "pk": 22, 
    "model": "problem.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `zaokrozi(stevilo)`, ki dano \u0161tevilo zaokro\u017ei na\npolovico.\n\n_Namig:_ uporabite funkcijo `round` in manj\u0161i trik.", 
      "challenge": "0000.50.50.50.50.5111111.51.51.51.51.5222222.52.52.52.52.5333333.53.53.53.53.5444444.54.54.54.54.5555", 
      "solution": "zaokrozi <- function(x) {\n  round(2 * x) / 2\n}", 
      "problem": 16, 
      "validation": "check$equal(zaokrozi(13.3), 13.5)\ncheck$equal(zaokrozi(13.6), 13.5)\ncheck$equal(zaokrozi(13.8), 14)\ncheck$equal(zaokrozi(-13.8), -14)\ncheck$equal(zaokrozi(-13.6), -13.5)\nfor (x in seq(0, 5, 0.1)) {\n    check$challenge(zaokrozi(x))\n}"
    }
  }, 
  {
    "pk": 27, 
    "model": "problem.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `collatz(n)`, ki izra\u010duna dol\u017eino Collatzovega\nzaporedja, ki se za\u010dne s \u0161tevilom `n`.", 
      "challenge": "0172581631961499171741220207", 
      "solution": "collatz <- function(n) {\n  dolzina <- 0\n  while(n != 1) {\n    if(n %% 2 == 0) {\n      n <- n / 2\n    } else {\n      n <- 3 * n + 1\n    }\n    dolzina <- dolzina + 1\n  }\n  return(dolzina)\n}", 
      "problem": 17, 
      "validation": "check$equal(collatz(5), 5)\ncheck$equal(collatz(10), 6)\ncheck$equal(collatz(27), 111)\nfor (x in (1 : 20)) {\n  check$challenge(collatz(x))\n}"
    }
  }, 
  {
    "pk": 36, 
    "model": "problem.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `cikel(permutacija, x)`, ki vrne celoten cikel, ki\r\nse za\u010dne s \u0161tevilom `x`.\r\n\r\n     >>> cikel([3, 2, 1], 1)\r\n     [1, 3]\r\n     >>> cikel([3, 2, 1], 2)\r\n     [2]", 
      "challenge": "[3, 97][4, 96][5, 95][6, 94][7, 93][8, 92][9, 91][10, 90][11, 89][12, 88][13, 87][14, 86][15, 85][16, 84][17, 83][18, 82][19, 81][20, 80][21, 79][22, 78][23, 77][24, 76][25, 75][26, 74][27, 73][28, 72][29, 71][30, 70][31, 69][32, 68][33, 67][34, 66][35, 65][36, 64][37, 63][38, 62][39, 61][40, 60][41, 59][42, 58][43, 57][44, 56][45, 55][46, 54][47, 53][48, 52][49, 51][50][51, 49][52, 48][53, 47][54, 46][55, 45][56, 44][57, 43][58, 42][59, 41]", 
      "solution": "def cikel(permutacija, x):\r\n    cikel = [x]\r\n    y = slika(permutacija, x)\r\n    while y != x:\r\n        cikel.append(y)\r\n        y = slika(permutacija, y)\r\n    return cikel", 
      "problem": 19, 
      "validation": "Check.equal('cikel([3, 4, 2, 1], 1)', [1, 3, 2, 4])\r\nCheck.equal('cikel([3, 2, 1], 1)', [1, 3])\r\nCheck.equal('cikel([3, 2, 1], 2)', [2])\r\nCheck.equal('cikel([3, 2, 1], 3)', [3, 1])\r\nfor i in range(3, 60):\r\n    Check.challenge(cikel(_perm, i))"
    }
  }, 
  {
    "pk": 70, 
    "model": "problem.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `obrestuj(stanja)`, ki sprejme vektor stanj na\nposameznih ra\u010dunih in vrne vektor stanj po obra\u010dunanih obrestih.\nNa pozitivna stanja obra\u010dunajte 5%, na negativna pa 10% obresti.", 
      "challenge": "-55 -53.9 -52.8 -51.7 -50.6 -49.5 -48.4 -47.3 -46.2 -45.1 -44 -42.9 -41.8 -40.7 -39.6 -38.5 -37.4 -36.3 -35.2 -34.1 -33 -31.9 -30.8 -29.7 -28.6 -27.5 -26.4 -25.3 -24.2 -23.1 -22 -20.9 -19.8 -18.7 -17.6 -16.5 -15.4 -14.3 -13.2 -12.1 -11 -9.9 -8.8 -7.7 -6.6 -5.5 -4.4 -3.3 -2.2 -1.1 0 1.05 2.1 3.15 4.2 5.25 6.3 7.35 8.4 9.45 10.5 11.55 12.6 13.65 14.7 15.75 16.8 17.85 18.9 19.95 21 22.05 23.1 24.15 25.2 26.25 27.3 28.35 29.4 30.45 31.5 32.55 33.6 34.65 35.7 36.75 37.8 38.85 39.9 40.95 42 43.05 44.1 45.15 46.2 47.25 48.3 49.35 50.4 51.45 52.5 53.55", 
      "solution": "obrestuj <- function(stanja) {\n  stanja[stanja > 0] <- stanja[stanja > 0] * 1.05\n  stanja[stanja < 0] <- stanja[stanja < 0] * 1.10\n  return(stanja)\n}", 
      "problem": 23, 
      "validation": "check$equal(obrestuj(c(200, -500, 10, 70)), c(210, -550, 10.5, 73.5))\ncheck$equal(obrestuj(c(200, -50, 10, 700)), c(210, -55, 10.5, 735))\ncheck$challenge(paste(obrestuj(-50 : 51), collapse=\" \"))"
    }
  }, 
  {
    "pk": 7, 
    "model": "problem.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `vektorskaRazdalja(x1, x2)`, ki vrne razdaljo med\r\nto\u010dkama `x1` in `x2`, podanima s seznamom koordinat.\r\n\r\n    >>> vektorskaRazdalja([0, 0, 1], [2, 1, 3])\r\n    3", 
      "challenge": "10.954451", 
      "solution": "def vektorskaRazdalja(x1, x2):\r\n    return (sum((k1 - k2) ** 2 for (k1, k2) in zip(x1, x2))) ** (1 / 2)", 
      "problem": 4, 
      "validation": "Check.num_equal('vektorskaRazdalja([0, 0, 1], [2, 1, 3])', 3, 6)\r\nCheck.num_equal('vektorskaRazdalja([0], [3])', 3, 6)\r\nCheck.num_equal('vektorskaRazdalja([1, 2], [3, 4])', 2.82842712475, 6)\r\nCheck.challenge(round(vektorskaRazdalja([1, 2, 3, 4, 5], [9, 8, 7, 6, 5]), 6))"
    }
  }, 
  {
    "pk": 41, 
    "model": "problem.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `uporabi(mat, v)`, ki matriko `mat` uporabi na\r\nvektorju `v`.", 
      "challenge": "[1456, 1756, 2056, 2356, 2656, 2956, 3256, 3556]", 
      "solution": "def uporabi(mat, v):\r\n    m, n = len(mat), len(mat[0])\r\n    return [sum(mat[i][j] * v[j] for j in range(n)) for i in range(m)]", 
      "problem": 20, 
      "validation": "Check.equal('uporabi([[1, 3], [2, 4]], [5, 6])', [23, 34])\r\nCheck.equal('uporabi([[1], [5]], [5])', [5, 25])\r\nCheck.equal('uporabi([[1, 3, 6], [2, 4, 8]], [0, 1, 0])', [3, 4])\r\nCheck.challenge(uporabi(_mat, [16 - i for i in range(10)]))"
    }
  }, 
  {
    "pk": 81, 
    "model": "problem.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `pascal(n)`, ki vrne simetri\u010dno Pascalovo matriko\r\ndimenzije `n` \u00d7 `n`.", 
      "challenge": "1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 66, 78, 91, 105, 120, 136, 153, 171, 190, 210, 1, 4, 10, 20, 35, 56, 84, 120, 165, 220, 286, 364, 455, 560, 680, 816, 969, 1140, 1330, 1540, 1, 5, 15, 35, 70, 126, 210, 330, 495, 715, 1001, 1365, 1820, 2380, 3060, 3876, 4845, 5985, 7315, 8855, 1, 6, 21, 56, 126, 252, 462, 792, 1287, 2002, 3003, 4368, 6188, 8568, 11628, 15504, 20349, 26334, 33649, 42504, 1, 7, 28, 84, 210, 462, 924, 1716, 3003, 5005, 8008, 12376, 18564, 27132, 38760, 54264, 74613, 100947, 134596, 177100, 1, 8, 36, 120, 330, 792, 1716, 3432, 6435, 11440, 19448, 31824, 50388, 77520, 116280, 170544, 245157, 346104, 480700, 657800, 1, 9, 45, 165, 495, 1287, 3003, 6435, 12870, 24310, 43758, 75582, 125970, 203490, 319770, 490314, 735471, 1081575, 1562275, 2220075, 1, 10, 55, 220, 715, 2002, 5005, 11440, 24310, 48620, 92378, 167960, 293930, 497420, 817190, 1307504, 2042975, 3124550, 4686825, 6906900, 1, 11, 66, 286, 1001, 3003, 8008, 19448, 43758, 92378, 184756, 352716, 646646, 1144066, 1961256, 3268760, 5311735, 8436285, 13123110, 20030010, 1, 12, 78, 364, 1365, 4368, 12376, 31824, 75582, 167960, 352716, 705432, 1352078, 2496144, 4457400, 7726160, 13037895, 21474180, 34597290, 54627300, 1, 13, 91, 455, 1820, 6188, 18564, 50388, 125970, 293930, 646646, 1352078, 2704156, 5200300, 9657700, 17383860, 30421755, 51895935, 86493225, 141120525, 1, 14, 105, 560, 2380, 8568, 27132, 77520, 203490, 497420, 1144066, 2496144, 5200300, 10400600, 20058300, 37442160, 67863915, 119759850, 206253075, 347373600, 1, 15, 120, 680, 3060, 11628, 38760, 116280, 319770, 817190, 1961256, 4457400, 9657700, 20058300, 40116600, 77558760, 145422675, 265182525, 471435600, 818809200, 1, 16, 136, 816, 3876, 15504, 54264, 170544, 490314, 1307504, 3268760, 7726160, 17383860, 37442160, 77558760, 155117520, 300540195, 565722720, 1037158320, 1855967520, 1, 17, 153, 969, 4845, 20349, 74613, 245157, 735471, 2042975, 5311735, 13037895, 30421755, 67863915, 145422675, 300540195, 601080390, 1166803110, 2203961430, 4059928950, 1, 18, 171, 1140, 5985, 26334, 100947, 346104, 1081575, 3124550, 8436285, 21474180, 51895935, 119759850, 265182525, 565722720, 1166803110, 2333606220, 4537567650, 8597496600, 1, 19, 190, 1330, 7315, 33649, 134596, 480700, 1562275, 4686825, 13123110, 34597290, 86493225, 206253075, 471435600, 1037158320, 2203961430, 4537567650, 9075135300, 17672631900, 1, 20, 210, 1540, 8855, 42504, 177100, 657800, 2220075, 6906900, 20030010, 54627300, 141120525, 347373600, 818809200, 1855967520, 4059928950, 8597496600, 17672631900, 35345263800", 
      "solution": "pascal <- function(n) {\r\n    outer(1 : n, 1 : n, function(i, j) choose(i + j - 2, i - 1))\r\n}", 
      "problem": 33, 
      "validation": "check$equal(dim(pascal(123)), c(123, 123))\r\ncheck$equal(pascal(3), matrix(c(1, 1, 1, 1, 2, 3, 1, 3, 6), 3))\r\ncheck$challenge(toString(pascal(20)))"
    }
  }, 
  {
    "pk": 64, 
    "model": "problem.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `alterniraj(v)`, ki vrne vektor, ki ima na lihih mestih\nenake vrednosti kot `v`, na sodih pa nasprotne.\nTorej, `alterniraj` na vektorju `2, 5, 1, 7` vrne vektor `2, -5, 1, -7`.\nFunkcija lahko pri vektorjih lihih dol\u017ein javlja napako.", 
      "challenge": "-50 49 -48 47 -46 45 -44 43 -42 41 -40 39 -38 37 -36 35 -34 33 -32 31 -30 29 -28 27 -26 25 -24 23 -22 21 -20 19 -18 17 -16 15 -14 13 -12 11 -10 9 -8 7 -6 5 -4 3 -2 1 0 -1 2 -3 4 -5 6 -7 8 -9 10 -11 12 -13 14 -15 16 -17 18 -19 20 -21 22 -23 24 -25 26 -27 28 -29 30 -31 32 -33 34 -35 36 -37 38 -39 40 -41 42 -43 44 -45 46 -47 48 -49 50 -51", 
      "solution": "alterniraj <- function(v) {\n    return(v * c(1, -1))\n}", 
      "problem": 21, 
      "validation": "check$equal(alterniraj(c(2, 5, 1, 7)), c(2, -5, 1, -7))\ncheck$equal(alterniraj(c(2, 5, 1, 7, -1, -5)), c(2, -5, 1, -7, -1, 5))\ncheck$challenge(paste(alterniraj(-50 : 51), collapse=\" \"))"
    }
  }, 
  {
    "pk": 67, 
    "model": "problem.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `pozitivni(v)`, ki vrne vektor pozitivnih komponent\nvektorja `v`.", 
      "challenge": "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51", 
      "solution": "pozitivni <- function(v) {\n    v[v > 0]\n}", 
      "problem": 22, 
      "validation": "check$equal(pozitivni(c(2, 5, 1, 7)), c(2, 5, 1, 7))\ncheck$equal(pozitivni(c(2, 5, -1, 7, -1, -5)), c(2, 5, 7))\ncheck$challenge(paste(pozitivni(-50 : 51), collapse=\" \"))"
    }
  }, 
  {
    "pk": 87, 
    "model": "problem.part", 
    "fields": {
      "_order": 2, 
      "description": "V tabeli `a` \u017eelimo poiskati vrednost `k`-tega elementa po velikosti.\r\nNa primer, \u010de je\r\n\r\n    >>>> a = [10, 4, 5, 15, 11, 3, 17, 2, 18]\r\n\r\npotem je tretji element po velikosti enak 5, ker so od njega man\u0161i\r\nelementi 2, 3 in 4. Pri tem \u0161tejemo indekse od 0 naprej, se pravi\r\n\"ni\u010dti\" element je 2.\r\n\r\nSestavite funkcijo `po_velikosti(a,k)`, ki v tabeli `a` poi\u0161\u010de `k`-ti element\r\npo velikosti. Funkcija sme spremeniti tabelo `a` in deluje takole:\r\n\r\n1. \u010ce je `k` manj\u0161i od `0` ali ve\u010dji ali enak `len(a)`, vrni `None`.\r\n2. \u010ce ima `a` samo en element in je `k == 0`, vrni `a[0]`.\r\n3. Tabelo preuredimo tako, da je `a[0]` pivot, recimo na `i`-tem mestu.\r\n2. \u010ce je `k == i`, vrnemo `a[i]`.\r\n4. \u010ce je `k < i`, rekurzivno kli\u010demo `po_velikosti(a[:i], k)`.\r\n5. \u010ce je `k > i`, rekurzivno kli\u010demo `po_velikosti(a[(i+1):], k-i-1)`.", 
      "challenge": "699950000", 
      "solution": "def po_velikosti(a,k):\r\n    if k < 0 or k >= len(a): return None\r\n    elif len(a) == 1 and k == 0: return a[0]\r\n    else:\r\n        i = premeci(a)\r\n        if k == i: return a[i]\r\n        elif k < i: return po_velikosti(list(a[:i]), k)\r\n        else: return po_velikosti(list(a[(i+1):]), k-i-1)", 
      "problem": 37, 
      "validation": "Check.equal(\"\"\"po_velikosti([0,1,2,3,4,5], 0)\"\"\", 0)\r\nCheck.equal(\"\"\"po_velikosti([0,1,2,3,4,5], 1)\"\"\", 1)\r\nCheck.equal(\"\"\"po_velikosti([0,1,2,3,4,5], 4)\"\"\", 4)\r\nCheck.equal(\"\"\"po_velikosti([0,1,2,3,4,5], 5)\"\"\", 5)\r\nCheck.equal(\"\"\"po_velikosti([0,1,2,3,4,5], -1)\"\"\", None)\r\nCheck.equal(\"\"\"po_velikosti([0,1,2,3,4,5], 6)\"\"\", None)\r\nCheck.equal(\"po_velikosti([42], 0)\"\"\", 42)\r\nCheck.equal(\"po_velikosti([], 0)\"\"\", None)\r\nCheck.equal(\"\"\"po_velikosti([10, 4, 5, 15, 11, 3, 17, 2, 18], 3)\"\"\", 5)\r\nCheck.equal(\"\"\"po_velikosti([10, 4, 5, 15, 11, 3, 17, 2, 18], 8)\"\"\", 18)\r\n\r\nCheck.challenge(po_velikosti([2,5,1,4,6,8,9,10,7,3], 5))\r\nCheck.challenge(po_velikosti([(211 * i + 570) % 1019 for i in range(1019)], 999))\r\nCheck.challenge(po_velikosti([(21111 * i + 570089) % 100003 for i in range(100003)], 50000))"
    }
  }, 
  {
    "pk": 91, 
    "model": "problem.part", 
    "fields": {
      "_order": 2, 
      "description": "Sestavite funkcijo `redka_po_stolpcih`, ki sprejme redko matriko `(d,m,n)` in vrne\nnjeno predstavitev `(e,m,n)` s slovarjem po stolpcih `e`.", 
      "challenge": "({0: {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9}, 1: {0: 1, 1: 2, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, 2: {0: 2, 1: 3, 2: 4, 3: 5, 4: 6, 5: 7, 6: 8, 7: 9, 8: 10, 9: 11}, 3: {0: 3, 1: 4, 2: 5, 3: 6, 4: 7, 5: 8, 6: 9, 7: 10, 8: 11, 9: 12}, 4: {0: 4, 1: 5, 2: 6, 3: 7, 4: 8, 5: 9, 6: 10, 7: 11, 8: 12, 9: 13}, 5: {0: 5, 1: 6, 2: 7, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 14}, 6: {0: 6, 1: 7, 2: 8, 3: 9, 4: 10, 5: 11, 6: 12, 7: 13, 8: 14, 9: 15}, 7: {0: 7, 1: 8, 2: 9, 3: 10, 4: 11, 5: 12, 6: 13, 7: 14, 8: 15, 9: 16}, 8: {0: 8, 1: 9, 2: 10, 3: 11, 4: 12, 5: 13, 6: 14, 7: 15, 8: 16, 9: 17}, 9: {0: 9, 1: 10, 2: 11, 3: 12, 4: 13, 5: 14, 6: 15, 7: 16, 8: 17, 9: 18}}, 42, 23)", 
      "solution": "def redka_po_stolpcih(dmn):\n    (d,m,n) = dmn\n    e = {}\n    for ((i,j),x) in d.items():\n        if j not in e: e[j] = {}\n        e[j][i] = x\n    return (e,m,n)", 
      "problem": 39, 
      "validation": "Check.equal(\"\"\"redka_po_stolpcih(({(0,0) : 1, (0,4) : 2, (1,1) : 4, (1,4): 3, (3,5) : 5}, 4, 6))\"\"\",\n            ({ 0 : {0 : 1}, 1 : {1 : 4}, 4 : {0 : 2, 1 : 3}, 5 : {3 : 5} }, 4, 6))\n\nCheck.equal(\"\"\"redka_po_stolpcih(({(500,501):42}, 1001, 1002))\"\"\", ({501:{500:42}}, 1001,1002))\n\nCheck.challenge(redka_po_stolpcih(({(i,j) : (i + j) for j in range(10) for i in range(10)}, 42, 23)))"
    }
  }, 
  {
    "pk": 89, 
    "model": "problem.part", 
    "fields": {
      "_order": 2, 
      "description": "V spremenljivko `preziveli` shranite podrazporeditev s podatki\no pre\u017eivelih v 1. in 3. razredu", 
      "challenge": "5, 13, 1, 14, 57, 75, 140, 76", 
      "solution": "preziveli <- Titanic[c(\"1st\", \"3rd\"), , , \"Yes\"]", 
      "problem": 34, 
      "validation": "check$equal(preziveli[, \"Male\", \"Child\"], c(5, 13))\ncheck$equal(preziveli[, \"Female\", \"Adult\"], c(140, 76))\ncheck$challenge(toString(preziveli))"
    }
  }, 
  {
    "pk": 77, 
    "model": "problem.part", 
    "fields": {
      "_order": 2, 
      "description": "3. del", 
      "challenge": "", 
      "solution": "", 
      "problem": 28, 
      "validation": ""
    }
  }, 
  {
    "pk": 37, 
    "model": "problem.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavite funkcijo `cikli(permutacija)`, ki vrne seznam disjunktnih\r\nciklov dane permutacije. Vsak cikel naj se za\u010dne z najmanj\u0161im \u0161tevilom\r\nv ciklu, cikli pa naj bodo urejeni po za\u010detnem \u0161tevilu.\r\n\r\n    >>> cikli([3, 2, 1])\r\n    [[1, 3], [2]]", 
      "challenge": "[[1, 99], [2, 98], [3, 97], [4, 96], [5, 95], [6, 94], [7, 93], [8, 92], [9, 91], [10, 90], [11, 89], [12, 88], [13, 87], [14, 86], [15, 85], [16, 84], [17, 83], [18, 82], [19, 81], [20, 80], [21, 79], [22, 78], [23, 77], [24, 76], [25, 75], [26, 74], [27, 73], [28, 72], [29, 71], [30, 70], [31, 69], [32, 68], [33, 67], [34, 66], [35, 65], [36, 64], [37, 63], [38, 62], [39, 61], [40, 60], [41, 59], [42, 58], [43, 57], [44, 56], [45, 55], [46, 54], [47, 53], [48, 52], [49, 51], [50]]", 
      "solution": "def cikli(permutacija):\r\n    cikli = []\r\n    stevila = []\r\n    for i in range(1, len(permutacija) + 1):\r\n        if i not in stevila:\r\n            c = cikel(permutacija, i)\r\n            cikli.append(c)\r\n            stevila += c\r\n    return cikli", 
      "problem": 19, 
      "validation": "Check.equal('cikli([3, 4, 2, 1])', [[1, 3, 2, 4]])\r\nCheck.equal('cikli([3, 2, 1])', [[1, 3], [2]])\r\nCheck.challenge(cikli(_perm))"
    }
  }, 
  {
    "pk": 32, 
    "model": "problem.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavite funkcijo `besede(niz)`, ki sestavi in vrne seznam parov\nindeksov (za\u010detek, konec), ki dolo\u010dajo, kje v danem nizu se nahajajo\nposamezne besede. Beseda je maksimalno zaporedje znakov, ki ne vsebuje\npresledka.\n\n    >>> besede('Danes je lep dan, saj ne de\u017euje.')\n    [(0, 4), (6, 7), (9, 11), (13, 16), (18, 20), (22, 23), (25, 31)]\n    >>> besede(' abc  abc  abc ')\n    [(1, 3), (6, 8), (11, 13)]", 
      "challenge": "[(0, 0)][(0, 0)][(0, 0)][(0, 1)][(0, 1)][(0, 1)][(0, 2)][(0, 2)][(1, 2)][(0, 2)][(0, 3)][(0, 3)][(0, 3)][(0, 3)][(0, 3)][(0, 2)][(0, 3)][(0, 3)][(1, 3)][(0, 1), (3, 3)][(0, 3)][(0, 3)][(0, 4)][(0, 4)][(0, 4)][(0, 0), (2, 3)][(0, 1), (3, 4)][(0, 4)][(0, 2), (4, 4)][(0, 4)][(0, 4)][(0, 4)][(0, 4)][(0, 0), (2, 4)][(0, 4)][(0, 3)][(0, 2), (4, 4)][(1, 2), (4, 4)][(1, 4)][(1, 4)][(0, 4)][(0, 4)][(0, 4)][(0, 1), (3, 4)][(0, 0), (2, 4)][(0, 3)][(0, 4)][(0, 5)][(0, 2), (4, 5)][(0, 5)][(0, 1), (3, 5)][(0, 3), (5, 5)][(0, 5)][(0, 5)][(0, 0), (2, 5)][(0, 4)][(0, 1), (3, 5)][(0, 1), (3, 5)][(0, 1), (3, 5)][(0, 1), (3, 5)][(0, 5)][(0, 5)][(0, 5)][(0, 0), (2, 5)][(0, 5)][(0, 4)][(0, 5)][(0, 5)][(0, 5)][(0, 2), (4, 5)][(0, 5)][(0, 0), (2, 5)][(0, 5)][(0, 5)][(0, 1), (3, 5)][(0, 4)][(0, 5)][(0, 0), (2, 2), (4, 5)][(0, 2), (5, 5)][(0, 5)][(1, 5)][(1, 5)][(2, 5)][(1, 5)][(1, 5)][(0, 4)][(0, 3), (5, 5)][(0, 0), (2, 2), (4, 5)][(0, 5)][(0, 5)][(0, 5)][(0, 0), (2, 2), (4, 5)][(0, 5)][(0, 3), (5, 5)][(0, 2), (4, 5)][(0, 0), (2, 4)][(0, 5)][(0, 5)][(0, 5)][(0, 5)]", 
      "solution": "def besede(stavek):\n    indeksi = []\n    # ali smo na\u0161li besedo, ali smo pri presledkih\n    smo_v_besedi = False\n    # zacetek trenutne besede\n    zacetek = 0\n    for i, z in enumerate(stavek):\n        # \u010de smo v besedi in najdemo presledek, dodamo njene indekse v seznam\n        if smo_v_besedi and z == ' ':\n            smo_v_besedi = False\n            indeksi.append((zacetek, i - 1))\n        # \u010de nismo v besedi in najdemo znak, za\u010dnemo z besedo\n        elif not smo_v_besedi and z != ' ':\n            smo_v_besedi = True\n            zacetek = i\n    # \u010de smo na koncu zanke \u0161e vedno v besedi, ta beseda sega do konca\n    if smo_v_besedi:\n        indeksi.append((zacetek, len(stavek) - 1))\n    return indeksi", 
      "problem": 18, 
      "validation": "Check.equal(\"besede('Danes je lep dan, saj ne de\u017euje.')\", [(0, 4), (6, 7), (9, 11), (13, 16), (18, 20), (22, 23), (25, 31)])\nCheck.equal(\"besede(' abc  abc  abc ')\", [(1, 3), (6, 8), (11, 13)])\nfor i in range(100):\n    Check.challenge(besede(str(i ** 3).replace('5', ' ')))"
    }
  }, 
  {
    "pk": 33, 
    "model": "problem.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavite funkcijo `ustrezljivi(oseba, d)`, ki sprejme ime osebe ter\nslovar zaljubljenih, vrne pa _mno\u017eico_ vseh ljudi, ki so do dane osebe\n\u0161e posebej ustre\u017eljivi. Posebej ustre\u017eljivi so seveda za to, ker so\nbodisi zaljubljeni v dano osebo, bodisi so zaljubljeni v osebo, ki je\nposebej ustre\u017eljiva do nje, in tako naprej.\n\nNa primer, \u010de imamo slovar\n\n    s = {'Ana' : {'Bine', 'Cene'},\n         'Bine' : {'Ana'},\n         'Cene' : {'Bine'},\n         'Davorka' : {'Davorka'},\n         'Eva' : {'Bine'}}\n\nso do Ceneta posebej ustre\u017eljivi Ana (ki je zaljubljena vanj), Bine\n(ki je zaljubljen v Ano), Eva (ki je zaljubljena v Bineta), ter seveda\nCene, ki je zaljubljen v Evo.", 
      "challenge": "['Ana', 'Bine', 'Cene', 'Davorka', 'Eva']", 
      "solution": "def ustrezljivi(oseba, d):\n    # seznam, v katerega nabiramo ustre\u017eljive osebe\n    ustrezljivi = set()\n    # najprej dodamo tiste, ki ljubijo prvo osebo\n    dodani = {o for o in d if oseba in d[o]}\n    # dokler smo koga dodali, dodajamo ustre\u017eljive\n    while dodani:\n        ustrezljivi.update(dodani)\n        # sedaj pa dodajamo tiste, ki ljubijo nazadnje dodane osebe\n        dodani = {o for o in d for dodan in dodani\n                  if dodan in d[o] and o not in ustrezljivi}\n    return ustrezljivi", 
      "problem": 9, 
      "validation": "Check.equal(\"\"\"ustrezljivi('Cene', {'Ana' : {'Bine', 'Cene'},\n                           'Bine' : {'Ana'},\n                           'Cene' : {'Bine'},\n                           'Davorka' : {'Davorka'},\n                           'Eva' : {'Bine'}})\\n\"\"\", {'Ana', 'Bine', 'Cene', 'Eva'})\nCheck.equal(\"ustrezljivi('Cene', {})\", set())\nCheck.equal(\"\"\"ustrezljivi('Cene', {'Ana' : {'Bine', 'Cene'},\n                           'Bine' : {},\n                           'Cene' : {'Bine'},\n                           'Davorka' : {'Davorka'},\n                           'Eva' : {'Bine'}})\\n\"\"\", {'Ana'})\nCheck.challenge(sorted(ustrezljivi('Davorka', {'Ana' : {'Bine'},\n                             'Bine' : {'Eva', 'Davorka'},\n                             'Cene' : {'Bine', 'Ana'},\n                             'Davorka' : {'Bine'},\n                             'Eva' : {'Bine'}})))"
    }
  }, 
  {
    "pk": 28, 
    "model": "problem.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavite funkcijo `tarca(meti)`, ki za parameter dobi seznam koordinat\r\nzadetkov v tar\u010do, ter vrne skupno \u0161tevilo dose\u017eenih to\u010dk.\r\nKoordinate so predstavljene s pari `(x, y)` in so merjene v centimetrih\r\nrelativno glede na sredino tar\u010de (z drugimi besedami, sredina tar\u010de ima\r\nkoordinate `(0, 0)`).\r\n\r\nPravila to\u010dkovanja: \u010de je zadetek od sredi\u0161\u010da oddaljen manj kot 1 cm,\r\ndobi 10 to\u010dk. \u010ce je odmaknjen vsaj 1 cm, a manj kot 2 cm, dobi 9 to\u010dk.\r\n\u010ce je odmaknjen vsaj 2 cm, a manj kot 3 cm, dobi 8 to\u010dk itd.\r\nZadetki, oddaljeni 10 cm in ve\u010d, ne dobijo to\u010dk.\r\nNegativne to\u010dke niso mo\u017ene.\r\nV spodnjem primeru je prvi zadetek vreden 10, drugi 5, tretji 10 in\r\nzadnji 0 to\u010dk.\r\n\r\n    >>> tarca([(-0.5, 0.3), (4, 3), (0, 0), (100, 20)])\r\n    25", 
      "challenge": "80", 
      "solution": "def tarca(meti):\r\n    def tocke(r):\r\n        return max(0, 10 - int(r))\r\n    return sum([tocke(ravninskaRazdalja(0, 0, x, y)) for x, y in meti])", 
      "problem": 4, 
      "validation": "Check.equal('tarca([(-0.5, 0.3), (4, 3), (0, 0), (100, 20)])', 25)\r\nCheck.equal('tarca([(1, 2), (4, 3), (5, 6), (8, 7), (9, 10)])', 16)\r\nCheck.equal('tarca([])', 0)\r\nCheck.challenge(int(tarca([(0.3 * i, 0.4 * i) for i in range(10)])))"
    }
  }, 
  {
    "pk": 42, 
    "model": "problem.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavite funkcijo `zlij`, ki sprejme urejeni tabeli ter ju zlije\nv urejeno tabelo, ki jo vrne.", 
      "challenge": "[3, 7, 8, 11, 16, 20, 23, 32, 37, 43, 54, 56, 71, 71, 88, 88, 105, 122, 139, 156, 173, 190, 207, 224, 241, 258, 275, 292, 309, 326, 343, 360, 377, 394, 411, 428, 445, 462, 479, 496, 513, 530, 547, 564, 581, 598, 615, 632, 649, 666, 683, 700, 717, 734, 751, 768, 785, 802, 819, 836][7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]", 
      "solution": "def zlij(u,v):\n    \"\"\"Zlij urejeni tabeli u in v in vrni novo urejeno tabelo.\"\"\"\n    m = len(u)\n    n = len(v)\n    w = [0] * (m + n)\n    i = 0\n    j = 0\n    k = 0\n    while k < m + n:\n        if i < m and (j >= n or u[i] < v[j]):\n            w[k] = u[i]\n            i = i + 1\n        else:\n            w[k] = v[j]\n            j = j + 1\n        k = k + 1\n    return w", 
      "problem": 20, 
      "validation": "Check.equal(\"zlij([1,2,3],[4,5,6,7])\", [1,2,3,4,5,6,7])\nCheck.equal(\"zlij([2,4,6,8], [1,3,5,7])\", [1,2,3,4,5,6,7,8])\nCheck.equal(\"zlij([], [2,5,10])\", [2,5,10])\nCheck.equal(\"zlij([1], [])\", [1])\nCheck.equal(\"zlij([1,2,3], [1,2,3])\", [1,1,2,2,3,3])\nCheck.equal(\"zlij([1,1,2,3,4,4], [2,3])\", [1,1,2,2,3,3,4,4])\n\nCheck.challenge(zlij([i * i + 7 for i in range(0,10)], [17 * j + 3 for j in range(0,50)]))\nCheck.challenge(zlij([7] * 13, [7] * 15))"
    }
  }, 
  {
    "pk": 23, 
    "model": "problem.part", 
    "fields": {
      "_order": 3, 
      "description": "Sestavite funkcijo `pozdrav(ime, vzklik)`, ki vrne niz, ki predstavlja\npozdrav, ki se za\u010dne z danim vzklikom, ki ima privzeto vrednost\n`\"Zdravo\"`.\nNa primer, `pozdrav(\"Miha\", \"Ojla\")` naj vrne niz `\"Ojla, Miha!\"`,\n`pozdrav(\"Nina\")` pa naj vrne `\"Zdravo, Nina!\"`.\n\n_Namig:_ nize stikate s funkcijo `paste`.", 
      "challenge": "Zdravo, 0!Zdravo, 0.1!Zdravo, 0.2!Zdravo, 0.3!Zdravo, 0.4!Zdravo, 0.5!Zdravo, 0.6!Zdravo, 0.7!Zdravo, 0.8!Zdravo, 0.9!Zdravo, 1!Zdravo, 1.1!Zdravo, 1.2!Zdravo, 1.3!Zdravo, 1.4!Zdravo, 1.5!Zdravo, 1.6!Zdravo, 1.7!Zdravo, 1.8!Zdravo, 1.9!Zdravo, 2!Zdravo, 2.1!Zdravo, 2.2!Zdravo, 2.3!Zdravo, 2.4!Zdravo, 2.5!Zdravo, 2.6!Zdravo, 2.7!Zdravo, 2.8!Zdravo, 2.9!Zdravo, 3!Zdravo, 3.1!Zdravo, 3.2!Zdravo, 3.3!Zdravo, 3.4!Zdravo, 3.5!Zdravo, 3.6!Zdravo, 3.7!Zdravo, 3.8!Zdravo, 3.9!Zdravo, 4!Zdravo, 4.1!Zdravo, 4.2!Zdravo, 4.3!Zdravo, 4.4!Zdravo, 4.5!Zdravo, 4.6!Zdravo, 4.7!Zdravo, 4.8!Zdravo, 4.9!Zdravo, 5!", 
      "solution": "pozdrav <- function(ime, vzklik = \"Zdravo\") {\n  paste(vzklik, \", \", ime, \"!\", sep=\"\")\n}", 
      "problem": 16, 
      "validation": "check$equal(pozdrav(\"Miha\", \"Ojla\"), \"Ojla, Miha!\")\ncheck$equal(pozdrav(\"Nina\"), \"Zdravo, Nina!\")\nfor (x in seq(0, 5, 0.1)) {\n    check$challenge(pozdrav(as.character(x)))\n}"
    }
  }, 
  {
    "pk": 11, 
    "model": "problem.part", 
    "fields": {
      "_order": 3, 
      "description": "\u0160tevilo je popolnomaNepopolno, kadar je njegova nepopolnost ve\u010dja od\r\nnjega samega.\r\n\r\nSestavite funkcijo `popolnomaNepopolno(n)`, ki vrne prvo popolnoma\r\nnepopolno \u0161tevilo, ve\u010dje ali enako `n`.", 
      "challenge": "360", 
      "solution": "def popolnomaNepopolno(n):\r\n    while(nepopolnost(n) <= n):\r\n        n += 1\r\n    return n", 
      "problem": 8, 
      "validation": "Check.equal('popolnomaNepopolno(0)', 180)\r\nCheck.equal('popolnomaNepopolno(181)', 240)\r\nCheck.equal('popolnomaNepopolno(241)', 360)\r\nCheck.equal('popolnomaNepopolno(361)', 420)\r\nCheck.challenge(popolnomaNepopolno(250))"
    }
  }, 
  {
    "pk": 24, 
    "model": "problem.part", 
    "fields": {
      "_order": 4, 
      "description": "Sestavite funkcijo `velikost.slike(diagonala, razmerje=16 / 9)`, ki\nsprejme velikost diagonale televizije ter vrne niz, ki predstavlja\ndimenziji slike. Funkcija naj sprejme neobvezen argument, ki povesta\nrazmerje slike. Dimenzije naj bodo zaokro\u017eene na celo \u0161tevilo.\n\nNa primer, `velikost.slike(100)` vrne niz `\"87 x 49\"`.", 
      "challenge": "4 x 39 x 414 x 420 x 425 x 430 x 435 x 440 x 445 x 450 x 455 x 460 x 465 x 470 x 475 x 480 x 485 x 490 x 495 x 4100 x 4", 
      "solution": "velikost.slike <- function(diagonala, razmerje = 16 / 9) {\n  x <- round(razmerje * diagonala / sqrt(1 + razmerje ^ 2))\n  y <- round(diagonala / sqrt(1 + razmerje ^ 2))\n  paste(x, \"x\", y)\n}", 
      "problem": 16, 
      "validation": "check$equal(velikost.slike(100), \"87 x 49\")\ncheck$equal(velikost.slike(30, razmerje=4 / 3), \"24 x 18\")\nfor (x in 5 * (1 : 20)) {\n  check$challenge(velikost.slike(x, x / 4))\n}"
    }
  }, 
  {
    "pk": 38, 
    "model": "problem.part", 
    "fields": {
      "_order": 4, 
      "description": "Sestavite funkcijo `je_permutacija(seznam)`, ki vrne `True`, \u010de dan\r\nseznam predstavlja permutacijo, in `False` sicer.\r\n\r\n\u010ce se le da, napi\u0161ite program, ki deluje v linearnem \u010dasu.", 
      "challenge": "TrueFalseFalse", 
      "solution": "def je_permutacija(seznam):\r\n    n = len(seznam)\r\n    prisotni = [False for i in range(n)]\r\n    for i in seznam:\r\n        if i < 1 or i > n or prisotni[i - 1]:\r\n            return False\r\n        else:\r\n            prisotni[i - 1] = True\r\n    return all(prisotni)", 
      "problem": 19, 
      "validation": "Check.equal('je_permutacija([3, 4, 2, 1])', True)\r\nCheck.equal('je_permutacija([3, 2, 2, 1])', False)\r\nCheck.equal('je_permutacija([1, 4, 1])', False)\r\nCheck.challenge(je_permutacija([3, 4, 2, 1]))\r\nCheck.challenge(je_permutacija([3, 2, 2, 1]))\r\nCheck.challenge(je_permutacija([1, 4, 1]))"
    }
  }, 
  {
    "pk": 43, 
    "model": "problem.part", 
    "fields": {
      "_order": 4, 
      "description": "Sestavite funkcijo `zmnozi(mat1, mat2)`, ki matri\u010dno zmno\u017ei matriki\r\n`mat1` in `mat2`.", 
      "challenge": "[[2352, 2492, 2912, 3612, 4592, 5852, 7392, 9212], [2604, 2768, 3260, 4080, 5228, 6704, 8508, 10640], [2856, 3044, 3608, 4548, 5864, 7556, 9624, 12068], [3108, 3320, 3956, 5016, 6500, 8408, 10740, 13496], [3360, 3596, 4304, 5484, 7136, 9260, 11856, 14924], [3612, 3872, 4652, 5952, 7772, 10112, 12972, 16352], [3864, 4148, 5000, 6420, 8408, 10964, 14088, 17780], [4116, 4424, 5348, 6888, 9044, 11816, 15204, 19208]]", 
      "solution": "def zmnozi(mat1, mat2):\r\n    return transponiraj([uporabi(mat1, v) for v in transponiraj(mat2)])", 
      "problem": 20, 
      "validation": "Check.equal('zmnozi([[1, 3], [2, 4]], [[5, 6], [7, 8]])', [[26, 30], [38, 44]])\r\nCheck.equal('zmnozi([[1], [5]], [[5, 1, 3]])', [[5, 1, 3], [25, 5, 15]])\r\nCheck.equal('zmnozi([[1, 3, 6], [2, 4, 8]], [[1, 0], [0, 6], [2, 2]])', [[13, 30], [18, 40]])\r\nCheck.challenge(zmnozi(_mat, _mat))"
    }
  }
]