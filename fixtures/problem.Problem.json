[
  {
    "pk": 22, 
    "model": "problem.problem", 
    "fields": {
      "description": "", 
      "title": "1. izpit", 
      "timestamp": "2011-09-29 14:12:58", 
      "author": 1, 
      "problem_set": 1, 
      "preamble": "def _istedatoteke(ena,dva):\r\n    with open(ena) as f1, open(dva) as f2:\r\n        return f1.read().strip() == f2.read().strip()\r\n\r\n    \r\ndef _removefiles(*ime):\r\n    import os\r\n    for i in ime:\r\n        try:\r\n            os.remove(i)\r\n        except:\r\n            pass"
    }
  }, 
  {
    "pk": 21, 
    "model": "problem.problem", 
    "fields": {
      "description": "", 
      "title": "2. kolokvij (fin, pet, 13-15)", 
      "timestamp": "2011-09-29 14:12:58", 
      "author": 1, 
      "problem_set": 1, 
      "preamble": "def _makefile0(fname, ime, vrednost):\r\n    with open(fname, \"w\") as f:\r\n        print(ime, file=f)\r\n        print(vrednost, file=f)\r\n\r\ndef _makefile1(fname):\r\n    with open(fname, \"w\") as f:\r\n        print(\"a\", file=f)\r\n        print(\"0\", file=f)\r\n        print(\"b\", file=f)\r\n        print(\"1\", file=f)\r\n        print(\"c\", file=f)\r\n        print(\"2\", file=f)\r\n\r\n\r\n\r\ndef _makefile2(ime):\r\n    with open(ime, \"w\") as f:\r\n        print(\"2,35,18,5,78\", file=f)\r\n        print(\"13,20\", file=f)\r\n        print(\"8\", file=f)\r\n        print(\"15,84,2,4,5,16,78,44,21\", file=f)\r\n        print(\"10,5,50,40\", file=f)\r\n\r\ndef _makefile3(ime):\r\n    with open(ime, \"w\") as f:\r\n        print(\"138\", file=f)\r\n        print(\"33\", file=f)\r\n        print(\"8\", file=f)\r\n        print(\"269\", file=f)\r\n        print(\"105\", file=f)\r\n\r\n\r\n\r\ndef _makefile4(ime):\r\n    with open(ime, \"w\") as f:                                                                                                                                                                     \r\n        print(\"1 28\", file=f)\r\n        print(\"2 16\", file=f)\r\n        print(\"3 8\", file=f)\r\n        print(\"4 30\", file=f)\r\n        print(\"5 26\", file=f)\r\n        print(\"22\", file=f)\r\n\r\n\r\n\r\ndef _istevseenodatoteke(ena,dva):\r\n    with open(ena) as f1, open(dva) as f2:\r\n        vrste1 = [l.strip() for l in f1.readlines()]\r\n        vrste1.sort()\r\n        vrste2 = [l.strip() for l in f2.readlines()]\r\n        vrste2.sort()\r\n        if vrste1 == vrste2:\r\n            return True\r\n        else:\r\n            print(\"Izhodna datoteka vsebuje naslednje vrstice: \")\r\n            print(vrste1)\r\n            print(\"Morala pa bi vsebovati naslednje vrstice: \")\r\n            print(vrste2)\r\n\r\ndef _istedatoteke(ena,dva):\r\n    with open(ena) as f1, open(dva) as f2:\r\n        vrste1 = f1.read().strip()\r\n        vrste2 = f2.read().strip()\r\n        if vrste1 == vrste2:\r\n            return True\r\n        else:\r\n            print(\"Izhodna datoteka vsebuje naslednje vrstice: \")\r\n            print(vrste1)\r\n            print(\"Morala pa bi vsebovati naslednje vrstice: \")\r\n            print(vrste2)\r\n    \r\ndef _removefiles(*ime):\r\n    import os\r\n    for i in ime: os.remove(i)\r\n\r\n\r\n"
    }
  }, 
  {
    "pk": 20, 
    "model": "problem.problem", 
    "fields": {
      "description": "", 
      "title": "2. kolokvij (fin, pet, 8-10)", 
      "timestamp": "2011-09-29 14:12:58", 
      "author": 1, 
      "problem_set": 1, 
      "preamble": "def _makefile0(ime):\r\n    with open(ime, \"w\") as f:\r\n        print(\"2,35,18,5,78\", file=f)\r\n        print(\"13,20\", file=f)\r\n        print(\"8\", file=f)\r\n        print(\"15,84,2,4,5,16,78,44,21\", file=f)\r\n        print(\"10,5,50,40\", file=f)\r\n\r\ndef _makefile1(ime):\r\n    with open(ime, \"w\") as f:\r\n        print(\"138\", file=f)\r\n        print(\"33\", file=f)\r\n        print(\"8\", file=f)\r\n        print(\"269\", file=f)\r\n        print(\"105\", file=f)\r\n\r\n\r\n\r\ndef _makefile2(ime):\r\n    with open(ime, \"w\") as f:                                                                                                                                                                     \r\n        print(\"28\", file=f)\r\n        print(\"16\", file=f)\r\n        print(\"8\", file=f)\r\n        print(\"30\", file=f)\r\n        print(\"26\", file=f)\r\n        print(\"22\", file=f)\r\n\r\ndef _istevseenodatoteke(ena,dva):\r\n    with open(ena) as f1, open(dva) as f2:\r\n        vrste1 = [l.strip() for l in f1.readlines()]\r\n        vrste1.sort()\r\n        vrste2 = [l.strip() for l in f2.readlines()]\r\n        vrste2.sort()\r\n        if vrste1 == vrste2:\r\n            return True\r\n        else:\r\n            print(\"Izhodna datoteka vsebuje naslednje vrstice: \")\r\n            print(vrste1)\r\n            print(\"Morala pa bi vsebovati naslednje vrstice: \")\r\n            print(vrste2)\r\n\r\ndef _istedatoteke(ena,dva):\r\n    with open(ena) as f1, open(dva) as f2:\r\n        vrste1 = f1.read().strip()\r\n        vrste2 = f2.read().strip()\r\n        if vrste1 == vrste2:\r\n            return True\r\n        else:\r\n            print(\"Izhodna datoteka vsebuje naslednje vrstice: \")\r\n            print(vrste1)\r\n            print(\"Morala pa bi vsebovati naslednje vrstice: \")\r\n            print(vrste2)\r\n    \r\ndef _removefiles(*ime):\r\n    import os\r\n    for i in ime: os.remove(i)\r\n"
    }
  }, 
  {
    "pk": 14, 
    "model": "problem.problem", 
    "fields": {
      "description": "# Drugi kolokvij, finan\u010dna matematika, ponedeljek od 8h do 10h", 
      "title": "2. kolokvij (fin, pon)", 
      "timestamp": "2011-09-29 14:12:58", 
      "author": 1, 
      "problem_set": 1, 
      "preamble": ""
    }
  }, 
  {
    "pk": 16, 
    "model": "problem.problem", 
    "fields": {
      "description": "# Drugi kolokvij, matematika, sreda", 
      "title": "2. kolokvij (mat, sre)", 
      "timestamp": "2011-09-29 14:12:58", 
      "author": 1, 
      "problem_set": 1, 
      "preamble": "_prijatelji={'Jernej': ['Janez', 'Joze', 'Miha', 'Franc'], 'Joze': ['Miha'], 'Miha': ['Jernej', 'Franc']}\r\n_prijatelji2={'Jernej': ['Joze', 'Miha', 'Franc'], 'Joze': ['Jernej', 'Franc'], 'Miha': ['Jernej'], 'Franc': ['Jernej', 'Joze']}\r\n\r\n\r\ndef _makefile(ime):\r\n    with open(ime, \"w\") as f:\r\n        print(\"% komentar\", file=f)\r\n        print(\"ni komentarja %ja pa je\", file=f)\r\n        print(\"A ta tudi? \\\\% ne ne, \\\\\\\\%Ta pa % pa ta tudi\", file=f)\r\n        print(\"Mucno s temi \\\\ \\\\\\\\\\\\% ne ne, \\\\\\\\\\\\\\\\%ze spet\", file=f)\r\n\r\ndef _makefile1(ime):\r\n    with open(ime, \"w\") as f:\r\n        print(\"ni komentarja %ja pa je\", file=f)\r\n        print(\"A ta tudi? \\\\% ne ne, \\\\\\\\%Ta pa % pa ta tudi\", file=f)\r\n        print(\"Mucno s temi \\\\ \\\\\\\\\\\\% ne ne, \\\\\\\\\\\\\\\\%ze spet\", file=f)\r\n\r\ndef _makefile2(ime):\r\n    with open(ime, \"w\") as f:\r\n        print(\"ni komentarja \", end='', file=f)\r\n        print(\"A ta tudi? \\\\\", end='',file=f)\r\n        print(\"Mucno s temi \\\\ \\\\\\\\\\\\\", end='', file=f)\r\n\r\ndef _makefile3(ime):\r\n    with open(ime, \"w\") as f:\r\n        print(\"ni komentarja \", end='', file=f)\r\n        print(\"A ta tudi? \\\\% ne ne, \\\\\\\\%Ta pa \", end='', file=f)\r\n        print(\"Mucno s temi \\\\ \\\\\\\\\\\\% ne ne, \\\\\\\\\\\\\\\\%ze spet\", file=f)\r\n\r\ndef _makefile4(ime):\r\n    with open(ime, \"w\") as f:\r\n        print(\"ni komentarja \", end='', file=f)\r\n        print(\"A ta tudi? \\\\% ne ne, \\\\\\\\\", end='', file=f)\r\n        print(\"Mucno s temi \\\\ \\\\\\\\\\\\% ne ne, \\\\\\\\\\\\\\\\\", end='', file=f)\r\n        \r\ndef _istedatoteke(ena,dva):\r\n    with open(ena) as f1, open(dva) as f2:\r\n        return f1.read().strip() == f2.read().strip()\r\n    \r\ndef _removefiles(*ime):\r\n    import os\r\n    for i in ime:\r\n        try:\r\n            os.remove(i)\r\n        except:\r\n            pass"
    }
  }, 
  {
    "pk": 19, 
    "model": "problem.problem", 
    "fields": {
      "description": "# Drugi kolokvij, matematika, \u010detrtek", 
      "title": "2. kolokvij (mat, \u010det)", 
      "timestamp": "2011-09-29 14:12:58", 
      "author": 1, 
      "problem_set": 1, 
      "preamble": "def izpis(f,*args):\r\n    import io, sys\r\n    old_stdout = sys.stdout\r\n    new_stdout = io.StringIO()\r\n    sys.stdout = new_stdout\r\n    f(*args)\r\n    sys.stdout = old_stdout\r\n    return new_stdout.getvalue()\r\n\r\ndef _makefile(ime):\r\n    with open(ime, \"w\") as f:\r\n        print('Sami \"nizi\" in \"nenizi\"', file=f)\r\n        print('Vrstica brez nizov', file=f)\r\n        print('\"celotna vrstica en sam niz\"', file=f)\r\n        print('\"niz na zacetku\" in \"na koncu\"', file=f)\r\n\r\ndef _makefile1(ime):\r\n    with open(ime, \"w\") as f:\r\n        print('Sami \"nizi\" in \\\\\"nenizi\\\\\", pa \"do\\\\lgi', file=f)\r\n        print('Vrstica brez nizov', file=f)\r\n        print('en sam niz\\\\\" nizi. \\\\Pa en \"kratek\\\\\"', file=f)\r\n        print('spet \\\\\"niz na zacetku', file=f)\r\n        print('in \"na koncu\"spet\\\\\"', file=f)\r\n        print('in \"niz\"\"do niza\" pa \\\\\"\"kratek\"\\\\\"', file=f)\r\n\r\ndef _makefile2(ime):\r\n    with open(ime, \"w\") as f:\r\n        print('nizi\\nnenizi\\\\\\ndo\\\\lgi', file=f)\r\n        print('Vrstica brez nizov', file=f)\r\n        print('en sam niz\\\\\\nkratek\\\\', file=f)\r\n        print('niz na zacetku', file=f)\r\n        print('in \\nspet\\\\', file=f)\r\n        print('niz\\ndo niza\\n\\\\', file=f)\r\n        \r\ndef _makefile3(ime):\r\n    with open(ime, \"w\") as f:\r\n        print('nizi', file=f)\r\n        print('do\\lgi', file=f)\r\n        print('Vrstica brez nizov', file=f)\r\n        print('en sam niz\\\\\" nizi. \\\\Pa en ', file=f)\r\n        print('na koncu\\nniz\\ndo niza\\nkratek', file=f)\r\n\r\ndef _makefile4(ime):\r\n    with open(ime, \"w\") as f:\r\n        print('nizi', file=f)\r\n        print('do\\lgi', file=f)\r\n        print('Vrstica brez nizov', file=f)\r\n        print('en sam niz\\\\\" nizi. \\\\Pa en ', file=f)\r\n        print('na koncu\\nniz\"do niza\\nkratek', file=f)\r\n        \r\ndef _istedatoteke(ena,dva,original=None):\r\n    with open(ena) as f1, open(dva) as f2:\r\n        n1=f1.read().strip()\r\n        n2=f2.read().strip()\r\n        if n1 != n2:\r\n            if original != None:\r\n                print(\"Vhodna datoteka:\\n\"+'-'*50)\r\n                with open(original) as f3:\r\n                    print(f3.read())\r\n                print('-'*50)\r\n            print(\"Rezultat tvoje funkcije:\")\r\n            print(n1)\r\n            print(\"=\"*50+\"\\nPravilno:\")\r\n            print(n2)\r\n            return False\r\n        return True\r\n\r\ndef _jeblizu(a, b, eps=.1):\r\n    if b == 0:\r\n        return abs(a) < eps\r\n    else:\r\n        return abs(1-a/b) < eps\r\n    \r\ndef _removefiles(*ime):\r\n    import os\r\n    for i in ime:\r\n        try:\r\n            os.remove(i)\r\n        except:\r\n            pass\r\n\r\nfrom random import randint"
    }
  }, 
  {
    "pk": 17, 
    "model": "problem.problem", 
    "fields": {
      "description": "# Drugi kolokvij, pedagogi, sreda od 13h-15h", 
      "title": "2. kolokvij (ped, sre 13-15)", 
      "timestamp": "2011-09-29 14:12:58", 
      "author": 1, 
      "problem_set": 1, 
      "preamble": "_slovar = {'\u010c': 'K', 'A': 'O', 'C': 'Z', 'B': 'M', 'E': 'V', 'D': 'C', 'G': 'P', 'F': 'E', 'I': 'B', 'H': 'F', 'K': 'I', 'J': 'A', 'M': 'U', 'L': 'H', 'O': 'R', 'N': '\u0160', 'P': 'J', 'S': 'T', 'R': 'L', 'U': 'G', 'T': '\u010c', 'V': 'N', 'Z': '\u017d', '\u0160': 'S', '\u017d': 'D'}\r\n_neslovar = {'\u010c': 'A', 'A': 'O', 'C': 'Z', 'B': 'N', 'E': 'V', 'D': 'C', 'G': 'P', 'F': 'E', 'I': 'B', 'H': 'F', 'K': 'I', 'J': 'A', 'M': 'U', 'L': 'H', 'O': 'R', 'N': '\u0160', 'P': 'J', 'S': 'T', 'R': 'L', 'U': 'G', 'T': '\u010c', 'V': 'N', 'Z': '\u017d', '\u0160': 'S', '\u017d': 'D'}\r\n_neslovar2 = {'X': 'K', 'A': 'O', 'C': 'Z', 'B': 'M', 'E': 'V', 'D': 'C', 'G': 'P', 'F': 'E', 'I': 'B', 'H': 'F', 'K': 'I', 'J': 'A', 'M': 'U', 'L': 'H', 'O': 'R', 'N': 'W', 'P': 'J', 'S': 'T', 'R': 'L', 'U': 'G', 'T': 'X', 'V': 'N', 'Z': 'Y', 'W': 'S', 'Y': 'D'}\r\n\r\n\r\ndef _preveriinverz(a, b):\r\n    try:\r\n        for x in a:\r\n            if b[a[x]] != x:\r\n                return False\r\n        return True\r\n    except:\r\n        return False\r\n\r\ndef _makefile(ime):\r\n    with open(ime, \"w\") as f:\r\n        print(\"Janez Novak,1,3,3,2,1,0,0,2,0,3,2,1\", file=f)\r\n        print(\"Ena A,0,1,3,2,6,2,0,5,6,3,2,1\", file=f)\r\n        print(\"Dober Clovek,3,0,1,2,0,1,5,4,3,7,8,1\", file=f)\r\n\r\ndef _makefile2(ime):\r\n    with open(ime, \"w\") as f:\r\n        print(\"Janez Novak,18\", file=f)\r\n        print(\"Ena A,31\", file=f)\r\n        print(\"Dober Clovek,35\", file=f)\r\n\r\n\r\ndef _makefile3(ime):\r\n    with open(ime, \"w\") as f:\r\n        print(\"Ena A,0,1,3,2,6,2,0,5,6,3,2,1,31\", file=f)\r\n        print(\"Dober Clovek,3,0,1,2,0,1,5,4,3,7,8,1,35\", file=f)\r\n        print(\"Janez Novak,1,3,3,2,1,0,0,2,0,3,2,1,18\", file=f)\r\n        print(\"Povprecen Student,1.33,1.33,2.33,2.0,2.33,1.0,1.67,3.67,3.0,4.33,4.0,1.0,28.0\", file=f)\r\n\r\ndef _istedatoteke(ena,dva):\r\n    with open(ena) as f1, open(dva) as f2:\r\n        return f1.read().strip() == f2.read().strip()\r\n    \r\ndef _removefiles(*ime):\r\n    import os\r\n    for i in ime: os.remove(i)"
    }
  }, 
  {
    "pk": 18, 
    "model": "problem.problem", 
    "fields": {
      "description": "# Drugi kolokvij, pedagogi, sreda od 15h-17h", 
      "title": "2. kolokvij (ped, sre 15-17)", 
      "timestamp": "2011-09-29 14:12:58", 
      "author": 1, 
      "problem_set": 1, 
      "preamble": "def _makefile(ime):\r\n    with open(ime, \"w\") as f:\r\n        print(\"Luka,Jaka\", file=f)\r\n        print(\"Luka\", file=f)\r\n        print(\"Miha\", file=f)\r\n        print(\"Miha\", file=f)\r\n        print(\"Miha\", file=f)\r\n\r\ndef _makefile2(ime):\r\n    with open(ime, \"w\") as f:\r\n        print(\"Miha 3\", file=f)\r\n        print(\"Luka 2\", file=f)\r\n        print(\"Jaka 1\", file=f)\r\n\r\n\r\ndef _istevseenodatoteke(ena,dva):\r\n    with open(ena) as f1, open(dva) as f2:\r\n        vrste1 = [l.strip() for l in f1.readlines()]\r\n        vrste1.sort()\r\n        vrste2 = [l.strip() for l in f2.readlines()]\r\n        vrste2.sort()\r\n        if vrste1 == vrste2:\r\n            return True\r\n        else:\r\n            print(\"Izhodna datoteka vsebuje naslednje vrstice: \")\r\n            print(vrste1)\r\n            print(\"Morala pa bi vsebovati naslednje vrstice: \")\r\n            print(vrste2)\r\n\r\ndef _istedatoteke(ena,dva):\r\n    with open(ena) as f1, open(dva) as f2:\r\n        vrste1 = f1.read().strip()\r\n        vrste2 = f2.read().strip()\r\n        if vrste1 == vrste2:\r\n            return True\r\n        else:\r\n            print(\"Izhodna datoteka vsebuje naslednje vrstice: \")\r\n            print(vrste1)\r\n            print(\"Morala pa bi vsebovati naslednje vrstice: \")\r\n            print(vrste2)\r\n    \r\ndef _removefiles(*ime):\r\n    import os\r\n    for i in ime: os.remove(i)\r\n"
    }
  }, 
  {
    "pk": 13, 
    "model": "problem.problem", 
    "fields": {
      "description": "", 
      "title": "Datoteke", 
      "timestamp": "2011-09-29 14:12:58", 
      "author": 1, 
      "problem_set": 1, 
      "preamble": "def rnds(S):\r\n    if abs(sum(S) -1) > 0.0001:\r\n        raise ValueError('Vsota verjetnosti ni 1!!!')\r\n    y=random.random()\r\n    F=0\r\n    for i in range(len(S)+1):\r\n        if F >= y:\r\n            break\r\n        F+=S[i]\r\n    return i-1 if i > 0 else 0\r\n\r\ndef rndd(S):\r\n    if abs(sum(S.values()) -1) > 0.0001:\r\n        raise ValueError('Vsota verjetnosti ni 1!!!')\r\n    y=random.random()\r\n    F=0\r\n    for x in S:\r\n        F+=S[x]\r\n        if F >= y:\r\n            break\r\n    return x"
    }
  }, 
  {
    "pk": 9, 
    "model": "problem.problem", 
    "fields": {
      "description": "", 
      "title": "Format", 
      "timestamp": "2011-09-29 14:12:58", 
      "author": 1, 
      "problem_set": 1, 
      "preamble": "import inspect\r\nfrom math import sin\r\nimport random\r\n\r\ndef izpis(f,a,b,k):\r\n    import io, sys\r\n    old_stdout = sys.stdout\r\n    new_stdout = io.StringIO()\r\n    sys.stdout = new_stdout\r\n    f(a,b,k)\r\n    sys.stdout = old_stdout\r\n    return new_stdout.getvalue()\r\n\r\ndef izpis2(f,f2,a,b,k):\r\n    import io, sys\r\n    old_stdout = sys.stdout\r\n    new_stdout = io.StringIO()\r\n    sys.stdout = new_stdout\r\n    f(f2,a,b,k)\r\n    sys.stdout = old_stdout\r\n    return new_stdout.getvalue()\r\n"
    }
  }, 
  {
    "pk": 4, 
    "model": "problem.problem", 
    "fields": {
      "description": "# Na dana\u0161njih vajah bomo pilili znanje metod.\r\n", 
      "title": "Funkcije", 
      "timestamp": "2011-09-29 14:41:12", 
      "author": 1, 
      "problem_set": 2, 
      "preamble": "import inspect\r\nfrom math import *\r\nimport random\r\n\r\ndef izpis(f,n,a,b,c):\r\n    import io, sys\r\n    old_stdout = sys.stdout\r\n    new_stdout = io.StringIO()\r\n    sys.stdout = new_stdout\r\n    f(n,a,b,c)\r\n    sys.stdout = old_stdout\r\n    return new_stdout.getvalue()"
    }
  }, 
  {
    "pk": 11, 
    "model": "problem.problem", 
    "fields": {
      "description": "", 
      "title": "Nabori, mno\u017eice, slovarji", 
      "timestamp": "2011-09-29 14:12:58", 
      "author": 1, 
      "problem_set": 1, 
      "preamble": "import inspect\r\nimport random"
    }
  }, 
  {
    "pk": 7, 
    "model": "problem.problem", 
    "fields": {
      "description": "", 
      "title": "Nizi", 
      "timestamp": "2011-09-29 14:12:58", 
      "author": 1, 
      "problem_set": 1, 
      "preamble": "import inspect\r\nimport math\r\nimport random\r\n\r\n\r\ndef check_function(name, argsnum):\r\n  \"\"\" Preveri, \u010de je metoda name definirana in sprejme argsnum argumentov.\"\"\"  \r\n  if name not in globals():\r\n    _warn(\"Funkcija {0} ni definirana.\".format(name))\r\n    return False\r\n  func = eval(name)\r\n  if argsnum != -1 and len(inspect.getargspec(func)[0]) != argsnum:\r\n    _warn(\"Funkcija {2} mora namesto {0} sprejeti {1} argumentov.\".format(len(inspect.getargspec(func)[0]), argsnum, name))\r\n    return False\r\n  return True\r\n"
    }
  }, 
  {
    "pk": 24, 
    "model": "problem.problem", 
    "fields": {
      "description": "", 
      "title": "Nizi", 
      "timestamp": "2011-09-29 21:03:28", 
      "author": 1, 
      "problem_set": 3, 
      "preamble": ""
    }
  }, 
  {
    "pk": 3, 
    "model": "problem.problem", 
    "fields": {
      "description": "", 
      "title": "Operacije", 
      "timestamp": "2011-09-29 14:41:12", 
      "author": 1, 
      "problem_set": 2, 
      "preamble": "import random\r\nimport math\r\n\r\ndef izvedi(source, d):\r\n    import io, sys\r\n    old_stdout = sys.stdout\r\n    new_stdout = io.StringIO()\r\n    sys.stdout = new_stdout\r\n    exec(source, d)\r\n    sys.stdout = old_stdout\r\n    return (d, new_stdout.getvalue())\r\n\r\n"
    }
  }, 
  {
    "pk": 5, 
    "model": "problem.problem", 
    "fields": {
      "description": "# S pomo\u010djo spodnjih nalog se bomo nau\u010dili koncept pogojnega stavka v pythonu.", 
      "title": "Pogojni stavek", 
      "timestamp": "2011-09-29 14:41:12", 
      "author": 1, 
      "problem_set": 2, 
      "preamble": "import inspect\r\nimport math\r\nimport random\r\n\r\n\r\ndef check_function(name, argsnum):\r\n  \"\"\" Preveri, \u010de je metoda name definirana in sprejme argsnum argumentov.\"\"\"  \r\n  if name not in globals():\r\n    _warn(\"Funkcija {0} ni definirana.\".format(name))\r\n    return False\r\n  func = eval(name)\r\n  if argsnum != -1 and len(inspect.getargspec(func)[0]) != argsnum:\r\n    _warn(\"Funkcija {2} mora namesto {0} sprejeti {1} argumentov.\".format(len(inspect.getargspec(func)[0]), argsnum, name))\r\n    return False\r\n  return True\r\n"
    }
  }, 
  {
    "pk": 23, 
    "model": "problem.problem", 
    "fields": {
      "description": "", 
      "title": "Razdalje med to\u010dkami", 
      "timestamp": "2011-09-29 21:31:18", 
      "author": 1, 
      "problem_set": 3, 
      "preamble": ""
    }
  }, 
  {
    "pk": 1, 
    "model": "problem.problem", 
    "fields": {
      "description": "# Na primeru risanja smre\u010dic bomo spoznali:\r\n#\r\n# 1. ukaz print, ki izpi\u0161e niz na zaslon,\r\n# 2. osnovne operacije na nizih,\r\n# 3. prireditvene stavke.", 
      "title": "Risanje smre\u010dic", 
      "timestamp": "2011-09-29 14:12:58", 
      "author": 1, 
      "problem_set": 1, 
      "preamble": "def izpis(source):\r\n    import io, sys\r\n    old_stdout = sys.stdout\r\n    new_stdout = io.StringIO()\r\n    sys.stdout = new_stdout\r\n    exec(source)\r\n    sys.stdout = old_stdout\r\n    return new_stdout.getvalue()\r\n\r\ndef preveriSmrecico(smrecica, levi, desni, dovoljeni):\r\n    vrstice = smrecica.splitlines()\r\n    if len(vrstice) != 8:\r\n        _warn(\"Smre\u010dica nima osmih vrstic.\")\r\n    for i in range(1, min(8, len(vrstice))):\r\n        vrstica = vrstice[i]\r\n        if not vrstica.startswith((levi[i] - 1) * \" \"):\r\n            _warn(\"{0}. vrstica se ne za\u010dne na {1}. znaku.\".format(i + 1, levi[i]))\r\n        if len(vrstica.rstrip()) != desni[i]:\r\n            _warn(\"{0}. vrstica se ne kon\u010da na {1}. znaku.\".format(i + 1, desni[i]))\r\n        znaki = vrstica.replace(\" \", \"\")\r\n        if len(znaki) != i + 1:\r\n            _warn(\"{0}. vrstica ni sestavljena iz {0} znakov\".format(i + 1))\r\n        if any(znak not in dovoljeni for znak in znaki):\r\n            _warn(\"{0}. vrstica vsebuje nedovoljene znake.\".format(i + 1))\r\n    if len([znak for znak in dovoljeni if znak in smrecica]) > 1:\r\n        _warn(\"Smre\u010dica je sestavljena iz razli\u010dnih dovoljenih znakov.\")\r\n\r\ndovoljeni = \"*.#$@oO+=\"\r\nznak = \"*\""
    }
  }, 
  {
    "pk": 8, 
    "model": "problem.problem", 
    "fields": {
      "description": "", 
      "title": "Seznami", 
      "timestamp": "2011-09-29 14:12:58", 
      "author": 1, 
      "problem_set": 1, 
      "preamble": ""
    }
  }, 
  {
    "pk": 25, 
    "model": "problem.problem", 
    "fields": {
      "description": "", 
      "title": "Seznami", 
      "timestamp": "2011-09-29 21:03:28", 
      "author": 1, 
      "problem_set": 3, 
      "preamble": ""
    }
  }, 
  {
    "pk": 26, 
    "model": "problem.problem", 
    "fields": {
      "description": "", 
      "title": "Slovarji", 
      "timestamp": "2011-09-29 21:03:28", 
      "author": 1, 
      "problem_set": 3, 
      "preamble": ""
    }
  }, 
  {
    "pk": 12, 
    "model": "problem.problem", 
    "fields": {
      "description": "", 
      "title": "Standardna knji\u017enica", 
      "timestamp": "2011-09-29 14:12:58", 
      "author": 1, 
      "problem_set": 1, 
      "preamble": "import random\r\nfrom time import clock\r\nimport inspect\r\n\r\nkarte=['I','II','III','IV','V','VI','VII','VIII','IX','X','XI','XII','XIII','XIV','XV','XVI','XVII','XVIII','XIX','XX','XXI','\u0161kis','H1','H2','H3','H4','HJ','HC','HQ','HK','D1','D2','D3','D4','DJ','DC','DQ','DK','C7','C8','C9','C10','CJ','CC','CQ','CK','S7','S8','S9','S10','SJ','SC','SQ','SK']\r\n\r\ndef unija(s):\r\n    x=set()\r\n    for i in s:\r\n        x=x.union(i)\r\n    return x\r\n\r\ndef jeenakomerna(f,a,b):\r\n    '''Preveri, da f vraca enakomerno porazdeljene vrednosti na intervalu [a,b)'''\r\n    s=[f(a,b) for i in range(1000)]\r\n    M=sum(s)/1000\r\n    V=sum([(x-M)**2/1000 for x in s])\r\n    # Povprecje enakomerno porazdeljene spr. je (a+b)/2, varianca je (b-a)^2/12\r\n    if abs((M-(a+b)/2))>0.1 or abs(V-(b-a)**2/12)>0.2:\r\n        return False\r\n    else:\r\n        return True\r\n\r\ndef nakljucna(f,*args):\r\n    random.seed(1)\r\n    return [f(*args) for i in range(10)]\r\n\r\ndef izpis(f,*args):\r\n    import io, sys\r\n    old_stdout = sys.stdout\r\n    new_stdout = io.StringIO()\r\n    random.seed(1)\r\n    sys.stdout = new_stdout\r\n    f(*args)\r\n    sys.stdout = old_stdout\r\n    return new_stdout.getvalue()"
    }
  }, 
  {
    "pk": 15, 
    "model": "problem.problem", 
    "fields": {
      "description": "# Drugi kolokvij", 
      "title": "Testni kolokvij", 
      "timestamp": "2011-09-29 14:12:58", 
      "author": 1, 
      "problem_set": 1, 
      "preamble": ""
    }
  }, 
  {
    "pk": 6, 
    "model": "problem.problem", 
    "fields": {
      "description": "", 
      "title": "Zanke", 
      "timestamp": "2011-09-29 14:12:58", 
      "author": 1, 
      "problem_set": 1, 
      "preamble": "import inspect\r\nimport math\r\nimport random\r\n\r\n\r\ndef check_function(name, argsnum):\r\n  \"\"\" Preveri, \u010de je metoda name definirana in sprejme argsnum argumentov.\"\"\"  \r\n  if name not in globals():\r\n    _warn(\"Funkcija {0} ni definirana.\".format(name))\r\n    return False\r\n  func = eval(name)\r\n  if argsnum != -1 and len(inspect.getargspec(func)[0]) != argsnum:\r\n    _warn(\"Funkcija {2} mora namesto {0} sprejeti {1} argumentov.\".format(len(inspect.getargspec(func)[0]), argsnum, name))\r\n    return False\r\n  return True\r\n\r\ndef _equal(example, expected):\r\n    global _warn\r\n    answer = eval(example)\r\n    if round(answer, 6) != round(expected, 6):\r\n        _warn('Ukaz {0} vrne {1!r} namesto {2!r}.'.format(example, answer, expected))\r\n"
    }
  }, 
  {
    "pk": 10, 
    "model": "problem.problem", 
    "fields": {
      "description": "", 
      "title": "\u0160e o zankah; izpeljani seznami", 
      "timestamp": "2011-09-29 14:12:58", 
      "author": 1, 
      "problem_set": 1, 
      "preamble": ""
    }
  }
]